
Controle_Cabo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08040000  08040000  00004014  2**0
                  CONTENTS
  1 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000258c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  08002738  08002738  00003738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08002748  08002748  00004014  2**0
                  CONTENTS
  5 .ARM          00000008  08002748  08002748  00003748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08002750  08002750  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08002750  08002750  00003750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08002754  08002754  00003754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000014  20000000  08002758  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  00004014  2**0
                  CONTENTS
 11 .bss          00000074  20000014  20000014  00004014  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000088  20000088  00004014  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000af61  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000282e  00000000  00000000  0000efa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000730  00000000  00000000  000117d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000053d  00000000  00000000  00011f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000265e4  00000000  00000000  00012445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fa60  00000000  00000000  00038a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e012a  00000000  00000000  00048489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001285b3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00000fcc  00000000  00000000  001285f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 00001f77  00000000  00000000  001295c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005c  00000000  00000000  0012b53b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002720 	.word	0x08002720

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	08002720 	.word	0x08002720

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <BSP_Error_Handler>:
 */

#include "bsp.h"

void BSP_Error_Handler(void)
{
 80004dc:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004de:	b672      	cpsid	i
	__disable_irq();

	while (1)
	{
		BSP_GPIO_ResetPin(LED_ERROR_Port, LED_ERROR_Pin);
 80004e0:	210e      	movs	r1, #14
 80004e2:	4802      	ldr	r0, [pc, #8]	@ (80004ec <BSP_Error_Handler+0x10>)
 80004e4:	f000 fe80 	bl	80011e8 <BSP_GPIO_ResetPin>
	while (1)
 80004e8:	e7fa      	b.n	80004e0 <BSP_Error_Handler+0x4>
 80004ea:	bf00      	nop
 80004ec:	40021400 	.word	0x40021400

080004f0 <BSP_Init>:
	}
}

void BSP_Init(void)
{
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	b083      	sub	sp, #12
	NVIC_EnableIRQ(SysTick_IRQn);
	HAL_NVIC_SetPriority(SysTick_IRQn, -1, -1);
 80004f4:	f04f 32ff 	mov.w	r2, #4294967295
 80004f8:	4611      	mov	r1, r2
 80004fa:	4610      	mov	r0, r2
 80004fc:	f001 fc66 	bl	8001dcc <HAL_NVIC_SetPriority>


	GPIO_Config pinConfig = {0};
 8000500:	2500      	movs	r5, #0
 8000502:	f8ad 5004 	strh.w	r5, [sp, #4]
 8000506:	f88d 5006 	strb.w	r5, [sp, #6]
	pinConfig.modo = SAIDA_OD;
 800050a:	2303      	movs	r3, #3
 800050c:	f88d 3004 	strb.w	r3, [sp, #4]
	pinConfig.velocidade = BAIXO;

	/* Configura os LEDs */
	BSP_GPIO_Init(LED0_Port, LED0_Pin, &pinConfig);
 8000510:	4c24      	ldr	r4, [pc, #144]	@ (80005a4 <BSP_Init+0xb4>)
 8000512:	aa01      	add	r2, sp, #4
 8000514:	210d      	movs	r1, #13
 8000516:	4620      	mov	r0, r4
 8000518:	f000 fc9c 	bl	8000e54 <BSP_GPIO_Init>
	BSP_GPIO_SetPin(LED0_Port, LED0_Pin);
 800051c:	210d      	movs	r1, #13
 800051e:	4620      	mov	r0, r4
 8000520:	f000 fe5c 	bl	80011dc <BSP_GPIO_SetPin>
	BSP_GPIO_Init(LED1_Port, LED1_Pin, &pinConfig);
 8000524:	aa01      	add	r2, sp, #4
 8000526:	210e      	movs	r1, #14
 8000528:	4620      	mov	r0, r4
 800052a:	f000 fc93 	bl	8000e54 <BSP_GPIO_Init>
	BSP_GPIO_SetPin(LED1_Port, LED1_Pin);
 800052e:	210e      	movs	r1, #14
 8000530:	4620      	mov	r0, r4
 8000532:	f000 fe53 	bl	80011dc <BSP_GPIO_SetPin>
	BSP_GPIO_Init(LED2_Port, LED2_Pin, &pinConfig);
 8000536:	aa01      	add	r2, sp, #4
 8000538:	210f      	movs	r1, #15
 800053a:	4620      	mov	r0, r4
 800053c:	f000 fc8a 	bl	8000e54 <BSP_GPIO_Init>
	BSP_GPIO_SetPin(LED2_Port, LED2_Pin);
 8000540:	210f      	movs	r1, #15
 8000542:	4620      	mov	r0, r4
 8000544:	f000 fe4a 	bl	80011dc <BSP_GPIO_SetPin>
	BSP_GPIO_Init(LED3_Port, LED3_Pin, &pinConfig);
 8000548:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800054c:	aa01      	add	r2, sp, #4
 800054e:	4629      	mov	r1, r5
 8000550:	4620      	mov	r0, r4
 8000552:	f000 fc7f 	bl	8000e54 <BSP_GPIO_Init>
	BSP_GPIO_SetPin(LED3_Port, LED3_Pin);
 8000556:	4629      	mov	r1, r5
 8000558:	4620      	mov	r0, r4
 800055a:	f000 fe3f 	bl	80011dc <BSP_GPIO_SetPin>
	BSP_GPIO_Init(LED4_Port, LED4_Pin, &pinConfig);
 800055e:	aa01      	add	r2, sp, #4
 8000560:	2101      	movs	r1, #1
 8000562:	4620      	mov	r0, r4
 8000564:	f000 fc76 	bl	8000e54 <BSP_GPIO_Init>
	BSP_GPIO_SetPin(LED4_Port, LED4_Pin);
 8000568:	2101      	movs	r1, #1
 800056a:	4620      	mov	r0, r4
 800056c:	f000 fe36 	bl	80011dc <BSP_GPIO_SetPin>

	/* Configura os pinos de habilitação das saídas digitais */
	pinConfig.modo = SAIDA_PP;
 8000570:	2304      	movs	r3, #4
 8000572:	f88d 3004 	strb.w	r3, [sp, #4]
	BSP_GPIO_Init(ENAOUT03_Port, ENAOUT03_Pin, &pinConfig);
 8000576:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 800057a:	eb0d 0203 	add.w	r2, sp, r3
 800057e:	210a      	movs	r1, #10
 8000580:	4620      	mov	r0, r4
 8000582:	f000 fc67 	bl	8000e54 <BSP_GPIO_Init>
	BSP_GPIO_ResetPin(ENAOUT03_Port, ENAOUT03_Pin);
 8000586:	210a      	movs	r1, #10
 8000588:	4620      	mov	r0, r4
 800058a:	f000 fe2d 	bl	80011e8 <BSP_GPIO_ResetPin>
	BSP_GPIO_Init(ENAOUT04_Port, ENAOUT04_Pin, &pinConfig);
 800058e:	aa01      	add	r2, sp, #4
 8000590:	210c      	movs	r1, #12
 8000592:	4620      	mov	r0, r4
 8000594:	f000 fc5e 	bl	8000e54 <BSP_GPIO_Init>
	BSP_GPIO_ResetPin(ENAOUT04_Port, ENAOUT04_Pin);
 8000598:	210c      	movs	r1, #12
 800059a:	4620      	mov	r0, r4
 800059c:	f000 fe24 	bl	80011e8 <BSP_GPIO_ResetPin>
}
 80005a0:	b003      	add	sp, #12
 80005a2:	bd30      	pop	{r4, r5, pc}
 80005a4:	40021400 	.word	0x40021400

080005a8 <BSP_ADC_Init>:
static void (*interruptions[3])(__I uint16_t) = {NULL};
#endif


void BSP_ADC_Init(const ADC_Config *adcConfig)
{
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	4604      	mov	r4, r0
	if (adcConfig->ADCx != ADC1 && adcConfig->ADCx != ADC2 && adcConfig->ADCx != ADC3)
 80005ae:	6803      	ldr	r3, [r0, #0]
 80005b0:	4a90      	ldr	r2, [pc, #576]	@ (80007f4 <BSP_ADC_Init+0x24c>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d009      	beq.n	80005ca <BSP_ADC_Init+0x22>
 80005b6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d005      	beq.n	80005ca <BSP_ADC_Init+0x22>
 80005be:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d001      	beq.n	80005ca <BSP_ADC_Init+0x22>
	{
		BSP_Error_Handler();
 80005c6:	f7ff ff89 	bl	80004dc <BSP_Error_Handler>
	}

	ADCx_CLK_ENABLE(adcConfig->ADCx);
 80005ca:	6823      	ldr	r3, [r4, #0]
 80005cc:	4a89      	ldr	r2, [pc, #548]	@ (80007f4 <BSP_ADC_Init+0x24c>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d068      	beq.n	80006a4 <BSP_ADC_Init+0xfc>
 80005d2:	4a89      	ldr	r2, [pc, #548]	@ (80007f8 <BSP_ADC_Init+0x250>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d072      	beq.n	80006be <BSP_ADC_Init+0x116>
 80005d8:	4a88      	ldr	r2, [pc, #544]	@ (80007fc <BSP_ADC_Init+0x254>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d07c      	beq.n	80006d8 <BSP_ADC_Init+0x130>

	/* Configura a Resolução */
	if (adcConfig->resolucao > Bits_6 || adcConfig->resolucao < Bits_12)
 80005de:	7923      	ldrb	r3, [r4, #4]
 80005e0:	2b03      	cmp	r3, #3
 80005e2:	f200 8086 	bhi.w	80006f2 <BSP_ADC_Init+0x14a>
	{
		BSP_Error_Handler();
	}

	adcConfig->ADCx->CR1 &= ~(3U << ADC_CR1_RES_Pos);
 80005e6:	6822      	ldr	r2, [r4, #0]
 80005e8:	6853      	ldr	r3, [r2, #4]
 80005ea:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80005ee:	6053      	str	r3, [r2, #4]
	adcConfig->ADCx->CR1 |= ((uint8_t) adcConfig->resolucao << ADC_CR1_RES_Pos);
 80005f0:	6822      	ldr	r2, [r4, #0]
 80005f2:	6853      	ldr	r3, [r2, #4]
 80005f4:	7921      	ldrb	r1, [r4, #4]
 80005f6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80005fa:	6053      	str	r3, [r2, #4]


	/* Configura a Interrupção */
	if (adcConfig->interrupcaoEnable)
 80005fc:	7b23      	ldrb	r3, [r4, #12]
 80005fe:	b1ab      	cbz	r3, 800062c <BSP_ADC_Init+0x84>
	{
		adcConfig->ADCx->CR1 |= ADC_CR1_EOCIE;
 8000600:	6822      	ldr	r2, [r4, #0]
 8000602:	6853      	ldr	r3, [r2, #4]
 8000604:	f043 0320 	orr.w	r3, r3, #32
 8000608:	6053      	str	r3, [r2, #4]
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060a:	4b7d      	ldr	r3, [pc, #500]	@ (8000800 <BSP_ADC_Init+0x258>)
 800060c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000610:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(ADC_IRQn);

#if defined(ADC1_Interrupt) || defined(ADC2_Interrupt) || defined(ADC3_Interrupt)
		if (adcConfig->ADCx == ADC1)
 8000612:	6823      	ldr	r3, [r4, #0]
 8000614:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8000618:	f5a2 3238 	sub.w	r2, r2, #188416	@ 0x2e000
 800061c:	4293      	cmp	r3, r2
 800061e:	d06b      	beq.n	80006f8 <BSP_ADC_Init+0x150>
		{
			interruptions[0] = adcConfig->FuncaoInterrupcao;
		}
		else if (adcConfig->ADCx == ADC2)
 8000620:	4a75      	ldr	r2, [pc, #468]	@ (80007f8 <BSP_ADC_Init+0x250>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d06c      	beq.n	8000700 <BSP_ADC_Init+0x158>
		{
			interruptions[1] = adcConfig->FuncaoInterrupcao;
		}
		else
		{
			interruptions[2] = adcConfig->FuncaoInterrupcao;
 8000626:	6922      	ldr	r2, [r4, #16]
 8000628:	4b76      	ldr	r3, [pc, #472]	@ (8000804 <BSP_ADC_Init+0x25c>)
 800062a:	609a      	str	r2, [r3, #8]
		}
#endif
	}

	/* Configura a se há trigger externo */
	adcConfig->ADCx->CR2 &= ~(3U << ADC_CR2_EXTEN_Pos);
 800062c:	6822      	ldr	r2, [r4, #0]
 800062e:	6893      	ldr	r3, [r2, #8]
 8000630:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000634:	6093      	str	r3, [r2, #8]
	adcConfig->ADCx->CR2 |= ((uint8_t) adcConfig->triggerExterno << ADC_CR2_EXTEN_Pos);
 8000636:	6822      	ldr	r2, [r4, #0]
 8000638:	6893      	ldr	r3, [r2, #8]
 800063a:	7aa1      	ldrb	r1, [r4, #10]
 800063c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8000640:	6093      	str	r3, [r2, #8]

	/* Configura a fonte do triggerExterno */
	if (adcConfig->fonteTrigger == 0xD || adcConfig->fonteTrigger == 0xE)
 8000642:	7ae3      	ldrb	r3, [r4, #11]
 8000644:	3b0d      	subs	r3, #13
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2b01      	cmp	r3, #1
 800064a:	d95d      	bls.n	8000708 <BSP_ADC_Init+0x160>
	{
		BSP_Error_Handler();
	}

	adcConfig->ADCx->CR2 &= ~(0xF << ADC_CR2_EXTSEL_Pos);
 800064c:	6822      	ldr	r2, [r4, #0]
 800064e:	6893      	ldr	r3, [r2, #8]
 8000650:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000654:	6093      	str	r3, [r2, #8]
	adcConfig->ADCx->CR2 |= ((uint8_t) adcConfig->fonteTrigger << ADC_CR2_EXTSEL_Pos);
 8000656:	6822      	ldr	r2, [r4, #0]
 8000658:	6893      	ldr	r3, [r2, #8]
 800065a:	7ae1      	ldrb	r1, [r4, #11]
 800065c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000660:	6093      	str	r3, [r2, #8]

	/* Configura o alinhamento */
	adcConfig->ADCx->CR2 &= ~(1 << ADC_CR2_ALIGN_Pos);
 8000662:	6822      	ldr	r2, [r4, #0]
 8000664:	6893      	ldr	r3, [r2, #8]
 8000666:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800066a:	6093      	str	r3, [r2, #8]
	adcConfig->ADCx->CR2 |= ((uint8_t) adcConfig->alinhamento << ADC_CR2_ALIGN_Pos);
 800066c:	6822      	ldr	r2, [r4, #0]
 800066e:	6893      	ldr	r3, [r2, #8]
 8000670:	7961      	ldrb	r1, [r4, #5]
 8000672:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
 8000676:	6093      	str	r3, [r2, #8]

	/* Configura o modo */
	switch (adcConfig->modo)
 8000678:	79a3      	ldrb	r3, [r4, #6]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d047      	beq.n	800070e <BSP_ADC_Init+0x166>
 800067e:	2b01      	cmp	r3, #1
 8000680:	d07e      	beq.n	8000780 <BSP_ADC_Init+0x1d8>
			adcConfig->ADCx->CR1 &= ~ADC_CR1_DISCEN;
			adcConfig->ADCx->CR2 |= ADC_CR2_CONT;
			break;

		default: /* Discontinuo */
			adcConfig->ADCx->CR1 &= ~(0x7 << ADC_CR1_DISCNUM_Pos) & ~ADC_CR2_CONT;
 8000682:	6822      	ldr	r2, [r4, #0]
 8000684:	6853      	ldr	r3, [r2, #4]
 8000686:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800068a:	f023 0302 	bic.w	r3, r3, #2
 800068e:	6053      	str	r3, [r2, #4]
			adcConfig->ADCx->CR1 |= ((adcConfig->numCanais -1) << ADC_CR1_DISCNUM_Pos) | ADC_CR1_DISCEN;
 8000690:	6821      	ldr	r1, [r4, #0]
 8000692:	684b      	ldr	r3, [r1, #4]
 8000694:	7d22      	ldrb	r2, [r4, #20]
 8000696:	3a01      	subs	r2, #1
 8000698:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800069c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80006a0:	604b      	str	r3, [r1, #4]
			break;
 80006a2:	e044      	b.n	800072e <BSP_ADC_Init+0x186>
	ADCx_CLK_ENABLE(adcConfig->ADCx);
 80006a4:	2300      	movs	r3, #0
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	4b57      	ldr	r3, [pc, #348]	@ (8000808 <BSP_ADC_Init+0x260>)
 80006aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80006ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80006b0:	645a      	str	r2, [r3, #68]	@ 0x44
 80006b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	9b00      	ldr	r3, [sp, #0]
 80006bc:	e78f      	b.n	80005de <BSP_ADC_Init+0x36>
 80006be:	2300      	movs	r3, #0
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	4b51      	ldr	r3, [pc, #324]	@ (8000808 <BSP_ADC_Init+0x260>)
 80006c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80006c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80006ca:	645a      	str	r2, [r3, #68]	@ 0x44
 80006cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	9b01      	ldr	r3, [sp, #4]
 80006d6:	e782      	b.n	80005de <BSP_ADC_Init+0x36>
 80006d8:	2300      	movs	r3, #0
 80006da:	9302      	str	r3, [sp, #8]
 80006dc:	4b4a      	ldr	r3, [pc, #296]	@ (8000808 <BSP_ADC_Init+0x260>)
 80006de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80006e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80006e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80006e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006ec:	9302      	str	r3, [sp, #8]
 80006ee:	9b02      	ldr	r3, [sp, #8]
 80006f0:	e775      	b.n	80005de <BSP_ADC_Init+0x36>
		BSP_Error_Handler();
 80006f2:	f7ff fef3 	bl	80004dc <BSP_Error_Handler>
 80006f6:	e776      	b.n	80005e6 <BSP_ADC_Init+0x3e>
			interruptions[0] = adcConfig->FuncaoInterrupcao;
 80006f8:	6922      	ldr	r2, [r4, #16]
 80006fa:	4b42      	ldr	r3, [pc, #264]	@ (8000804 <BSP_ADC_Init+0x25c>)
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	e795      	b.n	800062c <BSP_ADC_Init+0x84>
			interruptions[1] = adcConfig->FuncaoInterrupcao;
 8000700:	6922      	ldr	r2, [r4, #16]
 8000702:	4b40      	ldr	r3, [pc, #256]	@ (8000804 <BSP_ADC_Init+0x25c>)
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	e791      	b.n	800062c <BSP_ADC_Init+0x84>
		BSP_Error_Handler();
 8000708:	f7ff fee8 	bl	80004dc <BSP_Error_Handler>
 800070c:	e79e      	b.n	800064c <BSP_ADC_Init+0xa4>
			adcConfig->ADCx->CR1 &= ~(0x7 << ADC_CR1_DISCNUM_Pos) & ~ADC_CR2_CONT;
 800070e:	6822      	ldr	r2, [r4, #0]
 8000710:	6853      	ldr	r3, [r2, #4]
 8000712:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8000716:	f023 0302 	bic.w	r3, r3, #2
 800071a:	6053      	str	r3, [r2, #4]
			adcConfig->ADCx->CR1 |= ((adcConfig->numDisc -1) << ADC_CR1_DISCNUM_Pos) | ADC_CR1_DISCEN;
 800071c:	6821      	ldr	r1, [r4, #0]
 800071e:	684b      	ldr	r3, [r1, #4]
 8000720:	79e2      	ldrb	r2, [r4, #7]
 8000722:	3a01      	subs	r2, #1
 8000724:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8000728:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800072c:	604b      	str	r3, [r1, #4]
	}

	/* Configura o modo Scan */
	if (adcConfig->ScanEnable)
 800072e:	7a23      	ldrb	r3, [r4, #8]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d030      	beq.n	8000796 <BSP_ADC_Init+0x1ee>
	{
		adcConfig->ADCx->CR1 |= ADC_CR1_SCAN;
 8000734:	6822      	ldr	r2, [r4, #0]
 8000736:	6853      	ldr	r3, [r2, #4]
 8000738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800073c:	6053      	str	r3, [r2, #4]
		adcConfig->ADCx->CR2 |= ADC_CR2_EOCS;
 800073e:	6822      	ldr	r2, [r4, #0]
 8000740:	6893      	ldr	r3, [r2, #8]
 8000742:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000746:	6093      	str	r3, [r2, #8]
		adcConfig->ADCx->CR2 &= ~ADC_CR2_EOCS;
	}


	/* Configurações dos canais */
	if (adcConfig->numCanais > 16)
 8000748:	7d23      	ldrb	r3, [r4, #20]
 800074a:	2b10      	cmp	r3, #16
 800074c:	d82e      	bhi.n	80007ac <BSP_ADC_Init+0x204>
	{
		BSP_Error_Handler();
	}

	GPIO_Config pinConfig = {0};
 800074e:	2500      	movs	r5, #0
 8000750:	f8ad 500c 	strh.w	r5, [sp, #12]
 8000754:	f88d 500e 	strb.w	r5, [sp, #14]
	pinConfig.modo = ANALOGICO;
 8000758:	2305      	movs	r3, #5
 800075a:	f88d 300c 	strb.w	r3, [sp, #12]
	pinConfig.velocidade = ALTO;
 800075e:	2302      	movs	r3, #2
 8000760:	f88d 300d 	strb.w	r3, [sp, #13]
	/* Configura o número de canais */
	adcConfig->ADCx->SQR1 &= ~(1111 << ADC_SQR1_L_Pos);
 8000764:	6822      	ldr	r2, [r4, #0]
 8000766:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8000768:	f023 438a 	bic.w	r3, r3, #1157627904	@ 0x45000000
 800076c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8000770:	62d3      	str	r3, [r2, #44]	@ 0x2c
	adcConfig->ADCx->SQR1 |= ((uint8_t) adcConfig->numCanais << ADC_SQR1_L_Pos);
 8000772:	6822      	ldr	r2, [r4, #0]
 8000774:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8000776:	7d21      	ldrb	r1, [r4, #20]
 8000778:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800077c:	62d3      	str	r3, [r2, #44]	@ 0x2c

	for (uint8_t i = 0; i < adcConfig->numCanais; i++)
 800077e:	e056      	b.n	800082e <BSP_ADC_Init+0x286>
			adcConfig->ADCx->CR1 &= ~ADC_CR1_DISCEN;
 8000780:	6822      	ldr	r2, [r4, #0]
 8000782:	6853      	ldr	r3, [r2, #4]
 8000784:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000788:	6053      	str	r3, [r2, #4]
			adcConfig->ADCx->CR2 |= ADC_CR2_CONT;
 800078a:	6822      	ldr	r2, [r4, #0]
 800078c:	6893      	ldr	r3, [r2, #8]
 800078e:	f043 0302 	orr.w	r3, r3, #2
 8000792:	6093      	str	r3, [r2, #8]
			break;
 8000794:	e7cb      	b.n	800072e <BSP_ADC_Init+0x186>
		adcConfig->ADCx->CR1 &= ~ADC_CR1_SCAN;
 8000796:	6822      	ldr	r2, [r4, #0]
 8000798:	6853      	ldr	r3, [r2, #4]
 800079a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800079e:	6053      	str	r3, [r2, #4]
		adcConfig->ADCx->CR2 &= ~ADC_CR2_EOCS;
 80007a0:	6822      	ldr	r2, [r4, #0]
 80007a2:	6893      	ldr	r3, [r2, #8]
 80007a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80007a8:	6093      	str	r3, [r2, #8]
 80007aa:	e7cd      	b.n	8000748 <BSP_ADC_Init+0x1a0>
		BSP_Error_Handler();
 80007ac:	f7ff fe96 	bl	80004dc <BSP_Error_Handler>
 80007b0:	e7cd      	b.n	800074e <BSP_ADC_Init+0x1a6>
		if (adcConfig->Canal[i] < 9)
		{
			adcConfig->ADCx->SMPR2 &= ~(111 << adcConfig->Canal[i]*3U);
			adcConfig->ADCx->SMPR2 |=  ((uint8_t) adcConfig->tempoAmostragem[i] << adcConfig->Canal[i]*3U);
		}
		else if (adcConfig->Canal[i] > 9 && adcConfig->Canal[i] <= 18)
 80007b2:	f1a3 020a 	sub.w	r2, r3, #10
 80007b6:	b2d2      	uxtb	r2, r2
 80007b8:	2a08      	cmp	r2, #8
 80007ba:	d818      	bhi.n	80007ee <BSP_ADC_Init+0x246>
		{
			adcConfig->ADCx->SMPR1 &= ~(111 << (adcConfig->Canal[i] - 10)*3U);
 80007bc:	6820      	ldr	r0, [r4, #0]
 80007be:	68c2      	ldr	r2, [r0, #12]
 80007c0:	3b0a      	subs	r3, #10
 80007c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80007c6:	216f      	movs	r1, #111	@ 0x6f
 80007c8:	fa01 f303 	lsl.w	r3, r1, r3
 80007cc:	ea22 0303 	bic.w	r3, r2, r3
 80007d0:	60c3      	str	r3, [r0, #12]
			adcConfig->ADCx->SMPR1 |=  ((uint8_t) adcConfig->tempoAmostragem[i] << (adcConfig->Canal[i] - 10)*3U);
 80007d2:	6820      	ldr	r0, [r4, #0]
 80007d4:	68c2      	ldr	r2, [r0, #12]
 80007d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80007d8:	5d59      	ldrb	r1, [r3, r5]
 80007da:	6a23      	ldr	r3, [r4, #32]
 80007dc:	5d5b      	ldrb	r3, [r3, r5]
 80007de:	3b0a      	subs	r3, #10
 80007e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80007e4:	fa01 f303 	lsl.w	r3, r1, r3
 80007e8:	4313      	orrs	r3, r2
 80007ea:	60c3      	str	r3, [r0, #12]
 80007ec:	e045      	b.n	800087a <BSP_ADC_Init+0x2d2>
		}
		else
		{
			BSP_Error_Handler();
 80007ee:	f7ff fe75 	bl	80004dc <BSP_Error_Handler>
 80007f2:	e042      	b.n	800087a <BSP_ADC_Init+0x2d2>
 80007f4:	40012000 	.word	0x40012000
 80007f8:	40012100 	.word	0x40012100
 80007fc:	40012200 	.word	0x40012200
 8000800:	e000e100 	.word	0xe000e100
 8000804:	20000030 	.word	0x20000030
 8000808:	40023800 	.word	0x40023800
		/* Configura a ordem de amostragem */
		if (i < 6)
		{
			adcConfig->ADCx->SQR3 |= ((uint8_t) adcConfig->Canal[i] << i*5U);
		}
		else if (i >= 6 && i < 12)
 800080c:	1fab      	subs	r3, r5, #6
 800080e:	b2db      	uxtb	r3, r3
 8000810:	2b05      	cmp	r3, #5
 8000812:	d83f      	bhi.n	8000894 <BSP_ADC_Init+0x2ec>
		{
			adcConfig->ADCx->SQR2 |= ((uint8_t) adcConfig->Canal[i] << (i - 6)*5U);
 8000814:	6820      	ldr	r0, [r4, #0]
 8000816:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8000818:	6a23      	ldr	r3, [r4, #32]
 800081a:	5d99      	ldrb	r1, [r3, r6]
 800081c:	1fab      	subs	r3, r5, #6
 800081e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	4313      	orrs	r3, r2
 8000828:	6303      	str	r3, [r0, #48]	@ 0x30
	for (uint8_t i = 0; i < adcConfig->numCanais; i++)
 800082a:	3501      	adds	r5, #1
 800082c:	b2ed      	uxtb	r5, r5
 800082e:	7d23      	ldrb	r3, [r4, #20]
 8000830:	42ab      	cmp	r3, r5
 8000832:	d93c      	bls.n	80008ae <BSP_ADC_Init+0x306>
		BSP_GPIO_Init(adcConfig->GPIOx[i], adcConfig->Pin[i], &pinConfig);
 8000834:	69a3      	ldr	r3, [r4, #24]
 8000836:	462e      	mov	r6, r5
 8000838:	69e1      	ldr	r1, [r4, #28]
 800083a:	aa03      	add	r2, sp, #12
 800083c:	5d49      	ldrb	r1, [r1, r5]
 800083e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000842:	f000 fb07 	bl	8000e54 <BSP_GPIO_Init>
		if (adcConfig->Canal[i] < 9)
 8000846:	6a23      	ldr	r3, [r4, #32]
 8000848:	5d5b      	ldrb	r3, [r3, r5]
 800084a:	2b08      	cmp	r3, #8
 800084c:	d8b1      	bhi.n	80007b2 <BSP_ADC_Init+0x20a>
			adcConfig->ADCx->SMPR2 &= ~(111 << adcConfig->Canal[i]*3U);
 800084e:	6820      	ldr	r0, [r4, #0]
 8000850:	6902      	ldr	r2, [r0, #16]
 8000852:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000856:	216f      	movs	r1, #111	@ 0x6f
 8000858:	fa01 f303 	lsl.w	r3, r1, r3
 800085c:	ea22 0303 	bic.w	r3, r2, r3
 8000860:	6103      	str	r3, [r0, #16]
			adcConfig->ADCx->SMPR2 |=  ((uint8_t) adcConfig->tempoAmostragem[i] << adcConfig->Canal[i]*3U);
 8000862:	6820      	ldr	r0, [r4, #0]
 8000864:	6902      	ldr	r2, [r0, #16]
 8000866:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000868:	5d59      	ldrb	r1, [r3, r5]
 800086a:	6a23      	ldr	r3, [r4, #32]
 800086c:	5d5b      	ldrb	r3, [r3, r5]
 800086e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	4313      	orrs	r3, r2
 8000878:	6103      	str	r3, [r0, #16]
		if (i < 6)
 800087a:	2d05      	cmp	r5, #5
 800087c:	d8c6      	bhi.n	800080c <BSP_ADC_Init+0x264>
			adcConfig->ADCx->SQR3 |= ((uint8_t) adcConfig->Canal[i] << i*5U);
 800087e:	6821      	ldr	r1, [r4, #0]
 8000880:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8000882:	6a22      	ldr	r2, [r4, #32]
 8000884:	5d92      	ldrb	r2, [r2, r6]
 8000886:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800088a:	fa02 f606 	lsl.w	r6, r2, r6
 800088e:	4333      	orrs	r3, r6
 8000890:	634b      	str	r3, [r1, #52]	@ 0x34
 8000892:	e7ca      	b.n	800082a <BSP_ADC_Init+0x282>
		}
		else
		{
			adcConfig->ADCx->SQR1 |= ((uint8_t) adcConfig->Canal[i] << (i - 12)*5U);
 8000894:	6820      	ldr	r0, [r4, #0]
 8000896:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8000898:	6a23      	ldr	r3, [r4, #32]
 800089a:	5d99      	ldrb	r1, [r3, r6]
 800089c:	f1a5 030c 	sub.w	r3, r5, #12
 80008a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80008a4:	fa01 f303 	lsl.w	r3, r1, r3
 80008a8:	4313      	orrs	r3, r2
 80008aa:	62c3      	str	r3, [r0, #44]	@ 0x2c
 80008ac:	e7bd      	b.n	800082a <BSP_ADC_Init+0x282>
		}
	}

	/* Configura o prescaler */
	ADC->CCR |= ((uint8_t) adcConfig->prescaler << ADC_CCR_ADCPRE_Pos);
 80008ae:	4a06      	ldr	r2, [pc, #24]	@ (80008c8 <BSP_ADC_Init+0x320>)
 80008b0:	6853      	ldr	r3, [r2, #4]
 80008b2:	7a61      	ldrb	r1, [r4, #9]
 80008b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b8:	6053      	str	r3, [r2, #4]

	/* Habilita o ADC */
	adcConfig->ADCx->CR2 |= ADC_CR2_ADON;
 80008ba:	6822      	ldr	r2, [r4, #0]
 80008bc:	6893      	ldr	r3, [r2, #8]
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	6093      	str	r3, [r2, #8]
}
 80008c4:	b004      	add	sp, #16
 80008c6:	bd70      	pop	{r4, r5, r6, pc}
 80008c8:	40012300 	.word	0x40012300

080008cc <ADC_IRQHandler>:
	*adcRead = ADCx->DR;
}

#if defined(ADC1_Interrupt) || defined(ADC2_Interrupt) || defined(ADC3_Interrupt)
void ADC_IRQHandler(void)
{
 80008cc:	b508      	push	{r3, lr}
	{
		(*interruptions[0])(ADC1->DR);
	}
#endif
#ifdef ADC2_Interrupt
	if (ADC2->SR & ADC_SR_EOC && interruptions[1] != NULL)
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <ADC_IRQHandler+0x1c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f013 0f02 	tst.w	r3, #2
 80008d6:	d006      	beq.n	80008e6 <ADC_IRQHandler+0x1a>
 80008d8:	4b04      	ldr	r3, [pc, #16]	@ (80008ec <ADC_IRQHandler+0x20>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	b11b      	cbz	r3, 80008e6 <ADC_IRQHandler+0x1a>
	{
		(*interruptions[1])(ADC2->DR);
 80008de:	4a02      	ldr	r2, [pc, #8]	@ (80008e8 <ADC_IRQHandler+0x1c>)
 80008e0:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 80008e2:	b280      	uxth	r0, r0
 80008e4:	4798      	blx	r3
	if (ADC3->SR & ADC_SR_EOC && interruptions[2] != NULL)
	{
		(*interruptions[2])(ADC3->DR);
	}
#endif
}
 80008e6:	bd08      	pop	{r3, pc}
 80008e8:	40012100 	.word	0x40012100
 80008ec:	20000030 	.word	0x20000030

080008f0 <BSP_DAC_Init>:
/* Includes ------------------------------------------------------------------*/
#include "bsp_dac.h"
#include "bsp.h"

void BSP_DAC_Init(const DAC_Config *dacConfig, uint32_t Canal)
{
 80008f0:	b510      	push	{r4, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	4604      	mov	r4, r0
	DACx_CLK_ENABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	4a2f      	ldr	r2, [pc, #188]	@ (80009b8 <BSP_DAC_Init+0xc8>)
 80008fc:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 80008fe:	f040 5000 	orr.w	r0, r0, #536870912	@ 0x20000000
 8000902:	6410      	str	r0, [r2, #64]	@ 0x40
 8000904:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000906:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 800090a:	9200      	str	r2, [sp, #0]
 800090c:	9a00      	ldr	r2, [sp, #0]

	GPIO_Config pinConfig = {0};
 800090e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000912:	f88d 3006 	strb.w	r3, [sp, #6]
	pinConfig.modo = ANALOGICO;
 8000916:	2305      	movs	r3, #5
 8000918:	f88d 3004 	strb.w	r3, [sp, #4]

	if (Canal == DAC_CANAL_1)
 800091c:	4b27      	ldr	r3, [pc, #156]	@ (80009bc <BSP_DAC_Init+0xcc>)
 800091e:	4299      	cmp	r1, r3
 8000920:	d006      	beq.n	8000930 <BSP_DAC_Init+0x40>

		dacConfig->DACx->CR |= DAC_CR_EN1 | (dacConfig->bufferEnable << DAC_CR_BOFF1_Pos)
							| (dacConfig->dmaEnable << DAC_CR_DMAEN1_Pos)
							| (dacConfig->triggerEnable << DAC_CR_TEN1_Pos);
	}
	else if (Canal == DAC_CANAL_2)
 8000922:	4b27      	ldr	r3, [pc, #156]	@ (80009c0 <BSP_DAC_Init+0xd0>)
 8000924:	4299      	cmp	r1, r3
 8000926:	d025      	beq.n	8000974 <BSP_DAC_Init+0x84>
							| (dacConfig->dmaEnable << DAC_CR_DMAEN2_Pos)
							| (dacConfig->triggerEnable << DAC_CR_TEN2_Pos);
	}
	else
	{
		BSP_Error_Handler();
 8000928:	f7ff fdd8 	bl	80004dc <BSP_Error_Handler>
	}
}
 800092c:	b002      	add	sp, #8
 800092e:	bd10      	pop	{r4, pc}
		BSP_GPIO_Init(DAC_CHANNEL_1_Port, DAC_CHANNEL_1_Pin, &pinConfig);
 8000930:	aa01      	add	r2, sp, #4
 8000932:	2104      	movs	r1, #4
 8000934:	4823      	ldr	r0, [pc, #140]	@ (80009c4 <BSP_DAC_Init+0xd4>)
 8000936:	f000 fa8d 	bl	8000e54 <BSP_GPIO_Init>
		if (dacConfig->trigger > 0x7)
 800093a:	68a3      	ldr	r3, [r4, #8]
 800093c:	2b07      	cmp	r3, #7
 800093e:	d913      	bls.n	8000968 <BSP_DAC_Init+0x78>
			dacConfig->DACx->CR |= 0x7 << DAC_CR_TSEL1_Pos;
 8000940:	6822      	ldr	r2, [r4, #0]
 8000942:	6813      	ldr	r3, [r2, #0]
 8000944:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8000948:	6013      	str	r3, [r2, #0]
		dacConfig->DACx->CR |= DAC_CR_EN1 | (dacConfig->bufferEnable << DAC_CR_BOFF1_Pos)
 800094a:	6821      	ldr	r1, [r4, #0]
 800094c:	680a      	ldr	r2, [r1, #0]
 800094e:	7b20      	ldrb	r0, [r4, #12]
							| (dacConfig->dmaEnable << DAC_CR_DMAEN1_Pos)
 8000950:	7b63      	ldrb	r3, [r4, #13]
 8000952:	031b      	lsls	r3, r3, #12
 8000954:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
							| (dacConfig->triggerEnable << DAC_CR_TEN1_Pos);
 8000958:	7920      	ldrb	r0, [r4, #4]
 800095a:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
		dacConfig->DACx->CR |= DAC_CR_EN1 | (dacConfig->bufferEnable << DAC_CR_BOFF1_Pos)
 800095e:	4313      	orrs	r3, r2
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	600b      	str	r3, [r1, #0]
 8000966:	e7e1      	b.n	800092c <BSP_DAC_Init+0x3c>
			dacConfig->DACx->CR |= dacConfig->trigger << DAC_CR_TSEL1_Pos;
 8000968:	6821      	ldr	r1, [r4, #0]
 800096a:	680a      	ldr	r2, [r1, #0]
 800096c:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
 8000970:	600b      	str	r3, [r1, #0]
 8000972:	e7ea      	b.n	800094a <BSP_DAC_Init+0x5a>
		BSP_GPIO_Init(DAC_CHANNEL_2_Port, DAC_CHANNEL_2_Pin, &pinConfig);
 8000974:	aa01      	add	r2, sp, #4
 8000976:	2105      	movs	r1, #5
 8000978:	4812      	ldr	r0, [pc, #72]	@ (80009c4 <BSP_DAC_Init+0xd4>)
 800097a:	f000 fa6b 	bl	8000e54 <BSP_GPIO_Init>
		if (dacConfig->trigger > 0x7)
 800097e:	68a3      	ldr	r3, [r4, #8]
 8000980:	2b07      	cmp	r3, #7
 8000982:	d913      	bls.n	80009ac <BSP_DAC_Init+0xbc>
			dacConfig->DACx->CR |= 0x7 << DAC_CR_TSEL2_Pos;
 8000984:	6822      	ldr	r2, [r4, #0]
 8000986:	6813      	ldr	r3, [r2, #0]
 8000988:	f443 1360 	orr.w	r3, r3, #3670016	@ 0x380000
 800098c:	6013      	str	r3, [r2, #0]
		dacConfig->DACx->CR |= DAC_CR_EN2 | (dacConfig->bufferEnable << DAC_CR_BOFF2_Pos)
 800098e:	6821      	ldr	r1, [r4, #0]
 8000990:	680a      	ldr	r2, [r1, #0]
 8000992:	7b20      	ldrb	r0, [r4, #12]
							| (dacConfig->dmaEnable << DAC_CR_DMAEN2_Pos)
 8000994:	7b63      	ldrb	r3, [r4, #13]
 8000996:	071b      	lsls	r3, r3, #28
 8000998:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
							| (dacConfig->triggerEnable << DAC_CR_TEN2_Pos);
 800099c:	7920      	ldrb	r0, [r4, #4]
 800099e:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
		dacConfig->DACx->CR |= DAC_CR_EN2 | (dacConfig->bufferEnable << DAC_CR_BOFF2_Pos)
 80009a2:	4313      	orrs	r3, r2
 80009a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009a8:	600b      	str	r3, [r1, #0]
 80009aa:	e7bf      	b.n	800092c <BSP_DAC_Init+0x3c>
			dacConfig->DACx->CR |= dacConfig->trigger << DAC_CR_TSEL2_Pos;
 80009ac:	6821      	ldr	r1, [r4, #0]
 80009ae:	680a      	ldr	r2, [r1, #0]
 80009b0:	ea42 43c3 	orr.w	r3, r2, r3, lsl #19
 80009b4:	600b      	str	r3, [r1, #0]
 80009b6:	e7ea      	b.n	800098e <BSP_DAC_Init+0x9e>
 80009b8:	40023800 	.word	0x40023800
 80009bc:	02100001 	.word	0x02100001
 80009c0:	15430012 	.word	0x15430012
 80009c4:	40020000 	.word	0x40020000

080009c8 <BSP_DAC_SetValue>:

void BSP_DAC_SetValue(DAC_TypeDef *DACx, DAC_Mode Mode, uint32_t Canal, uint16_t Value)
{
	switch (Mode)
 80009c8:	2901      	cmp	r1, #1
 80009ca:	d013      	beq.n	80009f4 <BSP_DAC_SetValue+0x2c>
{
 80009cc:	b508      	push	{r3, lr}
	switch (Mode)
 80009ce:	2902      	cmp	r1, #2
 80009d0:	d01d      	beq.n	8000a0e <BSP_DAC_SetValue+0x46>
 80009d2:	b111      	cbz	r1, 80009da <BSP_DAC_SetValue+0x12>
			break;
		case bit8:
			LL_DAC_ConvertData8RightAligned(DACx, Canal, Value);
			break;
		default:
			BSP_Error_Handler();
 80009d4:	f7ff fd82 	bl	80004dc <BSP_Error_Handler>
			break;
	}
}
 80009d8:	e00b      	b.n	80009f2 <BSP_DAC_SetValue+0x2a>
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 80009da:	3008      	adds	r0, #8
 80009dc:	0d12      	lsrs	r2, r2, #20
 80009de:	0092      	lsls	r2, r2, #2
 80009e0:	f002 023c 	and.w	r2, r2, #60	@ 0x3c
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 80009e4:	5881      	ldr	r1, [r0, r2]
 80009e6:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
 80009ea:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
 80009ee:	4319      	orrs	r1, r3
 80009f0:	5081      	str	r1, [r0, r2]
 80009f2:	bd08      	pop	{r3, pc}
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12RX_REGOFFSET_BITOFFSET_POS)
 80009f4:	3008      	adds	r0, #8
 80009f6:	0c12      	lsrs	r2, r2, #16
 80009f8:	0092      	lsls	r2, r2, #2
 80009fa:	f002 023c 	and.w	r2, r2, #60	@ 0x3c
  MODIFY_REG(*preg, DAC_DHR12R1_DACC1DHR, Data);
 80009fe:	5881      	ldr	r1, [r0, r2]
 8000a00:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 8000a04:	f021 010f 	bic.w	r1, r1, #15
 8000a08:	4319      	orrs	r1, r3
 8000a0a:	5081      	str	r1, [r0, r2]
 8000a0c:	4770      	bx	lr
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData8RightAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR8RX_REGOFFSET_BITOFFSET_POS)
 8000a0e:	3008      	adds	r0, #8
 8000a10:	0e12      	lsrs	r2, r2, #24
 8000a12:	0092      	lsls	r2, r2, #2
 8000a14:	f002 023c 	and.w	r2, r2, #60	@ 0x3c
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR8R1_DACC1DHR, Data);
 8000a18:	5881      	ldr	r1, [r0, r2]
 8000a1a:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8000a1e:	430b      	orrs	r3, r1
 8000a20:	5083      	str	r3, [r0, r2]
}
 8000a22:	e7e6      	b.n	80009f2 <BSP_DAC_SetValue+0x2a>

08000a24 <BSP_EXTI_Init>:
static volatile void (*interruption_EXTI15)(void) = NULL;
#endif


void BSP_EXTI_Init(const EXTI_Config *extiConfig)
{
 8000a24:	b510      	push	{r4, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	4604      	mov	r4, r0
	GPIO_Config extiPin = {0};
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000a30:	f88d 3006 	strb.w	r3, [sp, #6]
	extiPin.velocidade = ALTO;
 8000a34:	2302      	movs	r3, #2
 8000a36:	f88d 3005 	strb.w	r3, [sp, #5]
	extiPin.alternativo = 15U;
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	f88d 3006 	strb.w	r3, [sp, #6]

	switch (extiConfig->Pull)
 8000a40:	7a03      	ldrb	r3, [r0, #8]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d02e      	beq.n	8000aa4 <BSP_EXTI_Init+0x80>
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d030      	beq.n	8000aac <BSP_EXTI_Init+0x88>
		default:
			extiPin.modo = ENTRADA_NoPull;
			break;
	}

	BSP_GPIO_Init(extiConfig->GPIOx, extiConfig->Pin, &extiPin);
 8000a4a:	aa01      	add	r2, sp, #4
 8000a4c:	68e1      	ldr	r1, [r4, #12]
 8000a4e:	6860      	ldr	r0, [r4, #4]
 8000a50:	f000 fa00 	bl	8000e54 <BSP_GPIO_Init>

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	4b9b      	ldr	r3, [pc, #620]	@ (8000cc8 <BSP_EXTI_Init+0x2a4>)
 8000a5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000a60:	645a      	str	r2, [r3, #68]	@ 0x44
 8000a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	9b00      	ldr	r3, [sp, #0]

	uint8_t EXTICR = 0x0;
	if (extiConfig->GPIOx == GPIOA)
 8000a6c:	6863      	ldr	r3, [r4, #4]
 8000a6e:	4a97      	ldr	r2, [pc, #604]	@ (8000ccc <BSP_EXTI_Init+0x2a8>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d01f      	beq.n	8000ab4 <BSP_EXTI_Init+0x90>
	{
		EXTICR = 0x0;
	}
	else if (extiConfig->GPIOx == GPIOB)
 8000a74:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d04d      	beq.n	8000b18 <BSP_EXTI_Init+0xf4>
	{
		EXTICR = 0x1;
	}
	else if (extiConfig->GPIOx == GPIOC)
 8000a7c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d04b      	beq.n	8000b1c <BSP_EXTI_Init+0xf8>
	{
		EXTICR = 0x2;
	}
	else if (extiConfig->GPIOx == GPIOD)
 8000a84:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d049      	beq.n	8000b20 <BSP_EXTI_Init+0xfc>
	{
		EXTICR = 0x3;
	}
	else if (extiConfig->GPIOx == GPIOE)
 8000a8c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d047      	beq.n	8000b24 <BSP_EXTI_Init+0x100>
	{
		EXTICR = 0x4;
	}
	else if (extiConfig->GPIOx == GPIOH)
 8000a94:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d045      	beq.n	8000b28 <BSP_EXTI_Init+0x104>
	{
		EXTICR = 0x7;
	}
	else
	{
		BSP_Error_Handler();
 8000a9c:	f7ff fd1e 	bl	80004dc <BSP_Error_Handler>
		EXTICR = 0x0;
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	e008      	b.n	8000ab6 <BSP_EXTI_Init+0x92>
			extiPin.modo = ENTRADA_PullUp;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	f88d 3004 	strb.w	r3, [sp, #4]
			break;
 8000aaa:	e7ce      	b.n	8000a4a <BSP_EXTI_Init+0x26>
			extiPin.modo = ENTRADA_PullDown;
 8000aac:	2301      	movs	r3, #1
 8000aae:	f88d 3004 	strb.w	r3, [sp, #4]
			break;
 8000ab2:	e7ca      	b.n	8000a4a <BSP_EXTI_Init+0x26>
		EXTICR = 0x0;
 8000ab4:	2200      	movs	r2, #0
	}

	switch (extiConfig->ExtiLine)
 8000ab6:	6823      	ldr	r3, [r4, #0]
 8000ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000abc:	f000 80e5 	beq.w	8000c8a <BSP_EXTI_Init+0x266>
 8000ac0:	d844      	bhi.n	8000b4c <BSP_EXTI_Init+0x128>
 8000ac2:	2b20      	cmp	r3, #32
 8000ac4:	d832      	bhi.n	8000b2c <BSP_EXTI_Init+0x108>
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f000 811b 	beq.w	8000d02 <BSP_EXTI_Init+0x2de>
 8000acc:	3b01      	subs	r3, #1
 8000ace:	2b1f      	cmp	r3, #31
 8000ad0:	f200 8117 	bhi.w	8000d02 <BSP_EXTI_Init+0x2de>
 8000ad4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000ad8:	009c0080 	.word	0x009c0080
 8000adc:	00a50115 	.word	0x00a50115
 8000ae0:	01150115 	.word	0x01150115
 8000ae4:	00af0115 	.word	0x00af0115
 8000ae8:	01150115 	.word	0x01150115
 8000aec:	01150115 	.word	0x01150115
 8000af0:	01150115 	.word	0x01150115
 8000af4:	00bc0115 	.word	0x00bc0115
 8000af8:	01150115 	.word	0x01150115
 8000afc:	01150115 	.word	0x01150115
 8000b00:	01150115 	.word	0x01150115
 8000b04:	01150115 	.word	0x01150115
 8000b08:	01150115 	.word	0x01150115
 8000b0c:	01150115 	.word	0x01150115
 8000b10:	01150115 	.word	0x01150115
 8000b14:	00c50115 	.word	0x00c50115
		EXTICR = 0x1;
 8000b18:	2201      	movs	r2, #1
 8000b1a:	e7cc      	b.n	8000ab6 <BSP_EXTI_Init+0x92>
		EXTICR = 0x2;
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	e7ca      	b.n	8000ab6 <BSP_EXTI_Init+0x92>
		EXTICR = 0x3;
 8000b20:	2203      	movs	r2, #3
 8000b22:	e7c8      	b.n	8000ab6 <BSP_EXTI_Init+0x92>
		EXTICR = 0x4;
 8000b24:	2204      	movs	r2, #4
 8000b26:	e7c6      	b.n	8000ab6 <BSP_EXTI_Init+0x92>
		EXTICR = 0x7;
 8000b28:	2207      	movs	r2, #7
 8000b2a:	e7c4      	b.n	8000ab6 <BSP_EXTI_Init+0x92>
	switch (extiConfig->ExtiLine)
 8000b2c:	2b40      	cmp	r3, #64	@ 0x40
 8000b2e:	f000 80a2 	beq.w	8000c76 <BSP_EXTI_Init+0x252>
 8000b32:	2b80      	cmp	r3, #128	@ 0x80
 8000b34:	f040 80e5 	bne.w	8000d02 <BSP_EXTI_Init+0x2de>
			break;
		case LL_EXTI_LINE_7:
#ifdef EXTI7_LINE
			interruption_EXTI7 = extiConfig->FuncaoInterrupcao;
#endif
			SYSCFG->EXTICR[1] |= EXTICR << 12;
 8000b38:	4965      	ldr	r1, [pc, #404]	@ (8000cd0 <BSP_EXTI_Init+0x2ac>)
 8000b3a:	68cb      	ldr	r3, [r1, #12]
 8000b3c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8000b40:	60cb      	str	r3, [r1, #12]
 8000b42:	4b64      	ldr	r3, [pc, #400]	@ (8000cd4 <BSP_EXTI_Init+0x2b0>)
 8000b44:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000b48:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
 8000b4a:	e04c      	b.n	8000be6 <BSP_EXTI_Init+0x1c2>
	switch (extiConfig->ExtiLine)
 8000b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000b50:	f000 80b1 	beq.w	8000cb6 <BSP_EXTI_Init+0x292>
 8000b54:	d913      	bls.n	8000b7e <BSP_EXTI_Init+0x15a>
 8000b56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000b5a:	f000 80c5 	beq.w	8000ce8 <BSP_EXTI_Init+0x2c4>
 8000b5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000b62:	d12b      	bne.n	8000bbc <BSP_EXTI_Init+0x198>
			SYSCFG->EXTICR[3] |= EXTICR << 8;
			NVIC_EnableIRQ(EXTI15_10_IRQn);
			break;
		case LL_EXTI_LINE_15:
#ifdef EXTI15_LINE
			interruption_EXTI15 = extiConfig->FuncaoInterrupcao;
 8000b64:	6961      	ldr	r1, [r4, #20]
 8000b66:	4b5c      	ldr	r3, [pc, #368]	@ (8000cd8 <BSP_EXTI_Init+0x2b4>)
 8000b68:	6019      	str	r1, [r3, #0]
#endif
			SYSCFG->EXTICR[3] |= EXTICR << 12;
 8000b6a:	4959      	ldr	r1, [pc, #356]	@ (8000cd0 <BSP_EXTI_Init+0x2ac>)
 8000b6c:	694b      	ldr	r3, [r1, #20]
 8000b6e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8000b72:	614b      	str	r3, [r1, #20]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b74:	4b57      	ldr	r3, [pc, #348]	@ (8000cd4 <BSP_EXTI_Init+0x2b0>)
 8000b76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b7a:	605a      	str	r2, [r3, #4]
    __COMPILER_BARRIER();
 8000b7c:	e033      	b.n	8000be6 <BSP_EXTI_Init+0x1c2>
	switch (extiConfig->ExtiLine)
 8000b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b82:	f000 808b 	beq.w	8000c9c <BSP_EXTI_Init+0x278>
 8000b86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000b8a:	d109      	bne.n	8000ba0 <BSP_EXTI_Init+0x17c>
			SYSCFG->EXTICR[2] |= EXTICR << 12;
 8000b8c:	4950      	ldr	r1, [pc, #320]	@ (8000cd0 <BSP_EXTI_Init+0x2ac>)
 8000b8e:	690b      	ldr	r3, [r1, #16]
 8000b90:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8000b94:	610b      	str	r3, [r1, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b96:	4b4f      	ldr	r3, [pc, #316]	@ (8000cd4 <BSP_EXTI_Init+0x2b0>)
 8000b98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b9c:	605a      	str	r2, [r3, #4]
    __COMPILER_BARRIER();
 8000b9e:	e022      	b.n	8000be6 <BSP_EXTI_Init+0x1c2>
	switch (extiConfig->ExtiLine)
 8000ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ba4:	f040 80ad 	bne.w	8000d02 <BSP_EXTI_Init+0x2de>
			SYSCFG->EXTICR[2] |= EXTICR << 4;
 8000ba8:	4949      	ldr	r1, [pc, #292]	@ (8000cd0 <BSP_EXTI_Init+0x2ac>)
 8000baa:	690b      	ldr	r3, [r1, #16]
 8000bac:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000bb0:	610b      	str	r3, [r1, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb2:	4b48      	ldr	r3, [pc, #288]	@ (8000cd4 <BSP_EXTI_Init+0x2b0>)
 8000bb4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000bb8:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
 8000bba:	e014      	b.n	8000be6 <BSP_EXTI_Init+0x1c2>
	switch (extiConfig->ExtiLine)
 8000bbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bc0:	f040 809f 	bne.w	8000d02 <BSP_EXTI_Init+0x2de>
			SYSCFG->EXTICR[3] |= EXTICR << 4;
 8000bc4:	4942      	ldr	r1, [pc, #264]	@ (8000cd0 <BSP_EXTI_Init+0x2ac>)
 8000bc6:	694b      	ldr	r3, [r1, #20]
 8000bc8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000bcc:	614b      	str	r3, [r1, #20]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bce:	4b41      	ldr	r3, [pc, #260]	@ (8000cd4 <BSP_EXTI_Init+0x2b0>)
 8000bd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bd4:	605a      	str	r2, [r3, #4]
    __COMPILER_BARRIER();
 8000bd6:	e006      	b.n	8000be6 <BSP_EXTI_Init+0x1c2>
			SYSCFG->EXTICR[0] |= EXTICR;
 8000bd8:	493d      	ldr	r1, [pc, #244]	@ (8000cd0 <BSP_EXTI_Init+0x2ac>)
 8000bda:	688b      	ldr	r3, [r1, #8]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	608b      	str	r3, [r1, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be0:	4b3c      	ldr	r3, [pc, #240]	@ (8000cd4 <BSP_EXTI_Init+0x2b0>)
 8000be2:	2240      	movs	r2, #64	@ 0x40
 8000be4:	601a      	str	r2, [r3, #0]
		default:
			BSP_Error_Handler();
			break;
	}

	EXTI->IMR |= extiConfig->ExtiLine; /* Desmacara a lina de exti */
 8000be6:	4a3d      	ldr	r2, [pc, #244]	@ (8000cdc <BSP_EXTI_Init+0x2b8>)
 8000be8:	6813      	ldr	r3, [r2, #0]
 8000bea:	6821      	ldr	r1, [r4, #0]
 8000bec:	430b      	orrs	r3, r1
 8000bee:	6013      	str	r3, [r2, #0]

	if (extiConfig->Trigger == RisingEdge)
 8000bf0:	7c23      	ldrb	r3, [r4, #16]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8088 	bne.w	8000d08 <BSP_EXTI_Init+0x2e4>
	{
		EXTI->RTSR |= extiConfig->ExtiLine;
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	6892      	ldr	r2, [r2, #8]
 8000bfc:	6821      	ldr	r1, [r4, #0]
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	609a      	str	r2, [r3, #8]
		EXTI->FTSR &= ~extiConfig->ExtiLine;
 8000c02:	68da      	ldr	r2, [r3, #12]
 8000c04:	6821      	ldr	r1, [r4, #0]
 8000c06:	ea22 0201 	bic.w	r2, r2, r1
 8000c0a:	60da      	str	r2, [r3, #12]
	}
	else
	{
		BSP_Error_Handler();
	}
}
 8000c0c:	b002      	add	sp, #8
 8000c0e:	bd10      	pop	{r4, pc}
			SYSCFG->EXTICR[0] |= EXTICR << 4;
 8000c10:	492f      	ldr	r1, [pc, #188]	@ (8000cd0 <BSP_EXTI_Init+0x2ac>)
 8000c12:	688b      	ldr	r3, [r1, #8]
 8000c14:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000c18:	608b      	str	r3, [r1, #8]
 8000c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd4 <BSP_EXTI_Init+0x2b0>)
 8000c1c:	2280      	movs	r2, #128	@ 0x80
 8000c1e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
 8000c20:	e7e1      	b.n	8000be6 <BSP_EXTI_Init+0x1c2>
			SYSCFG->EXTICR[0] |= EXTICR << 8;
 8000c22:	492b      	ldr	r1, [pc, #172]	@ (8000cd0 <BSP_EXTI_Init+0x2ac>)
 8000c24:	688b      	ldr	r3, [r1, #8]
 8000c26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c2a:	608b      	str	r3, [r1, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2c:	4b29      	ldr	r3, [pc, #164]	@ (8000cd4 <BSP_EXTI_Init+0x2b0>)
 8000c2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c32:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
 8000c34:	e7d7      	b.n	8000be6 <BSP_EXTI_Init+0x1c2>
			interruption_EXTI3 = extiConfig->FuncaoInterrupcao;
 8000c36:	6961      	ldr	r1, [r4, #20]
 8000c38:	4b29      	ldr	r3, [pc, #164]	@ (8000ce0 <BSP_EXTI_Init+0x2bc>)
 8000c3a:	6019      	str	r1, [r3, #0]
			SYSCFG->EXTICR[0] |= EXTICR << 12;
 8000c3c:	4924      	ldr	r1, [pc, #144]	@ (8000cd0 <BSP_EXTI_Init+0x2ac>)
 8000c3e:	688b      	ldr	r3, [r1, #8]
 8000c40:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8000c44:	608b      	str	r3, [r1, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c46:	4b23      	ldr	r3, [pc, #140]	@ (8000cd4 <BSP_EXTI_Init+0x2b0>)
 8000c48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c4c:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
 8000c4e:	e7ca      	b.n	8000be6 <BSP_EXTI_Init+0x1c2>
			SYSCFG->EXTICR[1] |= EXTICR;
 8000c50:	491f      	ldr	r1, [pc, #124]	@ (8000cd0 <BSP_EXTI_Init+0x2ac>)
 8000c52:	68cb      	ldr	r3, [r1, #12]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	60cb      	str	r3, [r1, #12]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c58:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd4 <BSP_EXTI_Init+0x2b0>)
 8000c5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c5e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
 8000c60:	e7c1      	b.n	8000be6 <BSP_EXTI_Init+0x1c2>
			SYSCFG->EXTICR[1] |= EXTICR << 4;
 8000c62:	491b      	ldr	r1, [pc, #108]	@ (8000cd0 <BSP_EXTI_Init+0x2ac>)
 8000c64:	68cb      	ldr	r3, [r1, #12]
 8000c66:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000c6a:	60cb      	str	r3, [r1, #12]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6c:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <BSP_EXTI_Init+0x2b0>)
 8000c6e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c72:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
 8000c74:	e7b7      	b.n	8000be6 <BSP_EXTI_Init+0x1c2>
			SYSCFG->EXTICR[1] |= EXTICR << 8;
 8000c76:	4916      	ldr	r1, [pc, #88]	@ (8000cd0 <BSP_EXTI_Init+0x2ac>)
 8000c78:	68cb      	ldr	r3, [r1, #12]
 8000c7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c7e:	60cb      	str	r3, [r1, #12]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c80:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <BSP_EXTI_Init+0x2b0>)
 8000c82:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c86:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
 8000c88:	e7ad      	b.n	8000be6 <BSP_EXTI_Init+0x1c2>
			SYSCFG->EXTICR[2] |= EXTICR;
 8000c8a:	4911      	ldr	r1, [pc, #68]	@ (8000cd0 <BSP_EXTI_Init+0x2ac>)
 8000c8c:	690b      	ldr	r3, [r1, #16]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	610b      	str	r3, [r1, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c92:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <BSP_EXTI_Init+0x2b0>)
 8000c94:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c98:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
 8000c9a:	e7a4      	b.n	8000be6 <BSP_EXTI_Init+0x1c2>
			interruption_EXTI10 = extiConfig->FuncaoInterrupcao;
 8000c9c:	6961      	ldr	r1, [r4, #20]
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <BSP_EXTI_Init+0x2c0>)
 8000ca0:	6019      	str	r1, [r3, #0]
			SYSCFG->EXTICR[2] |= EXTICR << 8;
 8000ca2:	490b      	ldr	r1, [pc, #44]	@ (8000cd0 <BSP_EXTI_Init+0x2ac>)
 8000ca4:	690b      	ldr	r3, [r1, #16]
 8000ca6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000caa:	610b      	str	r3, [r1, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cac:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <BSP_EXTI_Init+0x2b0>)
 8000cae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cb2:	605a      	str	r2, [r3, #4]
    __COMPILER_BARRIER();
 8000cb4:	e797      	b.n	8000be6 <BSP_EXTI_Init+0x1c2>
			SYSCFG->EXTICR[3] |= EXTICR;
 8000cb6:	4906      	ldr	r1, [pc, #24]	@ (8000cd0 <BSP_EXTI_Init+0x2ac>)
 8000cb8:	694b      	ldr	r3, [r1, #20]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	614b      	str	r3, [r1, #20]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cbe:	4b05      	ldr	r3, [pc, #20]	@ (8000cd4 <BSP_EXTI_Init+0x2b0>)
 8000cc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cc4:	605a      	str	r2, [r3, #4]
    __COMPILER_BARRIER();
 8000cc6:	e78e      	b.n	8000be6 <BSP_EXTI_Init+0x1c2>
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000
 8000cd0:	40013800 	.word	0x40013800
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	2000003c 	.word	0x2000003c
 8000cdc:	40013c00 	.word	0x40013c00
 8000ce0:	20000048 	.word	0x20000048
 8000ce4:	20000044 	.word	0x20000044
			interruption_EXTI14 = extiConfig->FuncaoInterrupcao;
 8000ce8:	6961      	ldr	r1, [r4, #20]
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <BSP_EXTI_Init+0x31c>)
 8000cec:	6019      	str	r1, [r3, #0]
			SYSCFG->EXTICR[3] |= EXTICR << 8;
 8000cee:	4915      	ldr	r1, [pc, #84]	@ (8000d44 <BSP_EXTI_Init+0x320>)
 8000cf0:	694b      	ldr	r3, [r1, #20]
 8000cf2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000cf6:	614b      	str	r3, [r1, #20]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf8:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <BSP_EXTI_Init+0x324>)
 8000cfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cfe:	605a      	str	r2, [r3, #4]
    __COMPILER_BARRIER();
 8000d00:	e771      	b.n	8000be6 <BSP_EXTI_Init+0x1c2>
			BSP_Error_Handler();
 8000d02:	f7ff fbeb 	bl	80004dc <BSP_Error_Handler>
			break;
 8000d06:	e76e      	b.n	8000be6 <BSP_EXTI_Init+0x1c2>
	else if (extiConfig->Trigger == FallingEdge)
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d00b      	beq.n	8000d24 <BSP_EXTI_Init+0x300>
	else if (extiConfig->Trigger == BothEdge)
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d114      	bne.n	8000d3a <BSP_EXTI_Init+0x316>
		EXTI->RTSR |= extiConfig->ExtiLine;
 8000d10:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <BSP_EXTI_Init+0x328>)
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	6821      	ldr	r1, [r4, #0]
 8000d16:	430a      	orrs	r2, r1
 8000d18:	609a      	str	r2, [r3, #8]
		EXTI->FTSR |= extiConfig->ExtiLine;
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	6821      	ldr	r1, [r4, #0]
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	e773      	b.n	8000c0c <BSP_EXTI_Init+0x1e8>
		EXTI->RTSR &= ~extiConfig->ExtiLine;
 8000d24:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <BSP_EXTI_Init+0x328>)
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	6821      	ldr	r1, [r4, #0]
 8000d2a:	ea22 0201 	bic.w	r2, r2, r1
 8000d2e:	609a      	str	r2, [r3, #8]
		EXTI->FTSR |= extiConfig->ExtiLine;
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	6821      	ldr	r1, [r4, #0]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	e768      	b.n	8000c0c <BSP_EXTI_Init+0x1e8>
		BSP_Error_Handler();
 8000d3a:	f7ff fbcf 	bl	80004dc <BSP_Error_Handler>
}
 8000d3e:	e765      	b.n	8000c0c <BSP_EXTI_Init+0x1e8>
 8000d40:	20000040 	.word	0x20000040
 8000d44:	40013800 	.word	0x40013800
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	40013c00 	.word	0x40013c00

08000d50 <EXTI3_IRQHandler>:
}
#endif

#ifdef EXTI3_LINE
void EXTI3_IRQHandler(void)
{
 8000d50:	b508      	push	{r3, lr}
	if (EXTI->PR & (1 << 3) && interruption_EXTI3 != NULL)
 8000d52:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <EXTI3_IRQHandler+0x20>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	f013 0f08 	tst.w	r3, #8
 8000d5a:	d008      	beq.n	8000d6e <EXTI3_IRQHandler+0x1e>
 8000d5c:	4b05      	ldr	r3, [pc, #20]	@ (8000d74 <EXTI3_IRQHandler+0x24>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	b12a      	cbz	r2, 8000d6e <EXTI3_IRQHandler+0x1e>
	{
		EXTI->PR |= (1 << 3); /* Reset a Flag */
 8000d62:	4903      	ldr	r1, [pc, #12]	@ (8000d70 <EXTI3_IRQHandler+0x20>)
 8000d64:	694b      	ldr	r3, [r1, #20]
 8000d66:	f043 0308 	orr.w	r3, r3, #8
 8000d6a:	614b      	str	r3, [r1, #20]
		(*interruption_EXTI3)();
 8000d6c:	4790      	blx	r2
	}
}
 8000d6e:	bd08      	pop	{r3, pc}
 8000d70:	40013c00 	.word	0x40013c00
 8000d74:	20000048 	.word	0x20000048

08000d78 <EXTI15_10_IRQHandler>:
}
#endif

#if defined(EXTI10_LINE) || defined(EXTI11_LINE) || defined(EXTI12_LINE) || defined(EXTI13_LINE) || defined(EXTI14_LINE) || defined(EXTI15_LINE)
void EXTI15_10_IRQHandler(void)
{
 8000d78:	b508      	push	{r3, lr}
#ifdef EXTI10_LINE
	if (EXTI->PR & (1 << 10) && interruption_EXTI10 != NULL)
 8000d7a:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <EXTI15_10_IRQHandler+0x58>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8000d82:	d008      	beq.n	8000d96 <EXTI15_10_IRQHandler+0x1e>
 8000d84:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <EXTI15_10_IRQHandler+0x5c>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	b12a      	cbz	r2, 8000d96 <EXTI15_10_IRQHandler+0x1e>
	{
		EXTI->PR |= (1 << 10); /* Reset a Flag */
 8000d8a:	4911      	ldr	r1, [pc, #68]	@ (8000dd0 <EXTI15_10_IRQHandler+0x58>)
 8000d8c:	694b      	ldr	r3, [r1, #20]
 8000d8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d92:	614b      	str	r3, [r1, #20]
		(*interruption_EXTI10)();
 8000d94:	4790      	blx	r2
		(*interruption_EXTI13)();
		EXTI->PR |= (1 << 13); /* Reset a Flag */
	}
#endif
#ifdef EXTI14_LINE
	if (EXTI->PR & (1 << 14) && interruption_EXTI14 != NULL)
 8000d96:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <EXTI15_10_IRQHandler+0x58>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8000d9e:	d008      	beq.n	8000db2 <EXTI15_10_IRQHandler+0x3a>
 8000da0:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <EXTI15_10_IRQHandler+0x60>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	b12a      	cbz	r2, 8000db2 <EXTI15_10_IRQHandler+0x3a>
	{
		EXTI->PR |= (1 << 14); /* Reset a Flag */
 8000da6:	490a      	ldr	r1, [pc, #40]	@ (8000dd0 <EXTI15_10_IRQHandler+0x58>)
 8000da8:	694b      	ldr	r3, [r1, #20]
 8000daa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dae:	614b      	str	r3, [r1, #20]
		(*interruption_EXTI14)();
 8000db0:	4790      	blx	r2
	}
#endif
#ifdef EXTI15_LINE
	if (EXTI->PR & (1 << 15) && interruption_EXTI15 != NULL)
 8000db2:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <EXTI15_10_IRQHandler+0x58>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8000dba:	d008      	beq.n	8000dce <EXTI15_10_IRQHandler+0x56>
 8000dbc:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <EXTI15_10_IRQHandler+0x64>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	b12a      	cbz	r2, 8000dce <EXTI15_10_IRQHandler+0x56>
	{
		EXTI->PR |= (1 << 15); /* Reset a Flag */
 8000dc2:	4903      	ldr	r1, [pc, #12]	@ (8000dd0 <EXTI15_10_IRQHandler+0x58>)
 8000dc4:	694b      	ldr	r3, [r1, #20]
 8000dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dca:	614b      	str	r3, [r1, #20]
		(*interruption_EXTI15)();
 8000dcc:	4790      	blx	r2
	}
#endif
}
 8000dce:	bd08      	pop	{r3, pc}
 8000dd0:	40013c00 	.word	0x40013c00
 8000dd4:	20000044 	.word	0x20000044
 8000dd8:	20000040 	.word	0x20000040
 8000ddc:	2000003c 	.word	0x2000003c

08000de0 <BSP_Write_Flash_Word>:
	}
	return HAL_ERROR;
}

HAL_StatusTypeDef BSP_Write_Flash_Word(uint32_t addr, uint32_t data)
{
 8000de0:	b538      	push	{r3, r4, r5, lr}
	addr += FLASH_START_ADDRESS;
 8000de2:	f100 6400 	add.w	r4, r0, #134217728	@ 0x8000000
 8000de6:	f504 2480 	add.w	r4, r4, #262144	@ 0x40000
	if (addr <= FLASH_END_ADDRESS - 3)
 8000dea:	4b0d      	ldr	r3, [pc, #52]	@ (8000e20 <BSP_Write_Flash_Word+0x40>)
 8000dec:	429c      	cmp	r4, r3
 8000dee:	d902      	bls.n	8000df6 <BSP_Write_Flash_Word+0x16>
		HAL_StatusTypeDef status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, data);
		HAL_FLASH_Lock();

		return status;
	}
	return HAL_ERROR;
 8000df0:	2401      	movs	r4, #1
}
 8000df2:	4620      	mov	r0, r4
 8000df4:	bd38      	pop	{r3, r4, r5, pc}
 8000df6:	460d      	mov	r5, r1
		HAL_FLASH_Unlock();
 8000df8:	f001 f8ac 	bl	8001f54 <HAL_FLASH_Unlock>
		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 8000dfc:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <BSP_Write_Flash_Word+0x44>)
 8000dfe:	22b3      	movs	r2, #179	@ 0xb3
 8000e00:	60da      	str	r2, [r3, #12]
		FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 8000e02:	2102      	movs	r1, #2
 8000e04:	2006      	movs	r0, #6
 8000e06:	f001 f935 	bl	8002074 <FLASH_Erase_Sector>
		HAL_StatusTypeDef status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, data);
 8000e0a:	462a      	mov	r2, r5
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	4621      	mov	r1, r4
 8000e10:	2002      	movs	r0, #2
 8000e12:	f001 f8f1 	bl	8001ff8 <HAL_FLASH_Program>
 8000e16:	4604      	mov	r4, r0
		HAL_FLASH_Lock();
 8000e18:	f001 f8b4 	bl	8001f84 <HAL_FLASH_Lock>
		return status;
 8000e1c:	e7e9      	b.n	8000df2 <BSP_Write_Flash_Word+0x12>
 8000e1e:	bf00      	nop
 8000e20:	0805fffc 	.word	0x0805fffc
 8000e24:	40023c00 	.word	0x40023c00

08000e28 <BSP_Read_Flash_Word>:

	return 0;
}

uint32_t BSP_Read_Flash_Word(uint32_t addr)
{
 8000e28:	b510      	push	{r4, lr}
	addr += FLASH_START_ADDRESS;
 8000e2a:	f100 6400 	add.w	r4, r0, #134217728	@ 0x8000000
 8000e2e:	f504 2480 	add.w	r4, r4, #262144	@ 0x40000

	if (addr <= FLASH_END_ADDRESS - 3)
 8000e32:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <BSP_Read_Flash_Word+0x28>)
 8000e34:	429c      	cmp	r4, r3
 8000e36:	d904      	bls.n	8000e42 <BSP_Read_Flash_Word+0x1a>
		uint32_t data =  *(__IO uint32_t*)addr;
		HAL_FLASH_Unlock();
		return data;
	}

	BSP_Error_Handler();
 8000e38:	f7ff fb50 	bl	80004dc <BSP_Error_Handler>

	return 0;
 8000e3c:	2400      	movs	r4, #0
}
 8000e3e:	4620      	mov	r0, r4
 8000e40:	bd10      	pop	{r4, pc}
		HAL_FLASH_Lock();
 8000e42:	f001 f89f 	bl	8001f84 <HAL_FLASH_Lock>
		uint32_t data =  *(__IO uint32_t*)addr;
 8000e46:	6824      	ldr	r4, [r4, #0]
		HAL_FLASH_Unlock();
 8000e48:	f001 f884 	bl	8001f54 <HAL_FLASH_Unlock>
		return data;
 8000e4c:	e7f7      	b.n	8000e3e <BSP_Read_Flash_Word+0x16>
 8000e4e:	bf00      	nop
 8000e50:	0805fffc 	.word	0x0805fffc

08000e54 <BSP_GPIO_Init>:
/* Includes ------------------------------------------------------------------*/
#include "bsp_gpio.h"
#include "bsp.h"

void BSP_GPIO_Init(__IO GPIO_TypeDef *GPIOx, uint32_t Pin, const GPIO_Config *pinConfig)
{
 8000e54:	b570      	push	{r4, r5, r6, lr}
 8000e56:	b08c      	sub	sp, #48	@ 0x30
 8000e58:	4604      	mov	r4, r0
 8000e5a:	460d      	mov	r5, r1
 8000e5c:	4616      	mov	r6, r2
	GPIOx_CLK_ENABLE(GPIOx);
 8000e5e:	4ba1      	ldr	r3, [pc, #644]	@ (80010e4 <BSP_GPIO_Init+0x290>)
 8000e60:	4298      	cmp	r0, r3
 8000e62:	d030      	beq.n	8000ec6 <BSP_GPIO_Init+0x72>
 8000e64:	4ba0      	ldr	r3, [pc, #640]	@ (80010e8 <BSP_GPIO_Init+0x294>)
 8000e66:	4298      	cmp	r0, r3
 8000e68:	d066      	beq.n	8000f38 <BSP_GPIO_Init+0xe4>
 8000e6a:	4ba0      	ldr	r3, [pc, #640]	@ (80010ec <BSP_GPIO_Init+0x298>)
 8000e6c:	4298      	cmp	r0, r3
 8000e6e:	d070      	beq.n	8000f52 <BSP_GPIO_Init+0xfe>
 8000e70:	4b9f      	ldr	r3, [pc, #636]	@ (80010f0 <BSP_GPIO_Init+0x29c>)
 8000e72:	4298      	cmp	r0, r3
 8000e74:	d07a      	beq.n	8000f6c <BSP_GPIO_Init+0x118>
 8000e76:	4b9f      	ldr	r3, [pc, #636]	@ (80010f4 <BSP_GPIO_Init+0x2a0>)
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f000 8084 	beq.w	8000f86 <BSP_GPIO_Init+0x132>
 8000e7e:	4b9e      	ldr	r3, [pc, #632]	@ (80010f8 <BSP_GPIO_Init+0x2a4>)
 8000e80:	4298      	cmp	r0, r3
 8000e82:	f000 808d 	beq.w	8000fa0 <BSP_GPIO_Init+0x14c>
 8000e86:	4b9d      	ldr	r3, [pc, #628]	@ (80010fc <BSP_GPIO_Init+0x2a8>)
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f000 8096 	beq.w	8000fba <BSP_GPIO_Init+0x166>
 8000e8e:	4b9c      	ldr	r3, [pc, #624]	@ (8001100 <BSP_GPIO_Init+0x2ac>)
 8000e90:	4298      	cmp	r0, r3
 8000e92:	f000 809f 	beq.w	8000fd4 <BSP_GPIO_Init+0x180>
 8000e96:	4b9b      	ldr	r3, [pc, #620]	@ (8001104 <BSP_GPIO_Init+0x2b0>)
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	f000 80a8 	beq.w	8000fee <BSP_GPIO_Init+0x19a>
 8000e9e:	4b9a      	ldr	r3, [pc, #616]	@ (8001108 <BSP_GPIO_Init+0x2b4>)
 8000ea0:	4298      	cmp	r0, r3
 8000ea2:	f000 80b1 	beq.w	8001008 <BSP_GPIO_Init+0x1b4>
 8000ea6:	4b99      	ldr	r3, [pc, #612]	@ (800110c <BSP_GPIO_Init+0x2b8>)
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	d118      	bne.n	8000ede <BSP_GPIO_Init+0x8a>
 8000eac:	2300      	movs	r3, #0
 8000eae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000eb0:	4b97      	ldr	r3, [pc, #604]	@ (8001110 <BSP_GPIO_Init+0x2bc>)
 8000eb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000eb8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ec0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000ec2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000ec4:	e00b      	b.n	8000ede <BSP_GPIO_Init+0x8a>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	9301      	str	r3, [sp, #4]
 8000eca:	4b91      	ldr	r3, [pc, #580]	@ (8001110 <BSP_GPIO_Init+0x2bc>)
 8000ecc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ece:	f042 0201 	orr.w	r2, r2, #1
 8000ed2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	9b01      	ldr	r3, [sp, #4]

	if (pinConfig->modo == ENTRADA_NoPull)
 8000ede:	7833      	ldrb	r3, [r6, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f040 809e 	bne.w	8001022 <BSP_GPIO_Init+0x1ce>
	{
		GPIOx->MODER &= ~(3U << Pin*2U);
 8000ee6:	6822      	ldr	r2, [r4, #0]
 8000ee8:	0069      	lsls	r1, r5, #1
 8000eea:	2303      	movs	r3, #3
 8000eec:	408b      	lsls	r3, r1
 8000eee:	ea22 0203 	bic.w	r2, r2, r3
 8000ef2:	6022      	str	r2, [r4, #0]
		GPIOx->PUPDR &= ~(3U << Pin*2U);
 8000ef4:	68e2      	ldr	r2, [r4, #12]
 8000ef6:	ea22 0303 	bic.w	r3, r2, r3
 8000efa:	60e3      	str	r3, [r4, #12]
	else
	{
		BSP_Error_Handler();
	}

	if (Pin < 8)
 8000efc:	2d07      	cmp	r5, #7
 8000efe:	f200 8135 	bhi.w	800116c <BSP_GPIO_Init+0x318>
	{
		GPIOx->AFR[0] &= ~(1111 << 4U*Pin);
 8000f02:	6a23      	ldr	r3, [r4, #32]
 8000f04:	00a9      	lsls	r1, r5, #2
 8000f06:	f240 4257 	movw	r2, #1111	@ 0x457
 8000f0a:	408a      	lsls	r2, r1
 8000f0c:	ea23 0302 	bic.w	r3, r3, r2
 8000f10:	6223      	str	r3, [r4, #32]
		GPIOx->AFR[0] |= (pinConfig->alternativo << 4U*Pin);
 8000f12:	6a23      	ldr	r3, [r4, #32]
 8000f14:	78b2      	ldrb	r2, [r6, #2]
 8000f16:	408a      	lsls	r2, r1
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	6223      	str	r3, [r4, #32]
	{
		GPIOx->AFR[1] &= ~(1111 << 4U*Pin);
		GPIOx->AFR[1] |= (pinConfig->alternativo << 4U*Pin);
	}

	if (pinConfig->velocidade == BAIXO)
 8000f1c:	7873      	ldrb	r3, [r6, #1]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f040 8132 	bne.w	8001188 <BSP_GPIO_Init+0x334>
	{
		GPIOx->OSPEEDR &= ~(3U << Pin*2U);
 8000f24:	68a3      	ldr	r3, [r4, #8]
 8000f26:	006d      	lsls	r5, r5, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f505 	lsl.w	r5, r2, r5
 8000f2e:	ea23 0305 	bic.w	r3, r3, r5
 8000f32:	60a3      	str	r3, [r4, #8]
	}
	else
	{
		BSP_Error_Handler();
	}
}
 8000f34:	b00c      	add	sp, #48	@ 0x30
 8000f36:	bd70      	pop	{r4, r5, r6, pc}
	GPIOx_CLK_ENABLE(GPIOx);
 8000f38:	2300      	movs	r3, #0
 8000f3a:	9302      	str	r3, [sp, #8]
 8000f3c:	4b74      	ldr	r3, [pc, #464]	@ (8001110 <BSP_GPIO_Init+0x2bc>)
 8000f3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f40:	f042 0202 	orr.w	r2, r2, #2
 8000f44:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	9302      	str	r3, [sp, #8]
 8000f4e:	9b02      	ldr	r3, [sp, #8]
 8000f50:	e7c5      	b.n	8000ede <BSP_GPIO_Init+0x8a>
 8000f52:	2300      	movs	r3, #0
 8000f54:	9303      	str	r3, [sp, #12]
 8000f56:	4b6e      	ldr	r3, [pc, #440]	@ (8001110 <BSP_GPIO_Init+0x2bc>)
 8000f58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f5a:	f042 0204 	orr.w	r2, r2, #4
 8000f5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	9303      	str	r3, [sp, #12]
 8000f68:	9b03      	ldr	r3, [sp, #12]
 8000f6a:	e7b8      	b.n	8000ede <BSP_GPIO_Init+0x8a>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	9304      	str	r3, [sp, #16]
 8000f70:	4b67      	ldr	r3, [pc, #412]	@ (8001110 <BSP_GPIO_Init+0x2bc>)
 8000f72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f74:	f042 0208 	orr.w	r2, r2, #8
 8000f78:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7c:	f003 0308 	and.w	r3, r3, #8
 8000f80:	9304      	str	r3, [sp, #16]
 8000f82:	9b04      	ldr	r3, [sp, #16]
 8000f84:	e7ab      	b.n	8000ede <BSP_GPIO_Init+0x8a>
 8000f86:	2300      	movs	r3, #0
 8000f88:	9305      	str	r3, [sp, #20]
 8000f8a:	4b61      	ldr	r3, [pc, #388]	@ (8001110 <BSP_GPIO_Init+0x2bc>)
 8000f8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f8e:	f042 0210 	orr.w	r2, r2, #16
 8000f92:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0310 	and.w	r3, r3, #16
 8000f9a:	9305      	str	r3, [sp, #20]
 8000f9c:	9b05      	ldr	r3, [sp, #20]
 8000f9e:	e79e      	b.n	8000ede <BSP_GPIO_Init+0x8a>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	9306      	str	r3, [sp, #24]
 8000fa4:	4b5a      	ldr	r3, [pc, #360]	@ (8001110 <BSP_GPIO_Init+0x2bc>)
 8000fa6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fa8:	f042 0220 	orr.w	r2, r2, #32
 8000fac:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb0:	f003 0320 	and.w	r3, r3, #32
 8000fb4:	9306      	str	r3, [sp, #24]
 8000fb6:	9b06      	ldr	r3, [sp, #24]
 8000fb8:	e791      	b.n	8000ede <BSP_GPIO_Init+0x8a>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9307      	str	r3, [sp, #28]
 8000fbe:	4b54      	ldr	r3, [pc, #336]	@ (8001110 <BSP_GPIO_Init+0x2bc>)
 8000fc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fce:	9307      	str	r3, [sp, #28]
 8000fd0:	9b07      	ldr	r3, [sp, #28]
 8000fd2:	e784      	b.n	8000ede <BSP_GPIO_Init+0x8a>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	9308      	str	r3, [sp, #32]
 8000fd8:	4b4d      	ldr	r3, [pc, #308]	@ (8001110 <BSP_GPIO_Init+0x2bc>)
 8000fda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fdc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000fe0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fe8:	9308      	str	r3, [sp, #32]
 8000fea:	9b08      	ldr	r3, [sp, #32]
 8000fec:	e777      	b.n	8000ede <BSP_GPIO_Init+0x8a>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ff2:	4b47      	ldr	r3, [pc, #284]	@ (8001110 <BSP_GPIO_Init+0x2bc>)
 8000ff4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ff6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000ffa:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001002:	9309      	str	r3, [sp, #36]	@ 0x24
 8001004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001006:	e76a      	b.n	8000ede <BSP_GPIO_Init+0x8a>
 8001008:	2300      	movs	r3, #0
 800100a:	930a      	str	r3, [sp, #40]	@ 0x28
 800100c:	4b40      	ldr	r3, [pc, #256]	@ (8001110 <BSP_GPIO_Init+0x2bc>)
 800100e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001010:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001014:	631a      	str	r2, [r3, #48]	@ 0x30
 8001016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800101c:	930a      	str	r3, [sp, #40]	@ 0x28
 800101e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001020:	e75d      	b.n	8000ede <BSP_GPIO_Init+0x8a>
	else if (pinConfig->modo == ENTRADA_PullDown)
 8001022:	3b01      	subs	r3, #1
 8001024:	2b06      	cmp	r3, #6
 8001026:	f200 809e 	bhi.w	8001166 <BSP_GPIO_Init+0x312>
 800102a:	e8df f003 	tbb	[pc, r3]
 800102e:	1504      	.short	0x1504
 8001030:	734f3c26 	.word	0x734f3c26
 8001034:	89          	.byte	0x89
 8001035:	00          	.byte	0x00
		GPIOx->MODER &= ~(3U << Pin*2U);
 8001036:	6822      	ldr	r2, [r4, #0]
 8001038:	0069      	lsls	r1, r5, #1
 800103a:	2303      	movs	r3, #3
 800103c:	408b      	lsls	r3, r1
 800103e:	ea22 0203 	bic.w	r2, r2, r3
 8001042:	6022      	str	r2, [r4, #0]
		GPIOx->PUPDR &= ~(3U << Pin*2U);
 8001044:	68e2      	ldr	r2, [r4, #12]
 8001046:	ea22 0303 	bic.w	r3, r2, r3
 800104a:	60e3      	str	r3, [r4, #12]
		GPIOx->PUPDR |= (2U << Pin*2U);
 800104c:	68e3      	ldr	r3, [r4, #12]
 800104e:	2202      	movs	r2, #2
 8001050:	408a      	lsls	r2, r1
 8001052:	4313      	orrs	r3, r2
 8001054:	60e3      	str	r3, [r4, #12]
 8001056:	e751      	b.n	8000efc <BSP_GPIO_Init+0xa8>
		GPIOx->MODER &= ~(3U << Pin*2U);
 8001058:	6822      	ldr	r2, [r4, #0]
 800105a:	0069      	lsls	r1, r5, #1
 800105c:	2303      	movs	r3, #3
 800105e:	408b      	lsls	r3, r1
 8001060:	ea22 0203 	bic.w	r2, r2, r3
 8001064:	6022      	str	r2, [r4, #0]
		GPIOx->PUPDR &= ~(3U << Pin*2U);
 8001066:	68e2      	ldr	r2, [r4, #12]
 8001068:	ea22 0303 	bic.w	r3, r2, r3
 800106c:	60e3      	str	r3, [r4, #12]
		GPIOx->PUPDR |= (1U << Pin*2U);
 800106e:	68e3      	ldr	r3, [r4, #12]
 8001070:	2201      	movs	r2, #1
 8001072:	408a      	lsls	r2, r1
 8001074:	4313      	orrs	r3, r2
 8001076:	60e3      	str	r3, [r4, #12]
 8001078:	e740      	b.n	8000efc <BSP_GPIO_Init+0xa8>
		GPIOx->MODER &= ~(3U << Pin*2U);
 800107a:	6822      	ldr	r2, [r4, #0]
 800107c:	0069      	lsls	r1, r5, #1
 800107e:	2303      	movs	r3, #3
 8001080:	408b      	lsls	r3, r1
 8001082:	ea22 0203 	bic.w	r2, r2, r3
 8001086:	6022      	str	r2, [r4, #0]
		GPIOx->MODER |= (1U << Pin*2U);
 8001088:	6820      	ldr	r0, [r4, #0]
 800108a:	2201      	movs	r2, #1
 800108c:	fa02 f101 	lsl.w	r1, r2, r1
 8001090:	4301      	orrs	r1, r0
 8001092:	6021      	str	r1, [r4, #0]
		GPIOx->OTYPER |= (1 << Pin);
 8001094:	6861      	ldr	r1, [r4, #4]
 8001096:	40aa      	lsls	r2, r5
 8001098:	430a      	orrs	r2, r1
 800109a:	6062      	str	r2, [r4, #4]
		GPIOx->PUPDR &= ~(3U << Pin*2U);
 800109c:	68e2      	ldr	r2, [r4, #12]
 800109e:	ea22 0303 	bic.w	r3, r2, r3
 80010a2:	60e3      	str	r3, [r4, #12]
 80010a4:	e72a      	b.n	8000efc <BSP_GPIO_Init+0xa8>
		GPIOx->MODER &= ~(3U << Pin*2U);
 80010a6:	6822      	ldr	r2, [r4, #0]
 80010a8:	0068      	lsls	r0, r5, #1
 80010aa:	2303      	movs	r3, #3
 80010ac:	4083      	lsls	r3, r0
 80010ae:	ea22 0203 	bic.w	r2, r2, r3
 80010b2:	6022      	str	r2, [r4, #0]
		GPIOx->MODER |= (1U << Pin*2U);
 80010b4:	6822      	ldr	r2, [r4, #0]
 80010b6:	2101      	movs	r1, #1
 80010b8:	4081      	lsls	r1, r0
 80010ba:	430a      	orrs	r2, r1
 80010bc:	6022      	str	r2, [r4, #0]
		GPIOx->OTYPER &= ~(0 << Pin);
 80010be:	6862      	ldr	r2, [r4, #4]
 80010c0:	6062      	str	r2, [r4, #4]
		GPIOx->PUPDR &= ~(3U << Pin*2U);
 80010c2:	68e2      	ldr	r2, [r4, #12]
 80010c4:	ea22 0303 	bic.w	r3, r2, r3
 80010c8:	60e3      	str	r3, [r4, #12]
 80010ca:	e717      	b.n	8000efc <BSP_GPIO_Init+0xa8>
		GPIOx->MODER |= (3U << Pin*2U);
 80010cc:	6822      	ldr	r2, [r4, #0]
 80010ce:	0069      	lsls	r1, r5, #1
 80010d0:	2303      	movs	r3, #3
 80010d2:	408b      	lsls	r3, r1
 80010d4:	431a      	orrs	r2, r3
 80010d6:	6022      	str	r2, [r4, #0]
		GPIOx->PUPDR &= ~(3U << Pin*2U);
 80010d8:	68e2      	ldr	r2, [r4, #12]
 80010da:	ea22 0303 	bic.w	r3, r2, r3
 80010de:	60e3      	str	r3, [r4, #12]
 80010e0:	e70c      	b.n	8000efc <BSP_GPIO_Init+0xa8>
 80010e2:	bf00      	nop
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40021400 	.word	0x40021400
 80010fc:	40021800 	.word	0x40021800
 8001100:	40021c00 	.word	0x40021c00
 8001104:	40022000 	.word	0x40022000
 8001108:	40022400 	.word	0x40022400
 800110c:	40022800 	.word	0x40022800
 8001110:	40023800 	.word	0x40023800
		GPIOx->MODER &= ~(3U << Pin*2U);
 8001114:	6822      	ldr	r2, [r4, #0]
 8001116:	0068      	lsls	r0, r5, #1
 8001118:	2303      	movs	r3, #3
 800111a:	4083      	lsls	r3, r0
 800111c:	ea22 0203 	bic.w	r2, r2, r3
 8001120:	6022      	str	r2, [r4, #0]
		GPIOx->MODER |= (10 << Pin*2U);
 8001122:	6822      	ldr	r2, [r4, #0]
 8001124:	210a      	movs	r1, #10
 8001126:	4081      	lsls	r1, r0
 8001128:	430a      	orrs	r2, r1
 800112a:	6022      	str	r2, [r4, #0]
		GPIOx->OTYPER |= (1 << Pin);
 800112c:	6862      	ldr	r2, [r4, #4]
 800112e:	2101      	movs	r1, #1
 8001130:	40a9      	lsls	r1, r5
 8001132:	430a      	orrs	r2, r1
 8001134:	6062      	str	r2, [r4, #4]
		GPIOx->PUPDR &= ~(3U << Pin*2U);
 8001136:	68e2      	ldr	r2, [r4, #12]
 8001138:	ea22 0303 	bic.w	r3, r2, r3
 800113c:	60e3      	str	r3, [r4, #12]
 800113e:	e6dd      	b.n	8000efc <BSP_GPIO_Init+0xa8>
		GPIOx->MODER &= ~(3U << Pin*2U);
 8001140:	6822      	ldr	r2, [r4, #0]
 8001142:	0068      	lsls	r0, r5, #1
 8001144:	2303      	movs	r3, #3
 8001146:	4083      	lsls	r3, r0
 8001148:	ea22 0203 	bic.w	r2, r2, r3
 800114c:	6022      	str	r2, [r4, #0]
		GPIOx->MODER |= (10 << Pin*2U);
 800114e:	6822      	ldr	r2, [r4, #0]
 8001150:	210a      	movs	r1, #10
 8001152:	4081      	lsls	r1, r0
 8001154:	430a      	orrs	r2, r1
 8001156:	6022      	str	r2, [r4, #0]
		GPIOx->OTYPER &= ~(0 << Pin);
 8001158:	6862      	ldr	r2, [r4, #4]
 800115a:	6062      	str	r2, [r4, #4]
		GPIOx->PUPDR &= ~(3U << Pin*2U);
 800115c:	68e2      	ldr	r2, [r4, #12]
 800115e:	ea22 0303 	bic.w	r3, r2, r3
 8001162:	60e3      	str	r3, [r4, #12]
 8001164:	e6ca      	b.n	8000efc <BSP_GPIO_Init+0xa8>
		BSP_Error_Handler();
 8001166:	f7ff f9b9 	bl	80004dc <BSP_Error_Handler>
 800116a:	e6c7      	b.n	8000efc <BSP_GPIO_Init+0xa8>
		GPIOx->AFR[1] &= ~(1111 << 4U*Pin);
 800116c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800116e:	00a9      	lsls	r1, r5, #2
 8001170:	f240 4257 	movw	r2, #1111	@ 0x457
 8001174:	408a      	lsls	r2, r1
 8001176:	ea23 0302 	bic.w	r3, r3, r2
 800117a:	6263      	str	r3, [r4, #36]	@ 0x24
		GPIOx->AFR[1] |= (pinConfig->alternativo << 4U*Pin);
 800117c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800117e:	78b2      	ldrb	r2, [r6, #2]
 8001180:	408a      	lsls	r2, r1
 8001182:	4313      	orrs	r3, r2
 8001184:	6263      	str	r3, [r4, #36]	@ 0x24
 8001186:	e6c9      	b.n	8000f1c <BSP_GPIO_Init+0xc8>
	else if (pinConfig->velocidade == MEDIO)
 8001188:	2b01      	cmp	r3, #1
 800118a:	d00a      	beq.n	80011a2 <BSP_GPIO_Init+0x34e>
	else if (pinConfig->velocidade == ALTO)
 800118c:	2b02      	cmp	r3, #2
 800118e:	d015      	beq.n	80011bc <BSP_GPIO_Init+0x368>
	else if (pinConfig->velocidade == MUITO_ALTO)
 8001190:	2b03      	cmp	r3, #3
 8001192:	d120      	bne.n	80011d6 <BSP_GPIO_Init+0x382>
		GPIOx->OSPEEDR |= (3U << Pin*2U);
 8001194:	68a3      	ldr	r3, [r4, #8]
 8001196:	006d      	lsls	r5, r5, #1
 8001198:	2203      	movs	r2, #3
 800119a:	40aa      	lsls	r2, r5
 800119c:	4313      	orrs	r3, r2
 800119e:	60a3      	str	r3, [r4, #8]
 80011a0:	e6c8      	b.n	8000f34 <BSP_GPIO_Init+0xe0>
		GPIOx->OSPEEDR &= ~(3U << Pin*2U);
 80011a2:	68a3      	ldr	r3, [r4, #8]
 80011a4:	006d      	lsls	r5, r5, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	40aa      	lsls	r2, r5
 80011aa:	ea23 0302 	bic.w	r3, r3, r2
 80011ae:	60a3      	str	r3, [r4, #8]
		GPIOx->OSPEEDR |= (1U << Pin*2U);
 80011b0:	68a3      	ldr	r3, [r4, #8]
 80011b2:	2201      	movs	r2, #1
 80011b4:	40aa      	lsls	r2, r5
 80011b6:	4313      	orrs	r3, r2
 80011b8:	60a3      	str	r3, [r4, #8]
 80011ba:	e6bb      	b.n	8000f34 <BSP_GPIO_Init+0xe0>
		GPIOx->OSPEEDR &= ~(3U << Pin*2U);
 80011bc:	68a3      	ldr	r3, [r4, #8]
 80011be:	006d      	lsls	r5, r5, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	40aa      	lsls	r2, r5
 80011c4:	ea23 0302 	bic.w	r3, r3, r2
 80011c8:	60a3      	str	r3, [r4, #8]
		GPIOx->OSPEEDR |= (2U << Pin*2U);
 80011ca:	68a3      	ldr	r3, [r4, #8]
 80011cc:	2202      	movs	r2, #2
 80011ce:	40aa      	lsls	r2, r5
 80011d0:	4313      	orrs	r3, r2
 80011d2:	60a3      	str	r3, [r4, #8]
 80011d4:	e6ae      	b.n	8000f34 <BSP_GPIO_Init+0xe0>
		BSP_Error_Handler();
 80011d6:	f7ff f981 	bl	80004dc <BSP_Error_Handler>
}
 80011da:	e6ab      	b.n	8000f34 <BSP_GPIO_Init+0xe0>

080011dc <BSP_GPIO_SetPin>:
	}
}

void BSP_GPIO_SetPin(__IO GPIO_TypeDef *GPIOx, uint32_t Pin)
{
	GPIOx->ODR |= (1 << Pin);
 80011dc:	6943      	ldr	r3, [r0, #20]
 80011de:	2201      	movs	r2, #1
 80011e0:	408a      	lsls	r2, r1
 80011e2:	4313      	orrs	r3, r2
 80011e4:	6143      	str	r3, [r0, #20]
}
 80011e6:	4770      	bx	lr

080011e8 <BSP_GPIO_ResetPin>:

void BSP_GPIO_ResetPin(__IO GPIO_TypeDef *GPIOx, uint32_t Pin)
{
	GPIOx->ODR &= ~(1 << Pin);
 80011e8:	6943      	ldr	r3, [r0, #20]
 80011ea:	2201      	movs	r2, #1
 80011ec:	408a      	lsls	r2, r1
 80011ee:	ea23 0302 	bic.w	r3, r3, r2
 80011f2:	6143      	str	r3, [r0, #20]
}
 80011f4:	4770      	bx	lr

080011f6 <BSP_GPIO_ReadPin>:
	}
}

bool BSP_GPIO_ReadPin(__IO GPIO_TypeDef *GPIOx, uint32_t Pin)
{
	return (GPIOx->IDR & (1 << Pin));
 80011f6:	6902      	ldr	r2, [r0, #16]
 80011f8:	2301      	movs	r3, #1
 80011fa:	408b      	lsls	r3, r1
 80011fc:	421a      	tst	r2, r3
}
 80011fe:	bf14      	ite	ne
 8001200:	2001      	movne	r0, #1
 8001202:	2000      	moveq	r0, #0
 8001204:	4770      	bx	lr

08001206 <BSP_GPIO_ReadOutputPin>:
	return GPIOx->IDR;
}

bool BSP_GPIO_ReadOutputPin(__IO GPIO_TypeDef *GPIOx, uint32_t Pin)
{
	return (GPIOx->ODR & (1 << Pin));
 8001206:	6942      	ldr	r2, [r0, #20]
 8001208:	2301      	movs	r3, #1
 800120a:	408b      	lsls	r3, r1
 800120c:	421a      	tst	r2, r3
}
 800120e:	bf14      	ite	ne
 8001210:	2001      	movne	r0, #1
 8001212:	2000      	moveq	r0, #0
 8001214:	4770      	bx	lr
	...

08001218 <BSP_TIM_Init>:
#ifdef TIM14_Interrupt
static volatile void (*interruption_TIM14)(void) = NULL;
#endif

void BSP_TIM_Init(uint8_t timer, const TIM_Config *timConfig)
{
 8001218:	b510      	push	{r4, lr}
 800121a:	b08e      	sub	sp, #56	@ 0x38
 800121c:	460c      	mov	r4, r1
	TIMx_CLK_ENABLE(timConfig->TIMx);
 800121e:	680b      	ldr	r3, [r1, #0]
 8001220:	4a99      	ldr	r2, [pc, #612]	@ (8001488 <BSP_TIM_Init+0x270>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d03f      	beq.n	80012a6 <BSP_TIM_Init+0x8e>
 8001226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800122a:	f000 809e 	beq.w	800136a <BSP_TIM_Init+0x152>
 800122e:	4a97      	ldr	r2, [pc, #604]	@ (800148c <BSP_TIM_Init+0x274>)
 8001230:	4293      	cmp	r3, r2
 8001232:	f000 80a7 	beq.w	8001384 <BSP_TIM_Init+0x16c>
 8001236:	4a96      	ldr	r2, [pc, #600]	@ (8001490 <BSP_TIM_Init+0x278>)
 8001238:	4293      	cmp	r3, r2
 800123a:	f000 80b0 	beq.w	800139e <BSP_TIM_Init+0x186>
 800123e:	4a95      	ldr	r2, [pc, #596]	@ (8001494 <BSP_TIM_Init+0x27c>)
 8001240:	4293      	cmp	r3, r2
 8001242:	f000 80b9 	beq.w	80013b8 <BSP_TIM_Init+0x1a0>
 8001246:	4a94      	ldr	r2, [pc, #592]	@ (8001498 <BSP_TIM_Init+0x280>)
 8001248:	4293      	cmp	r3, r2
 800124a:	f000 80c2 	beq.w	80013d2 <BSP_TIM_Init+0x1ba>
 800124e:	4a93      	ldr	r2, [pc, #588]	@ (800149c <BSP_TIM_Init+0x284>)
 8001250:	4293      	cmp	r3, r2
 8001252:	f000 80cb 	beq.w	80013ec <BSP_TIM_Init+0x1d4>
 8001256:	4a92      	ldr	r2, [pc, #584]	@ (80014a0 <BSP_TIM_Init+0x288>)
 8001258:	4293      	cmp	r3, r2
 800125a:	f000 80d4 	beq.w	8001406 <BSP_TIM_Init+0x1ee>
 800125e:	4a91      	ldr	r2, [pc, #580]	@ (80014a4 <BSP_TIM_Init+0x28c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	f000 80dd 	beq.w	8001420 <BSP_TIM_Init+0x208>
 8001266:	4a90      	ldr	r2, [pc, #576]	@ (80014a8 <BSP_TIM_Init+0x290>)
 8001268:	4293      	cmp	r3, r2
 800126a:	f000 80e6 	beq.w	800143a <BSP_TIM_Init+0x222>
 800126e:	4a8f      	ldr	r2, [pc, #572]	@ (80014ac <BSP_TIM_Init+0x294>)
 8001270:	4293      	cmp	r3, r2
 8001272:	f000 80ef 	beq.w	8001454 <BSP_TIM_Init+0x23c>
 8001276:	4a8e      	ldr	r2, [pc, #568]	@ (80014b0 <BSP_TIM_Init+0x298>)
 8001278:	4293      	cmp	r3, r2
 800127a:	f000 80f8 	beq.w	800146e <BSP_TIM_Init+0x256>
 800127e:	4a8d      	ldr	r2, [pc, #564]	@ (80014b4 <BSP_TIM_Init+0x29c>)
 8001280:	4293      	cmp	r3, r2
 8001282:	f000 811f 	beq.w	80014c4 <BSP_TIM_Init+0x2ac>
 8001286:	4a8c      	ldr	r2, [pc, #560]	@ (80014b8 <BSP_TIM_Init+0x2a0>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d118      	bne.n	80012be <BSP_TIM_Init+0xa6>
 800128c:	2300      	movs	r3, #0
 800128e:	930d      	str	r3, [sp, #52]	@ 0x34
 8001290:	4b8a      	ldr	r3, [pc, #552]	@ (80014bc <BSP_TIM_Init+0x2a4>)
 8001292:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001294:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001298:	641a      	str	r2, [r3, #64]	@ 0x40
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a0:	930d      	str	r3, [sp, #52]	@ 0x34
 80012a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80012a4:	e00b      	b.n	80012be <BSP_TIM_Init+0xa6>
 80012a6:	2300      	movs	r3, #0
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	4b84      	ldr	r3, [pc, #528]	@ (80014bc <BSP_TIM_Init+0x2a4>)
 80012ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012ae:	f042 0201 	orr.w	r2, r2, #1
 80012b2:	645a      	str	r2, [r3, #68]	@ 0x44
 80012b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	9b00      	ldr	r3, [sp, #0]

#ifdef DEBUG
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM2_STOP | DBGMCU_APB1_FZ_DBG_TIM3_STOP | DBGMCU_APB1_FZ_DBG_TIM4_STOP | DBGMCU_APB1_FZ_DBG_TIM5_STOP | DBGMCU_APB1_FZ_DBG_TIM6_STOP
 80012be:	4a80      	ldr	r2, [pc, #512]	@ (80014c0 <BSP_TIM_Init+0x2a8>)
 80012c0:	6893      	ldr	r3, [r2, #8]
 80012c2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80012c6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 80012ca:	6093      	str	r3, [r2, #8]
					| DBGMCU_APB1_FZ_DBG_TIM7_STOP | DBGMCU_APB1_FZ_DBG_TIM12_STOP | DBGMCU_APB1_FZ_DBG_TIM13_STOP | DBGMCU_APB1_FZ_DBG_TIM14_STOP;

	DBGMCU->APB2FZ |= DBGMCU_APB2_FZ_DBG_TIM1_STOP | DBGMCU_APB2_FZ_DBG_TIM8_STOP | DBGMCU_APB2_FZ_DBG_TIM9_STOP | DBGMCU_APB2_FZ_DBG_TIM10_STOP | DBGMCU_APB2_FZ_DBG_TIM11_STOP;
 80012cc:	68d3      	ldr	r3, [r2, #12]
 80012ce:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80012d2:	f043 0303 	orr.w	r3, r3, #3
 80012d6:	60d3      	str	r3, [r2, #12]
#endif

	timConfig->TIMx->PSC = timConfig->Prescaler;
 80012d8:	6823      	ldr	r3, [r4, #0]
 80012da:	88e2      	ldrh	r2, [r4, #6]
 80012dc:	629a      	str	r2, [r3, #40]	@ 0x28
	timConfig->TIMx->ARR = timConfig->Counter;
 80012de:	6823      	ldr	r3, [r4, #0]
 80012e0:	8922      	ldrh	r2, [r4, #8]
 80012e2:	62da      	str	r2, [r3, #44]	@ 0x2c

	timConfig->TIMx->CR1 |= ((uint8_t) timConfig->ClkDiv << TIM_CR1_CKD_Pos)
 80012e4:	6821      	ldr	r1, [r4, #0]
 80012e6:	680a      	ldr	r2, [r1, #0]
 80012e8:	f894 c004 	ldrb.w	ip, [r4, #4]
							| (timConfig->preload << TIM_CR1_ARPE_Pos)
 80012ec:	7ae3      	ldrb	r3, [r4, #11]
 80012ee:	01db      	lsls	r3, r3, #7
 80012f0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
							| (timConfig->DownCounter << TIM_CR1_DIR_Pos)
 80012f4:	f894 c00a 	ldrb.w	ip, [r4, #10]
 80012f8:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
							| (timConfig->onePulseMode << TIM_CR1_OPM_Pos)
 80012fc:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8001300:	ea43 03cc 	orr.w	r3, r3, ip, lsl #3
							| (timConfig->UpRequest << TIM_CR1_URS_Pos)
 8001304:	f894 c00d 	ldrb.w	ip, [r4, #13]
 8001308:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
							| (timConfig->UpDisable << TIM_CR1_UDIS_Pos);
 800130c:	f894 c00e 	ldrb.w	ip, [r4, #14]
 8001310:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
	timConfig->TIMx->CR1 |= ((uint8_t) timConfig->ClkDiv << TIM_CR1_CKD_Pos)
 8001314:	4313      	orrs	r3, r2
 8001316:	600b      	str	r3, [r1, #0]

	if (timConfig->triggerGeneration)
 8001318:	7be3      	ldrb	r3, [r4, #15]
 800131a:	b14b      	cbz	r3, 8001330 <BSP_TIM_Init+0x118>
	{
		timConfig->TIMx->CR2 |= TIM_CR2_MMS_1;
 800131c:	6822      	ldr	r2, [r4, #0]
 800131e:	6853      	ldr	r3, [r2, #4]
 8001320:	f043 0320 	orr.w	r3, r3, #32
 8001324:	6053      	str	r3, [r2, #4]
		timConfig->TIMx->EGR |= TIM_EGR_TG | TIM_EGR_UG;
 8001326:	6822      	ldr	r2, [r4, #0]
 8001328:	6953      	ldr	r3, [r2, #20]
 800132a:	f043 0341 	orr.w	r3, r3, #65	@ 0x41
 800132e:	6153      	str	r3, [r2, #20]
	}

	if (timConfig->interrupcaoEnable)
 8001330:	7c23      	ldrb	r3, [r4, #16]
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 80e1 	beq.w	80014fa <BSP_TIM_Init+0x2e2>
	{
		timConfig->TIMx->DIER |= TIM_DIER_UIE;
 8001338:	6822      	ldr	r2, [r4, #0]
 800133a:	68d3      	ldr	r3, [r2, #12]
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	60d3      	str	r3, [r2, #12]

		switch (timer)
 8001342:	3801      	subs	r0, #1
 8001344:	280d      	cmp	r0, #13
 8001346:	f200 8139 	bhi.w	80015bc <BSP_TIM_Init+0x3a4>
 800134a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800134e:	00c8      	.short	0x00c8
 8001350:	00dd00d2 	.word	0x00dd00d2
 8001354:	00e700e2 	.word	0x00e700e2
 8001358:	00f100ec 	.word	0x00f100ec
 800135c:	010000f6 	.word	0x010000f6
 8001360:	0114010a 	.word	0x0114010a
 8001364:	0123011e 	.word	0x0123011e
 8001368:	012d      	.short	0x012d
	TIMx_CLK_ENABLE(timConfig->TIMx);
 800136a:	2300      	movs	r3, #0
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	4b53      	ldr	r3, [pc, #332]	@ (80014bc <BSP_TIM_Init+0x2a4>)
 8001370:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001372:	f042 0201 	orr.w	r2, r2, #1
 8001376:	641a      	str	r2, [r3, #64]	@ 0x40
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	9b01      	ldr	r3, [sp, #4]
 8001382:	e79c      	b.n	80012be <BSP_TIM_Init+0xa6>
 8001384:	2300      	movs	r3, #0
 8001386:	9302      	str	r3, [sp, #8]
 8001388:	4b4c      	ldr	r3, [pc, #304]	@ (80014bc <BSP_TIM_Init+0x2a4>)
 800138a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800138c:	f042 0202 	orr.w	r2, r2, #2
 8001390:	641a      	str	r2, [r3, #64]	@ 0x40
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	9b02      	ldr	r3, [sp, #8]
 800139c:	e78f      	b.n	80012be <BSP_TIM_Init+0xa6>
 800139e:	2300      	movs	r3, #0
 80013a0:	9303      	str	r3, [sp, #12]
 80013a2:	4b46      	ldr	r3, [pc, #280]	@ (80014bc <BSP_TIM_Init+0x2a4>)
 80013a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013a6:	f042 0204 	orr.w	r2, r2, #4
 80013aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	9303      	str	r3, [sp, #12]
 80013b4:	9b03      	ldr	r3, [sp, #12]
 80013b6:	e782      	b.n	80012be <BSP_TIM_Init+0xa6>
 80013b8:	2300      	movs	r3, #0
 80013ba:	9304      	str	r3, [sp, #16]
 80013bc:	4b3f      	ldr	r3, [pc, #252]	@ (80014bc <BSP_TIM_Init+0x2a4>)
 80013be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013c0:	f042 0208 	orr.w	r2, r2, #8
 80013c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80013c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	9304      	str	r3, [sp, #16]
 80013ce:	9b04      	ldr	r3, [sp, #16]
 80013d0:	e775      	b.n	80012be <BSP_TIM_Init+0xa6>
 80013d2:	2300      	movs	r3, #0
 80013d4:	9305      	str	r3, [sp, #20]
 80013d6:	4b39      	ldr	r3, [pc, #228]	@ (80014bc <BSP_TIM_Init+0x2a4>)
 80013d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013da:	f042 0210 	orr.w	r2, r2, #16
 80013de:	641a      	str	r2, [r3, #64]	@ 0x40
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	9305      	str	r3, [sp, #20]
 80013e8:	9b05      	ldr	r3, [sp, #20]
 80013ea:	e768      	b.n	80012be <BSP_TIM_Init+0xa6>
 80013ec:	2300      	movs	r3, #0
 80013ee:	9306      	str	r3, [sp, #24]
 80013f0:	4b32      	ldr	r3, [pc, #200]	@ (80014bc <BSP_TIM_Init+0x2a4>)
 80013f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013f4:	f042 0220 	orr.w	r2, r2, #32
 80013f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80013fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fc:	f003 0320 	and.w	r3, r3, #32
 8001400:	9306      	str	r3, [sp, #24]
 8001402:	9b06      	ldr	r3, [sp, #24]
 8001404:	e75b      	b.n	80012be <BSP_TIM_Init+0xa6>
 8001406:	2300      	movs	r3, #0
 8001408:	9307      	str	r3, [sp, #28]
 800140a:	4b2c      	ldr	r3, [pc, #176]	@ (80014bc <BSP_TIM_Init+0x2a4>)
 800140c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800140e:	f042 0202 	orr.w	r2, r2, #2
 8001412:	645a      	str	r2, [r3, #68]	@ 0x44
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	9307      	str	r3, [sp, #28]
 800141c:	9b07      	ldr	r3, [sp, #28]
 800141e:	e74e      	b.n	80012be <BSP_TIM_Init+0xa6>
 8001420:	2300      	movs	r3, #0
 8001422:	9308      	str	r3, [sp, #32]
 8001424:	4b25      	ldr	r3, [pc, #148]	@ (80014bc <BSP_TIM_Init+0x2a4>)
 8001426:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001428:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800142c:	645a      	str	r2, [r3, #68]	@ 0x44
 800142e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001434:	9308      	str	r3, [sp, #32]
 8001436:	9b08      	ldr	r3, [sp, #32]
 8001438:	e741      	b.n	80012be <BSP_TIM_Init+0xa6>
 800143a:	2300      	movs	r3, #0
 800143c:	9309      	str	r3, [sp, #36]	@ 0x24
 800143e:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <BSP_TIM_Init+0x2a4>)
 8001440:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001442:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001446:	645a      	str	r2, [r3, #68]	@ 0x44
 8001448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001452:	e734      	b.n	80012be <BSP_TIM_Init+0xa6>
 8001454:	2300      	movs	r3, #0
 8001456:	930a      	str	r3, [sp, #40]	@ 0x28
 8001458:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <BSP_TIM_Init+0x2a4>)
 800145a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800145c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001460:	645a      	str	r2, [r3, #68]	@ 0x44
 8001462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001464:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001468:	930a      	str	r3, [sp, #40]	@ 0x28
 800146a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800146c:	e727      	b.n	80012be <BSP_TIM_Init+0xa6>
 800146e:	2300      	movs	r3, #0
 8001470:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001472:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <BSP_TIM_Init+0x2a4>)
 8001474:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001476:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800147a:	641a      	str	r2, [r3, #64]	@ 0x40
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001482:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001484:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001486:	e71a      	b.n	80012be <BSP_TIM_Init+0xa6>
 8001488:	40010000 	.word	0x40010000
 800148c:	40000400 	.word	0x40000400
 8001490:	40000800 	.word	0x40000800
 8001494:	40000c00 	.word	0x40000c00
 8001498:	40001000 	.word	0x40001000
 800149c:	40001400 	.word	0x40001400
 80014a0:	40010400 	.word	0x40010400
 80014a4:	40014000 	.word	0x40014000
 80014a8:	40014400 	.word	0x40014400
 80014ac:	40014800 	.word	0x40014800
 80014b0:	40001800 	.word	0x40001800
 80014b4:	40001c00 	.word	0x40001c00
 80014b8:	40002000 	.word	0x40002000
 80014bc:	40023800 	.word	0x40023800
 80014c0:	e0042000 	.word	0xe0042000
 80014c4:	2300      	movs	r3, #0
 80014c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80014c8:	4b3e      	ldr	r3, [pc, #248]	@ (80015c4 <BSP_TIM_Init+0x3ac>)
 80014ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80014d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80014da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80014dc:	e6ef      	b.n	80012be <BSP_TIM_Init+0xa6>
 */
__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80014de:	4b3a      	ldr	r3, [pc, #232]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
		{
			case 1:
#ifdef TIM1_Interrupt
				interruption_TIM1 = timConfig->FuncaoInterrupcao;
#endif
				if(!NVIC_GetEnableIRQ(TIM1_BRK_TIM9_IRQn))
 80014e2:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80014e6:	d108      	bne.n	80014fa <BSP_TIM_Init+0x2e2>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e8:	4b37      	ldr	r3, [pc, #220]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 80014ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80014ee:	601a      	str	r2, [r3, #0]
}
 80014f0:	e003      	b.n	80014fa <BSP_TIM_Init+0x2e2>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f2:	4b35      	ldr	r3, [pc, #212]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 80014f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014f8:	601a      	str	r2, [r3, #0]
				BSP_Error_Handler();
				break;
		}
	}

	timConfig->TIMx->CR1 |= TIM_CR1_CEN;
 80014fa:	6822      	ldr	r2, [r4, #0]
 80014fc:	6813      	ldr	r3, [r2, #0]
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	b00e      	add	sp, #56	@ 0x38
 8001506:	bd10      	pop	{r4, pc}
 8001508:	4b2f      	ldr	r3, [pc, #188]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 800150a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800150e:	601a      	str	r2, [r3, #0]
}
 8001510:	e7f3      	b.n	80014fa <BSP_TIM_Init+0x2e2>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001512:	4b2d      	ldr	r3, [pc, #180]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 8001514:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001518:	601a      	str	r2, [r3, #0]
}
 800151a:	e7ee      	b.n	80014fa <BSP_TIM_Init+0x2e2>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151c:	4b2a      	ldr	r3, [pc, #168]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 800151e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001522:	605a      	str	r2, [r3, #4]
}
 8001524:	e7e9      	b.n	80014fa <BSP_TIM_Init+0x2e2>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	4b28      	ldr	r3, [pc, #160]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 8001528:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800152c:	605a      	str	r2, [r3, #4]
}
 800152e:	e7e4      	b.n	80014fa <BSP_TIM_Init+0x2e2>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001530:	4b25      	ldr	r3, [pc, #148]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 8001532:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001536:	605a      	str	r2, [r3, #4]
}
 8001538:	e7df      	b.n	80014fa <BSP_TIM_Init+0x2e2>
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800153a:	4b23      	ldr	r3, [pc, #140]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 800153c:	685b      	ldr	r3, [r3, #4]
				if(!NVIC_GetEnableIRQ(TIM8_BRK_TIM12_IRQn))
 800153e:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8001542:	d1da      	bne.n	80014fa <BSP_TIM_Init+0x2e2>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001544:	4b20      	ldr	r3, [pc, #128]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 8001546:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800154a:	605a      	str	r2, [r3, #4]
}
 800154c:	e7d5      	b.n	80014fa <BSP_TIM_Init+0x2e2>
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800154e:	4b1e      	ldr	r3, [pc, #120]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 8001550:	681b      	ldr	r3, [r3, #0]
				if(!NVIC_GetEnableIRQ(TIM1_BRK_TIM9_IRQn))
 8001552:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001556:	d1d0      	bne.n	80014fa <BSP_TIM_Init+0x2e2>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001558:	4b1b      	ldr	r3, [pc, #108]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 800155a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800155e:	601a      	str	r2, [r3, #0]
}
 8001560:	e7cb      	b.n	80014fa <BSP_TIM_Init+0x2e2>
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8001562:	4b19      	ldr	r3, [pc, #100]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 8001564:	681b      	ldr	r3, [r3, #0]
				if(!NVIC_GetEnableIRQ(TIM1_UP_TIM10_IRQn))
 8001566:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800156a:	d1c6      	bne.n	80014fa <BSP_TIM_Init+0x2e2>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156c:	4b16      	ldr	r3, [pc, #88]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 800156e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001572:	601a      	str	r2, [r3, #0]
}
 8001574:	e7c1      	b.n	80014fa <BSP_TIM_Init+0x2e2>
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8001576:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 8001578:	681b      	ldr	r3, [r3, #0]
				if(!NVIC_GetEnableIRQ(TIM1_TRG_COM_TIM11_IRQn))
 800157a:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 800157e:	d1bc      	bne.n	80014fa <BSP_TIM_Init+0x2e2>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001580:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 8001582:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001586:	601a      	str	r2, [r3, #0]
}
 8001588:	e7b7      	b.n	80014fa <BSP_TIM_Init+0x2e2>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158a:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 800158c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001590:	605a      	str	r2, [r3, #4]
}
 8001592:	e7b2      	b.n	80014fa <BSP_TIM_Init+0x2e2>
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 8001596:	685b      	ldr	r3, [r3, #4]
				if(!NVIC_GetEnableIRQ(TIM8_UP_TIM13_IRQn))
 8001598:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800159c:	d1ad      	bne.n	80014fa <BSP_TIM_Init+0x2e2>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159e:	4b0a      	ldr	r3, [pc, #40]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 80015a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015a4:	605a      	str	r2, [r3, #4]
}
 80015a6:	e7a8      	b.n	80014fa <BSP_TIM_Init+0x2e2>
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80015a8:	4b07      	ldr	r3, [pc, #28]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 80015aa:	685b      	ldr	r3, [r3, #4]
				if(!NVIC_GetEnableIRQ(TIM8_TRG_COM_TIM14_IRQn))
 80015ac:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80015b0:	d1a3      	bne.n	80014fa <BSP_TIM_Init+0x2e2>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <BSP_TIM_Init+0x3b0>)
 80015b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015b8:	605a      	str	r2, [r3, #4]
}
 80015ba:	e79e      	b.n	80014fa <BSP_TIM_Init+0x2e2>
				BSP_Error_Handler();
 80015bc:	f7fe ff8e 	bl	80004dc <BSP_Error_Handler>
				break;
 80015c0:	e79b      	b.n	80014fa <BSP_TIM_Init+0x2e2>
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800
 80015c8:	e000e100 	.word	0xe000e100

080015cc <Home>:
  		}
  	}
}

static void Home(void)
{
 80015cc:	b510      	push	{r4, lr}
	uint32_t timeout = 0;
 80015ce:	2400      	movs	r4, #0

	while(!BSP_GPIO_ReadPin(FIM_CURSO_2_Port, FIM_CURSO_2_Pin) && timeout < TIMEOUT_MAX)
 80015d0:	2107      	movs	r1, #7
 80015d2:	4808      	ldr	r0, [pc, #32]	@ (80015f4 <Home+0x28>)
 80015d4:	f7ff fe0f 	bl	80011f6 <BSP_GPIO_ReadPin>
 80015d8:	b938      	cbnz	r0, 80015ea <Home+0x1e>
 80015da:	4b07      	ldr	r3, [pc, #28]	@ (80015f8 <Home+0x2c>)
 80015dc:	429c      	cmp	r4, r3
 80015de:	d804      	bhi.n	80015ea <Home+0x1e>
	{
		Motor_Transversal_Ctrl(ANTI_HORARIO);
 80015e0:	2001      	movs	r0, #1
 80015e2:	f000 fa25 	bl	8001a30 <Motor_Transversal_Ctrl>
		timeout++;
 80015e6:	3401      	adds	r4, #1
 80015e8:	e7f2      	b.n	80015d0 <Home+0x4>
	}

	Motor_Transversal_Ctrl(PARADO);
 80015ea:	2003      	movs	r0, #3
 80015ec:	f000 fa20 	bl	8001a30 <Motor_Transversal_Ctrl>
}
 80015f0:	bd10      	pop	{r4, pc}
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000
 80015f8:	017d783f 	.word	0x017d783f

080015fc <SystemClock_Config>:
#endif
}

/* Configura o CPU para 90MHz usando o HSE pelo PLL */
void SystemClock_Config(void)
{
 80015fc:	b530      	push	{r4, r5, lr}
 80015fe:	b097      	sub	sp, #92	@ 0x5c
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001600:	2400      	movs	r4, #0
 8001602:	9401      	str	r4, [sp, #4]
 8001604:	4d2f      	ldr	r5, [pc, #188]	@ (80016c4 <SystemClock_Config+0xc8>)
 8001606:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800160c:	632b      	str	r3, [r5, #48]	@ 0x30
 800160e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001618:	9402      	str	r4, [sp, #8]
 800161a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	632b      	str	r3, [r5, #48]	@ 0x30
 8001622:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	9b02      	ldr	r3, [sp, #8]

	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162c:	2230      	movs	r2, #48	@ 0x30
 800162e:	4621      	mov	r1, r4
 8001630:	a80a      	add	r0, sp, #40	@ 0x28
 8001632:	f001 f849 	bl	80026c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001636:	9405      	str	r4, [sp, #20]
 8001638:	9406      	str	r4, [sp, #24]
 800163a:	9407      	str	r4, [sp, #28]
 800163c:	9408      	str	r4, [sp, #32]
 800163e:	9409      	str	r4, [sp, #36]	@ 0x24

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001640:	9403      	str	r4, [sp, #12]
 8001642:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001648:	642b      	str	r3, [r5, #64]	@ 0x40
 800164a:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 800164c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001650:	9303      	str	r3, [sp, #12]
 8001652:	9b03      	ldr	r3, [sp, #12]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001654:	9404      	str	r4, [sp, #16]
 8001656:	4a1c      	ldr	r2, [pc, #112]	@ (80016c8 <SystemClock_Config+0xcc>)
 8001658:	6813      	ldr	r3, [r2, #0]
 800165a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800165e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	6813      	ldr	r3, [r2, #0]
 8001666:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800166a:	9304      	str	r3, [sp, #16]
 800166c:	9b04      	ldr	r3, [sp, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800166e:	2301      	movs	r3, #1
 8001670:	930a      	str	r3, [sp, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001672:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001676:	930b      	str	r3, [sp, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001678:	2302      	movs	r3, #2
 800167a:	9310      	str	r3, [sp, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800167c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001680:	9211      	str	r2, [sp, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLM = 15;
 8001682:	220f      	movs	r2, #15
 8001684:	9212      	str	r2, [sp, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLN = 108;
 8001686:	226c      	movs	r2, #108	@ 0x6c
 8001688:	9213      	str	r2, [sp, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800168a:	9314      	str	r3, [sp, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800168c:	2304      	movs	r3, #4
 800168e:	9315      	str	r3, [sp, #84]	@ 0x54

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001690:	a80a      	add	r0, sp, #40	@ 0x28
 8001692:	f000 fd19 	bl	80020c8 <HAL_RCC_OscConfig>
 8001696:	b978      	cbnz	r0, 80016b8 <SystemClock_Config+0xbc>
		BSP_Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001698:	230f      	movs	r3, #15
 800169a:	9305      	str	r3, [sp, #20]
	                             |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800169c:	2102      	movs	r1, #2
 800169e:	9106      	str	r1, [sp, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a0:	2300      	movs	r3, #0
 80016a2:	9307      	str	r3, [sp, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016a8:	9208      	str	r2, [sp, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016aa:	9309      	str	r3, [sp, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016ac:	a805      	add	r0, sp, #20
 80016ae:	f000 ff5b 	bl	8002568 <HAL_RCC_ClockConfig>
 80016b2:	b920      	cbnz	r0, 80016be <SystemClock_Config+0xc2>
	{
		BSP_Error_Handler();
	}
}
 80016b4:	b017      	add	sp, #92	@ 0x5c
 80016b6:	bd30      	pop	{r4, r5, pc}
		BSP_Error_Handler();
 80016b8:	f7fe ff10 	bl	80004dc <BSP_Error_Handler>
 80016bc:	e7ec      	b.n	8001698 <SystemClock_Config+0x9c>
		BSP_Error_Handler();
 80016be:	f7fe ff0d 	bl	80004dc <BSP_Error_Handler>
}
 80016c2:	e7f7      	b.n	80016b4 <SystemClock_Config+0xb8>
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40007000 	.word	0x40007000

080016cc <Program_Init>:
{
 80016cc:	b510      	push	{r4, lr}
 80016ce:	b082      	sub	sp, #8
	Motor_Bobina_Init();
 80016d0:	f000 f8ec 	bl	80018ac <Motor_Bobina_Init>
	Motor_Transversal_Init();
 80016d4:	f000 f98e 	bl	80019f4 <Motor_Transversal_Init>
	OPTO_Init();
 80016d8:	f000 fa4a 	bl	8001b70 <OPTO_Init>
	GPIO_Config pinConfig = {0};
 80016dc:	2300      	movs	r3, #0
 80016de:	f8ad 3004 	strh.w	r3, [sp, #4]
 80016e2:	f88d 3006 	strb.w	r3, [sp, #6]
  	BSP_GPIO_Init(FIM_CURSO_1_Port, FIM_CURSO_1_Pin, &pinConfig);
 80016e6:	aa01      	add	r2, sp, #4
 80016e8:	2103      	movs	r1, #3
 80016ea:	480b      	ldr	r0, [pc, #44]	@ (8001718 <Program_Init+0x4c>)
 80016ec:	f7ff fbb2 	bl	8000e54 <BSP_GPIO_Init>
  	BSP_GPIO_Init(FIM_CURSO_2_Port, FIM_CURSO_2_Pin, &pinConfig);
 80016f0:	4c0a      	ldr	r4, [pc, #40]	@ (800171c <Program_Init+0x50>)
 80016f2:	aa01      	add	r2, sp, #4
 80016f4:	2107      	movs	r1, #7
 80016f6:	4620      	mov	r0, r4
 80016f8:	f7ff fbac 	bl	8000e54 <BSP_GPIO_Init>
  	BSP_GPIO_SetPin(ENAOUT03_Port, ENAOUT03_Pin); /* Habilitas as saídas digitais 0 -> 3 */
 80016fc:	210a      	movs	r1, #10
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff fd6c 	bl	80011dc <BSP_GPIO_SetPin>
  	BSP_GPIO_SetPin(ENAOUT04_Port, ENAOUT04_Pin); /* Habilitas as saídas digitais 4 -> 7 */
 8001704:	210c      	movs	r1, #12
 8001706:	4620      	mov	r0, r4
 8001708:	f7ff fd68 	bl	80011dc <BSP_GPIO_SetPin>
  	BSP_GPIO_ResetPin(LED2_Port, LED2_Pin);
 800170c:	210f      	movs	r1, #15
 800170e:	4804      	ldr	r0, [pc, #16]	@ (8001720 <Program_Init+0x54>)
 8001710:	f7ff fd6a 	bl	80011e8 <BSP_GPIO_ResetPin>
}
 8001714:	b002      	add	sp, #8
 8001716:	bd10      	pop	{r4, pc}
 8001718:	40020400 	.word	0x40020400
 800171c:	40021000 	.word	0x40021000
 8001720:	40021400 	.word	0x40021400

08001724 <main>:
{
 8001724:	b570      	push	{r4, r5, r6, lr}
	HAL_Init();
 8001726:	f000 fadf 	bl	8001ce8 <HAL_Init>
	SystemClock_Config();
 800172a:	f7ff ff67 	bl	80015fc <SystemClock_Config>
	BSP_Init();
 800172e:	f7fe fedf 	bl	80004f0 <BSP_Init>
	Program_Init();
 8001732:	f7ff ffcb 	bl	80016cc <Program_Init>
	Home();
 8001736:	f7ff ff49 	bl	80015cc <Home>
	DIR_BOBINA dir_prev = dir;
 800173a:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <main+0x70>)
 800173c:	781e      	ldrb	r6, [r3, #0]
	MOTOR_DIR motor_dir = PARADO;
 800173e:	2503      	movs	r5, #3
 8001740:	e010      	b.n	8001764 <main+0x40>
  	  		if (andar)
 8001742:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <main+0x74>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	b30b      	cbz	r3, 800178c <main+0x68>
  	  			if (dir_prev != dir)
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <main+0x70>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	42b3      	cmp	r3, r6
 800174e:	d002      	beq.n	8001756 <main+0x32>
  	  				if (motor_dir == HORARIO)
 8001750:	b9cd      	cbnz	r5, 8001786 <main+0x62>
  	  				dir_prev = dir;
 8001752:	461e      	mov	r6, r3
  	  					motor_dir = ANTI_HORARIO;
 8001754:	2501      	movs	r5, #1
  	  			if (fim_curso_1)
 8001756:	b104      	cbz	r4, 800175a <main+0x36>
  					motor_dir = ANTI_HORARIO;
 8001758:	2501      	movs	r5, #1
  	  	  	  	if (fim_curso_2)
 800175a:	b100      	cbz	r0, 800175e <main+0x3a>
  					motor_dir = HORARIO;
 800175c:	2500      	movs	r5, #0
  	  	  	  	Motor_Transversal_Ctrl(motor_dir);
 800175e:	4628      	mov	r0, r5
 8001760:	f000 f966 	bl	8001a30 <Motor_Transversal_Ctrl>
  		bool fim_curso_1 = BSP_GPIO_ReadPin(FIM_CURSO_1_Port, FIM_CURSO_1_Pin);
 8001764:	2103      	movs	r1, #3
 8001766:	480d      	ldr	r0, [pc, #52]	@ (800179c <main+0x78>)
 8001768:	f7ff fd45 	bl	80011f6 <BSP_GPIO_ReadPin>
 800176c:	4604      	mov	r4, r0
  		bool fim_curso_2 = BSP_GPIO_ReadPin(FIM_CURSO_2_Port, FIM_CURSO_2_Pin);
 800176e:	2107      	movs	r1, #7
 8001770:	480b      	ldr	r0, [pc, #44]	@ (80017a0 <main+0x7c>)
 8001772:	f7ff fd40 	bl	80011f6 <BSP_GPIO_ReadPin>
  		if (fim_curso_1 && fim_curso_2) /* Ambos fins de cursos acionados */
 8001776:	2c00      	cmp	r4, #0
 8001778:	d0e3      	beq.n	8001742 <main+0x1e>
 800177a:	2800      	cmp	r0, #0
 800177c:	d0e1      	beq.n	8001742 <main+0x1e>
			  Motor_Transversal_Ctrl(PARADO);
 800177e:	2003      	movs	r0, #3
 8001780:	f000 f956 	bl	8001a30 <Motor_Transversal_Ctrl>
 8001784:	e7ee      	b.n	8001764 <main+0x40>
  	  				dir_prev = dir;
 8001786:	461e      	mov	r6, r3
  	  					motor_dir = HORARIO;
 8001788:	2500      	movs	r5, #0
 800178a:	e7e4      	b.n	8001756 <main+0x32>
  			  	Motor_Transversal_Ctrl(FREIO);
 800178c:	2002      	movs	r0, #2
 800178e:	f000 f94f 	bl	8001a30 <Motor_Transversal_Ctrl>
 8001792:	e7e7      	b.n	8001764 <main+0x40>
 8001794:	20000000 	.word	0x20000000
 8001798:	20000054 	.word	0x20000054
 800179c:	40020400 	.word	0x40020400
 80017a0:	40021000 	.word	0x40021000

080017a4 <MOTOR_BOBINA_SET_REF_Interruption>:
 *  Interrupção que ocorre na borda de subida do botão de setar o valor de referência
 *  O valor é armazenado na memória para que na próxima execução seja recarregado
 *  Esta interrupção é demorada, não se deve utiliza-la com frequência, nem com OS
 */
static void MOTOR_BOBINA_SET_REF_Interruption(void)
{
 80017a4:	b508      	push	{r3, lr}
	if (BSP_Write_Flash_Word(ADC_REF_ADDR, adc_ref) != HAL_OK)
 80017a6:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <MOTOR_BOBINA_SET_REF_Interruption+0x18>)
 80017a8:	6819      	ldr	r1, [r3, #0]
 80017aa:	2000      	movs	r0, #0
 80017ac:	f7ff fb18 	bl	8000de0 <BSP_Write_Flash_Word>
 80017b0:	b900      	cbnz	r0, 80017b4 <MOTOR_BOBINA_SET_REF_Interruption+0x10>
	{
		BSP_Error_Handler();
	}
}
 80017b2:	bd08      	pop	{r3, pc}
		BSP_Error_Handler();
 80017b4:	f7fe fe92 	bl	80004dc <BSP_Error_Handler>
}
 80017b8:	e7fb      	b.n	80017b2 <MOTOR_BOBINA_SET_REF_Interruption+0xe>
 80017ba:	bf00      	nop
 80017bc:	20000004 	.word	0x20000004

080017c0 <Potenciometro_Tensao_Interruption>:
{
 80017c0:	b530      	push	{r4, r5, lr}
 80017c2:	b083      	sub	sp, #12
 80017c4:	f8ad 0006 	strh.w	r0, [sp, #6]
	int32_t erro = adc_ref - (int32_t) adc_read;
 80017c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001884 <Potenciometro_Tensao_Interruption+0xc4>)
 80017ca:	681c      	ldr	r4, [r3, #0]
 80017cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	1ae4      	subs	r4, r4, r3
	if ((BSP_GPIO_ReadPin(MOTOR_BOBINA_TURN_OFF_BUT_Port, MOTOR_BOBINA_TURN_OFF_BUT_Pin) == SW_ACTIVE) || (abs(erro) <= ERRO_DEATHZONE))
 80017d4:	210d      	movs	r1, #13
 80017d6:	482c      	ldr	r0, [pc, #176]	@ (8001888 <Potenciometro_Tensao_Interruption+0xc8>)
 80017d8:	f7ff fd0d 	bl	80011f6 <BSP_GPIO_ReadPin>
 80017dc:	b128      	cbz	r0, 80017ea <Potenciometro_Tensao_Interruption+0x2a>
 80017de:	ea84 73e4 	eor.w	r3, r4, r4, asr #31
 80017e2:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
 80017e6:	2b0f      	cmp	r3, #15
 80017e8:	d83d      	bhi.n	8001866 <Potenciometro_Tensao_Interruption+0xa6>
		BSP_GPIO_ResetPin(MOTOR_BOBINA_ENABLE_Port, MOTOR_BOBINA_ENABLE_Pin);
 80017ea:	2108      	movs	r1, #8
 80017ec:	4827      	ldr	r0, [pc, #156]	@ (800188c <Potenciometro_Tensao_Interruption+0xcc>)
 80017ee:	f7ff fcfb 	bl	80011e8 <BSP_GPIO_ResetPin>
		erro = 0;
 80017f2:	2400      	movs	r4, #0
	int32_t controle = kp * erro;
 80017f4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80017f8:	0064      	lsls	r4, r4, #1
	int32_t vel_dac = abs(controle);
 80017fa:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 80017fe:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
	BSP_DAC_SetValue(DAC, MOTOR_BOBINA_DAC_ALIGN, MOTOR_BOBINA_DAC_CHANNEL, vel_dac > DAC_MAX ? DAC_MAX : vel_dac);
 8001802:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001806:	42ab      	cmp	r3, r5
 8001808:	bfa8      	it	ge
 800180a:	462b      	movge	r3, r5
 800180c:	b29b      	uxth	r3, r3
 800180e:	4a20      	ldr	r2, [pc, #128]	@ (8001890 <Potenciometro_Tensao_Interruption+0xd0>)
 8001810:	2101      	movs	r1, #1
 8001812:	4820      	ldr	r0, [pc, #128]	@ (8001894 <Potenciometro_Tensao_Interruption+0xd4>)
 8001814:	f7ff f8d8 	bl	80009c8 <BSP_DAC_SetValue>
	controle >= 0 ? MOTOR_BOBINA_DIR_SET_CLOCKWISE : MOTOR_BOBINA_DIR_SET_COUNTER_CLOCKWISE;
 8001818:	2c00      	cmp	r4, #0
 800181a:	db2e      	blt.n	800187a <Potenciometro_Tensao_Interruption+0xba>
 800181c:	2109      	movs	r1, #9
 800181e:	481b      	ldr	r0, [pc, #108]	@ (800188c <Potenciometro_Tensao_Interruption+0xcc>)
 8001820:	f7ff fcdc 	bl	80011dc <BSP_GPIO_SetPin>
	if (BSP_GPIO_ReadPin(MOTOR_BOBINA_SET_REF_Port, MOTOR_BOBINA_SET_REF_Pin) == SW_ACTIVE)
 8001824:	210a      	movs	r1, #10
 8001826:	4818      	ldr	r0, [pc, #96]	@ (8001888 <Potenciometro_Tensao_Interruption+0xc8>)
 8001828:	f7ff fce5 	bl	80011f6 <BSP_GPIO_ReadPin>
 800182c:	b920      	cbnz	r0, 8001838 <Potenciometro_Tensao_Interruption+0x78>
		adc_ref = adc_read;
 800182e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001832:	b29b      	uxth	r3, r3
 8001834:	4a13      	ldr	r2, [pc, #76]	@ (8001884 <Potenciometro_Tensao_Interruption+0xc4>)
 8001836:	6013      	str	r3, [r2, #0]
	adc_val = adc_read;
 8001838:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800183c:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <Potenciometro_Tensao_Interruption+0xd8>)
 800183e:	801a      	strh	r2, [r3, #0]
	controle_val = controle;
 8001840:	4b16      	ldr	r3, [pc, #88]	@ (800189c <Potenciometro_Tensao_Interruption+0xdc>)
 8001842:	601c      	str	r4, [r3, #0]
	vel_val = vel_dac;
 8001844:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <Potenciometro_Tensao_Interruption+0xe0>)
 8001846:	801d      	strh	r5, [r3, #0]
	motor_bobina_direcao = BSP_GPIO_ReadOutputPin(MOTOR_BOBINA_DIR_Port, MOTOR_BOBINA_DIR_Pin);
 8001848:	4c10      	ldr	r4, [pc, #64]	@ (800188c <Potenciometro_Tensao_Interruption+0xcc>)
 800184a:	2109      	movs	r1, #9
 800184c:	4620      	mov	r0, r4
 800184e:	f7ff fcda 	bl	8001206 <BSP_GPIO_ReadOutputPin>
 8001852:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <Potenciometro_Tensao_Interruption+0xe4>)
 8001854:	7018      	strb	r0, [r3, #0]
	motor_bobina_enable = BSP_GPIO_ReadOutputPin(MOTOR_BOBINA_ENABLE_Port, MOTOR_BOBINA_ENABLE_Pin);
 8001856:	2108      	movs	r1, #8
 8001858:	4620      	mov	r0, r4
 800185a:	f7ff fcd4 	bl	8001206 <BSP_GPIO_ReadOutputPin>
 800185e:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <Potenciometro_Tensao_Interruption+0xe8>)
 8001860:	7018      	strb	r0, [r3, #0]
}
 8001862:	b003      	add	sp, #12
 8001864:	bd30      	pop	{r4, r5, pc}
		BSP_GPIO_SetPin(MOTOR_BOBINA_ENABLE_Port, MOTOR_BOBINA_ENABLE_Pin);
 8001866:	2108      	movs	r1, #8
 8001868:	4808      	ldr	r0, [pc, #32]	@ (800188c <Potenciometro_Tensao_Interruption+0xcc>)
 800186a:	f7ff fcb7 	bl	80011dc <BSP_GPIO_SetPin>
		erro = (erro >= 0 ? erro - ERRO_DEATHZONE : erro + ERRO_DEATHZONE); /* Retira o degrau devido a zona morta */
 800186e:	2c00      	cmp	r4, #0
 8001870:	db01      	blt.n	8001876 <Potenciometro_Tensao_Interruption+0xb6>
 8001872:	3c0f      	subs	r4, #15
 8001874:	e7be      	b.n	80017f4 <Potenciometro_Tensao_Interruption+0x34>
 8001876:	340f      	adds	r4, #15
 8001878:	e7bc      	b.n	80017f4 <Potenciometro_Tensao_Interruption+0x34>
	controle >= 0 ? MOTOR_BOBINA_DIR_SET_CLOCKWISE : MOTOR_BOBINA_DIR_SET_COUNTER_CLOCKWISE;
 800187a:	2109      	movs	r1, #9
 800187c:	4803      	ldr	r0, [pc, #12]	@ (800188c <Potenciometro_Tensao_Interruption+0xcc>)
 800187e:	f7ff fcb3 	bl	80011e8 <BSP_GPIO_ResetPin>
 8001882:	e7cf      	b.n	8001824 <Potenciometro_Tensao_Interruption+0x64>
 8001884:	20000004 	.word	0x20000004
 8001888:	40020c00 	.word	0x40020c00
 800188c:	40021400 	.word	0x40021400
 8001890:	02100001 	.word	0x02100001
 8001894:	40007400 	.word	0x40007400
 8001898:	20000062 	.word	0x20000062
 800189c:	2000005c 	.word	0x2000005c
 80018a0:	20000060 	.word	0x20000060
 80018a4:	2000005a 	.word	0x2000005a
 80018a8:	2000005b 	.word	0x2000005b

080018ac <Motor_Bobina_Init>:

void Motor_Bobina_Init(void)
{
 80018ac:	b530      	push	{r4, r5, lr}
 80018ae:	b0a1      	sub	sp, #132	@ 0x84
  	/* Configura o pino de direção do motor da bobina */
	GPIO_Config pinConfig = {0};
 80018b0:	2400      	movs	r4, #0
 80018b2:	f8ad 407c 	strh.w	r4, [sp, #124]	@ 0x7c
 80018b6:	f88d 407e 	strb.w	r4, [sp, #126]	@ 0x7e
	pinConfig.velocidade = ALTO;
 80018ba:	2302      	movs	r3, #2
 80018bc:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
  	pinConfig.modo = SAIDA_PP;
 80018c0:	2304      	movs	r3, #4
 80018c2:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
  	BSP_GPIO_Init(MOTOR_BOBINA_DIR_Port, MOTOR_BOBINA_DIR_Pin, &pinConfig);
 80018c6:	4d41      	ldr	r5, [pc, #260]	@ (80019cc <Motor_Bobina_Init+0x120>)
 80018c8:	aa1f      	add	r2, sp, #124	@ 0x7c
 80018ca:	2109      	movs	r1, #9
 80018cc:	4628      	mov	r0, r5
 80018ce:	f7ff fac1 	bl	8000e54 <BSP_GPIO_Init>
  	BSP_GPIO_Init(MOTOR_BOBINA_ENABLE_Port, MOTOR_BOBINA_ENABLE_Pin, &pinConfig);
 80018d2:	aa1f      	add	r2, sp, #124	@ 0x7c
 80018d4:	2108      	movs	r1, #8
 80018d6:	4628      	mov	r0, r5
 80018d8:	f7ff fabc 	bl	8000e54 <BSP_GPIO_Init>

  	pinConfig.modo = ENTRADA_NoPull;
 80018dc:	f88d 407c 	strb.w	r4, [sp, #124]	@ 0x7c
  	BSP_GPIO_Init(MOTOR_BOBINA_TURN_OFF_BUT_Port, MOTOR_BOBINA_TURN_OFF_BUT_Pin, &pinConfig);
 80018e0:	aa1f      	add	r2, sp, #124	@ 0x7c
 80018e2:	210d      	movs	r1, #13
 80018e4:	483a      	ldr	r0, [pc, #232]	@ (80019d0 <Motor_Bobina_Init+0x124>)
 80018e6:	f7ff fab5 	bl	8000e54 <BSP_GPIO_Init>

  	/* Configura o TIMER de disparo do conversor A/D */
  	TIM_Config timConfig = {0};
 80018ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80018ec:	941a      	str	r4, [sp, #104]	@ 0x68
 80018ee:	941b      	str	r4, [sp, #108]	@ 0x6c
 80018f0:	941c      	str	r4, [sp, #112]	@ 0x70
 80018f2:	941d      	str	r4, [sp, #116]	@ 0x74
 80018f4:	941e      	str	r4, [sp, #120]	@ 0x78
  	timConfig.TIMx = TIM3;
 80018f6:	4b37      	ldr	r3, [pc, #220]	@ (80019d4 <Motor_Bobina_Init+0x128>)
 80018f8:	9319      	str	r3, [sp, #100]	@ 0x64
  	 * A placa possuí um filtro passa-baixas de primeira ordem com frequência de corte de 1.6kHz nas entradas do A/D
  	 * Definido uma frequência de 4.8kHz de amostragem para evitar rebatimento devido as frequência que não são totalmente eliminadas pelo filtro
  	 * ADC_CLK = TIM3_CLK = 90MHz / (3750*5*1) =  4.8kHz
  	 */
  	timConfig.ClkDiv = Div_1;
  	timConfig.Prescaler = 3750-1;
 80018fa:	f640 63a5 	movw	r3, #3749	@ 0xea5
 80018fe:	f8ad 306a 	strh.w	r3, [sp, #106]	@ 0x6a
  	timConfig.Counter = 5;
 8001902:	2305      	movs	r3, #5
 8001904:	f8ad 306c 	strh.w	r3, [sp, #108]	@ 0x6c
  	timConfig.DownCounter = false;
  	timConfig.preload = true;
 8001908:	2301      	movs	r3, #1
 800190a:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
  	timConfig.onePulseMode = false;
  	timConfig.triggerGeneration = true;
 800190e:	f88d 3073 	strb.w	r3, [sp, #115]	@ 0x73
  	timConfig.interrupcaoEnable = false;
  	BSP_TIM_Init(3, &timConfig);
 8001912:	a919      	add	r1, sp, #100	@ 0x64
 8001914:	2003      	movs	r0, #3
 8001916:	f7ff fc7f 	bl	8001218 <BSP_TIM_Init>

  	/* Carrega o valor de referência salvo na memória */
  	const int32_t adc_ref_flash = (int32_t) BSP_Read_Flash_Word(ADC_REF_ADDR);
 800191a:	4620      	mov	r0, r4
 800191c:	f7ff fa84 	bl	8000e28 <BSP_Read_Flash_Word>

  	if (adc_ref_flash < 0 || adc_ref_flash > ADC_MAX) /* Caso a leitura seja falha */
 8001920:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8001924:	d34e      	bcc.n	80019c4 <Motor_Bobina_Init+0x118>
  	{
  		adc_ref = ADC_REF_STD;
 8001926:	4b2c      	ldr	r3, [pc, #176]	@ (80019d8 <Motor_Bobina_Init+0x12c>)
 8001928:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800192c:	601a      	str	r2, [r3, #0]
  	{
  		adc_ref = adc_ref_flash;
  	}

  	/* Configura o A/D para amostragem da tensão do cabo */
  	__IO GPIO_TypeDef *GPIOs[1] = {POT_TENSAO_MOTOR_Port};
 800192e:	4b2b      	ldr	r3, [pc, #172]	@ (80019dc <Motor_Bobina_Init+0x130>)
 8001930:	9318      	str	r3, [sp, #96]	@ 0x60
  	uint8_t Pinos[1] = {POT_TENSAO_MOTOR_Pin};
 8001932:	2306      	movs	r3, #6
 8001934:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
  	uint8_t Canais[1] = {POT_TENSAO_MOTOR_CANAL};
 8001938:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
  	uint8_t tempoAmostragem[1] = {POT_TENSAO_MOTOR_AMOSTRAGEM};
 800193c:	2305      	movs	r3, #5
 800193e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54

  	ADC_Config adcConfig = {0};
 8001942:	2228      	movs	r2, #40	@ 0x28
 8001944:	2100      	movs	r1, #0
 8001946:	a80b      	add	r0, sp, #44	@ 0x2c
 8001948:	f000 febe 	bl	80026c8 <memset>
  	adcConfig.ADCx = POT_TENSAO_MOTOR_ADC;
 800194c:	4b24      	ldr	r3, [pc, #144]	@ (80019e0 <Motor_Bobina_Init+0x134>)
 800194e:	930b      	str	r3, [sp, #44]	@ 0x2c
  	adcConfig.numCanais = 1;
 8001950:	2301      	movs	r3, #1
 8001952:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
  	adcConfig.Canal = Canais;
 8001956:	aa16      	add	r2, sp, #88	@ 0x58
 8001958:	9213      	str	r2, [sp, #76]	@ 0x4c
  	adcConfig.GPIOx = GPIOs;
 800195a:	aa18      	add	r2, sp, #96	@ 0x60
 800195c:	9211      	str	r2, [sp, #68]	@ 0x44
  	adcConfig.Pin = Pinos;
 800195e:	aa17      	add	r2, sp, #92	@ 0x5c
 8001960:	9212      	str	r2, [sp, #72]	@ 0x48
  	adcConfig.tempoAmostragem = tempoAmostragem;
 8001962:	aa15      	add	r2, sp, #84	@ 0x54
 8001964:	9214      	str	r2, [sp, #80]	@ 0x50
  	adcConfig.interrupcaoEnable = true;
 8001966:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
  	adcConfig.FuncaoInterrupcao = &Potenciometro_Tensao_Interruption;
 800196a:	4a1e      	ldr	r2, [pc, #120]	@ (80019e4 <Motor_Bobina_Init+0x138>)
 800196c:	920f      	str	r2, [sp, #60]	@ 0x3c
  	adcConfig.resolucao = Bits_12;
  	adcConfig.alinhamento = ALINHADO_DIREITA;
  	adcConfig.modo = Discontinuo;
  	adcConfig.numDisc = 1;
 800196e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
  	adcConfig.prescaler = DIV_4;
 8001972:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
  	adcConfig.ScanEnable = false;
  	adcConfig.triggerExterno = Rising_Edge;
 8001976:	f88d 3036 	strb.w	r3, [sp, #54]	@ 0x36
  	adcConfig.fonteTrigger = TIMER3_TRGO_Event;
 800197a:	2308      	movs	r3, #8
 800197c:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
  	BSP_ADC_Init(&adcConfig);
 8001980:	a80b      	add	r0, sp, #44	@ 0x2c
 8001982:	f7fe fe11 	bl	80005a8 <BSP_ADC_Init>

  	/* Configura o DAC para controle de velocidade */
  	DAC_Config dacConfig = {0};
 8001986:	2400      	movs	r4, #0
 8001988:	9407      	str	r4, [sp, #28]
 800198a:	9408      	str	r4, [sp, #32]
 800198c:	9409      	str	r4, [sp, #36]	@ 0x24
 800198e:	940a      	str	r4, [sp, #40]	@ 0x28
  	dacConfig.DACx = DAC;
 8001990:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <Motor_Bobina_Init+0x13c>)
 8001992:	9307      	str	r3, [sp, #28]
  	dacConfig.triggerEnable = false;
  	dacConfig.bufferEnable = false;
  	dacConfig.dmaEnable = false;
  	BSP_DAC_Init(&dacConfig, DAC_CANAL_1);
 8001994:	4915      	ldr	r1, [pc, #84]	@ (80019ec <Motor_Bobina_Init+0x140>)
 8001996:	a807      	add	r0, sp, #28
 8001998:	f7fe ffaa 	bl	80008f0 <BSP_DAC_Init>

  	/* Configura a interrupção do armazenamento do valor de referência */
  	EXTI_Config extiConfig = {0};
 800199c:	9401      	str	r4, [sp, #4]
 800199e:	9402      	str	r4, [sp, #8]
 80019a0:	9403      	str	r4, [sp, #12]
 80019a2:	9404      	str	r4, [sp, #16]
 80019a4:	9405      	str	r4, [sp, #20]
 80019a6:	9406      	str	r4, [sp, #24]
  	extiConfig.Trigger = RisingEdge;
  	extiConfig.ExtiLine = MOTOR_BOBINA_SET_REF_EXTI;
 80019a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019ac:	9301      	str	r3, [sp, #4]
  	extiConfig.GPIOx = MOTOR_BOBINA_SET_REF_Port;
 80019ae:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <Motor_Bobina_Init+0x124>)
 80019b0:	9302      	str	r3, [sp, #8]
  	extiConfig.Pin = MOTOR_BOBINA_SET_REF_Pin;
 80019b2:	230a      	movs	r3, #10
 80019b4:	9304      	str	r3, [sp, #16]
  	extiConfig.Pull = No_Pull;
  	extiConfig.FuncaoInterrupcao = &MOTOR_BOBINA_SET_REF_Interruption;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	@ (80019f0 <Motor_Bobina_Init+0x144>)
 80019b8:	9306      	str	r3, [sp, #24]
  	BSP_EXTI_Init(&extiConfig);
 80019ba:	a801      	add	r0, sp, #4
 80019bc:	f7ff f832 	bl	8000a24 <BSP_EXTI_Init>
}
 80019c0:	b021      	add	sp, #132	@ 0x84
 80019c2:	bd30      	pop	{r4, r5, pc}
  		adc_ref = adc_ref_flash;
 80019c4:	4b04      	ldr	r3, [pc, #16]	@ (80019d8 <Motor_Bobina_Init+0x12c>)
 80019c6:	6018      	str	r0, [r3, #0]
 80019c8:	e7b1      	b.n	800192e <Motor_Bobina_Init+0x82>
 80019ca:	bf00      	nop
 80019cc:	40021400 	.word	0x40021400
 80019d0:	40020c00 	.word	0x40020c00
 80019d4:	40000400 	.word	0x40000400
 80019d8:	20000004 	.word	0x20000004
 80019dc:	40020000 	.word	0x40020000
 80019e0:	40012100 	.word	0x40012100
 80019e4:	080017c1 	.word	0x080017c1
 80019e8:	40007400 	.word	0x40007400
 80019ec:	02100001 	.word	0x02100001
 80019f0:	080017a5 	.word	0x080017a5

080019f4 <Motor_Transversal_Init>:
#include "motor_transversal.h"

//static PWM motor_tranversal_pwm;

void Motor_Transversal_Init(void)
{
 80019f4:	b510      	push	{r4, lr}
 80019f6:	b082      	sub	sp, #8
	GPIO_Config pinConfig = {0};
 80019f8:	2300      	movs	r3, #0
 80019fa:	f8ad 3004 	strh.w	r3, [sp, #4]
 80019fe:	f88d 3006 	strb.w	r3, [sp, #6]

	/* Configura o pino de direção do carro transversal */
  	pinConfig.velocidade = ALTO;
 8001a02:	2302      	movs	r3, #2
 8001a04:	f88d 3005 	strb.w	r3, [sp, #5]
  	pinConfig.modo = SAIDA_PP;
 8001a08:	2304      	movs	r3, #4
 8001a0a:	f88d 3004 	strb.w	r3, [sp, #4]
  	BSP_GPIO_Init(MOTOR_CARRO_TRANSVERSAL_DIR1_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin, &pinConfig);
 8001a0e:	4c07      	ldr	r4, [pc, #28]	@ (8001a2c <Motor_Transversal_Init+0x38>)
 8001a10:	eb0d 0203 	add.w	r2, sp, r3
 8001a14:	2105      	movs	r1, #5
 8001a16:	4620      	mov	r0, r4
 8001a18:	f7ff fa1c 	bl	8000e54 <BSP_GPIO_Init>
  	BSP_GPIO_Init(MOTOR_CARRO_TRANSVERSAL_DIR2_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin, &pinConfig);
 8001a1c:	aa01      	add	r2, sp, #4
 8001a1e:	2106      	movs	r1, #6
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff fa17 	bl	8000e54 <BSP_GPIO_Init>
//  	motor_tranversal_pwm.TIMx = MOTOR_CARRO_TRANSVERSAL_PWM_TIMER;
//  	motor_tranversal_pwm.channel = MOTOR_CARRO_TRANSVERSAL_PWM_CANAL;
//
//  	BSP_PWM_Init(&motor_tranversal_pwm, &pwmConfig);
//  	BSP_PWM_SetDuty(&motor_tranversal_pwm, 0);
}
 8001a26:	b002      	add	sp, #8
 8001a28:	bd10      	pop	{r4, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000

08001a30 <Motor_Transversal_Ctrl>:

void Motor_Transversal_Ctrl(MOTOR_DIR ctrl)
{
 8001a30:	b510      	push	{r4, lr}
	switch (ctrl) {
 8001a32:	2803      	cmp	r0, #3
 8001a34:	d82b      	bhi.n	8001a8e <Motor_Transversal_Ctrl+0x5e>
 8001a36:	e8df f000 	tbb	[pc, r0]
 8001a3a:	0c02      	.short	0x0c02
 8001a3c:	2016      	.short	0x2016
		case HORARIO:
			BSP_GPIO_SetPin(MOTOR_CARRO_TRANSVERSAL_DIR1_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin);
 8001a3e:	4c1a      	ldr	r4, [pc, #104]	@ (8001aa8 <Motor_Transversal_Ctrl+0x78>)
 8001a40:	2105      	movs	r1, #5
 8001a42:	4620      	mov	r0, r4
 8001a44:	f7ff fbca 	bl	80011dc <BSP_GPIO_SetPin>
			BSP_GPIO_ResetPin(MOTOR_CARRO_TRANSVERSAL_DIR2_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin);
 8001a48:	2106      	movs	r1, #6
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	f7ff fbcc 	bl	80011e8 <BSP_GPIO_ResetPin>
			BSP_GPIO_ResetPin(MOTOR_CARRO_TRANSVERSAL_DIR1_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin);
			BSP_GPIO_ResetPin(MOTOR_CARRO_TRANSVERSAL_DIR2_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin);
		  	BSP_Error_Handler();
			break;
	}
}
 8001a50:	bd10      	pop	{r4, pc}
			BSP_GPIO_ResetPin(MOTOR_CARRO_TRANSVERSAL_DIR1_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin);
 8001a52:	4c15      	ldr	r4, [pc, #84]	@ (8001aa8 <Motor_Transversal_Ctrl+0x78>)
 8001a54:	2105      	movs	r1, #5
 8001a56:	4620      	mov	r0, r4
 8001a58:	f7ff fbc6 	bl	80011e8 <BSP_GPIO_ResetPin>
			BSP_GPIO_SetPin(MOTOR_CARRO_TRANSVERSAL_DIR2_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin);
 8001a5c:	2106      	movs	r1, #6
 8001a5e:	4620      	mov	r0, r4
 8001a60:	f7ff fbbc 	bl	80011dc <BSP_GPIO_SetPin>
			break;
 8001a64:	e7f4      	b.n	8001a50 <Motor_Transversal_Ctrl+0x20>
			BSP_GPIO_SetPin(MOTOR_CARRO_TRANSVERSAL_DIR1_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin);
 8001a66:	4c10      	ldr	r4, [pc, #64]	@ (8001aa8 <Motor_Transversal_Ctrl+0x78>)
 8001a68:	2105      	movs	r1, #5
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f7ff fbb6 	bl	80011dc <BSP_GPIO_SetPin>
			BSP_GPIO_SetPin(MOTOR_CARRO_TRANSVERSAL_DIR2_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin);
 8001a70:	2106      	movs	r1, #6
 8001a72:	4620      	mov	r0, r4
 8001a74:	f7ff fbb2 	bl	80011dc <BSP_GPIO_SetPin>
			break;
 8001a78:	e7ea      	b.n	8001a50 <Motor_Transversal_Ctrl+0x20>
			BSP_GPIO_ResetPin(MOTOR_CARRO_TRANSVERSAL_DIR1_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin);
 8001a7a:	4c0b      	ldr	r4, [pc, #44]	@ (8001aa8 <Motor_Transversal_Ctrl+0x78>)
 8001a7c:	2105      	movs	r1, #5
 8001a7e:	4620      	mov	r0, r4
 8001a80:	f7ff fbb2 	bl	80011e8 <BSP_GPIO_ResetPin>
			BSP_GPIO_ResetPin(MOTOR_CARRO_TRANSVERSAL_DIR2_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin);
 8001a84:	2106      	movs	r1, #6
 8001a86:	4620      	mov	r0, r4
 8001a88:	f7ff fbae 	bl	80011e8 <BSP_GPIO_ResetPin>
		  	break;
 8001a8c:	e7e0      	b.n	8001a50 <Motor_Transversal_Ctrl+0x20>
			BSP_GPIO_ResetPin(MOTOR_CARRO_TRANSVERSAL_DIR1_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin);
 8001a8e:	4c06      	ldr	r4, [pc, #24]	@ (8001aa8 <Motor_Transversal_Ctrl+0x78>)
 8001a90:	2105      	movs	r1, #5
 8001a92:	4620      	mov	r0, r4
 8001a94:	f7ff fba8 	bl	80011e8 <BSP_GPIO_ResetPin>
			BSP_GPIO_ResetPin(MOTOR_CARRO_TRANSVERSAL_DIR2_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin);
 8001a98:	2106      	movs	r1, #6
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	f7ff fba4 	bl	80011e8 <BSP_GPIO_ResetPin>
		  	BSP_Error_Handler();
 8001aa0:	f7fe fd1c 	bl	80004dc <BSP_Error_Handler>
}
 8001aa4:	e7d4      	b.n	8001a50 <Motor_Transversal_Ctrl+0x20>
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000

08001aac <OPTO3_Interruption>:
	}
}

static void OPTO3_Interruption(void)
{
	cont++;
 8001aac:	4a08      	ldr	r2, [pc, #32]	@ (8001ad0 <OPTO3_Interruption+0x24>)
 8001aae:	8813      	ldrh	r3, [r2, #0]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	b21b      	sxth	r3, r3
 8001ab4:	8013      	strh	r3, [r2, #0]

	if (cont > CARRO_TRANSVERAL_TICK_VOLTA)
 8001ab6:	2b14      	cmp	r3, #20
 8001ab8:	dd08      	ble.n	8001acc <OPTO3_Interruption+0x20>
	{
		carro_transversal_voltas++;
 8001aba:	4a06      	ldr	r2, [pc, #24]	@ (8001ad4 <OPTO3_Interruption+0x28>)
 8001abc:	6813      	ldr	r3, [r2, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	6013      	str	r3, [r2, #0]
		cont = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	4a02      	ldr	r2, [pc, #8]	@ (8001ad0 <OPTO3_Interruption+0x24>)
 8001ac6:	8013      	strh	r3, [r2, #0]
		andar = false;
 8001ac8:	4a03      	ldr	r2, [pc, #12]	@ (8001ad8 <OPTO3_Interruption+0x2c>)
 8001aca:	7013      	strb	r3, [r2, #0]
	}
}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000056 	.word	0x20000056
 8001ad4:	2000004c 	.word	0x2000004c
 8001ad8:	20000054 	.word	0x20000054

08001adc <OPTO2_Interruption>:
{
 8001adc:	b508      	push	{r3, lr}
	if (BSP_GPIO_ReadPin(OPTO_1_Port, OPTO_1_Pin) == OPTO_OFF)
 8001ade:	210e      	movs	r1, #14
 8001ae0:	480c      	ldr	r0, [pc, #48]	@ (8001b14 <OPTO2_Interruption+0x38>)
 8001ae2:	f7ff fb88 	bl	80011f6 <BSP_GPIO_ReadPin>
 8001ae6:	b198      	cbz	r0, 8001b10 <OPTO2_Interruption+0x34>
		passo--;
 8001ae8:	4a0b      	ldr	r2, [pc, #44]	@ (8001b18 <OPTO2_Interruption+0x3c>)
 8001aea:	8813      	ldrh	r3, [r2, #0]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	8013      	strh	r3, [r2, #0]
		if (passo < -BOBINA_TICK_VOLTA)
 8001af2:	f113 0f08 	cmn.w	r3, #8
 8001af6:	da0b      	bge.n	8001b10 <OPTO2_Interruption+0x34>
			bobina_voltas--;
 8001af8:	4a08      	ldr	r2, [pc, #32]	@ (8001b1c <OPTO2_Interruption+0x40>)
 8001afa:	6813      	ldr	r3, [r2, #0]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	6013      	str	r3, [r2, #0]
			passo = 0;
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <OPTO2_Interruption+0x3c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	801a      	strh	r2, [r3, #0]
			andar = true;
 8001b06:	2301      	movs	r3, #1
 8001b08:	4a05      	ldr	r2, [pc, #20]	@ (8001b20 <OPTO2_Interruption+0x44>)
 8001b0a:	7013      	strb	r3, [r2, #0]
			dir = PUXANDO;
 8001b0c:	4a05      	ldr	r2, [pc, #20]	@ (8001b24 <OPTO2_Interruption+0x48>)
 8001b0e:	7013      	strb	r3, [r2, #0]
}
 8001b10:	bd08      	pop	{r3, pc}
 8001b12:	bf00      	nop
 8001b14:	40020c00 	.word	0x40020c00
 8001b18:	20000058 	.word	0x20000058
 8001b1c:	20000050 	.word	0x20000050
 8001b20:	20000054 	.word	0x20000054
 8001b24:	20000000 	.word	0x20000000

08001b28 <OPTO1_Interruption>:
{
 8001b28:	b508      	push	{r3, lr}
	if (BSP_GPIO_ReadPin(OPTO_2_Port, OPTO_2_Pin) == OPTO_OFF)
 8001b2a:	210f      	movs	r1, #15
 8001b2c:	480b      	ldr	r0, [pc, #44]	@ (8001b5c <OPTO1_Interruption+0x34>)
 8001b2e:	f7ff fb62 	bl	80011f6 <BSP_GPIO_ReadPin>
 8001b32:	b190      	cbz	r0, 8001b5a <OPTO1_Interruption+0x32>
		passo++;
 8001b34:	4a0a      	ldr	r2, [pc, #40]	@ (8001b60 <OPTO1_Interruption+0x38>)
 8001b36:	8813      	ldrh	r3, [r2, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	8013      	strh	r3, [r2, #0]
		if (passo > BOBINA_TICK_VOLTA)
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	dd0b      	ble.n	8001b5a <OPTO1_Interruption+0x32>
			bobina_voltas++;
 8001b42:	4a08      	ldr	r2, [pc, #32]	@ (8001b64 <OPTO1_Interruption+0x3c>)
 8001b44:	6813      	ldr	r3, [r2, #0]
 8001b46:	3301      	adds	r3, #1
 8001b48:	6013      	str	r3, [r2, #0]
			passo = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	4a04      	ldr	r2, [pc, #16]	@ (8001b60 <OPTO1_Interruption+0x38>)
 8001b4e:	8013      	strh	r3, [r2, #0]
			andar = true;
 8001b50:	4a05      	ldr	r2, [pc, #20]	@ (8001b68 <OPTO1_Interruption+0x40>)
 8001b52:	2101      	movs	r1, #1
 8001b54:	7011      	strb	r1, [r2, #0]
			dir = LIBERANDO;
 8001b56:	4a05      	ldr	r2, [pc, #20]	@ (8001b6c <OPTO1_Interruption+0x44>)
 8001b58:	7013      	strb	r3, [r2, #0]
}
 8001b5a:	bd08      	pop	{r3, pc}
 8001b5c:	40020c00 	.word	0x40020c00
 8001b60:	20000058 	.word	0x20000058
 8001b64:	20000050 	.word	0x20000050
 8001b68:	20000054 	.word	0x20000054
 8001b6c:	20000000 	.word	0x20000000

08001b70 <OPTO_Init>:

void OPTO_Init(void)
{
 8001b70:	b510      	push	{r4, lr}
 8001b72:	b086      	sub	sp, #24
  	/* Configura as interrrupções externas do encoder */
  	EXTI_Config extiConfig = {0};
 8001b74:	2300      	movs	r3, #0
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	9303      	str	r3, [sp, #12]
 8001b7e:	9304      	str	r3, [sp, #16]
 8001b80:	9305      	str	r3, [sp, #20]
  	extiConfig.Pull = Pull_UP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	f88d 3008 	strb.w	r3, [sp, #8]
  	extiConfig.Trigger = FallingEdge;
 8001b88:	f88d 3010 	strb.w	r3, [sp, #16]

  	extiConfig.ExtiLine = OPTO_1_EXTI;
 8001b8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b90:	9300      	str	r3, [sp, #0]
  	extiConfig.GPIOx = OPTO_1_Port;
 8001b92:	4c10      	ldr	r4, [pc, #64]	@ (8001bd4 <OPTO_Init+0x64>)
 8001b94:	9401      	str	r4, [sp, #4]
  	extiConfig.Pin = OPTO_1_Pin;
 8001b96:	230e      	movs	r3, #14
 8001b98:	9303      	str	r3, [sp, #12]
  	extiConfig.FuncaoInterrupcao = &OPTO1_Interruption;
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <OPTO_Init+0x68>)
 8001b9c:	9305      	str	r3, [sp, #20]
  	BSP_EXTI_Init(&extiConfig);
 8001b9e:	4668      	mov	r0, sp
 8001ba0:	f7fe ff40 	bl	8000a24 <BSP_EXTI_Init>

  	extiConfig.ExtiLine = OPTO_2_EXTI;
 8001ba4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ba8:	9300      	str	r3, [sp, #0]
  	extiConfig.GPIOx = OPTO_2_Port;
 8001baa:	9401      	str	r4, [sp, #4]
  	extiConfig.Pin = OPTO_2_Pin;
 8001bac:	230f      	movs	r3, #15
 8001bae:	9303      	str	r3, [sp, #12]
  	extiConfig.FuncaoInterrupcao = &OPTO2_Interruption;
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <OPTO_Init+0x6c>)
 8001bb2:	9305      	str	r3, [sp, #20]
  	BSP_EXTI_Init(&extiConfig);
 8001bb4:	4668      	mov	r0, sp
 8001bb6:	f7fe ff35 	bl	8000a24 <BSP_EXTI_Init>

  	extiConfig.ExtiLine = OPTO_3_EXTI;
 8001bba:	2308      	movs	r3, #8
 8001bbc:	9300      	str	r3, [sp, #0]
  	extiConfig.GPIOx = OPTO_3_Port;
 8001bbe:	9401      	str	r4, [sp, #4]
  	extiConfig.Pin = OPTO_3_Pin;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	9303      	str	r3, [sp, #12]
  	extiConfig.FuncaoInterrupcao = &OPTO3_Interruption;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <OPTO_Init+0x70>)
 8001bc6:	9305      	str	r3, [sp, #20]
  	BSP_EXTI_Init(&extiConfig);
 8001bc8:	4668      	mov	r0, sp
 8001bca:	f7fe ff2b 	bl	8000a24 <BSP_EXTI_Init>
}
 8001bce:	b006      	add	sp, #24
 8001bd0:	bd10      	pop	{r4, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40020c00 	.word	0x40020c00
 8001bd8:	08001b29 	.word	0x08001b29
 8001bdc:	08001add 	.word	0x08001add
 8001be0:	08001aad 	.word	0x08001aad

08001be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be6:	2100      	movs	r1, #0
 8001be8:	9100      	str	r1, [sp, #0]
 8001bea:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <HAL_MspInit+0x34>)
 8001bec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001bee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001bf2:	645a      	str	r2, [r3, #68]	@ 0x44
 8001bf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001bf6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001bfa:	9200      	str	r2, [sp, #0]
 8001bfc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	9101      	str	r1, [sp, #4]
 8001c00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c02:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001c06:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c12:	b002      	add	sp, #8
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800

08001c1c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c1c:	e7fe      	b.n	8001c1c <NMI_Handler>

08001c1e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <HardFault_Handler>

08001c20 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <MemManage_Handler>

08001c22 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <BusFault_Handler>

08001c24 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <UsageFault_Handler>

08001c26 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c26:	4770      	bx	lr

08001c28 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c28:	4770      	bx	lr

08001c2a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2a:	4770      	bx	lr

08001c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c2e:	f000 f875 	bl	8001d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c32:	bd08      	pop	{r3, pc}

08001c34 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c34:	4a03      	ldr	r2, [pc, #12]	@ (8001c44 <SystemInit+0x10>)
 8001c36:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001c3a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c3e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c80 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c4c:	f7ff fff2 	bl	8001c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c50:	480c      	ldr	r0, [pc, #48]	@ (8001c84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c52:	490d      	ldr	r1, [pc, #52]	@ (8001c88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c54:	4a0d      	ldr	r2, [pc, #52]	@ (8001c8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c58:	e002      	b.n	8001c60 <LoopCopyDataInit>

08001c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5e:	3304      	adds	r3, #4

08001c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c64:	d3f9      	bcc.n	8001c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c66:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c68:	4c0a      	ldr	r4, [pc, #40]	@ (8001c94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c6c:	e001      	b.n	8001c72 <LoopFillZerobss>

08001c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c70:	3204      	adds	r2, #4

08001c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c74:	d3fb      	bcc.n	8001c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c76:	f000 fd2f 	bl	80026d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c7a:	f7ff fd53 	bl	8001724 <main>
  bx  lr    
 8001c7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c80:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c88:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001c8c:	08002758 	.word	0x08002758
  ldr r2, =_sbss
 8001c90:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001c94:	20000088 	.word	0x20000088

08001c98 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c98:	e7fe      	b.n	8001c98 <CAN1_RX0_IRQHandler>
	...

08001c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c9c:	b510      	push	{r4, lr}
 8001c9e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <HAL_InitTick+0x40>)
 8001ca2:	781a      	ldrb	r2, [r3, #0]
 8001ca4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cac:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce0 <HAL_InitTick+0x44>)
 8001cae:	6810      	ldr	r0, [r2, #0]
 8001cb0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cb4:	f000 f89a 	bl	8001dec <HAL_SYSTICK_Config>
 8001cb8:	b968      	cbnz	r0, 8001cd6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cba:	2c0f      	cmp	r4, #15
 8001cbc:	d901      	bls.n	8001cc2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	e00a      	b.n	8001cd8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	4621      	mov	r1, r4
 8001cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8001cca:	f000 f87f 	bl	8001dcc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cce:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <HAL_InitTick+0x48>)
 8001cd0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	e000      	b.n	8001cd8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001cd6:	2001      	movs	r0, #1
}
 8001cd8:	bd10      	pop	{r4, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000000c 	.word	0x2000000c
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	20000010 	.word	0x20000010

08001ce8 <HAL_Init>:
{
 8001ce8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cea:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <HAL_Init+0x30>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cf2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001cfa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d02:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d04:	2003      	movs	r0, #3
 8001d06:	f000 f84f 	bl	8001da8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d0a:	200f      	movs	r0, #15
 8001d0c:	f7ff ffc6 	bl	8001c9c <HAL_InitTick>
  HAL_MspInit();
 8001d10:	f7ff ff68 	bl	8001be4 <HAL_MspInit>
}
 8001d14:	2000      	movs	r0, #0
 8001d16:	bd08      	pop	{r3, pc}
 8001d18:	40023c00 	.word	0x40023c00

08001d1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001d1c:	4a03      	ldr	r2, [pc, #12]	@ (8001d2c <HAL_IncTick+0x10>)
 8001d1e:	6811      	ldr	r1, [r2, #0]
 8001d20:	4b03      	ldr	r3, [pc, #12]	@ (8001d30 <HAL_IncTick+0x14>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	440b      	add	r3, r1
 8001d26:	6013      	str	r3, [r2, #0]
}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000064 	.word	0x20000064
 8001d30:	2000000c 	.word	0x2000000c

08001d34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d34:	4b01      	ldr	r3, [pc, #4]	@ (8001d3c <HAL_GetTick+0x8>)
 8001d36:	6818      	ldr	r0, [r3, #0]
}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000064 	.word	0x20000064

08001d40 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001d40:	2800      	cmp	r0, #0
 8001d42:	db08      	blt.n	8001d56 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d44:	0109      	lsls	r1, r1, #4
 8001d46:	b2c9      	uxtb	r1, r1
 8001d48:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001d4c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001d50:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001d54:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d56:	f000 000f 	and.w	r0, r0, #15
 8001d5a:	0109      	lsls	r1, r1, #4
 8001d5c:	b2c9      	uxtb	r1, r1
 8001d5e:	4b01      	ldr	r3, [pc, #4]	@ (8001d64 <__NVIC_SetPriority+0x24>)
 8001d60:	5419      	strb	r1, [r3, r0]
  }
}
 8001d62:	4770      	bx	lr
 8001d64:	e000ed14 	.word	0xe000ed14

08001d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d68:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d6a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d6e:	f1c0 0c07 	rsb	ip, r0, #7
 8001d72:	f1bc 0f04 	cmp.w	ip, #4
 8001d76:	bf28      	it	cs
 8001d78:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7c:	1d03      	adds	r3, r0, #4
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d90f      	bls.n	8001da2 <NVIC_EncodePriority+0x3a>
 8001d82:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	f04f 3eff 	mov.w	lr, #4294967295
 8001d88:	fa0e f00c 	lsl.w	r0, lr, ip
 8001d8c:	ea21 0100 	bic.w	r1, r1, r0
 8001d90:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d92:	fa0e fe03 	lsl.w	lr, lr, r3
 8001d96:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001d9a:	ea41 0002 	orr.w	r0, r1, r2
 8001d9e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da2:	2300      	movs	r3, #0
 8001da4:	e7ee      	b.n	8001d84 <NVIC_EncodePriority+0x1c>
	...

08001da8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da8:	4a07      	ldr	r2, [pc, #28]	@ (8001dc8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001daa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001db0:	041b      	lsls	r3, r3, #16
 8001db2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db4:	0200      	lsls	r0, r0, #8
 8001db6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dba:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001dc4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dcc:	b510      	push	{r4, lr}
 8001dce:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd0:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <HAL_NVIC_SetPriority+0x1c>)
 8001dd2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001dd8:	f7ff ffc6 	bl	8001d68 <NVIC_EncodePriority>
 8001ddc:	4601      	mov	r1, r0
 8001dde:	4620      	mov	r0, r4
 8001de0:	f7ff ffae 	bl	8001d40 <__NVIC_SetPriority>
}
 8001de4:	bd10      	pop	{r4, pc}
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dec:	3801      	subs	r0, #1
 8001dee:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001df2:	d20b      	bcs.n	8001e0c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001df8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfa:	4a05      	ldr	r2, [pc, #20]	@ (8001e10 <HAL_SYSTICK_Config+0x24>)
 8001dfc:	21f0      	movs	r1, #240	@ 0xf0
 8001dfe:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e02:	2000      	movs	r0, #0
 8001e04:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e06:	2207      	movs	r2, #7
 8001e08:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e0a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001e0c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001e14:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e16:	490a      	ldr	r1, [pc, #40]	@ (8001e40 <FLASH_Program_DoubleWord+0x2c>)
 8001e18:	690c      	ldr	r4, [r1, #16]
 8001e1a:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
 8001e1e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001e20:	690c      	ldr	r4, [r1, #16]
 8001e22:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
 8001e26:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e28:	690c      	ldr	r4, [r1, #16]
 8001e2a:	f044 0401 	orr.w	r4, r4, #1
 8001e2e:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001e30:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001e32:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001e36:	6043      	str	r3, [r0, #4]
}
 8001e38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40023c00 	.word	0x40023c00

08001e44 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e44:	4b07      	ldr	r3, [pc, #28]	@ (8001e64 <FLASH_Program_Word+0x20>)
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001e4c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e54:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	f042 0201 	orr.w	r2, r2, #1
 8001e5c:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8001e5e:	6001      	str	r1, [r0, #0]
}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40023c00 	.word	0x40023c00

08001e68 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e68:	4b07      	ldr	r3, [pc, #28]	@ (8001e88 <FLASH_Program_HalfWord+0x20>)
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001e70:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e78:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8001e82:	8001      	strh	r1, [r0, #0]
}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023c00 	.word	0x40023c00

08001e8c <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <FLASH_Program_Byte+0x1c>)
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001e94:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	f042 0201 	orr.w	r2, r2, #1
 8001ea0:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 8001ea2:	7001      	strb	r1, [r0, #0]
}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40023c00 	.word	0x40023c00

08001eac <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001eac:	4b27      	ldr	r3, [pc, #156]	@ (8001f4c <FLASH_SetErrorCode+0xa0>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f013 0f10 	tst.w	r3, #16
 8001eb4:	d007      	beq.n	8001ec6 <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001eb6:	4a26      	ldr	r2, [pc, #152]	@ (8001f50 <FLASH_SetErrorCode+0xa4>)
 8001eb8:	69d3      	ldr	r3, [r2, #28]
 8001eba:	f043 0310 	orr.w	r3, r3, #16
 8001ebe:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ec0:	4b22      	ldr	r3, [pc, #136]	@ (8001f4c <FLASH_SetErrorCode+0xa0>)
 8001ec2:	2210      	movs	r2, #16
 8001ec4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001ec6:	4b21      	ldr	r3, [pc, #132]	@ (8001f4c <FLASH_SetErrorCode+0xa0>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f013 0f20 	tst.w	r3, #32
 8001ece:	d007      	beq.n	8001ee0 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f50 <FLASH_SetErrorCode+0xa4>)
 8001ed2:	69d3      	ldr	r3, [r2, #28]
 8001ed4:	f043 0308 	orr.w	r3, r3, #8
 8001ed8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001eda:	4b1c      	ldr	r3, [pc, #112]	@ (8001f4c <FLASH_SetErrorCode+0xa0>)
 8001edc:	2220      	movs	r2, #32
 8001ede:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <FLASH_SetErrorCode+0xa0>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001ee8:	d007      	beq.n	8001efa <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001eea:	4a19      	ldr	r2, [pc, #100]	@ (8001f50 <FLASH_SetErrorCode+0xa4>)
 8001eec:	69d3      	ldr	r3, [r2, #28]
 8001eee:	f043 0304 	orr.w	r3, r3, #4
 8001ef2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001ef4:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <FLASH_SetErrorCode+0xa0>)
 8001ef6:	2240      	movs	r2, #64	@ 0x40
 8001ef8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001efa:	4b14      	ldr	r3, [pc, #80]	@ (8001f4c <FLASH_SetErrorCode+0xa0>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001f02:	d007      	beq.n	8001f14 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001f04:	4a12      	ldr	r2, [pc, #72]	@ (8001f50 <FLASH_SetErrorCode+0xa4>)
 8001f06:	69d3      	ldr	r3, [r2, #28]
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f4c <FLASH_SetErrorCode+0xa0>)
 8001f10:	2280      	movs	r2, #128	@ 0x80
 8001f12:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001f14:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <FLASH_SetErrorCode+0xa0>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001f1c:	d008      	beq.n	8001f30 <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f50 <FLASH_SetErrorCode+0xa4>)
 8001f20:	69d3      	ldr	r3, [r2, #28]
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001f28:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <FLASH_SetErrorCode+0xa0>)
 8001f2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f2e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001f30:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <FLASH_SetErrorCode+0xa0>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f013 0f02 	tst.w	r3, #2
 8001f38:	d007      	beq.n	8001f4a <FLASH_SetErrorCode+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001f3a:	4a05      	ldr	r2, [pc, #20]	@ (8001f50 <FLASH_SetErrorCode+0xa4>)
 8001f3c:	69d3      	ldr	r3, [r2, #28]
 8001f3e:	f043 0320 	orr.w	r3, r3, #32
 8001f42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001f44:	4b01      	ldr	r3, [pc, #4]	@ (8001f4c <FLASH_SetErrorCode+0xa0>)
 8001f46:	2202      	movs	r2, #2
 8001f48:	60da      	str	r2, [r3, #12]
  }
}
 8001f4a:	4770      	bx	lr
 8001f4c:	40023c00 	.word	0x40023c00
 8001f50:	20000068 	.word	0x20000068

08001f54 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f54:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <HAL_FLASH_Unlock+0x28>)
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db01      	blt.n	8001f60 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <HAL_FLASH_Unlock+0x28>)
 8001f62:	4a07      	ldr	r2, [pc, #28]	@ (8001f80 <HAL_FLASH_Unlock+0x2c>)
 8001f64:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001f66:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 8001f6a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	db01      	blt.n	8001f76 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8001f72:	2000      	movs	r0, #0
 8001f74:	4770      	bx	lr
      status = HAL_ERROR;
 8001f76:	2001      	movs	r0, #1
}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40023c00 	.word	0x40023c00
 8001f80:	45670123 	.word	0x45670123

08001f84 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8001f84:	4a03      	ldr	r2, [pc, #12]	@ (8001f94 <HAL_FLASH_Lock+0x10>)
 8001f86:	6913      	ldr	r3, [r2, #16]
 8001f88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f8c:	6113      	str	r3, [r2, #16]
}
 8001f8e:	2000      	movs	r0, #0
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40023c00 	.word	0x40023c00

08001f98 <FLASH_WaitForLastOperation>:
{ 
 8001f98:	b538      	push	{r3, r4, r5, lr}
 8001f9a:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ff0 <FLASH_WaitForLastOperation+0x58>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8001fa2:	f7ff fec7 	bl	8001d34 <HAL_GetTick>
 8001fa6:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001fa8:	4b12      	ldr	r3, [pc, #72]	@ (8001ff4 <FLASH_WaitForLastOperation+0x5c>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001fb0:	d00a      	beq.n	8001fc8 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 8001fb2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001fb6:	d0f7      	beq.n	8001fa8 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001fb8:	b124      	cbz	r4, 8001fc4 <FLASH_WaitForLastOperation+0x2c>
 8001fba:	f7ff febb 	bl	8001d34 <HAL_GetTick>
 8001fbe:	1b40      	subs	r0, r0, r5
 8001fc0:	42a0      	cmp	r0, r4
 8001fc2:	d9f1      	bls.n	8001fa8 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	e00d      	b.n	8001fe4 <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <FLASH_WaitForLastOperation+0x5c>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f013 0f01 	tst.w	r3, #1
 8001fd0:	d002      	beq.n	8001fd8 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001fd2:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <FLASH_WaitForLastOperation+0x5c>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001fd8:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <FLASH_WaitForLastOperation+0x5c>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f413 7ff9 	tst.w	r3, #498	@ 0x1f2
 8001fe0:	d101      	bne.n	8001fe6 <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 8001fe2:	2000      	movs	r0, #0
}  
 8001fe4:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 8001fe6:	f7ff ff61 	bl	8001eac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001fea:	2001      	movs	r0, #1
 8001fec:	e7fa      	b.n	8001fe4 <FLASH_WaitForLastOperation+0x4c>
 8001fee:	bf00      	nop
 8001ff0:	20000068 	.word	0x20000068
 8001ff4:	40023c00 	.word	0x40023c00

08001ff8 <HAL_FLASH_Program>:
{
 8001ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ffa:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8001ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800206c <HAL_FLASH_Program+0x74>)
 8001ffe:	7e12      	ldrb	r2, [r2, #24]
 8002000:	2a01      	cmp	r2, #1
 8002002:	d030      	beq.n	8002066 <HAL_FLASH_Program+0x6e>
 8002004:	4604      	mov	r4, r0
 8002006:	460d      	mov	r5, r1
 8002008:	461f      	mov	r7, r3
 800200a:	4b18      	ldr	r3, [pc, #96]	@ (800206c <HAL_FLASH_Program+0x74>)
 800200c:	2201      	movs	r2, #1
 800200e:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002010:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002014:	f7ff ffc0 	bl	8001f98 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002018:	b990      	cbnz	r0, 8002040 <HAL_FLASH_Program+0x48>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800201a:	b1ac      	cbz	r4, 8002048 <HAL_FLASH_Program+0x50>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800201c:	2c01      	cmp	r4, #1
 800201e:	d018      	beq.n	8002052 <HAL_FLASH_Program+0x5a>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002020:	2c02      	cmp	r4, #2
 8002022:	d01b      	beq.n	800205c <HAL_FLASH_Program+0x64>
      FLASH_Program_DoubleWord(Address, Data);
 8002024:	4632      	mov	r2, r6
 8002026:	463b      	mov	r3, r7
 8002028:	4628      	mov	r0, r5
 800202a:	f7ff fef3 	bl	8001e14 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800202e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002032:	f7ff ffb1 	bl	8001f98 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8002036:	4a0e      	ldr	r2, [pc, #56]	@ (8002070 <HAL_FLASH_Program+0x78>)
 8002038:	6913      	ldr	r3, [r2, #16]
 800203a:	f023 0301 	bic.w	r3, r3, #1
 800203e:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8002040:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <HAL_FLASH_Program+0x74>)
 8002042:	2200      	movs	r2, #0
 8002044:	761a      	strb	r2, [r3, #24]
}
 8002046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002048:	b2f1      	uxtb	r1, r6
 800204a:	4628      	mov	r0, r5
 800204c:	f7ff ff1e 	bl	8001e8c <FLASH_Program_Byte>
 8002050:	e7ed      	b.n	800202e <HAL_FLASH_Program+0x36>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002052:	b2b1      	uxth	r1, r6
 8002054:	4628      	mov	r0, r5
 8002056:	f7ff ff07 	bl	8001e68 <FLASH_Program_HalfWord>
 800205a:	e7e8      	b.n	800202e <HAL_FLASH_Program+0x36>
      FLASH_Program_Word(Address, (uint32_t) Data);
 800205c:	4631      	mov	r1, r6
 800205e:	4628      	mov	r0, r5
 8002060:	f7ff fef0 	bl	8001e44 <FLASH_Program_Word>
 8002064:	e7e3      	b.n	800202e <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 8002066:	2002      	movs	r0, #2
 8002068:	e7ed      	b.n	8002046 <HAL_FLASH_Program+0x4e>
 800206a:	bf00      	nop
 800206c:	20000068 	.word	0x20000068
 8002070:	40023c00 	.word	0x40023c00

08002074 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002074:	2901      	cmp	r1, #1
 8002076:	d01e      	beq.n	80020b6 <FLASH_Erase_Sector+0x42>
 8002078:	2902      	cmp	r1, #2
 800207a:	d01f      	beq.n	80020bc <FLASH_Erase_Sector+0x48>
 800207c:	b109      	cbz	r1, 8002082 <FLASH_Erase_Sector+0xe>
{
 800207e:	f44f 7140 	mov.w	r1, #768	@ 0x300
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8002082:	280b      	cmp	r0, #11
 8002084:	d900      	bls.n	8002088 <FLASH_Erase_Sector+0x14>
  {
    Sector += 4U;
 8002086:	3004      	adds	r0, #4
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002088:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <FLASH_Erase_Sector+0x50>)
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002090:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	430a      	orrs	r2, r1
 8002096:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 800209e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80020a6:	f042 0202 	orr.w	r2, r2, #2
 80020aa:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80020b2:	611a      	str	r2, [r3, #16]
}
 80020b4:	4770      	bx	lr
{
 80020b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020ba:	e7e2      	b.n	8002082 <FLASH_Erase_Sector+0xe>
 80020bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020c0:	e7df      	b.n	8002082 <FLASH_Erase_Sector+0xe>
 80020c2:	bf00      	nop
 80020c4:	40023c00 	.word	0x40023c00

080020c8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020c8:	2800      	cmp	r0, #0
 80020ca:	f000 81e0 	beq.w	800248e <HAL_RCC_OscConfig+0x3c6>
{
 80020ce:	b570      	push	{r4, r5, r6, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d4:	6803      	ldr	r3, [r0, #0]
 80020d6:	f013 0f01 	tst.w	r3, #1
 80020da:	d03b      	beq.n	8002154 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020dc:	4b9f      	ldr	r3, [pc, #636]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d02c      	beq.n	8002142 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e8:	4b9c      	ldr	r3, [pc, #624]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d021      	beq.n	8002138 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f4:	6863      	ldr	r3, [r4, #4]
 80020f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020fa:	d04f      	beq.n	800219c <HAL_RCC_OscConfig+0xd4>
 80020fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002100:	d052      	beq.n	80021a8 <HAL_RCC_OscConfig+0xe0>
 8002102:	4b96      	ldr	r3, [pc, #600]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002112:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002114:	6863      	ldr	r3, [r4, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d050      	beq.n	80021bc <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7ff fe0b 	bl	8001d34 <HAL_GetTick>
 800211e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002120:	4b8e      	ldr	r3, [pc, #568]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002128:	d114      	bne.n	8002154 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800212a:	f7ff fe03 	bl	8001d34 <HAL_GetTick>
 800212e:	1b40      	subs	r0, r0, r5
 8002130:	2864      	cmp	r0, #100	@ 0x64
 8002132:	d9f5      	bls.n	8002120 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002134:	2003      	movs	r0, #3
 8002136:	e1b1      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002138:	4b88      	ldr	r3, [pc, #544]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002140:	d0d8      	beq.n	80020f4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002142:	4b86      	ldr	r3, [pc, #536]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800214a:	d003      	beq.n	8002154 <HAL_RCC_OscConfig+0x8c>
 800214c:	6863      	ldr	r3, [r4, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 819f 	beq.w	8002492 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	f013 0f02 	tst.w	r3, #2
 800215a:	d054      	beq.n	8002206 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800215c:	4b7f      	ldr	r3, [pc, #508]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f013 0f0c 	tst.w	r3, #12
 8002164:	d03e      	beq.n	80021e4 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002166:	4b7d      	ldr	r3, [pc, #500]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800216e:	2b08      	cmp	r3, #8
 8002170:	d033      	beq.n	80021da <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002172:	68e3      	ldr	r3, [r4, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d068      	beq.n	800224a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002178:	4b79      	ldr	r3, [pc, #484]	@ (8002360 <HAL_RCC_OscConfig+0x298>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217e:	f7ff fdd9 	bl	8001d34 <HAL_GetTick>
 8002182:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002184:	4b75      	ldr	r3, [pc, #468]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f013 0f02 	tst.w	r3, #2
 800218c:	d154      	bne.n	8002238 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800218e:	f7ff fdd1 	bl	8001d34 <HAL_GetTick>
 8002192:	1b40      	subs	r0, r0, r5
 8002194:	2802      	cmp	r0, #2
 8002196:	d9f5      	bls.n	8002184 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002198:	2003      	movs	r0, #3
 800219a:	e17f      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219c:	4a6f      	ldr	r2, [pc, #444]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 800219e:	6813      	ldr	r3, [r2, #0]
 80021a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	e7b5      	b.n	8002114 <HAL_RCC_OscConfig+0x4c>
 80021a8:	4b6c      	ldr	r3, [pc, #432]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	e7ab      	b.n	8002114 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80021bc:	f7ff fdba 	bl	8001d34 <HAL_GetTick>
 80021c0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c2:	4b66      	ldr	r3, [pc, #408]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80021ca:	d0c3      	beq.n	8002154 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021cc:	f7ff fdb2 	bl	8001d34 <HAL_GetTick>
 80021d0:	1b40      	subs	r0, r0, r5
 80021d2:	2864      	cmp	r0, #100	@ 0x64
 80021d4:	d9f5      	bls.n	80021c2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80021d6:	2003      	movs	r0, #3
 80021d8:	e160      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021da:	4b60      	ldr	r3, [pc, #384]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80021e2:	d1c6      	bne.n	8002172 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e4:	4b5d      	ldr	r3, [pc, #372]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f013 0f02 	tst.w	r3, #2
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_OscConfig+0x12e>
 80021ee:	68e3      	ldr	r3, [r4, #12]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	f040 8150 	bne.w	8002496 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f6:	4a59      	ldr	r2, [pc, #356]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 80021f8:	6813      	ldr	r3, [r2, #0]
 80021fa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80021fe:	6921      	ldr	r1, [r4, #16]
 8002200:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002204:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	f013 0f08 	tst.w	r3, #8
 800220c:	d042      	beq.n	8002294 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800220e:	6963      	ldr	r3, [r4, #20]
 8002210:	b36b      	cbz	r3, 800226e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002212:	4b53      	ldr	r3, [pc, #332]	@ (8002360 <HAL_RCC_OscConfig+0x298>)
 8002214:	2201      	movs	r2, #1
 8002216:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221a:	f7ff fd8b 	bl	8001d34 <HAL_GetTick>
 800221e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002220:	4b4e      	ldr	r3, [pc, #312]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 8002222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002224:	f013 0f02 	tst.w	r3, #2
 8002228:	d134      	bne.n	8002294 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800222a:	f7ff fd83 	bl	8001d34 <HAL_GetTick>
 800222e:	1b40      	subs	r0, r0, r5
 8002230:	2802      	cmp	r0, #2
 8002232:	d9f5      	bls.n	8002220 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002234:	2003      	movs	r0, #3
 8002236:	e131      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002238:	4a48      	ldr	r2, [pc, #288]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 800223a:	6813      	ldr	r3, [r2, #0]
 800223c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002240:	6921      	ldr	r1, [r4, #16]
 8002242:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	e7dd      	b.n	8002206 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800224a:	4b45      	ldr	r3, [pc, #276]	@ (8002360 <HAL_RCC_OscConfig+0x298>)
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002250:	f7ff fd70 	bl	8001d34 <HAL_GetTick>
 8002254:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002256:	4b41      	ldr	r3, [pc, #260]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f013 0f02 	tst.w	r3, #2
 800225e:	d0d2      	beq.n	8002206 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002260:	f7ff fd68 	bl	8001d34 <HAL_GetTick>
 8002264:	1b40      	subs	r0, r0, r5
 8002266:	2802      	cmp	r0, #2
 8002268:	d9f5      	bls.n	8002256 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800226a:	2003      	movs	r0, #3
 800226c:	e116      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800226e:	4b3c      	ldr	r3, [pc, #240]	@ (8002360 <HAL_RCC_OscConfig+0x298>)
 8002270:	2200      	movs	r2, #0
 8002272:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002276:	f7ff fd5d 	bl	8001d34 <HAL_GetTick>
 800227a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227c:	4b37      	ldr	r3, [pc, #220]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 800227e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002280:	f013 0f02 	tst.w	r3, #2
 8002284:	d006      	beq.n	8002294 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002286:	f7ff fd55 	bl	8001d34 <HAL_GetTick>
 800228a:	1b40      	subs	r0, r0, r5
 800228c:	2802      	cmp	r0, #2
 800228e:	d9f5      	bls.n	800227c <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002290:	2003      	movs	r0, #3
 8002292:	e103      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	f013 0f04 	tst.w	r3, #4
 800229a:	d077      	beq.n	800238c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229c:	4b2f      	ldr	r3, [pc, #188]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 800229e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80022a4:	d133      	bne.n	800230e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	4b2c      	ldr	r3, [pc, #176]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 80022ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022ae:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80022b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022be:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c0:	4b28      	ldr	r3, [pc, #160]	@ (8002364 <HAL_RCC_OscConfig+0x29c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80022c8:	d023      	beq.n	8002312 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ca:	68a3      	ldr	r3, [r4, #8]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d034      	beq.n	800233a <HAL_RCC_OscConfig+0x272>
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d038      	beq.n	8002346 <HAL_RCC_OscConfig+0x27e>
 80022d4:	4b21      	ldr	r3, [pc, #132]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 80022d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022d8:	f022 0201 	bic.w	r2, r2, #1
 80022dc:	671a      	str	r2, [r3, #112]	@ 0x70
 80022de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022e0:	f022 0204 	bic.w	r2, r2, #4
 80022e4:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022e6:	68a3      	ldr	r3, [r4, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d03d      	beq.n	8002368 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ec:	f7ff fd22 	bl	8001d34 <HAL_GetTick>
 80022f0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f2:	4b1a      	ldr	r3, [pc, #104]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f6:	f013 0f02 	tst.w	r3, #2
 80022fa:	d146      	bne.n	800238a <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022fc:	f7ff fd1a 	bl	8001d34 <HAL_GetTick>
 8002300:	1b80      	subs	r0, r0, r6
 8002302:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002306:	4298      	cmp	r0, r3
 8002308:	d9f3      	bls.n	80022f2 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800230a:	2003      	movs	r0, #3
 800230c:	e0c6      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 800230e:	2500      	movs	r5, #0
 8002310:	e7d6      	b.n	80022c0 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002312:	4a14      	ldr	r2, [pc, #80]	@ (8002364 <HAL_RCC_OscConfig+0x29c>)
 8002314:	6813      	ldr	r3, [r2, #0]
 8002316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800231a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800231c:	f7ff fd0a 	bl	8001d34 <HAL_GetTick>
 8002320:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002322:	4b10      	ldr	r3, [pc, #64]	@ (8002364 <HAL_RCC_OscConfig+0x29c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800232a:	d1ce      	bne.n	80022ca <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800232c:	f7ff fd02 	bl	8001d34 <HAL_GetTick>
 8002330:	1b80      	subs	r0, r0, r6
 8002332:	2802      	cmp	r0, #2
 8002334:	d9f5      	bls.n	8002322 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002336:	2003      	movs	r0, #3
 8002338:	e0b0      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800233a:	4a08      	ldr	r2, [pc, #32]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 800233c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6713      	str	r3, [r2, #112]	@ 0x70
 8002344:	e7cf      	b.n	80022e6 <HAL_RCC_OscConfig+0x21e>
 8002346:	4b05      	ldr	r3, [pc, #20]	@ (800235c <HAL_RCC_OscConfig+0x294>)
 8002348:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800234a:	f042 0204 	orr.w	r2, r2, #4
 800234e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002350:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	671a      	str	r2, [r3, #112]	@ 0x70
 8002358:	e7c5      	b.n	80022e6 <HAL_RCC_OscConfig+0x21e>
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	42470000 	.word	0x42470000
 8002364:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002368:	f7ff fce4 	bl	8001d34 <HAL_GetTick>
 800236c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236e:	4b52      	ldr	r3, [pc, #328]	@ (80024b8 <HAL_RCC_OscConfig+0x3f0>)
 8002370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002372:	f013 0f02 	tst.w	r3, #2
 8002376:	d008      	beq.n	800238a <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002378:	f7ff fcdc 	bl	8001d34 <HAL_GetTick>
 800237c:	1b80      	subs	r0, r0, r6
 800237e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002382:	4298      	cmp	r0, r3
 8002384:	d9f3      	bls.n	800236e <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002386:	2003      	movs	r0, #3
 8002388:	e088      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800238a:	b9ed      	cbnz	r5, 80023c8 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800238c:	69a3      	ldr	r3, [r4, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8083 	beq.w	800249a <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002394:	4a48      	ldr	r2, [pc, #288]	@ (80024b8 <HAL_RCC_OscConfig+0x3f0>)
 8002396:	6892      	ldr	r2, [r2, #8]
 8002398:	f002 020c 	and.w	r2, r2, #12
 800239c:	2a08      	cmp	r2, #8
 800239e:	d051      	beq.n	8002444 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d017      	beq.n	80023d4 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a4:	4b45      	ldr	r3, [pc, #276]	@ (80024bc <HAL_RCC_OscConfig+0x3f4>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7ff fcc3 	bl	8001d34 <HAL_GetTick>
 80023ae:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b0:	4b41      	ldr	r3, [pc, #260]	@ (80024b8 <HAL_RCC_OscConfig+0x3f0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80023b8:	d042      	beq.n	8002440 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ba:	f7ff fcbb 	bl	8001d34 <HAL_GetTick>
 80023be:	1b00      	subs	r0, r0, r4
 80023c0:	2802      	cmp	r0, #2
 80023c2:	d9f5      	bls.n	80023b0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80023c4:	2003      	movs	r0, #3
 80023c6:	e069      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c8:	4a3b      	ldr	r2, [pc, #236]	@ (80024b8 <HAL_RCC_OscConfig+0x3f0>)
 80023ca:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80023cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023d2:	e7db      	b.n	800238c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80023d4:	4b39      	ldr	r3, [pc, #228]	@ (80024bc <HAL_RCC_OscConfig+0x3f4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80023da:	f7ff fcab 	bl	8001d34 <HAL_GetTick>
 80023de:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e0:	4b35      	ldr	r3, [pc, #212]	@ (80024b8 <HAL_RCC_OscConfig+0x3f0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80023e8:	d006      	beq.n	80023f8 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ea:	f7ff fca3 	bl	8001d34 <HAL_GetTick>
 80023ee:	1b40      	subs	r0, r0, r5
 80023f0:	2802      	cmp	r0, #2
 80023f2:	d9f5      	bls.n	80023e0 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80023f4:	2003      	movs	r0, #3
 80023f6:	e051      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023f8:	69e3      	ldr	r3, [r4, #28]
 80023fa:	6a22      	ldr	r2, [r4, #32]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002400:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002404:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002406:	0852      	lsrs	r2, r2, #1
 8002408:	3a01      	subs	r2, #1
 800240a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800240e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002410:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002414:	4a28      	ldr	r2, [pc, #160]	@ (80024b8 <HAL_RCC_OscConfig+0x3f0>)
 8002416:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002418:	4b28      	ldr	r3, [pc, #160]	@ (80024bc <HAL_RCC_OscConfig+0x3f4>)
 800241a:	2201      	movs	r2, #1
 800241c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800241e:	f7ff fc89 	bl	8001d34 <HAL_GetTick>
 8002422:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002424:	4b24      	ldr	r3, [pc, #144]	@ (80024b8 <HAL_RCC_OscConfig+0x3f0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800242c:	d106      	bne.n	800243c <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242e:	f7ff fc81 	bl	8001d34 <HAL_GetTick>
 8002432:	1b00      	subs	r0, r0, r4
 8002434:	2802      	cmp	r0, #2
 8002436:	d9f5      	bls.n	8002424 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002438:	2003      	movs	r0, #3
 800243a:	e02f      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800243c:	2000      	movs	r0, #0
 800243e:	e02d      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
 8002440:	2000      	movs	r0, #0
 8002442:	e02b      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002444:	2b01      	cmp	r3, #1
 8002446:	d02b      	beq.n	80024a0 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002448:	4b1b      	ldr	r3, [pc, #108]	@ (80024b8 <HAL_RCC_OscConfig+0x3f0>)
 800244a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002450:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002452:	4291      	cmp	r1, r2
 8002454:	d126      	bne.n	80024a4 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002456:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800245a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245c:	428a      	cmp	r2, r1
 800245e:	d123      	bne.n	80024a8 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002460:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002462:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002466:	401a      	ands	r2, r3
 8002468:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800246c:	d11e      	bne.n	80024ac <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800246e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002472:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002474:	0852      	lsrs	r2, r2, #1
 8002476:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002478:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800247c:	d118      	bne.n	80024b0 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800247e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002482:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002484:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002488:	d114      	bne.n	80024b4 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 800248a:	2000      	movs	r0, #0
 800248c:	e006      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 800248e:	2001      	movs	r0, #1
}
 8002490:	4770      	bx	lr
        return HAL_ERROR;
 8002492:	2001      	movs	r0, #1
 8002494:	e002      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002496:	2001      	movs	r0, #1
 8002498:	e000      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800249a:	2000      	movs	r0, #0
}
 800249c:	b002      	add	sp, #8
 800249e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80024a0:	2001      	movs	r0, #1
 80024a2:	e7fb      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80024a4:	2001      	movs	r0, #1
 80024a6:	e7f9      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
 80024a8:	2001      	movs	r0, #1
 80024aa:	e7f7      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
 80024ac:	2001      	movs	r0, #1
 80024ae:	e7f5      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
 80024b0:	2001      	movs	r0, #1
 80024b2:	e7f3      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
 80024b4:	2001      	movs	r0, #1
 80024b6:	e7f1      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
 80024b8:	40023800 	.word	0x40023800
 80024bc:	42470000 	.word	0x42470000

080024c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c0:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024c2:	4b26      	ldr	r3, [pc, #152]	@ (800255c <HAL_RCC_GetSysClockFreq+0x9c>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d041      	beq.n	8002552 <HAL_RCC_GetSysClockFreq+0x92>
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d141      	bne.n	8002556 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024d2:	4b22      	ldr	r3, [pc, #136]	@ (800255c <HAL_RCC_GetSysClockFreq+0x9c>)
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80024e0:	d012      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024e2:	4b1e      	ldr	r3, [pc, #120]	@ (800255c <HAL_RCC_GetSysClockFreq+0x9c>)
 80024e4:	6859      	ldr	r1, [r3, #4]
 80024e6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80024ea:	481d      	ldr	r0, [pc, #116]	@ (8002560 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024ec:	2300      	movs	r3, #0
 80024ee:	fba1 0100 	umull	r0, r1, r1, r0
 80024f2:	f7fd fe7b 	bl	80001ec <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024f6:	4b19      	ldr	r3, [pc, #100]	@ (800255c <HAL_RCC_GetSysClockFreq+0x9c>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80024fe:	3301      	adds	r3, #1
 8002500:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002502:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002506:	e027      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002508:	4b14      	ldr	r3, [pc, #80]	@ (800255c <HAL_RCC_GetSysClockFreq+0x9c>)
 800250a:	6858      	ldr	r0, [r3, #4]
 800250c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002510:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002514:	ebbc 0c00 	subs.w	ip, ip, r0
 8002518:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800251c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002520:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002524:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002528:	ebb1 010c 	subs.w	r1, r1, ip
 800252c:	eb63 030e 	sbc.w	r3, r3, lr
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002536:	00c9      	lsls	r1, r1, #3
 8002538:	eb11 0c00 	adds.w	ip, r1, r0
 800253c:	f143 0300 	adc.w	r3, r3, #0
 8002540:	0299      	lsls	r1, r3, #10
 8002542:	2300      	movs	r3, #0
 8002544:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002548:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800254c:	f7fd fe4e 	bl	80001ec <__aeabi_uldivmod>
 8002550:	e7d1      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8002552:	4803      	ldr	r0, [pc, #12]	@ (8002560 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002554:	e000      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x98>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002556:	4803      	ldr	r0, [pc, #12]	@ (8002564 <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002558:	bd08      	pop	{r3, pc}
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800
 8002560:	017d7840 	.word	0x017d7840
 8002564:	00f42400 	.word	0x00f42400

08002568 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002568:	2800      	cmp	r0, #0
 800256a:	f000 809b 	beq.w	80026a4 <HAL_RCC_ClockConfig+0x13c>
{
 800256e:	b570      	push	{r4, r5, r6, lr}
 8002570:	460d      	mov	r5, r1
 8002572:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	4b4f      	ldr	r3, [pc, #316]	@ (80026b4 <HAL_RCC_ClockConfig+0x14c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	428b      	cmp	r3, r1
 800257e:	d208      	bcs.n	8002592 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002580:	b2cb      	uxtb	r3, r1
 8002582:	4a4c      	ldr	r2, [pc, #304]	@ (80026b4 <HAL_RCC_ClockConfig+0x14c>)
 8002584:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	6813      	ldr	r3, [r2, #0]
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	428b      	cmp	r3, r1
 800258e:	f040 808b 	bne.w	80026a8 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	f013 0f02 	tst.w	r3, #2
 8002598:	d017      	beq.n	80025ca <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259a:	f013 0f04 	tst.w	r3, #4
 800259e:	d004      	beq.n	80025aa <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a0:	4a45      	ldr	r2, [pc, #276]	@ (80026b8 <HAL_RCC_ClockConfig+0x150>)
 80025a2:	6893      	ldr	r3, [r2, #8]
 80025a4:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025a8:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025aa:	6823      	ldr	r3, [r4, #0]
 80025ac:	f013 0f08 	tst.w	r3, #8
 80025b0:	d004      	beq.n	80025bc <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b2:	4a41      	ldr	r2, [pc, #260]	@ (80026b8 <HAL_RCC_ClockConfig+0x150>)
 80025b4:	6893      	ldr	r3, [r2, #8]
 80025b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025ba:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025bc:	4a3e      	ldr	r2, [pc, #248]	@ (80026b8 <HAL_RCC_ClockConfig+0x150>)
 80025be:	6893      	ldr	r3, [r2, #8]
 80025c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025c4:	68a1      	ldr	r1, [r4, #8]
 80025c6:	430b      	orrs	r3, r1
 80025c8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	f013 0f01 	tst.w	r3, #1
 80025d0:	d032      	beq.n	8002638 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d2:	6863      	ldr	r3, [r4, #4]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d021      	beq.n	800261c <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d8:	1e9a      	subs	r2, r3, #2
 80025da:	2a01      	cmp	r2, #1
 80025dc:	d925      	bls.n	800262a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025de:	4a36      	ldr	r2, [pc, #216]	@ (80026b8 <HAL_RCC_ClockConfig+0x150>)
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	f012 0f02 	tst.w	r2, #2
 80025e6:	d061      	beq.n	80026ac <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e8:	4933      	ldr	r1, [pc, #204]	@ (80026b8 <HAL_RCC_ClockConfig+0x150>)
 80025ea:	688a      	ldr	r2, [r1, #8]
 80025ec:	f022 0203 	bic.w	r2, r2, #3
 80025f0:	4313      	orrs	r3, r2
 80025f2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80025f4:	f7ff fb9e 	bl	8001d34 <HAL_GetTick>
 80025f8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fa:	4b2f      	ldr	r3, [pc, #188]	@ (80026b8 <HAL_RCC_ClockConfig+0x150>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	6862      	ldr	r2, [r4, #4]
 8002604:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002608:	d016      	beq.n	8002638 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260a:	f7ff fb93 	bl	8001d34 <HAL_GetTick>
 800260e:	1b80      	subs	r0, r0, r6
 8002610:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002614:	4298      	cmp	r0, r3
 8002616:	d9f0      	bls.n	80025fa <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002618:	2003      	movs	r0, #3
 800261a:	e042      	b.n	80026a2 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261c:	4a26      	ldr	r2, [pc, #152]	@ (80026b8 <HAL_RCC_ClockConfig+0x150>)
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002624:	d1e0      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002626:	2001      	movs	r0, #1
 8002628:	e03b      	b.n	80026a2 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262a:	4a23      	ldr	r2, [pc, #140]	@ (80026b8 <HAL_RCC_ClockConfig+0x150>)
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002632:	d1d9      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002634:	2001      	movs	r0, #1
 8002636:	e034      	b.n	80026a2 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002638:	4b1e      	ldr	r3, [pc, #120]	@ (80026b4 <HAL_RCC_ClockConfig+0x14c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	42ab      	cmp	r3, r5
 8002642:	d907      	bls.n	8002654 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002644:	b2ea      	uxtb	r2, r5
 8002646:	4b1b      	ldr	r3, [pc, #108]	@ (80026b4 <HAL_RCC_ClockConfig+0x14c>)
 8002648:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	42ab      	cmp	r3, r5
 8002652:	d12d      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	f013 0f04 	tst.w	r3, #4
 800265a:	d006      	beq.n	800266a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800265c:	4a16      	ldr	r2, [pc, #88]	@ (80026b8 <HAL_RCC_ClockConfig+0x150>)
 800265e:	6893      	ldr	r3, [r2, #8]
 8002660:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002664:	68e1      	ldr	r1, [r4, #12]
 8002666:	430b      	orrs	r3, r1
 8002668:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	f013 0f08 	tst.w	r3, #8
 8002670:	d007      	beq.n	8002682 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002672:	4a11      	ldr	r2, [pc, #68]	@ (80026b8 <HAL_RCC_ClockConfig+0x150>)
 8002674:	6893      	ldr	r3, [r2, #8]
 8002676:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800267a:	6921      	ldr	r1, [r4, #16]
 800267c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002680:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002682:	f7ff ff1d 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 8002686:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <HAL_RCC_ClockConfig+0x150>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800268e:	4a0b      	ldr	r2, [pc, #44]	@ (80026bc <HAL_RCC_ClockConfig+0x154>)
 8002690:	5cd3      	ldrb	r3, [r2, r3]
 8002692:	40d8      	lsrs	r0, r3
 8002694:	4b0a      	ldr	r3, [pc, #40]	@ (80026c0 <HAL_RCC_ClockConfig+0x158>)
 8002696:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002698:	4b0a      	ldr	r3, [pc, #40]	@ (80026c4 <HAL_RCC_ClockConfig+0x15c>)
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	f7ff fafe 	bl	8001c9c <HAL_InitTick>
  return HAL_OK;
 80026a0:	2000      	movs	r0, #0
}
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80026a4:	2001      	movs	r0, #1
}
 80026a6:	4770      	bx	lr
      return HAL_ERROR;
 80026a8:	2001      	movs	r0, #1
 80026aa:	e7fa      	b.n	80026a2 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80026ac:	2001      	movs	r0, #1
 80026ae:	e7f8      	b.n	80026a2 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80026b0:	2001      	movs	r0, #1
 80026b2:	e7f6      	b.n	80026a2 <HAL_RCC_ClockConfig+0x13a>
 80026b4:	40023c00 	.word	0x40023c00
 80026b8:	40023800 	.word	0x40023800
 80026bc:	08002738 	.word	0x08002738
 80026c0:	20000008 	.word	0x20000008
 80026c4:	20000010 	.word	0x20000010

080026c8 <memset>:
 80026c8:	4402      	add	r2, r0
 80026ca:	4603      	mov	r3, r0
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d100      	bne.n	80026d2 <memset+0xa>
 80026d0:	4770      	bx	lr
 80026d2:	f803 1b01 	strb.w	r1, [r3], #1
 80026d6:	e7f9      	b.n	80026cc <memset+0x4>

080026d8 <__libc_init_array>:
 80026d8:	b570      	push	{r4, r5, r6, lr}
 80026da:	4d0d      	ldr	r5, [pc, #52]	@ (8002710 <__libc_init_array+0x38>)
 80026dc:	4c0d      	ldr	r4, [pc, #52]	@ (8002714 <__libc_init_array+0x3c>)
 80026de:	1b64      	subs	r4, r4, r5
 80026e0:	10a4      	asrs	r4, r4, #2
 80026e2:	2600      	movs	r6, #0
 80026e4:	42a6      	cmp	r6, r4
 80026e6:	d109      	bne.n	80026fc <__libc_init_array+0x24>
 80026e8:	4d0b      	ldr	r5, [pc, #44]	@ (8002718 <__libc_init_array+0x40>)
 80026ea:	4c0c      	ldr	r4, [pc, #48]	@ (800271c <__libc_init_array+0x44>)
 80026ec:	f000 f818 	bl	8002720 <_init>
 80026f0:	1b64      	subs	r4, r4, r5
 80026f2:	10a4      	asrs	r4, r4, #2
 80026f4:	2600      	movs	r6, #0
 80026f6:	42a6      	cmp	r6, r4
 80026f8:	d105      	bne.n	8002706 <__libc_init_array+0x2e>
 80026fa:	bd70      	pop	{r4, r5, r6, pc}
 80026fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002700:	4798      	blx	r3
 8002702:	3601      	adds	r6, #1
 8002704:	e7ee      	b.n	80026e4 <__libc_init_array+0xc>
 8002706:	f855 3b04 	ldr.w	r3, [r5], #4
 800270a:	4798      	blx	r3
 800270c:	3601      	adds	r6, #1
 800270e:	e7f2      	b.n	80026f6 <__libc_init_array+0x1e>
 8002710:	08002750 	.word	0x08002750
 8002714:	08002750 	.word	0x08002750
 8002718:	08002750 	.word	0x08002750
 800271c:	08002754 	.word	0x08002754

08002720 <_init>:
 8002720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002722:	bf00      	nop
 8002724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002726:	bc08      	pop	{r3}
 8002728:	469e      	mov	lr, r3
 800272a:	4770      	bx	lr

0800272c <_fini>:
 800272c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272e:	bf00      	nop
 8002730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002732:	bc08      	pop	{r3}
 8002734:	469e      	mov	lr, r3
 8002736:	4770      	bx	lr
