
Controle-Cabo_STM32F407ZGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bd8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08008d60  08008d60  00009d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009044  08009044  0000b00c  2**0
                  CONTENTS
  4 .ARM          00000008  08009044  08009044  0000a044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800904c  0800904c  0000b00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800904c  0800904c  0000a04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009050  08009050  0000a050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08009054  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b00c  2**0
                  CONTENTS
 10 .bss          00001d70  2000000c  2000000c  0000b00c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001d7c  20001d7c  0000b00c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b00c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001deac  00000000  00000000  0000b03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046c4  00000000  00000000  00028ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  0002d5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f72  00000000  00000000  0002ea48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b70  00000000  00000000  0002f9ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019998  00000000  00000000  0005352a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6fc5  00000000  00000000  0006cec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00153e87  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051ac  00000000  00000000  00153ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000c2  00000000  00000000  00159078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008d48 	.word	0x08008d48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08008d48 	.word	0x08008d48

080001c8 <CPU_IntDis>:
@               void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 80001c8:	b672      	cpsid	i
        BX      LR
 80001ca:	4770      	bx	lr

080001cc <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 80001cc:	b662      	cpsie	i
        BX      LR
 80001ce:	4770      	bx	lr

080001d0 <CPU_SR_Save>:
@                       CPSIE i
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 80001d0:	b672      	cpsid	i
        PUSH   {R1}
 80001d2:	b402      	push	{r1}
        MRS     R1, BASEPRI
 80001d4:	f3ef 8111 	mrs	r1, BASEPRI
        MSR     BASEPRI, R0
 80001d8:	f380 8811 	msr	BASEPRI, r0
        DSB
 80001dc:	f3bf 8f4f 	dsb	sy
        ISB
 80001e0:	f3bf 8f6f 	isb	sy
        MOV     R0, R1
 80001e4:	4608      	mov	r0, r1
        POP    {R1}
 80001e6:	bc02      	pop	{r1}
        CPSIE   I
 80001e8:	b662      	cpsie	i
        BX      LR
 80001ea:	4770      	bx	lr

080001ec <CPU_SR_Restore>:


.thumb_func
CPU_SR_Restore:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 80001ec:	b672      	cpsid	i
        MSR     BASEPRI, R0
 80001ee:	f380 8811 	msr	BASEPRI, r0
        DSB
 80001f2:	f3bf 8f4f 	dsb	sy
        ISB
 80001f6:	f3bf 8f6f 	isb	sy
        CPSIE   I
 80001fa:	b662      	cpsie	i
        BX      LR
 80001fc:	4770      	bx	lr

080001fe <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 80001fe:	bf30      	wfi
        BX      LR
 8000200:	4770      	bx	lr

08000202 <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 8000202:	bf20      	wfe
        BX      LR
 8000204:	4770      	bx	lr

08000206 <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 8000206:	fab0 f080 	clz	r0, r0
        BX      LR
 800020a:	4770      	bx	lr

0800020c <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 800020c:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 8000210:	fab0 f080 	clz	r0, r0
        BX      LR
 8000214:	4770      	bx	lr

08000216 <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 8000216:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 800021a:	4770      	bx	lr

0800021c <OSStartHighRdy>:
@              h) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 800021c:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 800021e:	f64e 5022 	movw	r0, #60706	@ 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 8000222:	f2ce 0000 	movt	r0, #57344	@ 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 8000226:	f240 01ff 	movw	r1, #255	@ 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 800022a:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 800022e:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 8000230:	2000      	movs	r0, #0
    MSR     PSP, R0
 8000232:	f380 8809 	msr	PSP, r0

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 8000236:	f241 00ac 	movw	r0, #4268	@ 0x10ac
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 800023a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    LDR     R1, [R0]
 800023e:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 8000240:	f381 8808 	msr	MSP, r1

    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 8000244:	f005 f838 	bl	80052b8 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000248:	f641 10ce 	movw	r0, #6606	@ 0x19ce
    MOVT    R0, #:upper16:OSPrioCur
 800024c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 8000250:	f641 11cf 	movw	r1, #6607	@ 0x19cf
    MOVT    R1, #:upper16:OSPrioHighRdy
 8000254:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 8000258:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 800025a:	7002      	strb	r2, [r0, #0]

    MOVW    R0, #:lower16:OSTCBCurPtr                           @ OSTCBCurPtr = OSTCBHighRdyPtr;
 800025c:	f641 5074 	movw	r0, #7540	@ 0x1d74
    MOVT    R0, #:upper16:OSTCBCurPtr
 8000260:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdyPtr
 8000264:	f641 5178 	movw	r1, #7544	@ 0x1d78
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 8000268:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 800026c:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 800026e:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 8000270:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 8000272:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 8000276:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 800027a:	f040 0002 	orr.w	r0, r0, #2
    BIC     R0, R0, #4                                          @ Clear FPCA bit to indicate FPU is not in use
 800027e:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, R0
 8000282:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 8000286:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11, LR}                                  @ Restore r4-11, lr from new process stack
 800028a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 800028e:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 8000290:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 8000294:	bc06      	pop	{r1, r2}
    CPSIE    I
 8000296:	b662      	cpsie	i
    BX       R1
 8000298:	4708      	bx	r1

0800029a <OSCtxSw>:

.thumb_func
OSCtxSw:
.thumb_func
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800029a:	4825      	ldr	r0, [pc, #148]	@ (8000330 <OS_CPU_PendSVHandler+0x8c>)
    LDR     R1, =NVIC_PENDSVSET
 800029c:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
    STR     R1, [R0]
 80002a0:	6001      	str	r1, [r0, #0]
    BX      LR
 80002a2:	4770      	bx	lr

080002a4 <OS_CPU_PendSVHandler>:
@                  CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 80002a4:	b672      	cpsid	i
    MOVW    R2, #:lower16:OS_KA_BASEPRI_Boundary                @ Set BASEPRI priority level required for exception preemption
 80002a6:	f241 02b0 	movw	r2, #4272	@ 0x10b0
    MOVT    R2, #:upper16:OS_KA_BASEPRI_Boundary
 80002aa:	f2c2 0200 	movt	r2, #8192	@ 0x2000
    LDR     R1, [R2]
 80002ae:	6811      	ldr	r1, [r2, #0]
    MSR     BASEPRI, R1
 80002b0:	f381 8811 	msr	BASEPRI, r1
    DSB
 80002b4:	f3bf 8f4f 	dsb	sy
    ISB
 80002b8:	f3bf 8f6f 	isb	sy
    CPSIE   I
 80002bc:	b662      	cpsie	i

    MRS     R0, PSP                                             @ PSP is process stack pointer
 80002be:	f3ef 8009 	mrs	r0, PSP
#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
                                                                @ Push high vfp registers if the task is using the FPU context
    TST       R14, #0x10
 80002c2:	f01e 0f10 	tst.w	lr, #16
    IT        EQ
 80002c6:	bf08      	it	eq
    VSTMDBEQ  R0!, {S16-S31}
 80002c8:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
#endif

    STMFD   R0!, {R4-R11, R14}                                  @ Save remaining regs r4-11, R14 on process stack
 80002cc:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    MOVW    R5, #:lower16:OSTCBCurPtr                           @ OSTCBCurPtr->StkPtr = SP;
 80002d0:	f641 5574 	movw	r5, #7540	@ 0x1d74
    MOVT    R5, #:upper16:OSTCBCurPtr
 80002d4:	f2c2 0500 	movt	r5, #8192	@ 0x2000
    LDR     R1, [R5]
 80002d8:	6829      	ldr	r1, [r5, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 80002da:	6008      	str	r0, [r1, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 80002dc:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 80002de:	f004 ffeb 	bl	80052b8 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 80002e2:	f641 10ce 	movw	r0, #6606	@ 0x19ce
    MOVT    R0, #:upper16:OSPrioCur
 80002e6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 80002ea:	f641 11cf 	movw	r1, #6607	@ 0x19cf
    MOVT    R1, #:upper16:OSPrioHighRdy
 80002ee:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 80002f2:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002f4:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdyPtr                       @ OSTCBCurPtr = OSTCBHighRdyPtr;
 80002f6:	f641 5178 	movw	r1, #7544	@ 0x1d78
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 80002fa:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 80002fe:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 8000300:	602a      	str	r2, [r5, #0]

    ORR     LR,  R4, #0x04                                      @ Ensure exception return uses process stack
 8000302:	f044 0e04 	orr.w	lr, r4, #4
    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 8000306:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11, R14}                                  @ Restore r4-11, R14 from new process stack
 8000308:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
                                                                @ Pop the high vfp registers if the next task is using the FPU context
    TST       R14, #0x10
 800030c:	f01e 0f10 	tst.w	lr, #16
    IT        EQ
 8000310:	bf08      	it	eq
    VLDMIAEQ  R0!, {S16-S31}
 8000312:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
#endif

    MSR     PSP, R0                                             @ Load PSP with new process SP
 8000316:	f380 8809 	msr	PSP, r0

    MOV     R2, #0                                              @ Restore BASEPRI priority level to 0
 800031a:	f04f 0200 	mov.w	r2, #0
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 800031e:	b672      	cpsid	i
    MSR     BASEPRI, R2
 8000320:	f382 8811 	msr	BASEPRI, r2
    DSB
 8000324:	f3bf 8f4f 	dsb	sy
    ISB
 8000328:	f3bf 8f6f 	isb	sy
    CPSIE   I
 800032c:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 800032e:	4770      	bx	lr
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000330:	e000ed04 	.word	0xe000ed04

08000334 <__aeabi_dmul>:
 8000334:	b570      	push	{r4, r5, r6, lr}
 8000336:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800033a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800033e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000342:	bf1d      	ittte	ne
 8000344:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000348:	ea94 0f0c 	teqne	r4, ip
 800034c:	ea95 0f0c 	teqne	r5, ip
 8000350:	f000 f8de 	bleq	8000510 <__aeabi_dmul+0x1dc>
 8000354:	442c      	add	r4, r5
 8000356:	ea81 0603 	eor.w	r6, r1, r3
 800035a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800035e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000362:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000366:	bf18      	it	ne
 8000368:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800036c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000370:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000374:	d038      	beq.n	80003e8 <__aeabi_dmul+0xb4>
 8000376:	fba0 ce02 	umull	ip, lr, r0, r2
 800037a:	f04f 0500 	mov.w	r5, #0
 800037e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000382:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000386:	fbe0 e503 	umlal	lr, r5, r0, r3
 800038a:	f04f 0600 	mov.w	r6, #0
 800038e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000392:	f09c 0f00 	teq	ip, #0
 8000396:	bf18      	it	ne
 8000398:	f04e 0e01 	orrne.w	lr, lr, #1
 800039c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80003a0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80003a4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80003a8:	d204      	bcs.n	80003b4 <__aeabi_dmul+0x80>
 80003aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80003ae:	416d      	adcs	r5, r5
 80003b0:	eb46 0606 	adc.w	r6, r6, r6
 80003b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80003b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80003bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80003c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80003c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80003c8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80003cc:	bf88      	it	hi
 80003ce:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80003d2:	d81e      	bhi.n	8000412 <__aeabi_dmul+0xde>
 80003d4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80003d8:	bf08      	it	eq
 80003da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80003de:	f150 0000 	adcs.w	r0, r0, #0
 80003e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e6:	bd70      	pop	{r4, r5, r6, pc}
 80003e8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80003ec:	ea46 0101 	orr.w	r1, r6, r1
 80003f0:	ea40 0002 	orr.w	r0, r0, r2
 80003f4:	ea81 0103 	eor.w	r1, r1, r3
 80003f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80003fc:	bfc2      	ittt	gt
 80003fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000402:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000406:	bd70      	popgt	{r4, r5, r6, pc}
 8000408:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800040c:	f04f 0e00 	mov.w	lr, #0
 8000410:	3c01      	subs	r4, #1
 8000412:	f300 80ab 	bgt.w	800056c <__aeabi_dmul+0x238>
 8000416:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800041a:	bfde      	ittt	le
 800041c:	2000      	movle	r0, #0
 800041e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000422:	bd70      	pople	{r4, r5, r6, pc}
 8000424:	f1c4 0400 	rsb	r4, r4, #0
 8000428:	3c20      	subs	r4, #32
 800042a:	da35      	bge.n	8000498 <__aeabi_dmul+0x164>
 800042c:	340c      	adds	r4, #12
 800042e:	dc1b      	bgt.n	8000468 <__aeabi_dmul+0x134>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0520 	rsb	r5, r4, #32
 8000438:	fa00 f305 	lsl.w	r3, r0, r5
 800043c:	fa20 f004 	lsr.w	r0, r0, r4
 8000440:	fa01 f205 	lsl.w	r2, r1, r5
 8000444:	ea40 0002 	orr.w	r0, r0, r2
 8000448:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000450:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000454:	fa21 f604 	lsr.w	r6, r1, r4
 8000458:	eb42 0106 	adc.w	r1, r2, r6
 800045c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000460:	bf08      	it	eq
 8000462:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000466:	bd70      	pop	{r4, r5, r6, pc}
 8000468:	f1c4 040c 	rsb	r4, r4, #12
 800046c:	f1c4 0520 	rsb	r5, r4, #32
 8000470:	fa00 f304 	lsl.w	r3, r0, r4
 8000474:	fa20 f005 	lsr.w	r0, r0, r5
 8000478:	fa01 f204 	lsl.w	r2, r1, r4
 800047c:	ea40 0002 	orr.w	r0, r0, r2
 8000480:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000484:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000488:	f141 0100 	adc.w	r1, r1, #0
 800048c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000490:	bf08      	it	eq
 8000492:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000496:	bd70      	pop	{r4, r5, r6, pc}
 8000498:	f1c4 0520 	rsb	r5, r4, #32
 800049c:	fa00 f205 	lsl.w	r2, r0, r5
 80004a0:	ea4e 0e02 	orr.w	lr, lr, r2
 80004a4:	fa20 f304 	lsr.w	r3, r0, r4
 80004a8:	fa01 f205 	lsl.w	r2, r1, r5
 80004ac:	ea43 0302 	orr.w	r3, r3, r2
 80004b0:	fa21 f004 	lsr.w	r0, r1, r4
 80004b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b8:	fa21 f204 	lsr.w	r2, r1, r4
 80004bc:	ea20 0002 	bic.w	r0, r0, r2
 80004c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80004c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004ce:	bd70      	pop	{r4, r5, r6, pc}
 80004d0:	f094 0f00 	teq	r4, #0
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_dmul+0x1c2>
 80004d6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80004da:	0040      	lsls	r0, r0, #1
 80004dc:	eb41 0101 	adc.w	r1, r1, r1
 80004e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80004e4:	bf08      	it	eq
 80004e6:	3c01      	subeq	r4, #1
 80004e8:	d0f7      	beq.n	80004da <__aeabi_dmul+0x1a6>
 80004ea:	ea41 0106 	orr.w	r1, r1, r6
 80004ee:	f095 0f00 	teq	r5, #0
 80004f2:	bf18      	it	ne
 80004f4:	4770      	bxne	lr
 80004f6:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80004fa:	0052      	lsls	r2, r2, #1
 80004fc:	eb43 0303 	adc.w	r3, r3, r3
 8000500:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000504:	bf08      	it	eq
 8000506:	3d01      	subeq	r5, #1
 8000508:	d0f7      	beq.n	80004fa <__aeabi_dmul+0x1c6>
 800050a:	ea43 0306 	orr.w	r3, r3, r6
 800050e:	4770      	bx	lr
 8000510:	ea94 0f0c 	teq	r4, ip
 8000514:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000518:	bf18      	it	ne
 800051a:	ea95 0f0c 	teqne	r5, ip
 800051e:	d00c      	beq.n	800053a <__aeabi_dmul+0x206>
 8000520:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800052a:	d1d1      	bne.n	80004d0 <__aeabi_dmul+0x19c>
 800052c:	ea81 0103 	eor.w	r1, r1, r3
 8000530:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd70      	pop	{r4, r5, r6, pc}
 800053a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800053e:	bf06      	itte	eq
 8000540:	4610      	moveq	r0, r2
 8000542:	4619      	moveq	r1, r3
 8000544:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000548:	d019      	beq.n	800057e <__aeabi_dmul+0x24a>
 800054a:	ea94 0f0c 	teq	r4, ip
 800054e:	d102      	bne.n	8000556 <__aeabi_dmul+0x222>
 8000550:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000554:	d113      	bne.n	800057e <__aeabi_dmul+0x24a>
 8000556:	ea95 0f0c 	teq	r5, ip
 800055a:	d105      	bne.n	8000568 <__aeabi_dmul+0x234>
 800055c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000560:	bf1c      	itt	ne
 8000562:	4610      	movne	r0, r2
 8000564:	4619      	movne	r1, r3
 8000566:	d10a      	bne.n	800057e <__aeabi_dmul+0x24a>
 8000568:	ea81 0103 	eor.w	r1, r1, r3
 800056c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000570:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000574:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000578:	f04f 0000 	mov.w	r0, #0
 800057c:	bd70      	pop	{r4, r5, r6, pc}
 800057e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000582:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000586:	bd70      	pop	{r4, r5, r6, pc}

08000588 <__aeabi_drsub>:
 8000588:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800058c:	e002      	b.n	8000594 <__adddf3>
 800058e:	bf00      	nop

08000590 <__aeabi_dsub>:
 8000590:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000594 <__adddf3>:
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800059a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800059e:	ea94 0f05 	teq	r4, r5
 80005a2:	bf08      	it	eq
 80005a4:	ea90 0f02 	teqeq	r0, r2
 80005a8:	bf1f      	itttt	ne
 80005aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80005ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80005b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80005b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005ba:	f000 80e2 	beq.w	8000782 <__adddf3+0x1ee>
 80005be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80005c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80005c6:	bfb8      	it	lt
 80005c8:	426d      	neglt	r5, r5
 80005ca:	dd0c      	ble.n	80005e6 <__adddf3+0x52>
 80005cc:	442c      	add	r4, r5
 80005ce:	ea80 0202 	eor.w	r2, r0, r2
 80005d2:	ea81 0303 	eor.w	r3, r1, r3
 80005d6:	ea82 0000 	eor.w	r0, r2, r0
 80005da:	ea83 0101 	eor.w	r1, r3, r1
 80005de:	ea80 0202 	eor.w	r2, r0, r2
 80005e2:	ea81 0303 	eor.w	r3, r1, r3
 80005e6:	2d36      	cmp	r5, #54	@ 0x36
 80005e8:	bf88      	it	hi
 80005ea:	bd30      	pophi	{r4, r5, pc}
 80005ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80005f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80005f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005fc:	d002      	beq.n	8000604 <__adddf3+0x70>
 80005fe:	4240      	negs	r0, r0
 8000600:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000604:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000608:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800060c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000610:	d002      	beq.n	8000618 <__adddf3+0x84>
 8000612:	4252      	negs	r2, r2
 8000614:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000618:	ea94 0f05 	teq	r4, r5
 800061c:	f000 80a7 	beq.w	800076e <__adddf3+0x1da>
 8000620:	f1a4 0401 	sub.w	r4, r4, #1
 8000624:	f1d5 0e20 	rsbs	lr, r5, #32
 8000628:	db0d      	blt.n	8000646 <__adddf3+0xb2>
 800062a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800062e:	fa22 f205 	lsr.w	r2, r2, r5
 8000632:	1880      	adds	r0, r0, r2
 8000634:	f141 0100 	adc.w	r1, r1, #0
 8000638:	fa03 f20e 	lsl.w	r2, r3, lr
 800063c:	1880      	adds	r0, r0, r2
 800063e:	fa43 f305 	asr.w	r3, r3, r5
 8000642:	4159      	adcs	r1, r3
 8000644:	e00e      	b.n	8000664 <__adddf3+0xd0>
 8000646:	f1a5 0520 	sub.w	r5, r5, #32
 800064a:	f10e 0e20 	add.w	lr, lr, #32
 800064e:	2a01      	cmp	r2, #1
 8000650:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000654:	bf28      	it	cs
 8000656:	f04c 0c02 	orrcs.w	ip, ip, #2
 800065a:	fa43 f305 	asr.w	r3, r3, r5
 800065e:	18c0      	adds	r0, r0, r3
 8000660:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	d507      	bpl.n	800067a <__adddf3+0xe6>
 800066a:	f04f 0e00 	mov.w	lr, #0
 800066e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000672:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000676:	eb6e 0101 	sbc.w	r1, lr, r1
 800067a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800067e:	d31b      	bcc.n	80006b8 <__adddf3+0x124>
 8000680:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000684:	d30c      	bcc.n	80006a0 <__adddf3+0x10c>
 8000686:	0849      	lsrs	r1, r1, #1
 8000688:	ea5f 0030 	movs.w	r0, r0, rrx
 800068c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000690:	f104 0401 	add.w	r4, r4, #1
 8000694:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000698:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800069c:	f080 809a 	bcs.w	80007d4 <__adddf3+0x240>
 80006a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	ea41 0105 	orr.w	r1, r1, r5
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80006bc:	4140      	adcs	r0, r0
 80006be:	eb41 0101 	adc.w	r1, r1, r1
 80006c2:	3c01      	subs	r4, #1
 80006c4:	bf28      	it	cs
 80006c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80006ca:	d2e9      	bcs.n	80006a0 <__adddf3+0x10c>
 80006cc:	f091 0f00 	teq	r1, #0
 80006d0:	bf04      	itt	eq
 80006d2:	4601      	moveq	r1, r0
 80006d4:	2000      	moveq	r0, #0
 80006d6:	fab1 f381 	clz	r3, r1
 80006da:	bf08      	it	eq
 80006dc:	3320      	addeq	r3, #32
 80006de:	f1a3 030b 	sub.w	r3, r3, #11
 80006e2:	f1b3 0220 	subs.w	r2, r3, #32
 80006e6:	da0c      	bge.n	8000702 <__adddf3+0x16e>
 80006e8:	320c      	adds	r2, #12
 80006ea:	dd08      	ble.n	80006fe <__adddf3+0x16a>
 80006ec:	f102 0c14 	add.w	ip, r2, #20
 80006f0:	f1c2 020c 	rsb	r2, r2, #12
 80006f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80006f8:	fa21 f102 	lsr.w	r1, r1, r2
 80006fc:	e00c      	b.n	8000718 <__adddf3+0x184>
 80006fe:	f102 0214 	add.w	r2, r2, #20
 8000702:	bfd8      	it	le
 8000704:	f1c2 0c20 	rsble	ip, r2, #32
 8000708:	fa01 f102 	lsl.w	r1, r1, r2
 800070c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000710:	bfdc      	itt	le
 8000712:	ea41 010c 	orrle.w	r1, r1, ip
 8000716:	4090      	lslle	r0, r2
 8000718:	1ae4      	subs	r4, r4, r3
 800071a:	bfa2      	ittt	ge
 800071c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000720:	4329      	orrge	r1, r5
 8000722:	bd30      	popge	{r4, r5, pc}
 8000724:	ea6f 0404 	mvn.w	r4, r4
 8000728:	3c1f      	subs	r4, #31
 800072a:	da1c      	bge.n	8000766 <__adddf3+0x1d2>
 800072c:	340c      	adds	r4, #12
 800072e:	dc0e      	bgt.n	800074e <__adddf3+0x1ba>
 8000730:	f104 0414 	add.w	r4, r4, #20
 8000734:	f1c4 0220 	rsb	r2, r4, #32
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f302 	lsl.w	r3, r1, r2
 8000740:	ea40 0003 	orr.w	r0, r0, r3
 8000744:	fa21 f304 	lsr.w	r3, r1, r4
 8000748:	ea45 0103 	orr.w	r1, r5, r3
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	f1c4 040c 	rsb	r4, r4, #12
 8000752:	f1c4 0220 	rsb	r2, r4, #32
 8000756:	fa20 f002 	lsr.w	r0, r0, r2
 800075a:	fa01 f304 	lsl.w	r3, r1, r4
 800075e:	ea40 0003 	orr.w	r0, r0, r3
 8000762:	4629      	mov	r1, r5
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	fa21 f004 	lsr.w	r0, r1, r4
 800076a:	4629      	mov	r1, r5
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	f094 0f00 	teq	r4, #0
 8000772:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000776:	bf06      	itte	eq
 8000778:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800077c:	3401      	addeq	r4, #1
 800077e:	3d01      	subne	r5, #1
 8000780:	e74e      	b.n	8000620 <__adddf3+0x8c>
 8000782:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000786:	bf18      	it	ne
 8000788:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800078c:	d029      	beq.n	80007e2 <__adddf3+0x24e>
 800078e:	ea94 0f05 	teq	r4, r5
 8000792:	bf08      	it	eq
 8000794:	ea90 0f02 	teqeq	r0, r2
 8000798:	d005      	beq.n	80007a6 <__adddf3+0x212>
 800079a:	ea54 0c00 	orrs.w	ip, r4, r0
 800079e:	bf04      	itt	eq
 80007a0:	4619      	moveq	r1, r3
 80007a2:	4610      	moveq	r0, r2
 80007a4:	bd30      	pop	{r4, r5, pc}
 80007a6:	ea91 0f03 	teq	r1, r3
 80007aa:	bf1e      	ittt	ne
 80007ac:	2100      	movne	r1, #0
 80007ae:	2000      	movne	r0, #0
 80007b0:	bd30      	popne	{r4, r5, pc}
 80007b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80007b6:	d105      	bne.n	80007c4 <__adddf3+0x230>
 80007b8:	0040      	lsls	r0, r0, #1
 80007ba:	4149      	adcs	r1, r1
 80007bc:	bf28      	it	cs
 80007be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80007c2:	bd30      	pop	{r4, r5, pc}
 80007c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80007c8:	bf3c      	itt	cc
 80007ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80007ce:	bd30      	popcc	{r4, r5, pc}
 80007d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd30      	pop	{r4, r5, pc}
 80007e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007e6:	bf1a      	itte	ne
 80007e8:	4619      	movne	r1, r3
 80007ea:	4610      	movne	r0, r2
 80007ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80007f0:	bf1c      	itt	ne
 80007f2:	460b      	movne	r3, r1
 80007f4:	4602      	movne	r2, r0
 80007f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007fa:	bf06      	itte	eq
 80007fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000800:	ea91 0f03 	teqeq	r1, r3
 8000804:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000808:	bd30      	pop	{r4, r5, pc}
 800080a:	bf00      	nop

0800080c <__aeabi_ui2d>:
 800080c:	f090 0f00 	teq	r0, #0
 8000810:	bf04      	itt	eq
 8000812:	2100      	moveq	r1, #0
 8000814:	4770      	bxeq	lr
 8000816:	b530      	push	{r4, r5, lr}
 8000818:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000820:	f04f 0500 	mov.w	r5, #0
 8000824:	f04f 0100 	mov.w	r1, #0
 8000828:	e750      	b.n	80006cc <__adddf3+0x138>
 800082a:	bf00      	nop

0800082c <__aeabi_i2d>:
 800082c:	f090 0f00 	teq	r0, #0
 8000830:	bf04      	itt	eq
 8000832:	2100      	moveq	r1, #0
 8000834:	4770      	bxeq	lr
 8000836:	b530      	push	{r4, r5, lr}
 8000838:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000840:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000844:	bf48      	it	mi
 8000846:	4240      	negmi	r0, r0
 8000848:	f04f 0100 	mov.w	r1, #0
 800084c:	e73e      	b.n	80006cc <__adddf3+0x138>
 800084e:	bf00      	nop

08000850 <__aeabi_f2d>:
 8000850:	0042      	lsls	r2, r0, #1
 8000852:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000856:	ea4f 0131 	mov.w	r1, r1, rrx
 800085a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800085e:	bf1f      	itttt	ne
 8000860:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000864:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000868:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800086c:	4770      	bxne	lr
 800086e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000872:	bf08      	it	eq
 8000874:	4770      	bxeq	lr
 8000876:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800087a:	bf04      	itt	eq
 800087c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000880:	4770      	bxeq	lr
 8000882:	b530      	push	{r4, r5, lr}
 8000884:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000888:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800088c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000890:	e71c      	b.n	80006cc <__adddf3+0x138>
 8000892:	bf00      	nop

08000894 <__aeabi_ul2d>:
 8000894:	ea50 0201 	orrs.w	r2, r0, r1
 8000898:	bf08      	it	eq
 800089a:	4770      	bxeq	lr
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	f04f 0500 	mov.w	r5, #0
 80008a2:	e00a      	b.n	80008ba <__aeabi_l2d+0x16>

080008a4 <__aeabi_l2d>:
 80008a4:	ea50 0201 	orrs.w	r2, r0, r1
 80008a8:	bf08      	it	eq
 80008aa:	4770      	bxeq	lr
 80008ac:	b530      	push	{r4, r5, lr}
 80008ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80008b2:	d502      	bpl.n	80008ba <__aeabi_l2d+0x16>
 80008b4:	4240      	negs	r0, r0
 80008b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80008be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80008c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80008c6:	f43f aed8 	beq.w	800067a <__adddf3+0xe6>
 80008ca:	f04f 0203 	mov.w	r2, #3
 80008ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008d2:	bf18      	it	ne
 80008d4:	3203      	addne	r2, #3
 80008d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008da:	bf18      	it	ne
 80008dc:	3203      	addne	r2, #3
 80008de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80008e2:	f1c2 0320 	rsb	r3, r2, #32
 80008e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80008ea:	fa20 f002 	lsr.w	r0, r0, r2
 80008ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80008f2:	ea40 000e 	orr.w	r0, r0, lr
 80008f6:	fa21 f102 	lsr.w	r1, r1, r2
 80008fa:	4414      	add	r4, r2
 80008fc:	e6bd      	b.n	800067a <__adddf3+0xe6>
 80008fe:	bf00      	nop

08000900 <__aeabi_d2f>:
 8000900:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000904:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000908:	bf24      	itt	cs
 800090a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800090e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000912:	d90d      	bls.n	8000930 <__aeabi_d2f+0x30>
 8000914:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000918:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800091c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000920:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000924:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000928:	bf08      	it	eq
 800092a:	f020 0001 	biceq.w	r0, r0, #1
 800092e:	4770      	bx	lr
 8000930:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000934:	d121      	bne.n	800097a <__aeabi_d2f+0x7a>
 8000936:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800093a:	bfbc      	itt	lt
 800093c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000940:	4770      	bxlt	lr
 8000942:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000946:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800094a:	f1c2 0218 	rsb	r2, r2, #24
 800094e:	f1c2 0c20 	rsb	ip, r2, #32
 8000952:	fa10 f30c 	lsls.w	r3, r0, ip
 8000956:	fa20 f002 	lsr.w	r0, r0, r2
 800095a:	bf18      	it	ne
 800095c:	f040 0001 	orrne.w	r0, r0, #1
 8000960:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000964:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000968:	fa03 fc0c 	lsl.w	ip, r3, ip
 800096c:	ea40 000c 	orr.w	r0, r0, ip
 8000970:	fa23 f302 	lsr.w	r3, r3, r2
 8000974:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000978:	e7cc      	b.n	8000914 <__aeabi_d2f+0x14>
 800097a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097e:	d107      	bne.n	8000990 <__aeabi_d2f+0x90>
 8000980:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000984:	bf1e      	ittt	ne
 8000986:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800098a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800098e:	4770      	bxne	lr
 8000990:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000994:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000998:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <__aeabi_uldivmod>:
 80009a0:	b953      	cbnz	r3, 80009b8 <__aeabi_uldivmod+0x18>
 80009a2:	b94a      	cbnz	r2, 80009b8 <__aeabi_uldivmod+0x18>
 80009a4:	2900      	cmp	r1, #0
 80009a6:	bf08      	it	eq
 80009a8:	2800      	cmpeq	r0, #0
 80009aa:	bf1c      	itt	ne
 80009ac:	f04f 31ff 	movne.w	r1, #4294967295
 80009b0:	f04f 30ff 	movne.w	r0, #4294967295
 80009b4:	f000 b96a 	b.w	8000c8c <__aeabi_idiv0>
 80009b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c0:	f000 f806 	bl	80009d0 <__udivmoddi4>
 80009c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009cc:	b004      	add	sp, #16
 80009ce:	4770      	bx	lr

080009d0 <__udivmoddi4>:
 80009d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d4:	9d08      	ldr	r5, [sp, #32]
 80009d6:	460c      	mov	r4, r1
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d14e      	bne.n	8000a7a <__udivmoddi4+0xaa>
 80009dc:	4694      	mov	ip, r2
 80009de:	458c      	cmp	ip, r1
 80009e0:	4686      	mov	lr, r0
 80009e2:	fab2 f282 	clz	r2, r2
 80009e6:	d962      	bls.n	8000aae <__udivmoddi4+0xde>
 80009e8:	b14a      	cbz	r2, 80009fe <__udivmoddi4+0x2e>
 80009ea:	f1c2 0320 	rsb	r3, r2, #32
 80009ee:	4091      	lsls	r1, r2
 80009f0:	fa20 f303 	lsr.w	r3, r0, r3
 80009f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009f8:	4319      	orrs	r1, r3
 80009fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80009fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a02:	fa1f f68c 	uxth.w	r6, ip
 8000a06:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a0e:	fb07 1114 	mls	r1, r7, r4, r1
 8000a12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a16:	fb04 f106 	mul.w	r1, r4, r6
 8000a1a:	4299      	cmp	r1, r3
 8000a1c:	d90a      	bls.n	8000a34 <__udivmoddi4+0x64>
 8000a1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a22:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a26:	f080 8112 	bcs.w	8000c4e <__udivmoddi4+0x27e>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 810f 	bls.w	8000c4e <__udivmoddi4+0x27e>
 8000a30:	3c02      	subs	r4, #2
 8000a32:	4463      	add	r3, ip
 8000a34:	1a59      	subs	r1, r3, r1
 8000a36:	fa1f f38e 	uxth.w	r3, lr
 8000a3a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a3e:	fb07 1110 	mls	r1, r7, r0, r1
 8000a42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a46:	fb00 f606 	mul.w	r6, r0, r6
 8000a4a:	429e      	cmp	r6, r3
 8000a4c:	d90a      	bls.n	8000a64 <__udivmoddi4+0x94>
 8000a4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a52:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a56:	f080 80fc 	bcs.w	8000c52 <__udivmoddi4+0x282>
 8000a5a:	429e      	cmp	r6, r3
 8000a5c:	f240 80f9 	bls.w	8000c52 <__udivmoddi4+0x282>
 8000a60:	4463      	add	r3, ip
 8000a62:	3802      	subs	r0, #2
 8000a64:	1b9b      	subs	r3, r3, r6
 8000a66:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	b11d      	cbz	r5, 8000a76 <__udivmoddi4+0xa6>
 8000a6e:	40d3      	lsrs	r3, r2
 8000a70:	2200      	movs	r2, #0
 8000a72:	e9c5 3200 	strd	r3, r2, [r5]
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d905      	bls.n	8000a8a <__udivmoddi4+0xba>
 8000a7e:	b10d      	cbz	r5, 8000a84 <__udivmoddi4+0xb4>
 8000a80:	e9c5 0100 	strd	r0, r1, [r5]
 8000a84:	2100      	movs	r1, #0
 8000a86:	4608      	mov	r0, r1
 8000a88:	e7f5      	b.n	8000a76 <__udivmoddi4+0xa6>
 8000a8a:	fab3 f183 	clz	r1, r3
 8000a8e:	2900      	cmp	r1, #0
 8000a90:	d146      	bne.n	8000b20 <__udivmoddi4+0x150>
 8000a92:	42a3      	cmp	r3, r4
 8000a94:	d302      	bcc.n	8000a9c <__udivmoddi4+0xcc>
 8000a96:	4290      	cmp	r0, r2
 8000a98:	f0c0 80f0 	bcc.w	8000c7c <__udivmoddi4+0x2ac>
 8000a9c:	1a86      	subs	r6, r0, r2
 8000a9e:	eb64 0303 	sbc.w	r3, r4, r3
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	2d00      	cmp	r5, #0
 8000aa6:	d0e6      	beq.n	8000a76 <__udivmoddi4+0xa6>
 8000aa8:	e9c5 6300 	strd	r6, r3, [r5]
 8000aac:	e7e3      	b.n	8000a76 <__udivmoddi4+0xa6>
 8000aae:	2a00      	cmp	r2, #0
 8000ab0:	f040 8090 	bne.w	8000bd4 <__udivmoddi4+0x204>
 8000ab4:	eba1 040c 	sub.w	r4, r1, ip
 8000ab8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000abc:	fa1f f78c 	uxth.w	r7, ip
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb08 4416 	mls	r4, r8, r6, r4
 8000ace:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ad2:	fb07 f006 	mul.w	r0, r7, r6
 8000ad6:	4298      	cmp	r0, r3
 8000ad8:	d908      	bls.n	8000aec <__udivmoddi4+0x11c>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ae2:	d202      	bcs.n	8000aea <__udivmoddi4+0x11a>
 8000ae4:	4298      	cmp	r0, r3
 8000ae6:	f200 80cd 	bhi.w	8000c84 <__udivmoddi4+0x2b4>
 8000aea:	4626      	mov	r6, r4
 8000aec:	1a1c      	subs	r4, r3, r0
 8000aee:	fa1f f38e 	uxth.w	r3, lr
 8000af2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000af6:	fb08 4410 	mls	r4, r8, r0, r4
 8000afa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000afe:	fb00 f707 	mul.w	r7, r0, r7
 8000b02:	429f      	cmp	r7, r3
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x148>
 8000b06:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x146>
 8000b10:	429f      	cmp	r7, r3
 8000b12:	f200 80b0 	bhi.w	8000c76 <__udivmoddi4+0x2a6>
 8000b16:	4620      	mov	r0, r4
 8000b18:	1bdb      	subs	r3, r3, r7
 8000b1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1e:	e7a5      	b.n	8000a6c <__udivmoddi4+0x9c>
 8000b20:	f1c1 0620 	rsb	r6, r1, #32
 8000b24:	408b      	lsls	r3, r1
 8000b26:	fa22 f706 	lsr.w	r7, r2, r6
 8000b2a:	431f      	orrs	r7, r3
 8000b2c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b30:	fa04 f301 	lsl.w	r3, r4, r1
 8000b34:	ea43 030c 	orr.w	r3, r3, ip
 8000b38:	40f4      	lsrs	r4, r6
 8000b3a:	fa00 f801 	lsl.w	r8, r0, r1
 8000b3e:	0c38      	lsrs	r0, r7, #16
 8000b40:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b44:	fbb4 fef0 	udiv	lr, r4, r0
 8000b48:	fa1f fc87 	uxth.w	ip, r7
 8000b4c:	fb00 441e 	mls	r4, r0, lr, r4
 8000b50:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b54:	fb0e f90c 	mul.w	r9, lr, ip
 8000b58:	45a1      	cmp	r9, r4
 8000b5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b5e:	d90a      	bls.n	8000b76 <__udivmoddi4+0x1a6>
 8000b60:	193c      	adds	r4, r7, r4
 8000b62:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b66:	f080 8084 	bcs.w	8000c72 <__udivmoddi4+0x2a2>
 8000b6a:	45a1      	cmp	r9, r4
 8000b6c:	f240 8081 	bls.w	8000c72 <__udivmoddi4+0x2a2>
 8000b70:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b74:	443c      	add	r4, r7
 8000b76:	eba4 0409 	sub.w	r4, r4, r9
 8000b7a:	fa1f f983 	uxth.w	r9, r3
 8000b7e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b82:	fb00 4413 	mls	r4, r0, r3, r4
 8000b86:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b8a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b8e:	45a4      	cmp	ip, r4
 8000b90:	d907      	bls.n	8000ba2 <__udivmoddi4+0x1d2>
 8000b92:	193c      	adds	r4, r7, r4
 8000b94:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b98:	d267      	bcs.n	8000c6a <__udivmoddi4+0x29a>
 8000b9a:	45a4      	cmp	ip, r4
 8000b9c:	d965      	bls.n	8000c6a <__udivmoddi4+0x29a>
 8000b9e:	3b02      	subs	r3, #2
 8000ba0:	443c      	add	r4, r7
 8000ba2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ba6:	fba0 9302 	umull	r9, r3, r0, r2
 8000baa:	eba4 040c 	sub.w	r4, r4, ip
 8000bae:	429c      	cmp	r4, r3
 8000bb0:	46ce      	mov	lr, r9
 8000bb2:	469c      	mov	ip, r3
 8000bb4:	d351      	bcc.n	8000c5a <__udivmoddi4+0x28a>
 8000bb6:	d04e      	beq.n	8000c56 <__udivmoddi4+0x286>
 8000bb8:	b155      	cbz	r5, 8000bd0 <__udivmoddi4+0x200>
 8000bba:	ebb8 030e 	subs.w	r3, r8, lr
 8000bbe:	eb64 040c 	sbc.w	r4, r4, ip
 8000bc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000bc6:	40cb      	lsrs	r3, r1
 8000bc8:	431e      	orrs	r6, r3
 8000bca:	40cc      	lsrs	r4, r1
 8000bcc:	e9c5 6400 	strd	r6, r4, [r5]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	e750      	b.n	8000a76 <__udivmoddi4+0xa6>
 8000bd4:	f1c2 0320 	rsb	r3, r2, #32
 8000bd8:	fa20 f103 	lsr.w	r1, r0, r3
 8000bdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be0:	fa24 f303 	lsr.w	r3, r4, r3
 8000be4:	4094      	lsls	r4, r2
 8000be6:	430c      	orrs	r4, r1
 8000be8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bec:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bf0:	fa1f f78c 	uxth.w	r7, ip
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3110 	mls	r1, r8, r0, r3
 8000bfc:	0c23      	lsrs	r3, r4, #16
 8000bfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c02:	fb00 f107 	mul.w	r1, r0, r7
 8000c06:	4299      	cmp	r1, r3
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x24c>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c12:	d22c      	bcs.n	8000c6e <__udivmoddi4+0x29e>
 8000c14:	4299      	cmp	r1, r3
 8000c16:	d92a      	bls.n	8000c6e <__udivmoddi4+0x29e>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	4463      	add	r3, ip
 8000c1c:	1a5b      	subs	r3, r3, r1
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c24:	fb08 3311 	mls	r3, r8, r1, r3
 8000c28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c2c:	fb01 f307 	mul.w	r3, r1, r7
 8000c30:	42a3      	cmp	r3, r4
 8000c32:	d908      	bls.n	8000c46 <__udivmoddi4+0x276>
 8000c34:	eb1c 0404 	adds.w	r4, ip, r4
 8000c38:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c3c:	d213      	bcs.n	8000c66 <__udivmoddi4+0x296>
 8000c3e:	42a3      	cmp	r3, r4
 8000c40:	d911      	bls.n	8000c66 <__udivmoddi4+0x296>
 8000c42:	3902      	subs	r1, #2
 8000c44:	4464      	add	r4, ip
 8000c46:	1ae4      	subs	r4, r4, r3
 8000c48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c4c:	e739      	b.n	8000ac2 <__udivmoddi4+0xf2>
 8000c4e:	4604      	mov	r4, r0
 8000c50:	e6f0      	b.n	8000a34 <__udivmoddi4+0x64>
 8000c52:	4608      	mov	r0, r1
 8000c54:	e706      	b.n	8000a64 <__udivmoddi4+0x94>
 8000c56:	45c8      	cmp	r8, r9
 8000c58:	d2ae      	bcs.n	8000bb8 <__udivmoddi4+0x1e8>
 8000c5a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c5e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c62:	3801      	subs	r0, #1
 8000c64:	e7a8      	b.n	8000bb8 <__udivmoddi4+0x1e8>
 8000c66:	4631      	mov	r1, r6
 8000c68:	e7ed      	b.n	8000c46 <__udivmoddi4+0x276>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	e799      	b.n	8000ba2 <__udivmoddi4+0x1d2>
 8000c6e:	4630      	mov	r0, r6
 8000c70:	e7d4      	b.n	8000c1c <__udivmoddi4+0x24c>
 8000c72:	46d6      	mov	lr, sl
 8000c74:	e77f      	b.n	8000b76 <__udivmoddi4+0x1a6>
 8000c76:	4463      	add	r3, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	e74d      	b.n	8000b18 <__udivmoddi4+0x148>
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	4623      	mov	r3, r4
 8000c80:	4608      	mov	r0, r1
 8000c82:	e70f      	b.n	8000aa4 <__udivmoddi4+0xd4>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	4463      	add	r3, ip
 8000c88:	e730      	b.n	8000aec <__udivmoddi4+0x11c>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_idiv0>:
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <HAL_ADC_ConvCpltCallback>:

/* Functions prototypes ------------------------------------------------------*/

/* Interrupções --------------------------------------------------------------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC2) {
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a06      	ldr	r2, [pc, #24]	@ (8000cb8 <HAL_ADC_ConvCpltCallback+0x28>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d106      	bne.n	8000cb0 <HAL_ADC_ConvCpltCallback+0x20>
		OS_ERR err;

		OSFlagPost(
 8000ca2:	f107 030e 	add.w	r3, r7, #14
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2101      	movs	r1, #1
 8000caa:	4804      	ldr	r0, [pc, #16]	@ (8000cbc <HAL_ADC_ConvCpltCallback+0x2c>)
 8000cac:	f005 fcfa 	bl	80066a4 <OSFlagPost>
			(OS_FLAGS     )MOTOR_BOBINA_ADC_RDY,
			(OS_OPT       )OS_OPT_POST_FLAG_SET,
			(OS_ERR      *)&err
		);
	}
}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40012100 	.word	0x40012100
 8000cbc:	200009a8 	.word	0x200009a8

08000cc0 <motorBobinaTask>:

/* Task ----------------------------------------------------------------------*/
static void motorBobinaTask(void *p_arg)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	@ 0x30
 8000cc4:	af02      	add	r7, sp, #8
 8000cc6:	6078      	str	r0, [r7, #4]
	CPU_TS ts;

	(void)p_arg;

	/* Inicializa a amostragem e conversão a/d e d/a */
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) &motorBobinaTensaoRead, 1);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4936      	ldr	r1, [pc, #216]	@ (8000da4 <motorBobinaTask+0xe4>)
 8000ccc:	4836      	ldr	r0, [pc, #216]	@ (8000da8 <motorBobinaTask+0xe8>)
 8000cce:	f001 f939 	bl	8001f44 <HAL_ADC_Start_DMA>
	HAL_DAC_Start_DMA(&hdac, MOTOR_BOBINA_VEL_DAC_CHANNEL, (const uint32_t *) &motorBobinaVel, 1, DAC_ALIGN_12B_R);
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	4a34      	ldr	r2, [pc, #208]	@ (8000dac <motorBobinaTask+0xec>)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4834      	ldr	r0, [pc, #208]	@ (8000db0 <motorBobinaTask+0xf0>)
 8000cde:	f001 fe29 	bl	8002934 <HAL_DAC_Start_DMA>

	HAL_TIM_Base_Start(&htim2); /* 6.4 kHz */
 8000ce2:	4834      	ldr	r0, [pc, #208]	@ (8000db4 <motorBobinaTask+0xf4>)
 8000ce4:	f003 f9f4 	bl	80040d0 <HAL_TIM_Base_Start>

	int32_t kp = 15;
 8000ce8:	230f      	movs	r3, #15
 8000cea:	623b      	str	r3, [r7, #32]
	int32_t motorBobinaTensaoRef = ADC_REF_STD;
 8000cec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Infinite loop */
	while (DEF_TRUE) {
		OSFlagPend(
 8000cf2:	f107 0312 	add.w	r3, r7, #18
 8000cf6:	9301      	str	r3, [sp, #4]
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000d02:	2200      	movs	r2, #0
 8000d04:	2101      	movs	r1, #1
 8000d06:	482c      	ldr	r0, [pc, #176]	@ (8000db8 <motorBobinaTask+0xf8>)
 8000d08:	f005 fa62 	bl	80061d0 <OSFlagPend>
			(OS_OPT       )(OS_OPT_PEND_FLAG_SET_ANY + OS_OPT_PEND_FLAG_CONSUME),
			(CPU_TS      *)&ts,
			(OS_ERR      *)&err
		);

		int32_t erro = motorBobinaTensaoRef - (int32_t) motorBobinaTensaoRead;
 8000d0c:	4b25      	ldr	r3, [pc, #148]	@ (8000da4 <motorBobinaTask+0xe4>)
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	461a      	mov	r2, r3
 8000d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d16:	1a9b      	subs	r3, r3, r2
 8000d18:	61fb      	str	r3, [r7, #28]

		/* Desliga o motor caso pressionado o switch */
		if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == SW_ON) {
 8000d1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d1e:	4827      	ldr	r0, [pc, #156]	@ (8000dbc <motorBobinaTask+0xfc>)
 8000d20:	f002 fcd8 	bl	80036d4 <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d112      	bne.n	8000d50 <motorBobinaTask+0x90>
			HAL_GPIO_WritePin(MOTOR_BOBINA_EN_GPIO_Port, MOTOR_BOBINA_EN_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d30:	4823      	ldr	r0, [pc, #140]	@ (8000dc0 <motorBobinaTask+0x100>)
 8000d32:	f002 fce7 	bl	8003704 <HAL_GPIO_WritePin>

			/* Ajuste do ponto de referência */
			if (HAL_GPIO_ReadPin(SW0_GPIO_Port, SW0_Pin) == SW_ON) {
 8000d36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d3a:	4820      	ldr	r0, [pc, #128]	@ (8000dbc <motorBobinaTask+0xfc>)
 8000d3c:	f002 fcca 	bl	80036d4 <HAL_GPIO_ReadPin>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d10a      	bne.n	8000d5c <motorBobinaTask+0x9c>
				motorBobinaTensaoRef = motorBobinaTensaoRead;
 8000d46:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <motorBobinaTask+0xe4>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d4e:	e005      	b.n	8000d5c <motorBobinaTask+0x9c>
			}
		}
		else {
			HAL_GPIO_WritePin(MOTOR_BOBINA_EN_GPIO_Port, MOTOR_BOBINA_EN_Pin, GPIO_PIN_SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d56:	481a      	ldr	r0, [pc, #104]	@ (8000dc0 <motorBobinaTask+0x100>)
 8000d58:	f002 fcd4 	bl	8003704 <HAL_GPIO_WritePin>
		}

		/* Controle P */
		int32_t controle = kp*erro;
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
 8000d5e:	69fa      	ldr	r2, [r7, #28]
 8000d60:	fb02 f303 	mul.w	r3, r2, r3
 8000d64:	61bb      	str	r3, [r7, #24]
		int32_t vel_dac = abs(controle);
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	bfb8      	it	lt
 8000d6c:	425b      	neglt	r3, r3
 8000d6e:	617b      	str	r3, [r7, #20]

		/* Limita o valor para o máximo do DAC */
		motorBobinaVel = vel_dac > DAC_MAX ? DAC_MAX : vel_dac;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000d76:	4293      	cmp	r3, r2
 8000d78:	bfa8      	it	ge
 8000d7a:	4613      	movge	r3, r2
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <motorBobinaTask+0xec>)
 8000d80:	801a      	strh	r2, [r3, #0]

		/* Caso o valor seja positivo, seta a direção CLOCK_WISE */
		if (controle >= 0) {
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db06      	blt.n	8000d96 <motorBobinaTask+0xd6>
			HAL_GPIO_WritePin(MOTOR_BOBINA_DIR_GPIO_Port, MOTOR_BOBINA_DIR_Pin, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d8e:	480c      	ldr	r0, [pc, #48]	@ (8000dc0 <motorBobinaTask+0x100>)
 8000d90:	f002 fcb8 	bl	8003704 <HAL_GPIO_WritePin>
 8000d94:	e7ad      	b.n	8000cf2 <motorBobinaTask+0x32>
		}
		else {
			HAL_GPIO_WritePin(MOTOR_BOBINA_DIR_GPIO_Port, MOTOR_BOBINA_DIR_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d9c:	4808      	ldr	r0, [pc, #32]	@ (8000dc0 <motorBobinaTask+0x100>)
 8000d9e:	f002 fcb1 	bl	8003704 <HAL_GPIO_WritePin>
	while (DEF_TRUE) {
 8000da2:	e7a6      	b.n	8000cf2 <motorBobinaTask+0x32>
 8000da4:	200004e4 	.word	0x200004e4
 8000da8:	20000e88 	.word	0x20000e88
 8000dac:	200004e6 	.word	0x200004e6
 8000db0:	20000f30 	.word	0x20000f30
 8000db4:	2000104c 	.word	0x2000104c
 8000db8:	200009a8 	.word	0x200009a8
 8000dbc:	40020c00 	.word	0x40020c00
 8000dc0:	40021400 	.word	0x40021400

08000dc4 <motorBobinaCreateTask>:
	}
}

/* Functions -----------------------------------------------------------------*/
void motorBobinaCreateTask(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	@ 0x30
 8000dc8:	af0a      	add	r7, sp, #40	@ 0x28
    OS_ERR err;

	OSTaskCreate(
 8000dca:	1dbb      	adds	r3, r7, #6
 8000dcc:	9308      	str	r3, [sp, #32]
 8000dce:	2303      	movs	r3, #3
 8000dd0:	9307      	str	r3, [sp, #28]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	9306      	str	r3, [sp, #24]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	9305      	str	r3, [sp, #20]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	9304      	str	r3, [sp, #16]
 8000dde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000de2:	9303      	str	r3, [sp, #12]
 8000de4:	2300      	movs	r3, #0
 8000de6:	9302      	str	r3, [sp, #8]
 8000de8:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <motorBobinaCreateTask+0x4c>)
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	2303      	movs	r3, #3
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2300      	movs	r3, #0
 8000df2:	4a08      	ldr	r2, [pc, #32]	@ (8000e14 <motorBobinaCreateTask+0x50>)
 8000df4:	4908      	ldr	r1, [pc, #32]	@ (8000e18 <motorBobinaCreateTask+0x54>)
 8000df6:	4809      	ldr	r0, [pc, #36]	@ (8000e1c <motorBobinaCreateTask+0x58>)
 8000df8:	f006 fbb8 	bl	800756c <OSTaskCreate>
        (void         *)0u,
        (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
        (OS_ERR       *)&err
	);

	if (err != OS_ERR_NONE) {
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <motorBobinaCreateTask+0x42>
		Error_Handler();
 8000e02:	f000 faa1 	bl	8001348 <Error_Handler>
	}
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200000e4 	.word	0x200000e4
 8000e14:	08000cc1 	.word	0x08000cc1
 8000e18:	08008d60 	.word	0x08008d60
 8000e1c:	20000028 	.word	0x20000028

08000e20 <HAL_GPIO_EXTI_Callback>:
static void carroTransversalDir(CARRO_TRANSVERSAL_DIR ctrl);
static void carroTransversalSetDuty(float duty); /* duty -> 0 a 1.0 */

/* Interrupções --------------------------------------------------------------*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000e30:	d02c      	beq.n	8000e8c <HAL_GPIO_EXTI_Callback+0x6c>
 8000e32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000e36:	dc64      	bgt.n	8000f02 <HAL_GPIO_EXTI_Callback+0xe2>
 8000e38:	2b08      	cmp	r3, #8
 8000e3a:	d04c      	beq.n	8000ed6 <HAL_GPIO_EXTI_Callback+0xb6>
 8000e3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000e40:	d15f      	bne.n	8000f02 <HAL_GPIO_EXTI_Callback+0xe2>
		case OPTO_1_Pin:
			if (HAL_GPIO_ReadPin(OPTO_2_GPIO_Port, OPTO_2_Pin) == OPTO_OFF) {
 8000e42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e46:	4834      	ldr	r0, [pc, #208]	@ (8000f18 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000e48:	f002 fc44 	bl	80036d4 <HAL_GPIO_ReadPin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d159      	bne.n	8000f06 <HAL_GPIO_EXTI_Callback+0xe6>
				bobinaTick++;
 8000e52:	4b32      	ldr	r3, [pc, #200]	@ (8000f1c <HAL_GPIO_EXTI_Callback+0xfc>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b25b      	sxtb	r3, r3
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	b25a      	sxtb	r2, r3
 8000e60:	4b2e      	ldr	r3, [pc, #184]	@ (8000f1c <HAL_GPIO_EXTI_Callback+0xfc>)
 8000e62:	701a      	strb	r2, [r3, #0]

				if (bobinaTick > BOBINA_TICK_VOLTA) {
 8000e64:	4b2d      	ldr	r3, [pc, #180]	@ (8000f1c <HAL_GPIO_EXTI_Callback+0xfc>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b08      	cmp	r3, #8
 8000e6e:	d94a      	bls.n	8000f06 <HAL_GPIO_EXTI_Callback+0xe6>
					bobinaTick = 0;
 8000e70:	4b2a      	ldr	r3, [pc, #168]	@ (8000f1c <HAL_GPIO_EXTI_Callback+0xfc>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
					carroTransversalAndar = true;
 8000e76:	4b2a      	ldr	r3, [pc, #168]	@ (8000f20 <HAL_GPIO_EXTI_Callback+0x100>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	701a      	strb	r2, [r3, #0]

					OS_ERR err;
					OSFlagPost(
 8000e7c:	f107 030e 	add.w	r3, r7, #14
 8000e80:	2200      	movs	r2, #0
 8000e82:	2102      	movs	r1, #2
 8000e84:	4827      	ldr	r0, [pc, #156]	@ (8000f24 <HAL_GPIO_EXTI_Callback+0x104>)
 8000e86:	f005 fc0d 	bl	80066a4 <OSFlagPost>
						(OS_OPT       )OS_OPT_POST_FLAG_SET,
						(OS_ERR      *)&err
					);
				}
			}
			break;
 8000e8a:	e03c      	b.n	8000f06 <HAL_GPIO_EXTI_Callback+0xe6>

		case OPTO_2_Pin:
			if (HAL_GPIO_ReadPin(OPTO_1_GPIO_Port, OPTO_1_Pin) == OPTO_OFF) {
 8000e8c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e90:	4821      	ldr	r0, [pc, #132]	@ (8000f18 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000e92:	f002 fc1f 	bl	80036d4 <HAL_GPIO_ReadPin>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d136      	bne.n	8000f0a <HAL_GPIO_EXTI_Callback+0xea>
				bobinaTick--;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <HAL_GPIO_EXTI_Callback+0xfc>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	b25a      	sxtb	r2, r3
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <HAL_GPIO_EXTI_Callback+0xfc>)
 8000eac:	701a      	strb	r2, [r3, #0]

				if (bobinaTick < -1*BOBINA_TICK_VOLTA) {
 8000eae:	4b1b      	ldr	r3, [pc, #108]	@ (8000f1c <HAL_GPIO_EXTI_Callback+0xfc>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2bf7      	cmp	r3, #247	@ 0xf7
 8000eb8:	d827      	bhi.n	8000f0a <HAL_GPIO_EXTI_Callback+0xea>
					bobinaTick = 0;
 8000eba:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <HAL_GPIO_EXTI_Callback+0xfc>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
					carroTransversalAndar = true;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <HAL_GPIO_EXTI_Callback+0x100>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]

					OS_ERR err;
					OSFlagPost(
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2104      	movs	r1, #4
 8000ece:	4815      	ldr	r0, [pc, #84]	@ (8000f24 <HAL_GPIO_EXTI_Callback+0x104>)
 8000ed0:	f005 fbe8 	bl	80066a4 <OSFlagPost>
						(OS_OPT       )OS_OPT_POST_FLAG_SET,
						(OS_ERR      *)&err
					);
				}
			}
			break;
 8000ed4:	e019      	b.n	8000f0a <HAL_GPIO_EXTI_Callback+0xea>

		case OPTO_3_Pin:
			carroTransversalTick++;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <HAL_GPIO_EXTI_Callback+0x108>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	b25b      	sxtb	r3, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	3301      	adds	r3, #1
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	b25a      	sxtb	r2, r3
 8000ee4:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <HAL_GPIO_EXTI_Callback+0x108>)
 8000ee6:	701a      	strb	r2, [r3, #0]

			/* Assim que deu uma volta no eixo do carro transversal, mande o carro parar */
			if (carroTransversalTick > CARRO_TRANSVERSAL_TICK_VOLTA) {
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <HAL_GPIO_EXTI_Callback+0x108>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b0a      	cmp	r3, #10
 8000ef2:	d90c      	bls.n	8000f0e <HAL_GPIO_EXTI_Callback+0xee>
				carroTransversalTick = 0;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <HAL_GPIO_EXTI_Callback+0x108>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
				carroTransversalAndar = false;
 8000efa:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <HAL_GPIO_EXTI_Callback+0x100>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000f00:	e005      	b.n	8000f0e <HAL_GPIO_EXTI_Callback+0xee>

		default:
			__NOP();
 8000f02:	bf00      	nop
			break;
 8000f04:	e004      	b.n	8000f10 <HAL_GPIO_EXTI_Callback+0xf0>
			break;
 8000f06:	bf00      	nop
 8000f08:	e002      	b.n	8000f10 <HAL_GPIO_EXTI_Callback+0xf0>
			break;
 8000f0a:	bf00      	nop
 8000f0c:	e000      	b.n	8000f10 <HAL_GPIO_EXTI_Callback+0xf0>
			break;
 8000f0e:	bf00      	nop
	}
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40020c00 	.word	0x40020c00
 8000f1c:	200009a4 	.word	0x200009a4
 8000f20:	200009a6 	.word	0x200009a6
 8000f24:	200009a8 	.word	0x200009a8
 8000f28:	200009a5 	.word	0x200009a5
 8000f2c:	00000000 	.word	0x00000000

08000f30 <carroTransversalTask>:

/* Task ----------------------------------------------------------------------*/
static void carroTransversalTask(void *p_arg)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	@ 0x28
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	6078      	str	r0, [r7, #4]
	CPU_TS ts;

	(void)p_arg;

	/* PWM de controle da velocidade do carro transversal */
	HAL_TIM_PWM_Start(&htim1, MOTOR_CARRO_TRANSVERSAL_PWM_Channel); /* 20kHz */
 8000f38:	210c      	movs	r1, #12
 8000f3a:	484b      	ldr	r0, [pc, #300]	@ (8001068 <carroTransversalTask+0x138>)
 8000f3c:	f003 f98a 	bl	8004254 <HAL_TIM_PWM_Start>

	/* Trás o carro transversal para posição inicial */
	carroTransversalHome();
 8000f40:	f000 f8d2 	bl	80010e8 <carroTransversalHome>
	carroTransversalSetDuty(0);
 8000f44:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 800106c <carroTransversalTask+0x13c>
 8000f48:	f000 f93c 	bl	80011c4 <carroTransversalSetDuty>

	bobinaTick = 0;
 8000f4c:	4b48      	ldr	r3, [pc, #288]	@ (8001070 <carroTransversalTask+0x140>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
	carroTransversalTick = 0;
 8000f52:	4b48      	ldr	r3, [pc, #288]	@ (8001074 <carroTransversalTask+0x144>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
	carroTransversalAndar = false;
 8000f58:	4b47      	ldr	r3, [pc, #284]	@ (8001078 <carroTransversalTask+0x148>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]

	OS_FLAGS comandoPrev = MOTOR_BOBINA_LIBERANDO;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61fb      	str	r3, [r7, #28]
	CARRO_TRANSVERSAL_DIR carroDir = PARADO;
 8000f62:	2303      	movs	r3, #3
 8000f64:	76fb      	strb	r3, [r7, #27]

	/* Infinite loop */
	while (DEF_TRUE) {
		/* Espera o comando para andar */
		comando = OSFlagPend(
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000f76:	2200      	movs	r2, #0
 8000f78:	2106      	movs	r1, #6
 8000f7a:	4840      	ldr	r0, [pc, #256]	@ (800107c <carroTransversalTask+0x14c>)
 8000f7c:	f005 f928 	bl	80061d0 <OSFlagPend>
 8000f80:	6178      	str	r0, [r7, #20]
					(OS_OPT       )(OS_OPT_PEND_FLAG_SET_ANY + OS_OPT_PEND_FLAG_CONSUME),
					(CPU_TS      *)&ts,
					(OS_ERR      *)&err
				);

		while (carroTransversalAndar) {
 8000f82:	e05f      	b.n	8001044 <carroTransversalTask+0x114>
			GPIO_PinState fimCurso_1 = HAL_GPIO_ReadPin(FIM_CURSO_1_GPIO_Port, FIM_CURSO_1_Pin);
 8000f84:	2108      	movs	r1, #8
 8000f86:	483e      	ldr	r0, [pc, #248]	@ (8001080 <carroTransversalTask+0x150>)
 8000f88:	f002 fba4 	bl	80036d4 <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	74fb      	strb	r3, [r7, #19]
			GPIO_PinState fimCurso_2 = HAL_GPIO_ReadPin(FIM_CURSO_2_GPIO_Port, FIM_CURSO_2_Pin);
 8000f90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f94:	483b      	ldr	r0, [pc, #236]	@ (8001084 <carroTransversalTask+0x154>)
 8000f96:	f002 fb9d 	bl	80036d4 <HAL_GPIO_ReadPin>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	74bb      	strb	r3, [r7, #18]

			/* Para evitar que o carro passe do ponto */
			if (carroTransversalTick < CARRO_TRANSVERSAL_DESACELERA) {
 8000f9e:	4b35      	ldr	r3, [pc, #212]	@ (8001074 <carroTransversalTask+0x144>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b25b      	sxtb	r3, r3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d804      	bhi.n	8000fb4 <carroTransversalTask+0x84>
				carroTransversalSetDuty(1.0);
 8000faa:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000fae:	f000 f909 	bl	80011c4 <carroTransversalSetDuty>
 8000fb2:	e01d      	b.n	8000ff0 <carroTransversalTask+0xc0>
			}
			else {
				carroTransversalSetDuty(1.0 - 0.1*(carroTransversalTick - CARRO_TRANSVERSAL_DESACELERA));
 8000fb4:	4b2f      	ldr	r3, [pc, #188]	@ (8001074 <carroTransversalTask+0x144>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	3b07      	subs	r3, #7
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fc25 	bl	800080c <__aeabi_ui2d>
 8000fc2:	a327      	add	r3, pc, #156	@ (adr r3, 8001060 <carroTransversalTask+0x130>)
 8000fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc8:	f7ff f9b4 	bl	8000334 <__aeabi_dmul>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	f04f 0000 	mov.w	r0, #0
 8000fd4:	492c      	ldr	r1, [pc, #176]	@ (8001088 <carroTransversalTask+0x158>)
 8000fd6:	f7ff fadb 	bl	8000590 <__aeabi_dsub>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4610      	mov	r0, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f7ff fc8d 	bl	8000900 <__aeabi_d2f>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	ee00 3a10 	vmov	s0, r3
 8000fec:	f000 f8ea 	bl	80011c4 <carroTransversalSetDuty>
			}

			if ((fimCurso_1 == GPIO_PIN_SET) && (fimCurso_2 == GPIO_PIN_SET)) { /* Ambas fim de cursos acionado -> impossível */
 8000ff0:	7cfb      	ldrb	r3, [r7, #19]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d108      	bne.n	8001008 <carroTransversalTask+0xd8>
 8000ff6:	7cbb      	ldrb	r3, [r7, #18]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d105      	bne.n	8001008 <carroTransversalTask+0xd8>
				carroTransversalAndar = false;
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8001078 <carroTransversalTask+0x148>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
				carroDir = PARADO;
 8001002:	2303      	movs	r3, #3
 8001004:	76fb      	strb	r3, [r7, #27]
 8001006:	e019      	b.n	800103c <carroTransversalTask+0x10c>
			}
			else if (fimCurso_1 == GPIO_PIN_SET) {
 8001008:	7cfb      	ldrb	r3, [r7, #19]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d102      	bne.n	8001014 <carroTransversalTask+0xe4>
				carroDir = DIREITA;
 800100e:	2301      	movs	r3, #1
 8001010:	76fb      	strb	r3, [r7, #27]
 8001012:	e013      	b.n	800103c <carroTransversalTask+0x10c>
			}
			else if (fimCurso_2 == GPIO_PIN_SET) {
 8001014:	7cbb      	ldrb	r3, [r7, #18]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d102      	bne.n	8001020 <carroTransversalTask+0xf0>
				carroDir = ESQUERDA;
 800101a:	2300      	movs	r3, #0
 800101c:	76fb      	strb	r3, [r7, #27]
 800101e:	e00d      	b.n	800103c <carroTransversalTask+0x10c>
			}
			else {
				/* A bobina mudou de direção? -> Sim, também mude o carro */
				if (comando != comandoPrev) {
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	429a      	cmp	r2, r3
 8001026:	d009      	beq.n	800103c <carroTransversalTask+0x10c>
					comandoPrev = comando;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	61fb      	str	r3, [r7, #28]

					if (carroDir == ESQUERDA) {
 800102c:	7efb      	ldrb	r3, [r7, #27]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <carroTransversalTask+0x108>
						carroDir = DIREITA;
 8001032:	2301      	movs	r3, #1
 8001034:	76fb      	strb	r3, [r7, #27]
 8001036:	e001      	b.n	800103c <carroTransversalTask+0x10c>
					}
					else {
						carroDir = ESQUERDA;
 8001038:	2300      	movs	r3, #0
 800103a:	76fb      	strb	r3, [r7, #27]
					}
				}
			}

			carroTransversalDir(carroDir);
 800103c:	7efb      	ldrb	r3, [r7, #27]
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f87e 	bl	8001140 <carroTransversalDir>
		while (carroTransversalAndar) {
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <carroTransversalTask+0x148>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d19a      	bne.n	8000f84 <carroTransversalTask+0x54>
		}

		/* Freia e para o carro */
		carroTransversalSetDuty(1);
 800104e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001052:	f000 f8b7 	bl	80011c4 <carroTransversalSetDuty>
		carroTransversalDir(FREIO);
 8001056:	2002      	movs	r0, #2
 8001058:	f000 f872 	bl	8001140 <carroTransversalDir>
		comando = OSFlagPend(
 800105c:	e783      	b.n	8000f66 <carroTransversalTask+0x36>
 800105e:	bf00      	nop
 8001060:	9999999a 	.word	0x9999999a
 8001064:	3fb99999 	.word	0x3fb99999
 8001068:	20001004 	.word	0x20001004
 800106c:	00000000 	.word	0x00000000
 8001070:	200009a4 	.word	0x200009a4
 8001074:	200009a5 	.word	0x200009a5
 8001078:	200009a6 	.word	0x200009a6
 800107c:	200009a8 	.word	0x200009a8
 8001080:	40020400 	.word	0x40020400
 8001084:	40020000 	.word	0x40020000
 8001088:	3ff00000 	.word	0x3ff00000

0800108c <carroTransversalCreateTask>:
	}
}

/* Functions -----------------------------------------------------------------*/
void carroTransversalCreateTask(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	@ 0x30
 8001090:	af0a      	add	r7, sp, #40	@ 0x28
    OS_ERR err;

	OSTaskCreate(
 8001092:	1dbb      	adds	r3, r7, #6
 8001094:	9308      	str	r3, [sp, #32]
 8001096:	2303      	movs	r3, #3
 8001098:	9307      	str	r3, [sp, #28]
 800109a:	2300      	movs	r3, #0
 800109c:	9306      	str	r3, [sp, #24]
 800109e:	2300      	movs	r3, #0
 80010a0:	9305      	str	r3, [sp, #20]
 80010a2:	2300      	movs	r3, #0
 80010a4:	9304      	str	r3, [sp, #16]
 80010a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010aa:	9303      	str	r3, [sp, #12]
 80010ac:	2300      	movs	r3, #0
 80010ae:	9302      	str	r3, [sp, #8]
 80010b0:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <carroTransversalCreateTask+0x4c>)
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	2304      	movs	r3, #4
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2300      	movs	r3, #0
 80010ba:	4a08      	ldr	r2, [pc, #32]	@ (80010dc <carroTransversalCreateTask+0x50>)
 80010bc:	4908      	ldr	r1, [pc, #32]	@ (80010e0 <carroTransversalCreateTask+0x54>)
 80010be:	4809      	ldr	r0, [pc, #36]	@ (80010e4 <carroTransversalCreateTask+0x58>)
 80010c0:	f006 fa54 	bl	800756c <OSTaskCreate>
        (void         *)0u,
        (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
        (OS_ERR       *)&err
	);

	if (err != OS_ERR_NONE) {
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <carroTransversalCreateTask+0x42>
		Error_Handler();
 80010ca:	f000 f93d 	bl	8001348 <Error_Handler>
	}
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200005a4 	.word	0x200005a4
 80010dc:	08000f31 	.word	0x08000f31
 80010e0:	08008d88 	.word	0x08008d88
 80010e4:	200004e8 	.word	0x200004e8

080010e8 <carroTransversalHome>:

static void carroTransversalHome(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
	uint32_t homeTimeout = HOME_TIMEOUT;
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <carroTransversalHome+0x4c>)
 80010f0:	607b      	str	r3, [r7, #4]

	while (homeTimeout > 0 && (HAL_GPIO_ReadPin(FIM_CURSO_2_GPIO_Port, FIM_CURSO_2_Pin) == GPIO_PIN_RESET)) {
 80010f2:	e009      	b.n	8001108 <carroTransversalHome+0x20>
		carroTransversalDir(DIREITA);
 80010f4:	2001      	movs	r0, #1
 80010f6:	f000 f823 	bl	8001140 <carroTransversalDir>
		carroTransversalSetDuty(1.0);
 80010fa:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80010fe:	f000 f861 	bl	80011c4 <carroTransversalSetDuty>
		homeTimeout--;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3b01      	subs	r3, #1
 8001106:	607b      	str	r3, [r7, #4]
	while (homeTimeout > 0 && (HAL_GPIO_ReadPin(FIM_CURSO_2_GPIO_Port, FIM_CURSO_2_Pin) == GPIO_PIN_RESET)) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d007      	beq.n	800111e <carroTransversalHome+0x36>
 800110e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001112:	4809      	ldr	r0, [pc, #36]	@ (8001138 <carroTransversalHome+0x50>)
 8001114:	f002 fade 	bl	80036d4 <HAL_GPIO_ReadPin>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0ea      	beq.n	80010f4 <carroTransversalHome+0xc>
	}

	carroTransversalDir(PARADO);
 800111e:	2003      	movs	r0, #3
 8001120:	f000 f80e 	bl	8001140 <carroTransversalDir>
	carroTransversalSetDuty(0.0);
 8001124:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 800113c <carroTransversalHome+0x54>
 8001128:	f000 f84c 	bl	80011c4 <carroTransversalSetDuty>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	017d7840 	.word	0x017d7840
 8001138:	40020000 	.word	0x40020000
 800113c:	00000000 	.word	0x00000000

08001140 <carroTransversalDir>:

static void carroTransversalDir(CARRO_TRANSVERSAL_DIR ctrl)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
	switch(ctrl) {
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d01c      	beq.n	800118a <carroTransversalDir+0x4a>
 8001150:	2b02      	cmp	r3, #2
 8001152:	dc25      	bgt.n	80011a0 <carroTransversalDir+0x60>
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <carroTransversalDir+0x1e>
 8001158:	2b01      	cmp	r3, #1
 800115a:	d00b      	beq.n	8001174 <carroTransversalDir+0x34>
 800115c:	e020      	b.n	80011a0 <carroTransversalDir+0x60>
		case ESQUERDA:
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR1_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	2120      	movs	r1, #32
 8001162:	4817      	ldr	r0, [pc, #92]	@ (80011c0 <carroTransversalDir+0x80>)
 8001164:	f002 face 	bl	8003704 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR2_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	2140      	movs	r1, #64	@ 0x40
 800116c:	4814      	ldr	r0, [pc, #80]	@ (80011c0 <carroTransversalDir+0x80>)
 800116e:	f002 fac9 	bl	8003704 <HAL_GPIO_WritePin>
			break;
 8001172:	e020      	b.n	80011b6 <carroTransversalDir+0x76>

		case DIREITA:
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR1_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	2120      	movs	r1, #32
 8001178:	4811      	ldr	r0, [pc, #68]	@ (80011c0 <carroTransversalDir+0x80>)
 800117a:	f002 fac3 	bl	8003704 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR2_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin, GPIO_PIN_SET);
 800117e:	2201      	movs	r2, #1
 8001180:	2140      	movs	r1, #64	@ 0x40
 8001182:	480f      	ldr	r0, [pc, #60]	@ (80011c0 <carroTransversalDir+0x80>)
 8001184:	f002 fabe 	bl	8003704 <HAL_GPIO_WritePin>
			break;
 8001188:	e015      	b.n	80011b6 <carroTransversalDir+0x76>

		case FREIO:
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR1_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin, GPIO_PIN_SET);
 800118a:	2201      	movs	r2, #1
 800118c:	2120      	movs	r1, #32
 800118e:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <carroTransversalDir+0x80>)
 8001190:	f002 fab8 	bl	8003704 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR2_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	2140      	movs	r1, #64	@ 0x40
 8001198:	4809      	ldr	r0, [pc, #36]	@ (80011c0 <carroTransversalDir+0x80>)
 800119a:	f002 fab3 	bl	8003704 <HAL_GPIO_WritePin>
			break;
 800119e:	e00a      	b.n	80011b6 <carroTransversalDir+0x76>

		case PARADO:
		default:
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR1_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2120      	movs	r1, #32
 80011a4:	4806      	ldr	r0, [pc, #24]	@ (80011c0 <carroTransversalDir+0x80>)
 80011a6:	f002 faad 	bl	8003704 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR2_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2140      	movs	r1, #64	@ 0x40
 80011ae:	4804      	ldr	r0, [pc, #16]	@ (80011c0 <carroTransversalDir+0x80>)
 80011b0:	f002 faa8 	bl	8003704 <HAL_GPIO_WritePin>
			break;
 80011b4:	bf00      	nop
	}
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000

080011c4 <carroTransversalSetDuty>:

static void carroTransversalSetDuty(float duty)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	ed87 0a01 	vstr	s0, [r7, #4]
	if (duty > 0 && duty < 1) {
 80011ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011da:	dd19      	ble.n	8001210 <carroTransversalSetDuty+0x4c>
 80011dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80011e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ec:	d510      	bpl.n	8001210 <carroTransversalSetDuty+0x4c>
		MOTOR_CARRO_TRANSVERSAL_PWM_TIM->CCR4 = (uint32_t) (((float) MOTOR_CARRO_TRANSVERSAL_PWM_TIM->ARR) * duty);
 80011ee:	4b13      	ldr	r3, [pc, #76]	@ (800123c <carroTransversalSetDuty+0x78>)
 80011f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f2:	ee07 3a90 	vmov	s15, r3
 80011f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80011fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <carroTransversalSetDuty+0x78>)
 8001204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001208:	ee17 2a90 	vmov	r2, s15
 800120c:	641a      	str	r2, [r3, #64]	@ 0x40
		MOTOR_CARRO_TRANSVERSAL_PWM_TIM->CCR4 = 0;
	}
	else {
		MOTOR_CARRO_TRANSVERSAL_PWM_TIM->CCR4 = 65535;
	}
}
 800120e:	e00e      	b.n	800122e <carroTransversalSetDuty+0x6a>
	else if (duty <= 0) {
 8001210:	edd7 7a01 	vldr	s15, [r7, #4]
 8001214:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121c:	d803      	bhi.n	8001226 <carroTransversalSetDuty+0x62>
		MOTOR_CARRO_TRANSVERSAL_PWM_TIM->CCR4 = 0;
 800121e:	4b07      	ldr	r3, [pc, #28]	@ (800123c <carroTransversalSetDuty+0x78>)
 8001220:	2200      	movs	r2, #0
 8001222:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001224:	e003      	b.n	800122e <carroTransversalSetDuty+0x6a>
		MOTOR_CARRO_TRANSVERSAL_PWM_TIM->CCR4 = 65535;
 8001226:	4b05      	ldr	r3, [pc, #20]	@ (800123c <carroTransversalSetDuty+0x78>)
 8001228:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800122c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40010000 	.word	0x40010000

08001240 <main>:
/* Task prototypes -----------------------------------------------------------*/
static void programStartTask(void *p_arg);

/* Main ----------------------------------------------------------------------*/
int main(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	@ 0x30
 8001244:	af0a      	add	r7, sp, #40	@ 0x28
	/* MCU Configuration -----------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001246:	f000 fddb 	bl	8001e00 <HAL_Init>

	/* Configura o CLock da CPU para 160MHz */
	SystemClock_Config();
 800124a:	f000 f88b 	bl	8001364 <SystemClock_Config>

	/* Iniciliza o CPU */
	CPU_Init();
 800124e:	f003 fe97 	bl	8004f80 <CPU_Init>

	/* Inicializa o sistema */
	OS_ERR err;

	OSInit(&err);
 8001252:	1dbb      	adds	r3, r7, #6
 8001254:	4618      	mov	r0, r3
 8001256:	f004 f893 	bl	8005380 <OSInit>

	if (err != OS_ERR_NONE) {
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <main+0x24>
		Error_Handler();
 8001260:	f000 f872 	bl	8001348 <Error_Handler>
	}

	OSFlagCreate(
 8001264:	1dbb      	adds	r3, r7, #6
 8001266:	2200      	movs	r2, #0
 8001268:	4919      	ldr	r1, [pc, #100]	@ (80012d0 <main+0x90>)
 800126a:	481a      	ldr	r0, [pc, #104]	@ (80012d4 <main+0x94>)
 800126c:	f004 ff5e 	bl	800612c <OSFlagCreate>
		(CPU_CHAR    *)"Grupo de flags",
		(OS_FLAGS     )0,
		(OS_ERR      *)&err
	);

	if (err != OS_ERR_NONE) {
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <main+0x3a>
		Error_Handler();
 8001276:	f000 f867 	bl	8001348 <Error_Handler>
        (CPU_CHAR     *)"Tarefa de Inicializar o programa",
        (OS_TASK_PTR   )programStartTask,
        (void         *)0u,
        (OS_PRIO       )PROGRAM_START_TASK_PRIO,
        (CPU_STK      *)&programStartTaskStk[0u],
        (CPU_STK_SIZE  )programStartTaskStk[PROGRAM_START_TASK_STK_SIZE / 10u],
 800127a:	4b17      	ldr	r3, [pc, #92]	@ (80012d8 <main+0x98>)
 800127c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    OSTaskCreate(
 800127e:	1dba      	adds	r2, r7, #6
 8001280:	9208      	str	r2, [sp, #32]
 8001282:	2203      	movs	r2, #3
 8001284:	9207      	str	r2, [sp, #28]
 8001286:	2200      	movs	r2, #0
 8001288:	9206      	str	r2, [sp, #24]
 800128a:	2200      	movs	r2, #0
 800128c:	9205      	str	r2, [sp, #20]
 800128e:	2200      	movs	r2, #0
 8001290:	9204      	str	r2, [sp, #16]
 8001292:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001296:	9203      	str	r2, [sp, #12]
 8001298:	9302      	str	r3, [sp, #8]
 800129a:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <main+0x98>)
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	2305      	movs	r3, #5
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2300      	movs	r3, #0
 80012a4:	4a0d      	ldr	r2, [pc, #52]	@ (80012dc <main+0x9c>)
 80012a6:	490e      	ldr	r1, [pc, #56]	@ (80012e0 <main+0xa0>)
 80012a8:	480e      	ldr	r0, [pc, #56]	@ (80012e4 <main+0xa4>)
 80012aa:	f006 f95f 	bl	800756c <OSTaskCreate>
        (void         *)0u,
        (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
        (OS_ERR       *)&err
	);

	if (err != OS_ERR_NONE) {
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <main+0x78>
		Error_Handler();
 80012b4:	f000 f848 	bl	8001348 <Error_Handler>
	}

    OSStart(&err);
 80012b8:	1dbb      	adds	r3, r7, #6
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 fa2a 	bl	8005714 <OSStart>

	if (err != OS_ERR_NONE) {
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <main+0x8c>
		Error_Handler();
 80012c6:	f000 f83f 	bl	8001348 <Error_Handler>
	}

	/* Infinite loop */
	while (DEF_TRUE) {
 80012ca:	bf00      	nop
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <main+0x8c>
 80012d0:	08008dbc 	.word	0x08008dbc
 80012d4:	200009a8 	.word	0x200009a8
 80012d8:	20000a88 	.word	0x20000a88
 80012dc:	080012e9 	.word	0x080012e9
 80012e0:	08008dcc 	.word	0x08008dcc
 80012e4:	200009cc 	.word	0x200009cc

080012e8 <programStartTask>:
	return 0;
}

/* Task ----------------------------------------------------------------------*/
static void programStartTask(void *p_arg)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	6078      	str	r0, [r7, #4]
	OS_ERR err;
	(void)p_arg;

	/* Inicializa todos os periféricos configurados */
	MX_GPIO_Init();
 80012f0:	f000 fa46 	bl	8001780 <MX_GPIO_Init>
	MX_DMA_Init();
 80012f4:	f000 fa16 	bl	8001724 <MX_DMA_Init>
	MX_ADC2_Init();
 80012f8:	f000 f8a0 	bl	800143c <MX_ADC2_Init>
	MX_DAC_Init();
 80012fc:	f000 f8f4 	bl	80014e8 <MX_DAC_Init>
	MX_TIM1_Init();
 8001300:	f000 f926 	bl	8001550 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001304:	f000 f9c2 	bl	800168c <MX_TIM2_Init>

	/* Habilita as saídas digitais */
	HAL_GPIO_WritePin(ENAOUT03_GPIO_Port, ENAOUT03_Pin | ENAOUT04_Pin, GPIO_PIN_SET);
 8001308:	2201      	movs	r2, #1
 800130a:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 800130e:	480c      	ldr	r0, [pc, #48]	@ (8001340 <programStartTask+0x58>)
 8001310:	f002 f9f8 	bl	8003704 <HAL_GPIO_WritePin>

	/* Cria a tarefa de controle do motor do carro transversal */
	carroTransversalCreateTask();
 8001314:	f7ff feba 	bl	800108c <carroTransversalCreateTask>

	/* Cria a tarefa de controle do motor da bobina */
	motorBobinaCreateTask();
 8001318:	f7ff fd54 	bl	8000dc4 <motorBobinaCreateTask>

	/* Infinite loop */
	while (DEF_TRUE) {
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800131c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001320:	4808      	ldr	r0, [pc, #32]	@ (8001344 <programStartTask+0x5c>)
 8001322:	f002 fa08 	bl	8003736 <HAL_GPIO_TogglePin>
		OSTimeDlyHMSM(0, 0, 1, 0, OS_OPT_TIME_HMSM_NON_STRICT + OS_OPT_TIME_DLY, &err);
 8001326:	f107 030e 	add.w	r3, r7, #14
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	2310      	movs	r3, #16
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2300      	movs	r3, #0
 8001332:	2201      	movs	r2, #1
 8001334:	2100      	movs	r1, #0
 8001336:	2000      	movs	r0, #0
 8001338:	f007 f894 	bl	8008464 <OSTimeDlyHMSM>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800133c:	bf00      	nop
 800133e:	e7ed      	b.n	800131c <programStartTask+0x34>
 8001340:	40021000 	.word	0x40021000
 8001344:	40021400 	.word	0x40021400

08001348 <Error_Handler>:
	}
}

/* Error ---------------------------------------------------------------------*/
void Error_Handler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134c:	b672      	cpsid	i
}
 800134e:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	HAL_GPIO_WritePin(LED_ERRO_GPIO_Port, LED_ERRO_Pin, LED_ON);
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001356:	4802      	ldr	r0, [pc, #8]	@ (8001360 <Error_Handler+0x18>)
 8001358:	f002 f9d4 	bl	8003704 <HAL_GPIO_WritePin>

	while (1) {
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <Error_Handler+0x14>
 8001360:	40021400 	.word	0x40021400

08001364 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b094      	sub	sp, #80	@ 0x50
 8001368:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136a:	f107 0320 	add.w	r3, r7, #32
 800136e:	2230      	movs	r2, #48	@ 0x30
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f007 fcbc 	bl	8008cf0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]

	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	4b29      	ldr	r3, [pc, #164]	@ (8001434 <SystemClock_Config+0xd0>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001390:	4a28      	ldr	r2, [pc, #160]	@ (8001434 <SystemClock_Config+0xd0>)
 8001392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001396:	6413      	str	r3, [r2, #64]	@ 0x40
 8001398:	4b26      	ldr	r3, [pc, #152]	@ (8001434 <SystemClock_Config+0xd0>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	4b23      	ldr	r3, [pc, #140]	@ (8001438 <SystemClock_Config+0xd4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a22      	ldr	r2, [pc, #136]	@ (8001438 <SystemClock_Config+0xd4>)
 80013ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b20      	ldr	r3, [pc, #128]	@ (8001438 <SystemClock_Config+0xd4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013c0:	2301      	movs	r3, #1
 80013c2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ca:	2302      	movs	r3, #2
 80013cc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 15;
 80013d4:	230f      	movs	r3, #15
 80013d6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 80013d8:	23c0      	movs	r3, #192	@ 0xc0
 80013da:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013dc:	2302      	movs	r3, #2
 80013de:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80013e0:	2304      	movs	r3, #4
 80013e2:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013e4:	f107 0320 	add.w	r3, r7, #32
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 f9d7 	bl	800379c <HAL_RCC_OscConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SystemClock_Config+0x94>
		Error_Handler();
 80013f4:	f7ff ffa8 	bl	8001348 <Error_Handler>
	}

	/* Initializes the CPU, AHB and APB buses clocks */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f8:	230f      	movs	r3, #15
 80013fa:	60fb      	str	r3, [r7, #12]
								 |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013fc:	2302      	movs	r3, #2
 80013fe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001404:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001408:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800140a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800140e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	2105      	movs	r1, #5
 8001416:	4618      	mov	r0, r3
 8001418:	f002 fc38 	bl	8003c8c <HAL_RCC_ClockConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0xc2>
		Error_Handler();
 8001422:	f7ff ff91 	bl	8001348 <Error_Handler>
	}

	/* Enables the Clock Security System */
	HAL_RCC_EnableCSS();
 8001426:	f002 fd17 	bl	8003e58 <HAL_RCC_EnableCSS>
}
 800142a:	bf00      	nop
 800142c:	3750      	adds	r7, #80	@ 0x50
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	40007000 	.word	0x40007000

0800143c <MX_ADC2_Init>:

void MX_ADC2_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001442:	463b      	mov	r3, r7
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]

	/* Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) */
	hadc2.Instance = ADC2;
 800144e:	4b24      	ldr	r3, [pc, #144]	@ (80014e0 <MX_ADC2_Init+0xa4>)
 8001450:	4a24      	ldr	r2, [pc, #144]	@ (80014e4 <MX_ADC2_Init+0xa8>)
 8001452:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001454:	4b22      	ldr	r3, [pc, #136]	@ (80014e0 <MX_ADC2_Init+0xa4>)
 8001456:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800145a:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800145c:	4b20      	ldr	r3, [pc, #128]	@ (80014e0 <MX_ADC2_Init+0xa4>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = ENABLE;
 8001462:	4b1f      	ldr	r3, [pc, #124]	@ (80014e0 <MX_ADC2_Init+0xa4>)
 8001464:	2201      	movs	r2, #1
 8001466:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8001468:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <MX_ADC2_Init+0xa4>)
 800146a:	2200      	movs	r2, #0
 800146c:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = ENABLE;
 800146e:	4b1c      	ldr	r3, [pc, #112]	@ (80014e0 <MX_ADC2_Init+0xa4>)
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.NbrOfDiscConversion = 1;
 8001476:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <MX_ADC2_Init+0xa4>)
 8001478:	2201      	movs	r2, #1
 800147a:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800147c:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <MX_ADC2_Init+0xa4>)
 800147e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001482:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001484:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <MX_ADC2_Init+0xa4>)
 8001486:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800148a:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800148c:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <MX_ADC2_Init+0xa4>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8001492:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <MX_ADC2_Init+0xa4>)
 8001494:	2201      	movs	r2, #1
 8001496:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8001498:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <MX_ADC2_Init+0xa4>)
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <MX_ADC2_Init+0xa4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	615a      	str	r2, [r3, #20]

	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80014a6:	480e      	ldr	r0, [pc, #56]	@ (80014e0 <MX_ADC2_Init+0xa4>)
 80014a8:	f000 fd08 	bl	8001ebc <HAL_ADC_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_ADC2_Init+0x7a>
		Error_Handler();
 80014b2:	f7ff ff49 	bl	8001348 <Error_Handler>
	}

	/* Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. */
	sConfig.Channel = ADC_CHANNEL_6;
 80014b6:	2306      	movs	r3, #6
 80014b8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80014ba:	2301      	movs	r3, #1
 80014bc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80014be:	2306      	movs	r3, #6
 80014c0:	60bb      	str	r3, [r7, #8]

	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 80014c2:	463b      	mov	r3, r7
 80014c4:	4619      	mov	r1, r3
 80014c6:	4806      	ldr	r0, [pc, #24]	@ (80014e0 <MX_ADC2_Init+0xa4>)
 80014c8:	f000 fe60 	bl	800218c <HAL_ADC_ConfigChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_ADC2_Init+0x9a>
		Error_Handler();
 80014d2:	f7ff ff39 	bl	8001348 <Error_Handler>
//  sConfig.Rank = 2;
//
//	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
//  	Error_Handler();
//  }
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000e88 	.word	0x20000e88
 80014e4:	40012100 	.word	0x40012100

080014e8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
void MX_DAC_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = {0};
 80014ee:	463b      	mov	r3, r7
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]

	/** DAC Initialization */
	hdac.Instance = DAC;
 80014f6:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <MX_DAC_Init+0x60>)
 80014f8:	4a14      	ldr	r2, [pc, #80]	@ (800154c <MX_DAC_Init+0x64>)
 80014fa:	601a      	str	r2, [r3, #0]

	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 80014fc:	4812      	ldr	r0, [pc, #72]	@ (8001548 <MX_DAC_Init+0x60>)
 80014fe:	f001 f9f6 	bl	80028ee <HAL_DAC_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_DAC_Init+0x24>
		Error_Handler();
 8001508:	f7ff ff1e 	bl	8001348 <Error_Handler>
	}

	/** DAC channel OUT1 config */
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800150c:	2324      	movs	r3, #36	@ 0x24
 800150e:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]

	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001514:	463b      	mov	r3, r7
 8001516:	2200      	movs	r2, #0
 8001518:	4619      	mov	r1, r3
 800151a:	480b      	ldr	r0, [pc, #44]	@ (8001548 <MX_DAC_Init+0x60>)
 800151c:	f001 faea 	bl	8002af4 <HAL_DAC_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_DAC_Init+0x42>
		Error_Handler();
 8001526:	f7ff ff0f 	bl	8001348 <Error_Handler>
	}

	/** DAC channel OUT2 config */
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 800152a:	463b      	mov	r3, r7
 800152c:	2210      	movs	r2, #16
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	@ (8001548 <MX_DAC_Init+0x60>)
 8001532:	f001 fadf 	bl	8002af4 <HAL_DAC_ConfigChannel>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_DAC_Init+0x58>
		Error_Handler();
 800153c:	f7ff ff04 	bl	8001348 <Error_Handler>
	}
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000f30 	.word	0x20000f30
 800154c:	40007400 	.word	0x40007400

08001550 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b096      	sub	sp, #88	@ 0x58
 8001554:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001556:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001564:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800156e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]
 800157e:	615a      	str	r2, [r3, #20]
 8001580:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2220      	movs	r2, #32
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f007 fbb1 	bl	8008cf0 <memset>

	htim1.Instance = TIM1;
 800158e:	4b3d      	ldr	r3, [pc, #244]	@ (8001684 <MX_TIM1_Init+0x134>)
 8001590:	4a3d      	ldr	r2, [pc, #244]	@ (8001688 <MX_TIM1_Init+0x138>)
 8001592:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 80-1;
 8001594:	4b3b      	ldr	r3, [pc, #236]	@ (8001684 <MX_TIM1_Init+0x134>)
 8001596:	224f      	movs	r2, #79	@ 0x4f
 8001598:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159a:	4b3a      	ldr	r3, [pc, #232]	@ (8001684 <MX_TIM1_Init+0x134>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 100-1;
 80015a0:	4b38      	ldr	r3, [pc, #224]	@ (8001684 <MX_TIM1_Init+0x134>)
 80015a2:	2263      	movs	r2, #99	@ 0x63
 80015a4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a6:	4b37      	ldr	r3, [pc, #220]	@ (8001684 <MX_TIM1_Init+0x134>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80015ac:	4b35      	ldr	r3, [pc, #212]	@ (8001684 <MX_TIM1_Init+0x134>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b2:	4b34      	ldr	r3, [pc, #208]	@ (8001684 <MX_TIM1_Init+0x134>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]

	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80015b8:	4832      	ldr	r0, [pc, #200]	@ (8001684 <MX_TIM1_Init+0x134>)
 80015ba:	f002 fd3a 	bl	8004032 <HAL_TIM_Base_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM1_Init+0x78>
		Error_Handler();
 80015c4:	f7ff fec0 	bl	8001348 <Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015cc:	64bb      	str	r3, [r7, #72]	@ 0x48

	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80015ce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015d2:	4619      	mov	r1, r3
 80015d4:	482b      	ldr	r0, [pc, #172]	@ (8001684 <MX_TIM1_Init+0x134>)
 80015d6:	f002 ffc7 	bl	8004568 <HAL_TIM_ConfigClockSource>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM1_Init+0x94>
		Error_Handler();
 80015e0:	f7ff feb2 	bl	8001348 <Error_Handler>
	}

	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80015e4:	4827      	ldr	r0, [pc, #156]	@ (8001684 <MX_TIM1_Init+0x134>)
 80015e6:	f002 fddb 	bl	80041a0 <HAL_TIM_PWM_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM1_Init+0xa4>
		Error_Handler();
 80015f0:	f7ff feaa 	bl	8001348 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	647b      	str	r3, [r7, #68]	@ 0x44

	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80015fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001600:	4619      	mov	r1, r3
 8001602:	4820      	ldr	r0, [pc, #128]	@ (8001684 <MX_TIM1_Init+0x134>)
 8001604:	f003 fb94 	bl	8004d30 <HAL_TIMEx_MasterConfigSynchronization>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM1_Init+0xc2>
		Error_Handler();
 800160e:	f7ff fe9b 	bl	8001348 <Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001612:	2360      	movs	r3, #96	@ 0x60
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 800162a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162e:	220c      	movs	r2, #12
 8001630:	4619      	mov	r1, r3
 8001632:	4814      	ldr	r0, [pc, #80]	@ (8001684 <MX_TIM1_Init+0x134>)
 8001634:	f002 fed6 	bl	80043e4 <HAL_TIM_PWM_ConfigChannel>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM1_Init+0xf2>
		Error_Handler();
 800163e:	f7ff fe83 	bl	8001348 <Error_Handler>
	}

	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001656:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800165a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]

	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	4619      	mov	r1, r3
 8001664:	4807      	ldr	r0, [pc, #28]	@ (8001684 <MX_TIM1_Init+0x134>)
 8001666:	f003 fbdf 	bl	8004e28 <HAL_TIMEx_ConfigBreakDeadTime>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM1_Init+0x124>
		Error_Handler();
 8001670:	f7ff fe6a 	bl	8001348 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim1);
 8001674:	4803      	ldr	r0, [pc, #12]	@ (8001684 <MX_TIM1_Init+0x134>)
 8001676:	f000 fb47 	bl	8001d08 <HAL_TIM_MspPostInit>
}
 800167a:	bf00      	nop
 800167c:	3758      	adds	r7, #88	@ 0x58
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20001004 	.word	0x20001004
 8001688:	40010000 	.word	0x40010000

0800168c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001692:	f107 0308 	add.w	r3, r7, #8
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a0:	463b      	mov	r3, r7
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]

	htim2.Instance = TIM2;
 80016a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001720 <MX_TIM2_Init+0x94>)
 80016aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016ae:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 100-1;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <MX_TIM2_Init+0x94>)
 80016b2:	2263      	movs	r2, #99	@ 0x63
 80016b4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <MX_TIM2_Init+0x94>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 250-1;
 80016bc:	4b18      	ldr	r3, [pc, #96]	@ (8001720 <MX_TIM2_Init+0x94>)
 80016be:	22f9      	movs	r2, #249	@ 0xf9
 80016c0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c2:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <MX_TIM2_Init+0x94>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016c8:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <MX_TIM2_Init+0x94>)
 80016ca:	2280      	movs	r2, #128	@ 0x80
 80016cc:	619a      	str	r2, [r3, #24]

	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80016ce:	4814      	ldr	r0, [pc, #80]	@ (8001720 <MX_TIM2_Init+0x94>)
 80016d0:	f002 fcaf 	bl	8004032 <HAL_TIM_Base_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM2_Init+0x52>
		Error_Handler();
 80016da:	f7ff fe35 	bl	8001348 <Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e2:	60bb      	str	r3, [r7, #8]

	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80016e4:	f107 0308 	add.w	r3, r7, #8
 80016e8:	4619      	mov	r1, r3
 80016ea:	480d      	ldr	r0, [pc, #52]	@ (8001720 <MX_TIM2_Init+0x94>)
 80016ec:	f002 ff3c 	bl	8004568 <HAL_TIM_ConfigClockSource>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM2_Init+0x6e>
		Error_Handler();
 80016f6:	f7ff fe27 	bl	8001348 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016fa:	2320      	movs	r3, #32
 80016fc:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]

	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8001702:	463b      	mov	r3, r7
 8001704:	4619      	mov	r1, r3
 8001706:	4806      	ldr	r0, [pc, #24]	@ (8001720 <MX_TIM2_Init+0x94>)
 8001708:	f003 fb12 	bl	8004d30 <HAL_TIMEx_MasterConfigSynchronization>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM2_Init+0x8a>
		Error_Handler();
 8001712:	f7ff fe19 	bl	8001348 <Error_Handler>
	}
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000104c 	.word	0x2000104c

08001724 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	4b13      	ldr	r3, [pc, #76]	@ (800177c <MX_DMA_Init+0x58>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a12      	ldr	r2, [pc, #72]	@ (800177c <MX_DMA_Init+0x58>)
 8001734:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b10      	ldr	r3, [pc, #64]	@ (800177c <MX_DMA_Init+0x58>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <MX_DMA_Init+0x58>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a0b      	ldr	r2, [pc, #44]	@ (800177c <MX_DMA_Init+0x58>)
 8001750:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b09      	ldr	r3, [pc, #36]	@ (800177c <MX_DMA_Init+0x58>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	203a      	movs	r0, #58	@ 0x3a
 8001768:	f001 f88b 	bl	8002882 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800176c:	203a      	movs	r0, #58	@ 0x3a
 800176e:	f001 f8a4 	bl	80028ba <HAL_NVIC_EnableIRQ>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800

08001780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08e      	sub	sp, #56	@ 0x38
 8001784:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
 800179a:	4b84      	ldr	r3, [pc, #528]	@ (80019ac <MX_GPIO_Init+0x22c>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a83      	ldr	r2, [pc, #524]	@ (80019ac <MX_GPIO_Init+0x22c>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b81      	ldr	r3, [pc, #516]	@ (80019ac <MX_GPIO_Init+0x22c>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	623b      	str	r3, [r7, #32]
 80017b0:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
 80017b6:	4b7d      	ldr	r3, [pc, #500]	@ (80019ac <MX_GPIO_Init+0x22c>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a7c      	ldr	r2, [pc, #496]	@ (80019ac <MX_GPIO_Init+0x22c>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b7a      	ldr	r3, [pc, #488]	@ (80019ac <MX_GPIO_Init+0x22c>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	61fb      	str	r3, [r7, #28]
 80017cc:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
 80017d2:	4b76      	ldr	r3, [pc, #472]	@ (80019ac <MX_GPIO_Init+0x22c>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a75      	ldr	r2, [pc, #468]	@ (80019ac <MX_GPIO_Init+0x22c>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b73      	ldr	r3, [pc, #460]	@ (80019ac <MX_GPIO_Init+0x22c>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	61bb      	str	r3, [r7, #24]
 80017e8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	4b6f      	ldr	r3, [pc, #444]	@ (80019ac <MX_GPIO_Init+0x22c>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a6e      	ldr	r2, [pc, #440]	@ (80019ac <MX_GPIO_Init+0x22c>)
 80017f4:	f043 0308 	orr.w	r3, r3, #8
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b6c      	ldr	r3, [pc, #432]	@ (80019ac <MX_GPIO_Init+0x22c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	4b68      	ldr	r3, [pc, #416]	@ (80019ac <MX_GPIO_Init+0x22c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a67      	ldr	r2, [pc, #412]	@ (80019ac <MX_GPIO_Init+0x22c>)
 8001810:	f043 0310 	orr.w	r3, r3, #16
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b65      	ldr	r3, [pc, #404]	@ (80019ac <MX_GPIO_Init+0x22c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b61      	ldr	r3, [pc, #388]	@ (80019ac <MX_GPIO_Init+0x22c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a60      	ldr	r2, [pc, #384]	@ (80019ac <MX_GPIO_Init+0x22c>)
 800182c:	f043 0320 	orr.w	r3, r3, #32
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b5e      	ldr	r3, [pc, #376]	@ (80019ac <MX_GPIO_Init+0x22c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f003 0320 	and.w	r3, r3, #32
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	4b5a      	ldr	r3, [pc, #360]	@ (80019ac <MX_GPIO_Init+0x22c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a59      	ldr	r2, [pc, #356]	@ (80019ac <MX_GPIO_Init+0x22c>)
 8001848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b57      	ldr	r3, [pc, #348]	@ (80019ac <MX_GPIO_Init+0x22c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	4b53      	ldr	r3, [pc, #332]	@ (80019ac <MX_GPIO_Init+0x22c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	4a52      	ldr	r2, [pc, #328]	@ (80019ac <MX_GPIO_Init+0x22c>)
 8001864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001868:	6313      	str	r3, [r2, #48]	@ 0x30
 800186a:	4b50      	ldr	r3, [pc, #320]	@ (80019ac <MX_GPIO_Init+0x22c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin|MOTOR_CARRO_TRANSVERSAL_DIR2_Pin|MOTOR_POLIA_EN_Pin|ENAOUT03_Pin
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 51f3 	mov.w	r1, #7776	@ 0x1e60
 800187c:	484c      	ldr	r0, [pc, #304]	@ (80019b0 <MX_GPIO_Init+0x230>)
 800187e:	f001 ff41 	bl	8003704 <HAL_GPIO_WritePin>
					 |MOTOR_POLIA_DIR_Pin|ENAOUT04_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, MOTOR_BOBINA_EN_Pin|MOTOR_BOBINA_DIR_Pin|LED0_Pin|LED1_Pin
 8001882:	2200      	movs	r2, #0
 8001884:	f44f 4163 	mov.w	r1, #58112	@ 0xe300
 8001888:	484a      	ldr	r0, [pc, #296]	@ (80019b4 <MX_GPIO_Init+0x234>)
 800188a:	f001 ff3b 	bl	8003704 <HAL_GPIO_WritePin>
                     |LED2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_SET);
 800188e:	2201      	movs	r2, #1
 8001890:	2103      	movs	r1, #3
 8001892:	4849      	ldr	r0, [pc, #292]	@ (80019b8 <MX_GPIO_Init+0x238>)
 8001894:	f001 ff36 	bl	8003704 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800189e:	4845      	ldr	r0, [pc, #276]	@ (80019b4 <MX_GPIO_Init+0x234>)
 80018a0:	f001 ff30 	bl	8003704 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : MOTOR_CARRO_TRANSVERSAL_DIR1_Pin MOTOR_CARRO_TRANSVERSAL_DIR2_Pin MOTOR_POLIA_EN_Pin ENAOUT03_Pin
                           MOTOR_POLIA_DIR_Pin ENAOUT04_Pin */
	GPIO_InitStruct.Pin = MOTOR_CARRO_TRANSVERSAL_DIR1_Pin|MOTOR_CARRO_TRANSVERSAL_DIR2_Pin|MOTOR_POLIA_EN_Pin|ENAOUT03_Pin
 80018a4:	f44f 53f3 	mov.w	r3, #7776	@ 0x1e60
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
                         |MOTOR_POLIA_DIR_Pin|ENAOUT04_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ba:	4619      	mov	r1, r3
 80018bc:	483c      	ldr	r0, [pc, #240]	@ (80019b0 <MX_GPIO_Init+0x230>)
 80018be:	f001 fd6d 	bl	800339c <HAL_GPIO_Init>

	/*Configure GPIO pins : MOTOR_BOBINA_EN_Pin MOTOR_BOBINA_DIR_Pin */
	GPIO_InitStruct.Pin = MOTOR_BOBINA_EN_Pin|MOTOR_BOBINA_DIR_Pin;
 80018c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c8:	2301      	movs	r3, #1
 80018ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d8:	4619      	mov	r1, r3
 80018da:	4836      	ldr	r0, [pc, #216]	@ (80019b4 <MX_GPIO_Init+0x234>)
 80018dc:	f001 fd5e 	bl	800339c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin */
	GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 80018e0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80018e6:	2311      	movs	r3, #17
 80018e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f6:	4619      	mov	r1, r3
 80018f8:	482e      	ldr	r0, [pc, #184]	@ (80019b4 <MX_GPIO_Init+0x234>)
 80018fa:	f001 fd4f 	bl	800339c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED3_Pin LED4_Pin */
	GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 80018fe:	2303      	movs	r3, #3
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001902:	2311      	movs	r3, #17
 8001904:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800190e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001912:	4619      	mov	r1, r3
 8001914:	4828      	ldr	r0, [pc, #160]	@ (80019b8 <MX_GPIO_Init+0x238>)
 8001916:	f001 fd41 	bl	800339c <HAL_GPIO_Init>

	/*Configure GPIO pins : SW0_Pin SW1_Pin SW2_Pin SW3_Pin */
	GPIO_InitStruct.Pin = SW0_Pin|SW1_Pin|SW2_Pin|SW3_Pin;
 800191a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001928:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800192c:	4619      	mov	r1, r3
 800192e:	4823      	ldr	r0, [pc, #140]	@ (80019bc <MX_GPIO_Init+0x23c>)
 8001930:	f001 fd34 	bl	800339c <HAL_GPIO_Init>

	/*Configure GPIO pins : OPTO_1_Pin OPTO_2_Pin OPTO_3_Pin */
	GPIO_InitStruct.Pin = OPTO_1_Pin|OPTO_2_Pin|OPTO_3_Pin;
 8001934:	f24c 0308 	movw	r3, #49160	@ 0xc008
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800193a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800193e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001940:	2301      	movs	r3, #1
 8001942:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001944:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001948:	4619      	mov	r1, r3
 800194a:	481c      	ldr	r0, [pc, #112]	@ (80019bc <MX_GPIO_Init+0x23c>)
 800194c:	f001 fd26 	bl	800339c <HAL_GPIO_Init>

	/*Configure GPIO pin : FIM_CURSO_2_Pin */
	GPIO_InitStruct.Pin = FIM_CURSO_2_Pin;
 8001950:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001956:	2300      	movs	r3, #0
 8001958:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(FIM_CURSO_2_GPIO_Port, &GPIO_InitStruct);
 800195e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001962:	4619      	mov	r1, r3
 8001964:	4816      	ldr	r0, [pc, #88]	@ (80019c0 <MX_GPIO_Init+0x240>)
 8001966:	f001 fd19 	bl	800339c <HAL_GPIO_Init>

	/*Configure GPIO pin : FIM_CURSO_1_Pin */
	GPIO_InitStruct.Pin = FIM_CURSO_1_Pin;
 800196a:	2308      	movs	r3, #8
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196e:	2300      	movs	r3, #0
 8001970:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(FIM_CURSO_1_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800197a:	4619      	mov	r1, r3
 800197c:	4811      	ldr	r0, [pc, #68]	@ (80019c4 <MX_GPIO_Init+0x244>)
 800197e:	f001 fd0d 	bl	800339c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	2009      	movs	r0, #9
 8001988:	f000 ff7b 	bl	8002882 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800198c:	2009      	movs	r0, #9
 800198e:	f000 ff94 	bl	80028ba <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	2028      	movs	r0, #40	@ 0x28
 8001998:	f000 ff73 	bl	8002882 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800199c:	2028      	movs	r0, #40	@ 0x28
 800199e:	f000 ff8c 	bl	80028ba <HAL_NVIC_EnableIRQ>
}
 80019a2:	bf00      	nop
 80019a4:	3738      	adds	r7, #56	@ 0x38
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40021400 	.word	0x40021400
 80019b8:	40021800 	.word	0x40021800
 80019bc:	40020c00 	.word	0x40020c00
 80019c0:	40020000 	.word	0x40020000
 80019c4:	40020400 	.word	0x40020400

080019c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	4b10      	ldr	r3, [pc, #64]	@ (8001a14 <HAL_MspInit+0x4c>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001a14 <HAL_MspInit+0x4c>)
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019de:	4b0d      	ldr	r3, [pc, #52]	@ (8001a14 <HAL_MspInit+0x4c>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <HAL_MspInit+0x4c>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	4a08      	ldr	r2, [pc, #32]	@ (8001a14 <HAL_MspInit+0x4c>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019fa:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <HAL_MspInit+0x4c>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800

08001a18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	@ 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a3c      	ldr	r2, [pc, #240]	@ (8001b28 <HAL_ADC_MspInit+0x110>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d172      	bne.n	8001b20 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b2c <HAL_ADC_MspInit+0x114>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a42:	4a3a      	ldr	r2, [pc, #232]	@ (8001b2c <HAL_ADC_MspInit+0x114>)
 8001a44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a4a:	4b38      	ldr	r3, [pc, #224]	@ (8001b2c <HAL_ADC_MspInit+0x114>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b34      	ldr	r3, [pc, #208]	@ (8001b2c <HAL_ADC_MspInit+0x114>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a33      	ldr	r2, [pc, #204]	@ (8001b2c <HAL_ADC_MspInit+0x114>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b31      	ldr	r3, [pc, #196]	@ (8001b2c <HAL_ADC_MspInit+0x114>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	4b2d      	ldr	r3, [pc, #180]	@ (8001b2c <HAL_ADC_MspInit+0x114>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	4a2c      	ldr	r2, [pc, #176]	@ (8001b2c <HAL_ADC_MspInit+0x114>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a82:	4b2a      	ldr	r3, [pc, #168]	@ (8001b2c <HAL_ADC_MspInit+0x114>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_IN10
    PA6     ------> ADC2_IN6
    */
    GPIO_InitStruct.Pin = MOTOR_BOBINA_TENSAO_Pin;
 8001a8e:	2340      	movs	r3, #64	@ 0x40
 8001a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a92:	2303      	movs	r3, #3
 8001a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_BOBINA_TENSAO_GPIO_Port, &GPIO_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4823      	ldr	r0, [pc, #140]	@ (8001b30 <HAL_ADC_MspInit+0x118>)
 8001aa2:	f001 fc7b 	bl	800339c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_POLIA_TENSAO_Pin;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_POLIA_TENSAO_GPIO_Port, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	481e      	ldr	r0, [pc, #120]	@ (8001b34 <HAL_ADC_MspInit+0x11c>)
 8001aba:	f001 fc6f 	bl	800339c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8001abe:	4b1e      	ldr	r3, [pc, #120]	@ (8001b38 <HAL_ADC_MspInit+0x120>)
 8001ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b3c <HAL_ADC_MspInit+0x124>)
 8001ac2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <HAL_ADC_MspInit+0x120>)
 8001ac6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001aca:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001acc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b38 <HAL_ADC_MspInit+0x120>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad2:	4b19      	ldr	r3, [pc, #100]	@ (8001b38 <HAL_ADC_MspInit+0x120>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001ad8:	4b17      	ldr	r3, [pc, #92]	@ (8001b38 <HAL_ADC_MspInit+0x120>)
 8001ada:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ade:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ae0:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <HAL_ADC_MspInit+0x120>)
 8001ae2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ae6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ae8:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <HAL_ADC_MspInit+0x120>)
 8001aea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aee:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001af0:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <HAL_ADC_MspInit+0x120>)
 8001af2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001af6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b38 <HAL_ADC_MspInit+0x120>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <HAL_ADC_MspInit+0x120>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001b04:	480c      	ldr	r0, [pc, #48]	@ (8001b38 <HAL_ADC_MspInit+0x120>)
 8001b06:	f001 f8d9 	bl	8002cbc <HAL_DMA_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8001b10:	f7ff fc1a 	bl	8001348 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a08      	ldr	r2, [pc, #32]	@ (8001b38 <HAL_ADC_MspInit+0x120>)
 8001b18:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b1a:	4a07      	ldr	r2, [pc, #28]	@ (8001b38 <HAL_ADC_MspInit+0x120>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC2_MspInit 1 */

  }

}
 8001b20:	bf00      	nop
 8001b22:	3728      	adds	r7, #40	@ 0x28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40012100 	.word	0x40012100
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020800 	.word	0x40020800
 8001b38:	20000ed0 	.word	0x20000ed0
 8001b3c:	40026440 	.word	0x40026440

08001b40 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	@ 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a48      	ldr	r2, [pc, #288]	@ (8001c80 <HAL_DAC_MspInit+0x140>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	f040 808a 	bne.w	8001c78 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	4b46      	ldr	r3, [pc, #280]	@ (8001c84 <HAL_DAC_MspInit+0x144>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6c:	4a45      	ldr	r2, [pc, #276]	@ (8001c84 <HAL_DAC_MspInit+0x144>)
 8001b6e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001b72:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b74:	4b43      	ldr	r3, [pc, #268]	@ (8001c84 <HAL_DAC_MspInit+0x144>)
 8001b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	4b3f      	ldr	r3, [pc, #252]	@ (8001c84 <HAL_DAC_MspInit+0x144>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b88:	4a3e      	ldr	r2, [pc, #248]	@ (8001c84 <HAL_DAC_MspInit+0x144>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b90:	4b3c      	ldr	r3, [pc, #240]	@ (8001c84 <HAL_DAC_MspInit+0x144>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = MOTOR_BOBINA_VEL_Pin|MOTOR_POLIA_VEL_Pin;
 8001b9c:	2330      	movs	r3, #48	@ 0x30
 8001b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4619      	mov	r1, r3
 8001bae:	4836      	ldr	r0, [pc, #216]	@ (8001c88 <HAL_DAC_MspInit+0x148>)
 8001bb0:	f001 fbf4 	bl	800339c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001bb4:	4b35      	ldr	r3, [pc, #212]	@ (8001c8c <HAL_DAC_MspInit+0x14c>)
 8001bb6:	4a36      	ldr	r2, [pc, #216]	@ (8001c90 <HAL_DAC_MspInit+0x150>)
 8001bb8:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001bba:	4b34      	ldr	r3, [pc, #208]	@ (8001c8c <HAL_DAC_MspInit+0x14c>)
 8001bbc:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001bc0:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bc2:	4b32      	ldr	r3, [pc, #200]	@ (8001c8c <HAL_DAC_MspInit+0x14c>)
 8001bc4:	2240      	movs	r2, #64	@ 0x40
 8001bc6:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc8:	4b30      	ldr	r3, [pc, #192]	@ (8001c8c <HAL_DAC_MspInit+0x14c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001bce:	4b2f      	ldr	r3, [pc, #188]	@ (8001c8c <HAL_DAC_MspInit+0x14c>)
 8001bd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bd4:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c8c <HAL_DAC_MspInit+0x14c>)
 8001bd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bdc:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bde:	4b2b      	ldr	r3, [pc, #172]	@ (8001c8c <HAL_DAC_MspInit+0x14c>)
 8001be0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001be4:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001be6:	4b29      	ldr	r3, [pc, #164]	@ (8001c8c <HAL_DAC_MspInit+0x14c>)
 8001be8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bec:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001bee:	4b27      	ldr	r3, [pc, #156]	@ (8001c8c <HAL_DAC_MspInit+0x14c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bf4:	4b25      	ldr	r3, [pc, #148]	@ (8001c8c <HAL_DAC_MspInit+0x14c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001bfa:	4824      	ldr	r0, [pc, #144]	@ (8001c8c <HAL_DAC_MspInit+0x14c>)
 8001bfc:	f001 f85e 	bl	8002cbc <HAL_DMA_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001c06:	f7ff fb9f 	bl	8001348 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001c8c <HAL_DAC_MspInit+0x14c>)
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	4a1e      	ldr	r2, [pc, #120]	@ (8001c8c <HAL_DAC_MspInit+0x14c>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8001c16:	4b1f      	ldr	r3, [pc, #124]	@ (8001c94 <HAL_DAC_MspInit+0x154>)
 8001c18:	4a1f      	ldr	r2, [pc, #124]	@ (8001c98 <HAL_DAC_MspInit+0x158>)
 8001c1a:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c94 <HAL_DAC_MspInit+0x154>)
 8001c1e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001c22:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c24:	4b1b      	ldr	r3, [pc, #108]	@ (8001c94 <HAL_DAC_MspInit+0x154>)
 8001c26:	2240      	movs	r2, #64	@ 0x40
 8001c28:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c94 <HAL_DAC_MspInit+0x154>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8001c30:	4b18      	ldr	r3, [pc, #96]	@ (8001c94 <HAL_DAC_MspInit+0x154>)
 8001c32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c36:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c38:	4b16      	ldr	r3, [pc, #88]	@ (8001c94 <HAL_DAC_MspInit+0x154>)
 8001c3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c3e:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c40:	4b14      	ldr	r3, [pc, #80]	@ (8001c94 <HAL_DAC_MspInit+0x154>)
 8001c42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c46:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8001c48:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <HAL_DAC_MspInit+0x154>)
 8001c4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c4e:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 8001c50:	4b10      	ldr	r3, [pc, #64]	@ (8001c94 <HAL_DAC_MspInit+0x154>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c56:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <HAL_DAC_MspInit+0x154>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8001c5c:	480d      	ldr	r0, [pc, #52]	@ (8001c94 <HAL_DAC_MspInit+0x154>)
 8001c5e:	f001 f82d 	bl	8002cbc <HAL_DMA_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8001c68:	f7ff fb6e 	bl	8001348 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a09      	ldr	r2, [pc, #36]	@ (8001c94 <HAL_DAC_MspInit+0x154>)
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	4a08      	ldr	r2, [pc, #32]	@ (8001c94 <HAL_DAC_MspInit+0x154>)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001c78:	bf00      	nop
 8001c7a:	3728      	adds	r7, #40	@ 0x28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40007400 	.word	0x40007400
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020000 	.word	0x40020000
 8001c8c:	20000f44 	.word	0x20000f44
 8001c90:	40026088 	.word	0x40026088
 8001c94:	20000fa4 	.word	0x20000fa4
 8001c98:	400260a0 	.word	0x400260a0

08001c9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a15      	ldr	r2, [pc, #84]	@ (8001d00 <HAL_TIM_Base_MspInit+0x64>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d10e      	bne.n	8001ccc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b14      	ldr	r3, [pc, #80]	@ (8001d04 <HAL_TIM_Base_MspInit+0x68>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb6:	4a13      	ldr	r2, [pc, #76]	@ (8001d04 <HAL_TIM_Base_MspInit+0x68>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cbe:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <HAL_TIM_Base_MspInit+0x68>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cca:	e012      	b.n	8001cf2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cd4:	d10d      	bne.n	8001cf2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <HAL_TIM_Base_MspInit+0x68>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	4a09      	ldr	r2, [pc, #36]	@ (8001d04 <HAL_TIM_Base_MspInit+0x68>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce6:	4b07      	ldr	r3, [pc, #28]	@ (8001d04 <HAL_TIM_Base_MspInit+0x68>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40010000 	.word	0x40010000
 8001d04:	40023800 	.word	0x40023800

08001d08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a12      	ldr	r2, [pc, #72]	@ (8001d70 <HAL_TIM_MspPostInit+0x68>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d11e      	bne.n	8001d68 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <HAL_TIM_MspPostInit+0x6c>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	4a10      	ldr	r2, [pc, #64]	@ (8001d74 <HAL_TIM_MspPostInit+0x6c>)
 8001d34:	f043 0310 	orr.w	r3, r3, #16
 8001d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d74 <HAL_TIM_MspPostInit+0x6c>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_CARRO_TRANSVERSAL_PWM_Pin;
 8001d46:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_CARRO_TRANSVERSAL_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	4619      	mov	r1, r3
 8001d62:	4805      	ldr	r0, [pc, #20]	@ (8001d78 <HAL_TIM_MspPostInit+0x70>)
 8001d64:	f001 fb1a 	bl	800339c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d68:	bf00      	nop
 8001d6a:	3720      	adds	r7, #32
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40010000 	.word	0x40010000
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40021000 	.word	0x40021000

08001d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001d80:	f002 f93c 	bl	8003ffc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <NMI_Handler+0x8>

08001d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <HardFault_Handler+0x4>

08001d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <MemManage_Handler+0x4>

08001d98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <BusFault_Handler+0x4>

08001da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <UsageFault_Handler+0x4>

08001da8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPTO_3_Pin);
 8001dc8:	2008      	movs	r0, #8
 8001dca:	f001 fccf 	bl	800376c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPTO_1_Pin);
 8001dd6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001dda:	f001 fcc7 	bl	800376c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPTO_2_Pin);
 8001dde:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001de2:	f001 fcc3 	bl	800376c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001df0:	4802      	ldr	r0, [pc, #8]	@ (8001dfc <DMA2_Stream2_IRQHandler+0x10>)
 8001df2:	f001 f869 	bl	8002ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000ed0 	.word	0x20000ed0

08001e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e04:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <HAL_Init+0x40>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0d      	ldr	r2, [pc, #52]	@ (8001e40 <HAL_Init+0x40>)
 8001e0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e10:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <HAL_Init+0x40>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <HAL_Init+0x40>)
 8001e16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a07      	ldr	r2, [pc, #28]	@ (8001e40 <HAL_Init+0x40>)
 8001e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f000 fd1f 	bl	800286c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 10ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2e:	200f      	movs	r0, #15
 8001e30:	f000 f808 	bl	8001e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e34:	f7ff fdc8 	bl	80019c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023c00 	.word	0x40023c00

08001e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 10ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e4c:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <HAL_InitTick+0x54>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <HAL_InitTick+0x58>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fd37 	bl	80028d6 <HAL_SYSTICK_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00e      	b.n	8001e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b0f      	cmp	r3, #15
 8001e76:	d80a      	bhi.n	8001e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f000 fcff 	bl	8002882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e84:	4a06      	ldr	r2, [pc, #24]	@ (8001ea0 <HAL_InitTick+0x5c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000008 	.word	0x20000008
 8001e9c:	20000004 	.word	0x20000004
 8001ea0:	20000000 	.word	0x20000000

08001ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	@ (8001eb8 <HAL_GetTick+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20001094 	.word	0x20001094

08001ebc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e033      	b.n	8001f3a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff fd9c 	bl	8001a18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d118      	bne.n	8001f2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f02:	f023 0302 	bic.w	r3, r3, #2
 8001f06:	f043 0202 	orr.w	r2, r3, #2
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 fa5e 	bl	80023d0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	f023 0303 	bic.w	r3, r3, #3
 8001f22:	f043 0201 	orr.w	r2, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f2a:	e001      	b.n	8001f30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_ADC_Start_DMA+0x1e>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e0e9      	b.n	8002136 <HAL_ADC_Start_DMA+0x1f2>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d018      	beq.n	8001faa <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f88:	4b6d      	ldr	r3, [pc, #436]	@ (8002140 <HAL_ADC_Start_DMA+0x1fc>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a6d      	ldr	r2, [pc, #436]	@ (8002144 <HAL_ADC_Start_DMA+0x200>)
 8001f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f92:	0c9a      	lsrs	r2, r3, #18
 8001f94:	4613      	mov	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4413      	add	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001f9c:	e002      	b.n	8001fa4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f9      	bne.n	8001f9e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fb8:	d107      	bne.n	8001fca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fc8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	f040 80a1 	bne.w	800211c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d007      	beq.n	800200c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002000:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002004:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002018:	d106      	bne.n	8002028 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	f023 0206 	bic.w	r2, r3, #6
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	645a      	str	r2, [r3, #68]	@ 0x44
 8002026:	e002      	b.n	800202e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002036:	4b44      	ldr	r3, [pc, #272]	@ (8002148 <HAL_ADC_Start_DMA+0x204>)
 8002038:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800203e:	4a43      	ldr	r2, [pc, #268]	@ (800214c <HAL_ADC_Start_DMA+0x208>)
 8002040:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002046:	4a42      	ldr	r2, [pc, #264]	@ (8002150 <HAL_ADC_Start_DMA+0x20c>)
 8002048:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800204e:	4a41      	ldr	r2, [pc, #260]	@ (8002154 <HAL_ADC_Start_DMA+0x210>)
 8002050:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800205a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800206a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800207a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	334c      	adds	r3, #76	@ 0x4c
 8002086:	4619      	mov	r1, r3
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f000 fec4 	bl	8002e18 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	2b00      	cmp	r3, #0
 800209a:	d12a      	bne.n	80020f2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002158 <HAL_ADC_Start_DMA+0x214>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d015      	beq.n	80020d2 <HAL_ADC_Start_DMA+0x18e>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a2c      	ldr	r2, [pc, #176]	@ (800215c <HAL_ADC_Start_DMA+0x218>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d105      	bne.n	80020bc <HAL_ADC_Start_DMA+0x178>
 80020b0:	4b25      	ldr	r3, [pc, #148]	@ (8002148 <HAL_ADC_Start_DMA+0x204>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 031f 	and.w	r3, r3, #31
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a27      	ldr	r2, [pc, #156]	@ (8002160 <HAL_ADC_Start_DMA+0x21c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d136      	bne.n	8002134 <HAL_ADC_Start_DMA+0x1f0>
 80020c6:	4b20      	ldr	r3, [pc, #128]	@ (8002148 <HAL_ADC_Start_DMA+0x204>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d130      	bne.n	8002134 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d129      	bne.n	8002134 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	e020      	b.n	8002134 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a18      	ldr	r2, [pc, #96]	@ (8002158 <HAL_ADC_Start_DMA+0x214>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d11b      	bne.n	8002134 <HAL_ADC_Start_DMA+0x1f0>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d114      	bne.n	8002134 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	e00b      	b.n	8002134 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	f043 0210 	orr.w	r2, r3, #16
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212c:	f043 0201 	orr.w	r2, r3, #1
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000008 	.word	0x20000008
 8002144:	431bde83 	.word	0x431bde83
 8002148:	40012300 	.word	0x40012300
 800214c:	080025c9 	.word	0x080025c9
 8002150:	08002683 	.word	0x08002683
 8002154:	0800269f 	.word	0x0800269f
 8002158:	40012000 	.word	0x40012000
 800215c:	40012100 	.word	0x40012100
 8002160:	40012200 	.word	0x40012200

08002164 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x1c>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e105      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x228>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b09      	cmp	r3, #9
 80021b6:	d925      	bls.n	8002204 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68d9      	ldr	r1, [r3, #12]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	4613      	mov	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4413      	add	r3, r2
 80021cc:	3b1e      	subs	r3, #30
 80021ce:	2207      	movs	r2, #7
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43da      	mvns	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	400a      	ands	r2, r1
 80021dc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68d9      	ldr	r1, [r3, #12]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	4618      	mov	r0, r3
 80021f0:	4603      	mov	r3, r0
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4403      	add	r3, r0
 80021f6:	3b1e      	subs	r3, #30
 80021f8:	409a      	lsls	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	e022      	b.n	800224a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6919      	ldr	r1, [r3, #16]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	4613      	mov	r3, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	4413      	add	r3, r2
 8002218:	2207      	movs	r2, #7
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43da      	mvns	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	400a      	ands	r2, r1
 8002226:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6919      	ldr	r1, [r3, #16]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	b29b      	uxth	r3, r3
 8002238:	4618      	mov	r0, r3
 800223a:	4603      	mov	r3, r0
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4403      	add	r3, r0
 8002240:	409a      	lsls	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b06      	cmp	r3, #6
 8002250:	d824      	bhi.n	800229c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	3b05      	subs	r3, #5
 8002264:	221f      	movs	r2, #31
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43da      	mvns	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	400a      	ands	r2, r1
 8002272:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	4618      	mov	r0, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	3b05      	subs	r3, #5
 800228e:	fa00 f203 	lsl.w	r2, r0, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	635a      	str	r2, [r3, #52]	@ 0x34
 800229a:	e04c      	b.n	8002336 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b0c      	cmp	r3, #12
 80022a2:	d824      	bhi.n	80022ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	3b23      	subs	r3, #35	@ 0x23
 80022b6:	221f      	movs	r2, #31
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43da      	mvns	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	400a      	ands	r2, r1
 80022c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	4618      	mov	r0, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	3b23      	subs	r3, #35	@ 0x23
 80022e0:	fa00 f203 	lsl.w	r2, r0, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80022ec:	e023      	b.n	8002336 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	3b41      	subs	r3, #65	@ 0x41
 8002300:	221f      	movs	r2, #31
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43da      	mvns	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	400a      	ands	r2, r1
 800230e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	4618      	mov	r0, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	3b41      	subs	r3, #65	@ 0x41
 800232a:	fa00 f203 	lsl.w	r2, r0, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002336:	4b22      	ldr	r3, [pc, #136]	@ (80023c0 <HAL_ADC_ConfigChannel+0x234>)
 8002338:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a21      	ldr	r2, [pc, #132]	@ (80023c4 <HAL_ADC_ConfigChannel+0x238>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d109      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x1cc>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b12      	cmp	r3, #18
 800234a:	d105      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a19      	ldr	r2, [pc, #100]	@ (80023c4 <HAL_ADC_ConfigChannel+0x238>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d123      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x21e>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b10      	cmp	r3, #16
 8002368:	d003      	beq.n	8002372 <HAL_ADC_ConfigChannel+0x1e6>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b11      	cmp	r3, #17
 8002370:	d11b      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b10      	cmp	r3, #16
 8002384:	d111      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002386:	4b10      	ldr	r3, [pc, #64]	@ (80023c8 <HAL_ADC_ConfigChannel+0x23c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a10      	ldr	r2, [pc, #64]	@ (80023cc <HAL_ADC_ConfigChannel+0x240>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	0c9a      	lsrs	r2, r3, #18
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800239c:	e002      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f9      	bne.n	800239e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	40012300 	.word	0x40012300
 80023c4:	40012000 	.word	0x40012000
 80023c8:	20000008 	.word	0x20000008
 80023cc:	431bde83 	.word	0x431bde83

080023d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023d8:	4b79      	ldr	r3, [pc, #484]	@ (80025c0 <ADC_Init+0x1f0>)
 80023da:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	431a      	orrs	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002404:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6859      	ldr	r1, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	021a      	lsls	r2, r3, #8
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002428:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800244a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6899      	ldr	r1, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002462:	4a58      	ldr	r2, [pc, #352]	@ (80025c4 <ADC_Init+0x1f4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d022      	beq.n	80024ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002476:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6899      	ldr	r1, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002498:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6899      	ldr	r1, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	e00f      	b.n	80024ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024cc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0202 	bic.w	r2, r2, #2
 80024dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6899      	ldr	r1, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	7e1b      	ldrb	r3, [r3, #24]
 80024e8:	005a      	lsls	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d01b      	beq.n	8002534 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800250a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800251a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6859      	ldr	r1, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002526:	3b01      	subs	r3, #1
 8002528:	035a      	lsls	r2, r3, #13
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	e007      	b.n	8002544 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002542:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002552:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	3b01      	subs	r3, #1
 8002560:	051a      	lsls	r2, r3, #20
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002578:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6899      	ldr	r1, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002586:	025a      	lsls	r2, r3, #9
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800259e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6899      	ldr	r1, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	029a      	lsls	r2, r3, #10
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	609a      	str	r2, [r3, #8]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	40012300 	.word	0x40012300
 80025c4:	0f000001 	.word	0x0f000001

080025c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d13c      	bne.n	800265c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d12b      	bne.n	8002654 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002600:	2b00      	cmp	r3, #0
 8002602:	d127      	bne.n	8002654 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800260e:	2b00      	cmp	r3, #0
 8002610:	d006      	beq.n	8002620 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800261c:	2b00      	cmp	r3, #0
 800261e:	d119      	bne.n	8002654 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0220 	bic.w	r2, r2, #32
 800262e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002634:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002640:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	f043 0201 	orr.w	r2, r3, #1
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f7fe fb1b 	bl	8000c90 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800265a:	e00e      	b.n	800267a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f7ff fd85 	bl	8002178 <HAL_ADC_ErrorCallback>
}
 800266e:	e004      	b.n	800267a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	4798      	blx	r3
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800268e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f7ff fd67 	bl	8002164 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026aa:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2240      	movs	r2, #64	@ 0x40
 80026b0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b6:	f043 0204 	orr.w	r2, r3, #4
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f7ff fd5a 	bl	8002178 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002710 <__NVIC_SetPriorityGrouping+0x44>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026e8:	4013      	ands	r3, r2
 80026ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026fe:	4a04      	ldr	r2, [pc, #16]	@ (8002710 <__NVIC_SetPriorityGrouping+0x44>)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	60d3      	str	r3, [r2, #12]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002718:	4b04      	ldr	r3, [pc, #16]	@ (800272c <__NVIC_GetPriorityGrouping+0x18>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	f003 0307 	and.w	r3, r3, #7
}
 8002722:	4618      	mov	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	2b00      	cmp	r3, #0
 8002740:	db0b      	blt.n	800275a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	f003 021f 	and.w	r2, r3, #31
 8002748:	4907      	ldr	r1, [pc, #28]	@ (8002768 <__NVIC_EnableIRQ+0x38>)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	2001      	movs	r0, #1
 8002752:	fa00 f202 	lsl.w	r2, r0, r2
 8002756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	e000e100 	.word	0xe000e100

0800276c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	6039      	str	r1, [r7, #0]
 8002776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277c:	2b00      	cmp	r3, #0
 800277e:	db0a      	blt.n	8002796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	b2da      	uxtb	r2, r3
 8002784:	490c      	ldr	r1, [pc, #48]	@ (80027b8 <__NVIC_SetPriority+0x4c>)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	0112      	lsls	r2, r2, #4
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	440b      	add	r3, r1
 8002790:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002794:	e00a      	b.n	80027ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	b2da      	uxtb	r2, r3
 800279a:	4908      	ldr	r1, [pc, #32]	@ (80027bc <__NVIC_SetPriority+0x50>)
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	3b04      	subs	r3, #4
 80027a4:	0112      	lsls	r2, r2, #4
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	440b      	add	r3, r1
 80027aa:	761a      	strb	r2, [r3, #24]
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000e100 	.word	0xe000e100
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	@ 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f1c3 0307 	rsb	r3, r3, #7
 80027da:	2b04      	cmp	r3, #4
 80027dc:	bf28      	it	cs
 80027de:	2304      	movcs	r3, #4
 80027e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3304      	adds	r3, #4
 80027e6:	2b06      	cmp	r3, #6
 80027e8:	d902      	bls.n	80027f0 <NVIC_EncodePriority+0x30>
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	3b03      	subs	r3, #3
 80027ee:	e000      	b.n	80027f2 <NVIC_EncodePriority+0x32>
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f4:	f04f 32ff 	mov.w	r2, #4294967295
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43da      	mvns	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	401a      	ands	r2, r3
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002808:	f04f 31ff 	mov.w	r1, #4294967295
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	fa01 f303 	lsl.w	r3, r1, r3
 8002812:	43d9      	mvns	r1, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	4313      	orrs	r3, r2
         );
}
 800281a:	4618      	mov	r0, r3
 800281c:	3724      	adds	r7, #36	@ 0x24
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002838:	d301      	bcc.n	800283e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800283a:	2301      	movs	r3, #1
 800283c:	e00f      	b.n	800285e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800283e:	4a0a      	ldr	r2, [pc, #40]	@ (8002868 <SysTick_Config+0x40>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002846:	210f      	movs	r1, #15
 8002848:	f04f 30ff 	mov.w	r0, #4294967295
 800284c:	f7ff ff8e 	bl	800276c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002850:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <SysTick_Config+0x40>)
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002856:	4b04      	ldr	r3, [pc, #16]	@ (8002868 <SysTick_Config+0x40>)
 8002858:	2207      	movs	r2, #7
 800285a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	e000e010 	.word	0xe000e010

0800286c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff ff29 	bl	80026cc <__NVIC_SetPriorityGrouping>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002882:	b580      	push	{r7, lr}
 8002884:	b086      	sub	sp, #24
 8002886:	af00      	add	r7, sp, #0
 8002888:	4603      	mov	r3, r0
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002894:	f7ff ff3e 	bl	8002714 <__NVIC_GetPriorityGrouping>
 8002898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	6978      	ldr	r0, [r7, #20]
 80028a0:	f7ff ff8e 	bl	80027c0 <NVIC_EncodePriority>
 80028a4:	4602      	mov	r2, r0
 80028a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff5d 	bl	800276c <__NVIC_SetPriority>
}
 80028b2:	bf00      	nop
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	4603      	mov	r3, r0
 80028c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff31 	bl	8002730 <__NVIC_EnableIRQ>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff ffa2 	bl	8002828 <SysTick_Config>
 80028e4:	4603      	mov	r3, r0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e014      	b.n	800292a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	791b      	ldrb	r3, [r3, #4]
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d105      	bne.n	8002916 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff f915 	bl	8001b40 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2202      	movs	r2, #2
 800291a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0a2      	b.n	8002a96 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	795b      	ldrb	r3, [r3, #5]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_DAC_Start_DMA+0x28>
 8002958:	2302      	movs	r3, #2
 800295a:	e09c      	b.n	8002a96 <HAL_DAC_Start_DMA+0x162>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2201      	movs	r2, #1
 8002960:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2202      	movs	r2, #2
 8002966:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d129      	bne.n	80029c2 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	4a4b      	ldr	r2, [pc, #300]	@ (8002aa0 <HAL_DAC_Start_DMA+0x16c>)
 8002974:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	4a4a      	ldr	r2, [pc, #296]	@ (8002aa4 <HAL_DAC_Start_DMA+0x170>)
 800297c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	4a49      	ldr	r2, [pc, #292]	@ (8002aa8 <HAL_DAC_Start_DMA+0x174>)
 8002984:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002994:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_DAC_Start_DMA+0x70>
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d005      	beq.n	80029ae <HAL_DAC_Start_DMA+0x7a>
 80029a2:	e009      	b.n	80029b8 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3308      	adds	r3, #8
 80029aa:	613b      	str	r3, [r7, #16]
        break;
 80029ac:	e033      	b.n	8002a16 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	330c      	adds	r3, #12
 80029b4:	613b      	str	r3, [r7, #16]
        break;
 80029b6:	e02e      	b.n	8002a16 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	3310      	adds	r3, #16
 80029be:	613b      	str	r3, [r7, #16]
        break;
 80029c0:	e029      	b.n	8002a16 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	4a39      	ldr	r2, [pc, #228]	@ (8002aac <HAL_DAC_Start_DMA+0x178>)
 80029c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	4a38      	ldr	r2, [pc, #224]	@ (8002ab0 <HAL_DAC_Start_DMA+0x17c>)
 80029d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	4a37      	ldr	r2, [pc, #220]	@ (8002ab4 <HAL_DAC_Start_DMA+0x180>)
 80029d8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80029e8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_DAC_Start_DMA+0xc4>
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d005      	beq.n	8002a02 <HAL_DAC_Start_DMA+0xce>
 80029f6:	e009      	b.n	8002a0c <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	3314      	adds	r3, #20
 80029fe:	613b      	str	r3, [r7, #16]
        break;
 8002a00:	e009      	b.n	8002a16 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3318      	adds	r3, #24
 8002a08:	613b      	str	r3, [r7, #16]
        break;
 8002a0a:	e004      	b.n	8002a16 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	331c      	adds	r3, #28
 8002a12:	613b      	str	r3, [r7, #16]
        break;
 8002a14:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d111      	bne.n	8002a40 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a2a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6898      	ldr	r0, [r3, #8]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	f000 f9ef 	bl	8002e18 <HAL_DMA_Start_IT>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	75fb      	strb	r3, [r7, #23]
 8002a3e:	e010      	b.n	8002a62 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002a4e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	68d8      	ldr	r0, [r3, #12]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	f000 f9dd 	bl	8002e18 <HAL_DMA_Start_IT>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002a68:	7dfb      	ldrb	r3, [r7, #23]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10c      	bne.n	8002a88 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6819      	ldr	r1, [r3, #0]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	e005      	b.n	8002a94 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	f043 0204 	orr.w	r2, r3, #4
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	08002ba7 	.word	0x08002ba7
 8002aa4:	08002bc9 	.word	0x08002bc9
 8002aa8:	08002be5 	.word	0x08002be5
 8002aac:	08002c4f 	.word	0x08002c4f
 8002ab0:	08002c71 	.word	0x08002c71
 8002ab4:	08002c8d 	.word	0x08002c8d

08002ab8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	@ 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_DAC_ConfigChannel+0x1c>
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e042      	b.n	8002b9a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	795b      	ldrb	r3, [r3, #5]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_DAC_ConfigChannel+0x2c>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e03c      	b.n	8002b9a <HAL_DAC_ConfigChannel+0xa6>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6819      	ldr	r1, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	22c0      	movs	r2, #192	@ 0xc0
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43da      	mvns	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	400a      	ands	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002b98:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3724      	adds	r7, #36	@ 0x24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f7ff ff7f 	bl	8002ab8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	711a      	strb	r2, [r3, #4]
}
 8002bc0:	bf00      	nop
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f7ff ff78 	bl	8002acc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002bdc:	bf00      	nop
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f043 0204 	orr.w	r2, r3, #4
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f7ff ff6e 	bl	8002ae0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	711a      	strb	r2, [r3, #4]
}
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f7ff ffd8 	bl	8002c12 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	711a      	strb	r2, [r3, #4]
}
 8002c68:	bf00      	nop
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c7c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f7ff ffd1 	bl	8002c26 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c84:	bf00      	nop
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f043 0204 	orr.w	r2, r3, #4
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f7ff ffc7 	bl	8002c3a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	711a      	strb	r2, [r3, #4]
}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cc8:	f7ff f8ec 	bl	8001ea4 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e099      	b.n	8002e0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0201 	bic.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf8:	e00f      	b.n	8002d1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cfa:	f7ff f8d3 	bl	8001ea4 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	d908      	bls.n	8002d1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2203      	movs	r2, #3
 8002d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e078      	b.n	8002e0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e8      	bne.n	8002cfa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4b38      	ldr	r3, [pc, #224]	@ (8002e14 <HAL_DMA_Init+0x158>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d107      	bne.n	8002d84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f023 0307 	bic.w	r3, r3, #7
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d117      	bne.n	8002dde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00e      	beq.n	8002dde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 fa6f 	bl	80032a4 <DMA_CheckFifoParam>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2240      	movs	r2, #64	@ 0x40
 8002dd0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e016      	b.n	8002e0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fa26 	bl	8003238 <DMA_CalcBaseAndBitshift>
 8002dec:	4603      	mov	r3, r0
 8002dee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df4:	223f      	movs	r2, #63	@ 0x3f
 8002df6:	409a      	lsls	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	f010803f 	.word	0xf010803f

08002e18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_DMA_Start_IT+0x26>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e040      	b.n	8002ec0 <HAL_DMA_Start_IT+0xa8>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d12f      	bne.n	8002eb2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2202      	movs	r2, #2
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f9b8 	bl	80031dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e70:	223f      	movs	r2, #63	@ 0x3f
 8002e72:	409a      	lsls	r2, r3
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0216 	orr.w	r2, r2, #22
 8002e86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d007      	beq.n	8002ea0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0208 	orr.w	r2, r2, #8
 8002e9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e005      	b.n	8002ebe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ed4:	4b8e      	ldr	r3, [pc, #568]	@ (8003110 <HAL_DMA_IRQHandler+0x248>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a8e      	ldr	r2, [pc, #568]	@ (8003114 <HAL_DMA_IRQHandler+0x24c>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	0a9b      	lsrs	r3, r3, #10
 8002ee0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef2:	2208      	movs	r2, #8
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d01a      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d013      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0204 	bic.w	r2, r2, #4
 8002f1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f20:	2208      	movs	r2, #8
 8002f22:	409a      	lsls	r2, r3
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f2c:	f043 0201 	orr.w	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f38:	2201      	movs	r2, #1
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d012      	beq.n	8002f6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00b      	beq.n	8002f6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f56:	2201      	movs	r2, #1
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f62:	f043 0202 	orr.w	r2, r3, #2
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6e:	2204      	movs	r2, #4
 8002f70:	409a      	lsls	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d012      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00b      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f98:	f043 0204 	orr.w	r2, r3, #4
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa4:	2210      	movs	r2, #16
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d043      	beq.n	8003038 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d03c      	beq.n	8003038 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc2:	2210      	movs	r2, #16
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d018      	beq.n	800300a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d108      	bne.n	8002ff8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d024      	beq.n	8003038 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
 8002ff6:	e01f      	b.n	8003038 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01b      	beq.n	8003038 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4798      	blx	r3
 8003008:	e016      	b.n	8003038 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d107      	bne.n	8003028 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0208 	bic.w	r2, r2, #8
 8003026:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303c:	2220      	movs	r2, #32
 800303e:	409a      	lsls	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4013      	ands	r3, r2
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 808f 	beq.w	8003168 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 8087 	beq.w	8003168 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305e:	2220      	movs	r2, #32
 8003060:	409a      	lsls	r2, r3
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b05      	cmp	r3, #5
 8003070:	d136      	bne.n	80030e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0216 	bic.w	r2, r2, #22
 8003080:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695a      	ldr	r2, [r3, #20]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003090:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d103      	bne.n	80030a2 <HAL_DMA_IRQHandler+0x1da>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d007      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0208 	bic.w	r2, r2, #8
 80030b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b6:	223f      	movs	r2, #63	@ 0x3f
 80030b8:	409a      	lsls	r2, r3
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d07e      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	4798      	blx	r3
        }
        return;
 80030de:	e079      	b.n	80031d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d01d      	beq.n	800312a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10d      	bne.n	8003118 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003100:	2b00      	cmp	r3, #0
 8003102:	d031      	beq.n	8003168 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	4798      	blx	r3
 800310c:	e02c      	b.n	8003168 <HAL_DMA_IRQHandler+0x2a0>
 800310e:	bf00      	nop
 8003110:	20000008 	.word	0x20000008
 8003114:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800311c:	2b00      	cmp	r3, #0
 800311e:	d023      	beq.n	8003168 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
 8003128:	e01e      	b.n	8003168 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10f      	bne.n	8003158 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0210 	bic.w	r2, r2, #16
 8003146:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316c:	2b00      	cmp	r3, #0
 800316e:	d032      	beq.n	80031d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d022      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2205      	movs	r2, #5
 8003180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	3301      	adds	r3, #1
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	429a      	cmp	r2, r3
 800319e:	d307      	bcc.n	80031b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f2      	bne.n	8003194 <HAL_DMA_IRQHandler+0x2cc>
 80031ae:	e000      	b.n	80031b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	4798      	blx	r3
 80031d2:	e000      	b.n	80031d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80031d4:	bf00      	nop
    }
  }
}
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80031f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b40      	cmp	r3, #64	@ 0x40
 8003208:	d108      	bne.n	800321c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800321a:	e007      	b.n	800322c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	60da      	str	r2, [r3, #12]
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	3b10      	subs	r3, #16
 8003248:	4a14      	ldr	r2, [pc, #80]	@ (800329c <DMA_CalcBaseAndBitshift+0x64>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003252:	4a13      	ldr	r2, [pc, #76]	@ (80032a0 <DMA_CalcBaseAndBitshift+0x68>)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4413      	add	r3, r2
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b03      	cmp	r3, #3
 8003264:	d909      	bls.n	800327a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800326e:	f023 0303 	bic.w	r3, r3, #3
 8003272:	1d1a      	adds	r2, r3, #4
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	659a      	str	r2, [r3, #88]	@ 0x58
 8003278:	e007      	b.n	800328a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003282:	f023 0303 	bic.w	r3, r3, #3
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	aaaaaaab 	.word	0xaaaaaaab
 80032a0:	08008e84 	.word	0x08008e84

080032a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d11f      	bne.n	80032fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d856      	bhi.n	8003372 <DMA_CheckFifoParam+0xce>
 80032c4:	a201      	add	r2, pc, #4	@ (adr r2, 80032cc <DMA_CheckFifoParam+0x28>)
 80032c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ca:	bf00      	nop
 80032cc:	080032dd 	.word	0x080032dd
 80032d0:	080032ef 	.word	0x080032ef
 80032d4:	080032dd 	.word	0x080032dd
 80032d8:	08003373 	.word	0x08003373
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d046      	beq.n	8003376 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ec:	e043      	b.n	8003376 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032f6:	d140      	bne.n	800337a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032fc:	e03d      	b.n	800337a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003306:	d121      	bne.n	800334c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b03      	cmp	r3, #3
 800330c:	d837      	bhi.n	800337e <DMA_CheckFifoParam+0xda>
 800330e:	a201      	add	r2, pc, #4	@ (adr r2, 8003314 <DMA_CheckFifoParam+0x70>)
 8003310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003314:	08003325 	.word	0x08003325
 8003318:	0800332b 	.word	0x0800332b
 800331c:	08003325 	.word	0x08003325
 8003320:	0800333d 	.word	0x0800333d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
      break;
 8003328:	e030      	b.n	800338c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d025      	beq.n	8003382 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800333a:	e022      	b.n	8003382 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003340:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003344:	d11f      	bne.n	8003386 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800334a:	e01c      	b.n	8003386 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d903      	bls.n	800335a <DMA_CheckFifoParam+0xb6>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d003      	beq.n	8003360 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003358:	e018      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	73fb      	strb	r3, [r7, #15]
      break;
 800335e:	e015      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00e      	beq.n	800338a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
      break;
 8003370:	e00b      	b.n	800338a <DMA_CheckFifoParam+0xe6>
      break;
 8003372:	bf00      	nop
 8003374:	e00a      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      break;
 8003376:	bf00      	nop
 8003378:	e008      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      break;
 800337a:	bf00      	nop
 800337c:	e006      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      break;
 800337e:	bf00      	nop
 8003380:	e004      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      break;
 8003382:	bf00      	nop
 8003384:	e002      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      break;   
 8003386:	bf00      	nop
 8003388:	e000      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      break;
 800338a:	bf00      	nop
    }
  } 
  
  return status; 
 800338c:	7bfb      	ldrb	r3, [r7, #15]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop

0800339c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800339c:	b480      	push	{r7}
 800339e:	b089      	sub	sp, #36	@ 0x24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	e16b      	b.n	8003690 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033b8:	2201      	movs	r2, #1
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4013      	ands	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	f040 815a 	bne.w	800368a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d005      	beq.n	80033ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d130      	bne.n	8003450 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	2203      	movs	r2, #3
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4313      	orrs	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003424:	2201      	movs	r2, #1
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	f003 0201 	and.w	r2, r3, #1
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	2b03      	cmp	r3, #3
 800345a:	d017      	beq.n	800348c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	2203      	movs	r2, #3
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d123      	bne.n	80034e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	08da      	lsrs	r2, r3, #3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3208      	adds	r2, #8
 80034a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	220f      	movs	r2, #15
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	691a      	ldr	r2, [r3, #16]
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	08da      	lsrs	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3208      	adds	r2, #8
 80034da:	69b9      	ldr	r1, [r7, #24]
 80034dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	2203      	movs	r2, #3
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0203 	and.w	r2, r3, #3
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80b4 	beq.w	800368a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	4b60      	ldr	r3, [pc, #384]	@ (80036a8 <HAL_GPIO_Init+0x30c>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352a:	4a5f      	ldr	r2, [pc, #380]	@ (80036a8 <HAL_GPIO_Init+0x30c>)
 800352c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003530:	6453      	str	r3, [r2, #68]	@ 0x44
 8003532:	4b5d      	ldr	r3, [pc, #372]	@ (80036a8 <HAL_GPIO_Init+0x30c>)
 8003534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800353e:	4a5b      	ldr	r2, [pc, #364]	@ (80036ac <HAL_GPIO_Init+0x310>)
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	089b      	lsrs	r3, r3, #2
 8003544:	3302      	adds	r3, #2
 8003546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	220f      	movs	r2, #15
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a52      	ldr	r2, [pc, #328]	@ (80036b0 <HAL_GPIO_Init+0x314>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d02b      	beq.n	80035c2 <HAL_GPIO_Init+0x226>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a51      	ldr	r2, [pc, #324]	@ (80036b4 <HAL_GPIO_Init+0x318>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d025      	beq.n	80035be <HAL_GPIO_Init+0x222>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a50      	ldr	r2, [pc, #320]	@ (80036b8 <HAL_GPIO_Init+0x31c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d01f      	beq.n	80035ba <HAL_GPIO_Init+0x21e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a4f      	ldr	r2, [pc, #316]	@ (80036bc <HAL_GPIO_Init+0x320>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d019      	beq.n	80035b6 <HAL_GPIO_Init+0x21a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a4e      	ldr	r2, [pc, #312]	@ (80036c0 <HAL_GPIO_Init+0x324>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d013      	beq.n	80035b2 <HAL_GPIO_Init+0x216>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a4d      	ldr	r2, [pc, #308]	@ (80036c4 <HAL_GPIO_Init+0x328>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00d      	beq.n	80035ae <HAL_GPIO_Init+0x212>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a4c      	ldr	r2, [pc, #304]	@ (80036c8 <HAL_GPIO_Init+0x32c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d007      	beq.n	80035aa <HAL_GPIO_Init+0x20e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a4b      	ldr	r2, [pc, #300]	@ (80036cc <HAL_GPIO_Init+0x330>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d101      	bne.n	80035a6 <HAL_GPIO_Init+0x20a>
 80035a2:	2307      	movs	r3, #7
 80035a4:	e00e      	b.n	80035c4 <HAL_GPIO_Init+0x228>
 80035a6:	2308      	movs	r3, #8
 80035a8:	e00c      	b.n	80035c4 <HAL_GPIO_Init+0x228>
 80035aa:	2306      	movs	r3, #6
 80035ac:	e00a      	b.n	80035c4 <HAL_GPIO_Init+0x228>
 80035ae:	2305      	movs	r3, #5
 80035b0:	e008      	b.n	80035c4 <HAL_GPIO_Init+0x228>
 80035b2:	2304      	movs	r3, #4
 80035b4:	e006      	b.n	80035c4 <HAL_GPIO_Init+0x228>
 80035b6:	2303      	movs	r3, #3
 80035b8:	e004      	b.n	80035c4 <HAL_GPIO_Init+0x228>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e002      	b.n	80035c4 <HAL_GPIO_Init+0x228>
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <HAL_GPIO_Init+0x228>
 80035c2:	2300      	movs	r3, #0
 80035c4:	69fa      	ldr	r2, [r7, #28]
 80035c6:	f002 0203 	and.w	r2, r2, #3
 80035ca:	0092      	lsls	r2, r2, #2
 80035cc:	4093      	lsls	r3, r2
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035d4:	4935      	ldr	r1, [pc, #212]	@ (80036ac <HAL_GPIO_Init+0x310>)
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	089b      	lsrs	r3, r3, #2
 80035da:	3302      	adds	r3, #2
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035e2:	4b3b      	ldr	r3, [pc, #236]	@ (80036d0 <HAL_GPIO_Init+0x334>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	43db      	mvns	r3, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003606:	4a32      	ldr	r2, [pc, #200]	@ (80036d0 <HAL_GPIO_Init+0x334>)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800360c:	4b30      	ldr	r3, [pc, #192]	@ (80036d0 <HAL_GPIO_Init+0x334>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003630:	4a27      	ldr	r2, [pc, #156]	@ (80036d0 <HAL_GPIO_Init+0x334>)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003636:	4b26      	ldr	r3, [pc, #152]	@ (80036d0 <HAL_GPIO_Init+0x334>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	43db      	mvns	r3, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4013      	ands	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800365a:	4a1d      	ldr	r2, [pc, #116]	@ (80036d0 <HAL_GPIO_Init+0x334>)
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003660:	4b1b      	ldr	r3, [pc, #108]	@ (80036d0 <HAL_GPIO_Init+0x334>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	43db      	mvns	r3, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003684:	4a12      	ldr	r2, [pc, #72]	@ (80036d0 <HAL_GPIO_Init+0x334>)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3301      	adds	r3, #1
 800368e:	61fb      	str	r3, [r7, #28]
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	2b0f      	cmp	r3, #15
 8003694:	f67f ae90 	bls.w	80033b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	3724      	adds	r7, #36	@ 0x24
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40013800 	.word	0x40013800
 80036b0:	40020000 	.word	0x40020000
 80036b4:	40020400 	.word	0x40020400
 80036b8:	40020800 	.word	0x40020800
 80036bc:	40020c00 	.word	0x40020c00
 80036c0:	40021000 	.word	0x40021000
 80036c4:	40021400 	.word	0x40021400
 80036c8:	40021800 	.word	0x40021800
 80036cc:	40021c00 	.word	0x40021c00
 80036d0:	40013c00 	.word	0x40013c00

080036d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	887b      	ldrh	r3, [r7, #2]
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
 80036f0:	e001      	b.n	80036f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036f2:	2300      	movs	r3, #0
 80036f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	807b      	strh	r3, [r7, #2]
 8003710:	4613      	mov	r3, r2
 8003712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003714:	787b      	ldrb	r3, [r7, #1]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800371a:	887a      	ldrh	r2, [r7, #2]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003720:	e003      	b.n	800372a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003722:	887b      	ldrh	r3, [r7, #2]
 8003724:	041a      	lsls	r2, r3, #16
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	619a      	str	r2, [r3, #24]
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003736:	b480      	push	{r7}
 8003738:	b085      	sub	sp, #20
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	460b      	mov	r3, r1
 8003740:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003748:	887a      	ldrh	r2, [r7, #2]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4013      	ands	r3, r2
 800374e:	041a      	lsls	r2, r3, #16
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	43d9      	mvns	r1, r3
 8003754:	887b      	ldrh	r3, [r7, #2]
 8003756:	400b      	ands	r3, r1
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	619a      	str	r2, [r3, #24]
}
 800375e:	bf00      	nop
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
	...

0800376c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003776:	4b08      	ldr	r3, [pc, #32]	@ (8003798 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	4013      	ands	r3, r2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d006      	beq.n	8003790 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003782:	4a05      	ldr	r2, [pc, #20]	@ (8003798 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003784:	88fb      	ldrh	r3, [r7, #6]
 8003786:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003788:	88fb      	ldrh	r3, [r7, #6]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fd fb48 	bl	8000e20 <HAL_GPIO_EXTI_Callback>
  }
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40013c00 	.word	0x40013c00

0800379c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e267      	b.n	8003c7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d075      	beq.n	80038a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ba:	4b88      	ldr	r3, [pc, #544]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d00c      	beq.n	80037e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037c6:	4b85      	ldr	r3, [pc, #532]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d112      	bne.n	80037f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037d2:	4b82      	ldr	r3, [pc, #520]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037de:	d10b      	bne.n	80037f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e0:	4b7e      	ldr	r3, [pc, #504]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d05b      	beq.n	80038a4 <HAL_RCC_OscConfig+0x108>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d157      	bne.n	80038a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e242      	b.n	8003c7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003800:	d106      	bne.n	8003810 <HAL_RCC_OscConfig+0x74>
 8003802:	4b76      	ldr	r3, [pc, #472]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a75      	ldr	r2, [pc, #468]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 8003808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	e01d      	b.n	800384c <HAL_RCC_OscConfig+0xb0>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003818:	d10c      	bne.n	8003834 <HAL_RCC_OscConfig+0x98>
 800381a:	4b70      	ldr	r3, [pc, #448]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a6f      	ldr	r2, [pc, #444]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 8003820:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	4b6d      	ldr	r3, [pc, #436]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a6c      	ldr	r2, [pc, #432]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 800382c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	e00b      	b.n	800384c <HAL_RCC_OscConfig+0xb0>
 8003834:	4b69      	ldr	r3, [pc, #420]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a68      	ldr	r2, [pc, #416]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 800383a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	4b66      	ldr	r3, [pc, #408]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a65      	ldr	r2, [pc, #404]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 8003846:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800384a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d013      	beq.n	800387c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003854:	f7fe fb26 	bl	8001ea4 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800385c:	f7fe fb22 	bl	8001ea4 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b64      	cmp	r3, #100	@ 0x64
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e207      	b.n	8003c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386e:	4b5b      	ldr	r3, [pc, #364]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0xc0>
 800387a:	e014      	b.n	80038a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387c:	f7fe fb12 	bl	8001ea4 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003884:	f7fe fb0e 	bl	8001ea4 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	@ 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e1f3      	b.n	8003c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003896:	4b51      	ldr	r3, [pc, #324]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0xe8>
 80038a2:	e000      	b.n	80038a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d063      	beq.n	800397a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038b2:	4b4a      	ldr	r3, [pc, #296]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00b      	beq.n	80038d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038be:	4b47      	ldr	r3, [pc, #284]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d11c      	bne.n	8003904 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ca:	4b44      	ldr	r3, [pc, #272]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d116      	bne.n	8003904 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d6:	4b41      	ldr	r3, [pc, #260]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <HAL_RCC_OscConfig+0x152>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d001      	beq.n	80038ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e1c7      	b.n	8003c7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ee:	4b3b      	ldr	r3, [pc, #236]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4937      	ldr	r1, [pc, #220]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003902:	e03a      	b.n	800397a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d020      	beq.n	800394e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800390c:	4b34      	ldr	r3, [pc, #208]	@ (80039e0 <HAL_RCC_OscConfig+0x244>)
 800390e:	2201      	movs	r2, #1
 8003910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003912:	f7fe fac7 	bl	8001ea4 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800391a:	f7fe fac3 	bl	8001ea4 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e1a8      	b.n	8003c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392c:	4b2b      	ldr	r3, [pc, #172]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003938:	4b28      	ldr	r3, [pc, #160]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	4925      	ldr	r1, [pc, #148]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 8003948:	4313      	orrs	r3, r2
 800394a:	600b      	str	r3, [r1, #0]
 800394c:	e015      	b.n	800397a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800394e:	4b24      	ldr	r3, [pc, #144]	@ (80039e0 <HAL_RCC_OscConfig+0x244>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7fe faa6 	bl	8001ea4 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800395c:	f7fe faa2 	bl	8001ea4 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e187      	b.n	8003c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396e:	4b1b      	ldr	r3, [pc, #108]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d036      	beq.n	80039f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d016      	beq.n	80039bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800398e:	4b15      	ldr	r3, [pc, #84]	@ (80039e4 <HAL_RCC_OscConfig+0x248>)
 8003990:	2201      	movs	r2, #1
 8003992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003994:	f7fe fa86 	bl	8001ea4 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800399c:	f7fe fa82 	bl	8001ea4 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e167      	b.n	8003c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ae:	4b0b      	ldr	r3, [pc, #44]	@ (80039dc <HAL_RCC_OscConfig+0x240>)
 80039b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCC_OscConfig+0x200>
 80039ba:	e01b      	b.n	80039f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039bc:	4b09      	ldr	r3, [pc, #36]	@ (80039e4 <HAL_RCC_OscConfig+0x248>)
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c2:	f7fe fa6f 	bl	8001ea4 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c8:	e00e      	b.n	80039e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ca:	f7fe fa6b 	bl	8001ea4 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d907      	bls.n	80039e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e150      	b.n	8003c7e <HAL_RCC_OscConfig+0x4e2>
 80039dc:	40023800 	.word	0x40023800
 80039e0:	42470000 	.word	0x42470000
 80039e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e8:	4b88      	ldr	r3, [pc, #544]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 80039ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1ea      	bne.n	80039ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8097 	beq.w	8003b30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a02:	2300      	movs	r3, #0
 8003a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a06:	4b81      	ldr	r3, [pc, #516]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10f      	bne.n	8003a32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	4b7d      	ldr	r3, [pc, #500]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1a:	4a7c      	ldr	r2, [pc, #496]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a22:	4b7a      	ldr	r3, [pc, #488]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a2a:	60bb      	str	r3, [r7, #8]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a32:	4b77      	ldr	r3, [pc, #476]	@ (8003c10 <HAL_RCC_OscConfig+0x474>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d118      	bne.n	8003a70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a3e:	4b74      	ldr	r3, [pc, #464]	@ (8003c10 <HAL_RCC_OscConfig+0x474>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a73      	ldr	r2, [pc, #460]	@ (8003c10 <HAL_RCC_OscConfig+0x474>)
 8003a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a4a:	f7fe fa2b 	bl	8001ea4 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a52:	f7fe fa27 	bl	8001ea4 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e10c      	b.n	8003c7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a64:	4b6a      	ldr	r3, [pc, #424]	@ (8003c10 <HAL_RCC_OscConfig+0x474>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f0      	beq.n	8003a52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d106      	bne.n	8003a86 <HAL_RCC_OscConfig+0x2ea>
 8003a78:	4b64      	ldr	r3, [pc, #400]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7c:	4a63      	ldr	r2, [pc, #396]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a84:	e01c      	b.n	8003ac0 <HAL_RCC_OscConfig+0x324>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b05      	cmp	r3, #5
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x30c>
 8003a8e:	4b5f      	ldr	r3, [pc, #380]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a92:	4a5e      	ldr	r2, [pc, #376]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003a94:	f043 0304 	orr.w	r3, r3, #4
 8003a98:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a9a:	4b5c      	ldr	r3, [pc, #368]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9e:	4a5b      	ldr	r2, [pc, #364]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aa6:	e00b      	b.n	8003ac0 <HAL_RCC_OscConfig+0x324>
 8003aa8:	4b58      	ldr	r3, [pc, #352]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aac:	4a57      	ldr	r2, [pc, #348]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003aae:	f023 0301 	bic.w	r3, r3, #1
 8003ab2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ab4:	4b55      	ldr	r3, [pc, #340]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab8:	4a54      	ldr	r2, [pc, #336]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003aba:	f023 0304 	bic.w	r3, r3, #4
 8003abe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d015      	beq.n	8003af4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac8:	f7fe f9ec 	bl	8001ea4 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad0:	f7fe f9e8 	bl	8001ea4 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e0cb      	b.n	8003c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae6:	4b49      	ldr	r3, [pc, #292]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0ee      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x334>
 8003af2:	e014      	b.n	8003b1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af4:	f7fe f9d6 	bl	8001ea4 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003afa:	e00a      	b.n	8003b12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003afc:	f7fe f9d2 	bl	8001ea4 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e0b5      	b.n	8003c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b12:	4b3e      	ldr	r3, [pc, #248]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1ee      	bne.n	8003afc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d105      	bne.n	8003b30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b24:	4b39      	ldr	r3, [pc, #228]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b28:	4a38      	ldr	r2, [pc, #224]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003b2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80a1 	beq.w	8003c7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b3a:	4b34      	ldr	r3, [pc, #208]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d05c      	beq.n	8003c00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d141      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4e:	4b31      	ldr	r3, [pc, #196]	@ (8003c14 <HAL_RCC_OscConfig+0x478>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fe f9a6 	bl	8001ea4 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b5c:	f7fe f9a2 	bl	8001ea4 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e087      	b.n	8003c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6e:	4b27      	ldr	r3, [pc, #156]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69da      	ldr	r2, [r3, #28]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	019b      	lsls	r3, r3, #6
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b90:	085b      	lsrs	r3, r3, #1
 8003b92:	3b01      	subs	r3, #1
 8003b94:	041b      	lsls	r3, r3, #16
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9c:	061b      	lsls	r3, r3, #24
 8003b9e:	491b      	ldr	r1, [pc, #108]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c14 <HAL_RCC_OscConfig+0x478>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003baa:	f7fe f97b 	bl	8001ea4 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb2:	f7fe f977 	bl	8001ea4 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e05c      	b.n	8003c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc4:	4b11      	ldr	r3, [pc, #68]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x416>
 8003bd0:	e054      	b.n	8003c7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd2:	4b10      	ldr	r3, [pc, #64]	@ (8003c14 <HAL_RCC_OscConfig+0x478>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fe f964 	bl	8001ea4 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be0:	f7fe f960 	bl	8001ea4 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e045      	b.n	8003c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf2:	4b06      	ldr	r3, [pc, #24]	@ (8003c0c <HAL_RCC_OscConfig+0x470>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x444>
 8003bfe:	e03d      	b.n	8003c7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d107      	bne.n	8003c18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e038      	b.n	8003c7e <HAL_RCC_OscConfig+0x4e2>
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	40007000 	.word	0x40007000
 8003c14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c18:	4b1b      	ldr	r3, [pc, #108]	@ (8003c88 <HAL_RCC_OscConfig+0x4ec>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d028      	beq.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d121      	bne.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d11a      	bne.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c48:	4013      	ands	r3, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d111      	bne.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5e:	085b      	lsrs	r3, r3, #1
 8003c60:	3b01      	subs	r3, #1
 8003c62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d107      	bne.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40023800 	.word	0x40023800

08003c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0cc      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca0:	4b68      	ldr	r3, [pc, #416]	@ (8003e44 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d90c      	bls.n	8003cc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cae:	4b65      	ldr	r3, [pc, #404]	@ (8003e44 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb6:	4b63      	ldr	r3, [pc, #396]	@ (8003e44 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d001      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e0b8      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d020      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ce0:	4b59      	ldr	r3, [pc, #356]	@ (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	4a58      	ldr	r2, [pc, #352]	@ (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cf8:	4b53      	ldr	r3, [pc, #332]	@ (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	4a52      	ldr	r2, [pc, #328]	@ (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d04:	4b50      	ldr	r3, [pc, #320]	@ (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	494d      	ldr	r1, [pc, #308]	@ (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d044      	beq.n	8003dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d107      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2a:	4b47      	ldr	r3, [pc, #284]	@ (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d119      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e07f      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d003      	beq.n	8003d4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d107      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d4a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d109      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e06f      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e067      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d6a:	4b37      	ldr	r3, [pc, #220]	@ (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f023 0203 	bic.w	r2, r3, #3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4934      	ldr	r1, [pc, #208]	@ (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d7c:	f7fe f892 	bl	8001ea4 <HAL_GetTick>
 8003d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d82:	e00a      	b.n	8003d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d84:	f7fe f88e 	bl	8001ea4 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e04f      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 020c 	and.w	r2, r3, #12
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d1eb      	bne.n	8003d84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dac:	4b25      	ldr	r3, [pc, #148]	@ (8003e44 <HAL_RCC_ClockConfig+0x1b8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d20c      	bcs.n	8003dd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dba:	4b22      	ldr	r3, [pc, #136]	@ (8003e44 <HAL_RCC_ClockConfig+0x1b8>)
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc2:	4b20      	ldr	r3, [pc, #128]	@ (8003e44 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e032      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003de0:	4b19      	ldr	r3, [pc, #100]	@ (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	4916      	ldr	r1, [pc, #88]	@ (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dfe:	4b12      	ldr	r3, [pc, #72]	@ (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	490e      	ldr	r1, [pc, #56]	@ (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e12:	f000 f82d 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 8003e16:	4602      	mov	r2, r0
 8003e18:	4b0b      	ldr	r3, [pc, #44]	@ (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	490a      	ldr	r1, [pc, #40]	@ (8003e4c <HAL_RCC_ClockConfig+0x1c0>)
 8003e24:	5ccb      	ldrb	r3, [r1, r3]
 8003e26:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2a:	4a09      	ldr	r2, [pc, #36]	@ (8003e50 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e2e:	4b09      	ldr	r3, [pc, #36]	@ (8003e54 <HAL_RCC_ClockConfig+0x1c8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fe f806 	bl	8001e44 <HAL_InitTick>

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40023c00 	.word	0x40023c00
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	08008e8c 	.word	0x08008e8c
 8003e50:	20000008 	.word	0x20000008
 8003e54:	20000000 	.word	0x20000000

08003e58 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003e5c:	4b03      	ldr	r3, [pc, #12]	@ (8003e6c <HAL_RCC_EnableCSS+0x14>)
 8003e5e:	2201      	movs	r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
}
 8003e62:	bf00      	nop
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	4247004c 	.word	0x4247004c

08003e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e74:	b090      	sub	sp, #64	@ 0x40
 8003e76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e80:	2300      	movs	r3, #0
 8003e82:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e88:	4b59      	ldr	r3, [pc, #356]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 030c 	and.w	r3, r3, #12
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d00d      	beq.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x40>
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	f200 80a1 	bhi.w	8003fdc <HAL_RCC_GetSysClockFreq+0x16c>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d003      	beq.n	8003eaa <HAL_RCC_GetSysClockFreq+0x3a>
 8003ea2:	e09b      	b.n	8003fdc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ea4:	4b53      	ldr	r3, [pc, #332]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003ea8:	e09b      	b.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eaa:	4b53      	ldr	r3, [pc, #332]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003eac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003eae:	e098      	b.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eb0:	4b4f      	ldr	r3, [pc, #316]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003eb8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eba:	4b4d      	ldr	r3, [pc, #308]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d028      	beq.n	8003f18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	099b      	lsrs	r3, r3, #6
 8003ecc:	2200      	movs	r2, #0
 8003ece:	623b      	str	r3, [r7, #32]
 8003ed0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4b47      	ldr	r3, [pc, #284]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003edc:	fb03 f201 	mul.w	r2, r3, r1
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	fb00 f303 	mul.w	r3, r0, r3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	4a43      	ldr	r2, [pc, #268]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003eea:	fba0 1202 	umull	r1, r2, r0, r2
 8003eee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ef0:	460a      	mov	r2, r1
 8003ef2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ef6:	4413      	add	r3, r2
 8003ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003efc:	2200      	movs	r2, #0
 8003efe:	61bb      	str	r3, [r7, #24]
 8003f00:	61fa      	str	r2, [r7, #28]
 8003f02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003f0a:	f7fc fd49 	bl	80009a0 <__aeabi_uldivmod>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4613      	mov	r3, r2
 8003f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f16:	e053      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f18:	4b35      	ldr	r3, [pc, #212]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	099b      	lsrs	r3, r3, #6
 8003f1e:	2200      	movs	r2, #0
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	617a      	str	r2, [r7, #20]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f2a:	f04f 0b00 	mov.w	fp, #0
 8003f2e:	4652      	mov	r2, sl
 8003f30:	465b      	mov	r3, fp
 8003f32:	f04f 0000 	mov.w	r0, #0
 8003f36:	f04f 0100 	mov.w	r1, #0
 8003f3a:	0159      	lsls	r1, r3, #5
 8003f3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f40:	0150      	lsls	r0, r2, #5
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	ebb2 080a 	subs.w	r8, r2, sl
 8003f4a:	eb63 090b 	sbc.w	r9, r3, fp
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f62:	ebb2 0408 	subs.w	r4, r2, r8
 8003f66:	eb63 0509 	sbc.w	r5, r3, r9
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	00eb      	lsls	r3, r5, #3
 8003f74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f78:	00e2      	lsls	r2, r4, #3
 8003f7a:	4614      	mov	r4, r2
 8003f7c:	461d      	mov	r5, r3
 8003f7e:	eb14 030a 	adds.w	r3, r4, sl
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	eb45 030b 	adc.w	r3, r5, fp
 8003f88:	607b      	str	r3, [r7, #4]
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f96:	4629      	mov	r1, r5
 8003f98:	028b      	lsls	r3, r1, #10
 8003f9a:	4621      	mov	r1, r4
 8003f9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fa0:	4621      	mov	r1, r4
 8003fa2:	028a      	lsls	r2, r1, #10
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003faa:	2200      	movs	r2, #0
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	60fa      	str	r2, [r7, #12]
 8003fb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fb4:	f7fc fcf4 	bl	80009a0 <__aeabi_uldivmod>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	0c1b      	lsrs	r3, r3, #16
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	3301      	adds	r3, #1
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003fd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fda:	e002      	b.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fdc:	4b05      	ldr	r3, [pc, #20]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fde:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3740      	adds	r7, #64	@ 0x40
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fee:	bf00      	nop
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	00f42400 	.word	0x00f42400
 8003ff8:	017d7840 	.word	0x017d7840

08003ffc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004000:	4b06      	ldr	r3, [pc, #24]	@ (800401c <HAL_RCC_NMI_IRQHandler+0x20>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004008:	2b80      	cmp	r3, #128	@ 0x80
 800400a:	d104      	bne.n	8004016 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800400c:	f000 f80a 	bl	8004024 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004010:	4b03      	ldr	r3, [pc, #12]	@ (8004020 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004012:	2280      	movs	r2, #128	@ 0x80
 8004014:	701a      	strb	r2, [r3, #0]
  }
}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40023800 	.word	0x40023800
 8004020:	4002380e 	.word	0x4002380e

08004024 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e041      	b.n	80040c8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7fd fe1f 	bl	8001c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2202      	movs	r2, #2
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3304      	adds	r3, #4
 800406e:	4619      	mov	r1, r3
 8004070:	4610      	mov	r0, r2
 8004072:	f000 fb41 	bl	80046f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d001      	beq.n	80040e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e046      	b.n	8004176 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a23      	ldr	r2, [pc, #140]	@ (8004184 <HAL_TIM_Base_Start+0xb4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d022      	beq.n	8004140 <HAL_TIM_Base_Start+0x70>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004102:	d01d      	beq.n	8004140 <HAL_TIM_Base_Start+0x70>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1f      	ldr	r2, [pc, #124]	@ (8004188 <HAL_TIM_Base_Start+0xb8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d018      	beq.n	8004140 <HAL_TIM_Base_Start+0x70>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a1e      	ldr	r2, [pc, #120]	@ (800418c <HAL_TIM_Base_Start+0xbc>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d013      	beq.n	8004140 <HAL_TIM_Base_Start+0x70>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1c      	ldr	r2, [pc, #112]	@ (8004190 <HAL_TIM_Base_Start+0xc0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00e      	beq.n	8004140 <HAL_TIM_Base_Start+0x70>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1b      	ldr	r2, [pc, #108]	@ (8004194 <HAL_TIM_Base_Start+0xc4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d009      	beq.n	8004140 <HAL_TIM_Base_Start+0x70>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a19      	ldr	r2, [pc, #100]	@ (8004198 <HAL_TIM_Base_Start+0xc8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d004      	beq.n	8004140 <HAL_TIM_Base_Start+0x70>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a18      	ldr	r2, [pc, #96]	@ (800419c <HAL_TIM_Base_Start+0xcc>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d111      	bne.n	8004164 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b06      	cmp	r3, #6
 8004150:	d010      	beq.n	8004174 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0201 	orr.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004162:	e007      	b.n	8004174 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40010000 	.word	0x40010000
 8004188:	40000400 	.word	0x40000400
 800418c:	40000800 	.word	0x40000800
 8004190:	40000c00 	.word	0x40000c00
 8004194:	40010400 	.word	0x40010400
 8004198:	40014000 	.word	0x40014000
 800419c:	40001800 	.word	0x40001800

080041a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e041      	b.n	8004236 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f839 	bl	800423e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3304      	adds	r3, #4
 80041dc:	4619      	mov	r1, r3
 80041de:	4610      	mov	r0, r2
 80041e0:	f000 fa8a 	bl	80046f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
	...

08004254 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <HAL_TIM_PWM_Start+0x24>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b01      	cmp	r3, #1
 800426e:	bf14      	ite	ne
 8004270:	2301      	movne	r3, #1
 8004272:	2300      	moveq	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	e022      	b.n	80042be <HAL_TIM_PWM_Start+0x6a>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b04      	cmp	r3, #4
 800427c:	d109      	bne.n	8004292 <HAL_TIM_PWM_Start+0x3e>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b01      	cmp	r3, #1
 8004288:	bf14      	ite	ne
 800428a:	2301      	movne	r3, #1
 800428c:	2300      	moveq	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	e015      	b.n	80042be <HAL_TIM_PWM_Start+0x6a>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b08      	cmp	r3, #8
 8004296:	d109      	bne.n	80042ac <HAL_TIM_PWM_Start+0x58>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	bf14      	ite	ne
 80042a4:	2301      	movne	r3, #1
 80042a6:	2300      	moveq	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	e008      	b.n	80042be <HAL_TIM_PWM_Start+0x6a>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	bf14      	ite	ne
 80042b8:	2301      	movne	r3, #1
 80042ba:	2300      	moveq	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e07c      	b.n	80043c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d104      	bne.n	80042d6 <HAL_TIM_PWM_Start+0x82>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042d4:	e013      	b.n	80042fe <HAL_TIM_PWM_Start+0xaa>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d104      	bne.n	80042e6 <HAL_TIM_PWM_Start+0x92>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042e4:	e00b      	b.n	80042fe <HAL_TIM_PWM_Start+0xaa>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d104      	bne.n	80042f6 <HAL_TIM_PWM_Start+0xa2>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042f4:	e003      	b.n	80042fe <HAL_TIM_PWM_Start+0xaa>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2202      	movs	r2, #2
 80042fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2201      	movs	r2, #1
 8004304:	6839      	ldr	r1, [r7, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fcec 	bl	8004ce4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a2d      	ldr	r2, [pc, #180]	@ (80043c8 <HAL_TIM_PWM_Start+0x174>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d004      	beq.n	8004320 <HAL_TIM_PWM_Start+0xcc>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a2c      	ldr	r2, [pc, #176]	@ (80043cc <HAL_TIM_PWM_Start+0x178>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d101      	bne.n	8004324 <HAL_TIM_PWM_Start+0xd0>
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <HAL_TIM_PWM_Start+0xd2>
 8004324:	2300      	movs	r3, #0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d007      	beq.n	800433a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004338:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a22      	ldr	r2, [pc, #136]	@ (80043c8 <HAL_TIM_PWM_Start+0x174>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d022      	beq.n	800438a <HAL_TIM_PWM_Start+0x136>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800434c:	d01d      	beq.n	800438a <HAL_TIM_PWM_Start+0x136>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a1f      	ldr	r2, [pc, #124]	@ (80043d0 <HAL_TIM_PWM_Start+0x17c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d018      	beq.n	800438a <HAL_TIM_PWM_Start+0x136>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a1d      	ldr	r2, [pc, #116]	@ (80043d4 <HAL_TIM_PWM_Start+0x180>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d013      	beq.n	800438a <HAL_TIM_PWM_Start+0x136>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1c      	ldr	r2, [pc, #112]	@ (80043d8 <HAL_TIM_PWM_Start+0x184>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00e      	beq.n	800438a <HAL_TIM_PWM_Start+0x136>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a16      	ldr	r2, [pc, #88]	@ (80043cc <HAL_TIM_PWM_Start+0x178>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d009      	beq.n	800438a <HAL_TIM_PWM_Start+0x136>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a18      	ldr	r2, [pc, #96]	@ (80043dc <HAL_TIM_PWM_Start+0x188>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d004      	beq.n	800438a <HAL_TIM_PWM_Start+0x136>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a16      	ldr	r2, [pc, #88]	@ (80043e0 <HAL_TIM_PWM_Start+0x18c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d111      	bne.n	80043ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b06      	cmp	r3, #6
 800439a:	d010      	beq.n	80043be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ac:	e007      	b.n	80043be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0201 	orr.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40010000 	.word	0x40010000
 80043cc:	40010400 	.word	0x40010400
 80043d0:	40000400 	.word	0x40000400
 80043d4:	40000800 	.word	0x40000800
 80043d8:	40000c00 	.word	0x40000c00
 80043dc:	40014000 	.word	0x40014000
 80043e0:	40001800 	.word	0x40001800

080043e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043fe:	2302      	movs	r3, #2
 8004400:	e0ae      	b.n	8004560 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b0c      	cmp	r3, #12
 800440e:	f200 809f 	bhi.w	8004550 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004412:	a201      	add	r2, pc, #4	@ (adr r2, 8004418 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004418:	0800444d 	.word	0x0800444d
 800441c:	08004551 	.word	0x08004551
 8004420:	08004551 	.word	0x08004551
 8004424:	08004551 	.word	0x08004551
 8004428:	0800448d 	.word	0x0800448d
 800442c:	08004551 	.word	0x08004551
 8004430:	08004551 	.word	0x08004551
 8004434:	08004551 	.word	0x08004551
 8004438:	080044cf 	.word	0x080044cf
 800443c:	08004551 	.word	0x08004551
 8004440:	08004551 	.word	0x08004551
 8004444:	08004551 	.word	0x08004551
 8004448:	0800450f 	.word	0x0800450f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68b9      	ldr	r1, [r7, #8]
 8004452:	4618      	mov	r0, r3
 8004454:	f000 f9fc 	bl	8004850 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699a      	ldr	r2, [r3, #24]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0208 	orr.w	r2, r2, #8
 8004466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0204 	bic.w	r2, r2, #4
 8004476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6999      	ldr	r1, [r3, #24]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	619a      	str	r2, [r3, #24]
      break;
 800448a:	e064      	b.n	8004556 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fa4c 	bl	8004930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6999      	ldr	r1, [r3, #24]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	021a      	lsls	r2, r3, #8
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	619a      	str	r2, [r3, #24]
      break;
 80044cc:	e043      	b.n	8004556 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68b9      	ldr	r1, [r7, #8]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 faa1 	bl	8004a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69da      	ldr	r2, [r3, #28]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 0208 	orr.w	r2, r2, #8
 80044e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69da      	ldr	r2, [r3, #28]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0204 	bic.w	r2, r2, #4
 80044f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	69d9      	ldr	r1, [r3, #28]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	61da      	str	r2, [r3, #28]
      break;
 800450c:	e023      	b.n	8004556 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68b9      	ldr	r1, [r7, #8]
 8004514:	4618      	mov	r0, r3
 8004516:	f000 faf5 	bl	8004b04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69d9      	ldr	r1, [r3, #28]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	021a      	lsls	r2, r3, #8
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	61da      	str	r2, [r3, #28]
      break;
 800454e:	e002      	b.n	8004556 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	75fb      	strb	r3, [r7, #23]
      break;
 8004554:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800455e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_TIM_ConfigClockSource+0x1c>
 8004580:	2302      	movs	r3, #2
 8004582:	e0b4      	b.n	80046ee <HAL_TIM_ConfigClockSource+0x186>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80045a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045bc:	d03e      	beq.n	800463c <HAL_TIM_ConfigClockSource+0xd4>
 80045be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045c2:	f200 8087 	bhi.w	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ca:	f000 8086 	beq.w	80046da <HAL_TIM_ConfigClockSource+0x172>
 80045ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045d2:	d87f      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045d4:	2b70      	cmp	r3, #112	@ 0x70
 80045d6:	d01a      	beq.n	800460e <HAL_TIM_ConfigClockSource+0xa6>
 80045d8:	2b70      	cmp	r3, #112	@ 0x70
 80045da:	d87b      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045dc:	2b60      	cmp	r3, #96	@ 0x60
 80045de:	d050      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x11a>
 80045e0:	2b60      	cmp	r3, #96	@ 0x60
 80045e2:	d877      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045e4:	2b50      	cmp	r3, #80	@ 0x50
 80045e6:	d03c      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0xfa>
 80045e8:	2b50      	cmp	r3, #80	@ 0x50
 80045ea:	d873      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045ec:	2b40      	cmp	r3, #64	@ 0x40
 80045ee:	d058      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x13a>
 80045f0:	2b40      	cmp	r3, #64	@ 0x40
 80045f2:	d86f      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045f4:	2b30      	cmp	r3, #48	@ 0x30
 80045f6:	d064      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x15a>
 80045f8:	2b30      	cmp	r3, #48	@ 0x30
 80045fa:	d86b      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	d060      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004600:	2b20      	cmp	r3, #32
 8004602:	d867      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004604:	2b00      	cmp	r3, #0
 8004606:	d05c      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004608:	2b10      	cmp	r3, #16
 800460a:	d05a      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x15a>
 800460c:	e062      	b.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800461e:	f000 fb41 	bl	8004ca4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004630:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	609a      	str	r2, [r3, #8]
      break;
 800463a:	e04f      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800464c:	f000 fb2a 	bl	8004ca4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800465e:	609a      	str	r2, [r3, #8]
      break;
 8004660:	e03c      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800466e:	461a      	mov	r2, r3
 8004670:	f000 fa9e 	bl	8004bb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2150      	movs	r1, #80	@ 0x50
 800467a:	4618      	mov	r0, r3
 800467c:	f000 faf7 	bl	8004c6e <TIM_ITRx_SetConfig>
      break;
 8004680:	e02c      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800468e:	461a      	mov	r2, r3
 8004690:	f000 fabd 	bl	8004c0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2160      	movs	r1, #96	@ 0x60
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fae7 	bl	8004c6e <TIM_ITRx_SetConfig>
      break;
 80046a0:	e01c      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ae:	461a      	mov	r2, r3
 80046b0:	f000 fa7e 	bl	8004bb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2140      	movs	r1, #64	@ 0x40
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fad7 	bl	8004c6e <TIM_ITRx_SetConfig>
      break;
 80046c0:	e00c      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4619      	mov	r1, r3
 80046cc:	4610      	mov	r0, r2
 80046ce:	f000 face 	bl	8004c6e <TIM_ITRx_SetConfig>
      break;
 80046d2:	e003      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]
      break;
 80046d8:	e000      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a46      	ldr	r2, [pc, #280]	@ (8004824 <TIM_Base_SetConfig+0x12c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d013      	beq.n	8004738 <TIM_Base_SetConfig+0x40>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004716:	d00f      	beq.n	8004738 <TIM_Base_SetConfig+0x40>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a43      	ldr	r2, [pc, #268]	@ (8004828 <TIM_Base_SetConfig+0x130>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00b      	beq.n	8004738 <TIM_Base_SetConfig+0x40>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a42      	ldr	r2, [pc, #264]	@ (800482c <TIM_Base_SetConfig+0x134>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d007      	beq.n	8004738 <TIM_Base_SetConfig+0x40>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a41      	ldr	r2, [pc, #260]	@ (8004830 <TIM_Base_SetConfig+0x138>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d003      	beq.n	8004738 <TIM_Base_SetConfig+0x40>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a40      	ldr	r2, [pc, #256]	@ (8004834 <TIM_Base_SetConfig+0x13c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d108      	bne.n	800474a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800473e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a35      	ldr	r2, [pc, #212]	@ (8004824 <TIM_Base_SetConfig+0x12c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d02b      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004758:	d027      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a32      	ldr	r2, [pc, #200]	@ (8004828 <TIM_Base_SetConfig+0x130>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d023      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a31      	ldr	r2, [pc, #196]	@ (800482c <TIM_Base_SetConfig+0x134>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d01f      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a30      	ldr	r2, [pc, #192]	@ (8004830 <TIM_Base_SetConfig+0x138>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d01b      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a2f      	ldr	r2, [pc, #188]	@ (8004834 <TIM_Base_SetConfig+0x13c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d017      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a2e      	ldr	r2, [pc, #184]	@ (8004838 <TIM_Base_SetConfig+0x140>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d013      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a2d      	ldr	r2, [pc, #180]	@ (800483c <TIM_Base_SetConfig+0x144>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00f      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a2c      	ldr	r2, [pc, #176]	@ (8004840 <TIM_Base_SetConfig+0x148>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00b      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a2b      	ldr	r2, [pc, #172]	@ (8004844 <TIM_Base_SetConfig+0x14c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d007      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a2a      	ldr	r2, [pc, #168]	@ (8004848 <TIM_Base_SetConfig+0x150>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d003      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a29      	ldr	r2, [pc, #164]	@ (800484c <TIM_Base_SetConfig+0x154>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d108      	bne.n	80047bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a10      	ldr	r2, [pc, #64]	@ (8004824 <TIM_Base_SetConfig+0x12c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d003      	beq.n	80047f0 <TIM_Base_SetConfig+0xf8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a12      	ldr	r2, [pc, #72]	@ (8004834 <TIM_Base_SetConfig+0x13c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d103      	bne.n	80047f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	d105      	bne.n	8004816 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f023 0201 	bic.w	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	611a      	str	r2, [r3, #16]
  }
}
 8004816:	bf00      	nop
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40010000 	.word	0x40010000
 8004828:	40000400 	.word	0x40000400
 800482c:	40000800 	.word	0x40000800
 8004830:	40000c00 	.word	0x40000c00
 8004834:	40010400 	.word	0x40010400
 8004838:	40014000 	.word	0x40014000
 800483c:	40014400 	.word	0x40014400
 8004840:	40014800 	.word	0x40014800
 8004844:	40001800 	.word	0x40001800
 8004848:	40001c00 	.word	0x40001c00
 800484c:	40002000 	.word	0x40002000

08004850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f023 0201 	bic.w	r2, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0303 	bic.w	r3, r3, #3
 8004886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f023 0302 	bic.w	r3, r3, #2
 8004898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a20      	ldr	r2, [pc, #128]	@ (8004928 <TIM_OC1_SetConfig+0xd8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d003      	beq.n	80048b4 <TIM_OC1_SetConfig+0x64>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a1f      	ldr	r2, [pc, #124]	@ (800492c <TIM_OC1_SetConfig+0xdc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d10c      	bne.n	80048ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f023 0308 	bic.w	r3, r3, #8
 80048ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f023 0304 	bic.w	r3, r3, #4
 80048cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a15      	ldr	r2, [pc, #84]	@ (8004928 <TIM_OC1_SetConfig+0xd8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d003      	beq.n	80048de <TIM_OC1_SetConfig+0x8e>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a14      	ldr	r2, [pc, #80]	@ (800492c <TIM_OC1_SetConfig+0xdc>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d111      	bne.n	8004902 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	4313      	orrs	r3, r2
 8004900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	621a      	str	r2, [r3, #32]
}
 800491c:	bf00      	nop
 800491e:	371c      	adds	r7, #28
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	40010000 	.word	0x40010000
 800492c:	40010400 	.word	0x40010400

08004930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	f023 0210 	bic.w	r2, r3, #16
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800495e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	021b      	lsls	r3, r3, #8
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f023 0320 	bic.w	r3, r3, #32
 800497a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a22      	ldr	r2, [pc, #136]	@ (8004a14 <TIM_OC2_SetConfig+0xe4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <TIM_OC2_SetConfig+0x68>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a21      	ldr	r2, [pc, #132]	@ (8004a18 <TIM_OC2_SetConfig+0xe8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d10d      	bne.n	80049b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800499e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a17      	ldr	r2, [pc, #92]	@ (8004a14 <TIM_OC2_SetConfig+0xe4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d003      	beq.n	80049c4 <TIM_OC2_SetConfig+0x94>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a16      	ldr	r2, [pc, #88]	@ (8004a18 <TIM_OC2_SetConfig+0xe8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d113      	bne.n	80049ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	621a      	str	r2, [r3, #32]
}
 8004a06:	bf00      	nop
 8004a08:	371c      	adds	r7, #28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40010000 	.word	0x40010000
 8004a18:	40010400 	.word	0x40010400

08004a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0303 	bic.w	r3, r3, #3
 8004a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a21      	ldr	r2, [pc, #132]	@ (8004afc <TIM_OC3_SetConfig+0xe0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d003      	beq.n	8004a82 <TIM_OC3_SetConfig+0x66>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a20      	ldr	r2, [pc, #128]	@ (8004b00 <TIM_OC3_SetConfig+0xe4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d10d      	bne.n	8004a9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a16      	ldr	r2, [pc, #88]	@ (8004afc <TIM_OC3_SetConfig+0xe0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d003      	beq.n	8004aae <TIM_OC3_SetConfig+0x92>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a15      	ldr	r2, [pc, #84]	@ (8004b00 <TIM_OC3_SetConfig+0xe4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d113      	bne.n	8004ad6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004abc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	621a      	str	r2, [r3, #32]
}
 8004af0:	bf00      	nop
 8004af2:	371c      	adds	r7, #28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	40010000 	.word	0x40010000
 8004b00:	40010400 	.word	0x40010400

08004b04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	021b      	lsls	r3, r3, #8
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	031b      	lsls	r3, r3, #12
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a12      	ldr	r2, [pc, #72]	@ (8004ba8 <TIM_OC4_SetConfig+0xa4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d003      	beq.n	8004b6c <TIM_OC4_SetConfig+0x68>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a11      	ldr	r2, [pc, #68]	@ (8004bac <TIM_OC4_SetConfig+0xa8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d109      	bne.n	8004b80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	019b      	lsls	r3, r3, #6
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	621a      	str	r2, [r3, #32]
}
 8004b9a:	bf00      	nop
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	40010000 	.word	0x40010000
 8004bac:	40010400 	.word	0x40010400

08004bb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f023 0201 	bic.w	r2, r3, #1
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f023 030a 	bic.w	r3, r3, #10
 8004bec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	621a      	str	r2, [r3, #32]
}
 8004c02:	bf00      	nop
 8004c04:	371c      	adds	r7, #28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b087      	sub	sp, #28
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	f023 0210 	bic.w	r2, r3, #16
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	031b      	lsls	r3, r3, #12
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	621a      	str	r2, [r3, #32]
}
 8004c62:	bf00      	nop
 8004c64:	371c      	adds	r7, #28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b085      	sub	sp, #20
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f043 0307 	orr.w	r3, r3, #7
 8004c90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	609a      	str	r2, [r3, #8]
}
 8004c98:	bf00      	nop
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	021a      	lsls	r2, r3, #8
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	609a      	str	r2, [r3, #8]
}
 8004cd8:	bf00      	nop
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f003 031f 	and.w	r3, r3, #31
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a1a      	ldr	r2, [r3, #32]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	43db      	mvns	r3, r3
 8004d06:	401a      	ands	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a1a      	ldr	r2, [r3, #32]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f003 031f 	and.w	r3, r3, #31
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	621a      	str	r2, [r3, #32]
}
 8004d22:	bf00      	nop
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
	...

08004d30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e05a      	b.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a21      	ldr	r2, [pc, #132]	@ (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d022      	beq.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d94:	d01d      	beq.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d018      	beq.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a1b      	ldr	r2, [pc, #108]	@ (8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d013      	beq.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a1a      	ldr	r2, [pc, #104]	@ (8004e18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00e      	beq.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a18      	ldr	r2, [pc, #96]	@ (8004e1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d009      	beq.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a17      	ldr	r2, [pc, #92]	@ (8004e20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d004      	beq.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a15      	ldr	r2, [pc, #84]	@ (8004e24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d10c      	bne.n	8004dec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40010000 	.word	0x40010000
 8004e10:	40000400 	.word	0x40000400
 8004e14:	40000800 	.word	0x40000800
 8004e18:	40000c00 	.word	0x40000c00
 8004e1c:	40010400 	.word	0x40010400
 8004e20:	40014000 	.word	0x40014000
 8004e24:	40001800 	.word	0x40001800

08004e28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e03d      	b.n	8004ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004ecc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004f04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004ed0:	f000 f826 	bl	8004f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ed4:	480c      	ldr	r0, [pc, #48]	@ (8004f08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004ed6:	490d      	ldr	r1, [pc, #52]	@ (8004f0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8004f10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004edc:	e002      	b.n	8004ee4 <LoopCopyDataInit>

08004ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ee2:	3304      	adds	r3, #4

08004ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ee8:	d3f9      	bcc.n	8004ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004eea:	4a0a      	ldr	r2, [pc, #40]	@ (8004f14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004eec:	4c0a      	ldr	r4, [pc, #40]	@ (8004f18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ef0:	e001      	b.n	8004ef6 <LoopFillZerobss>

08004ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ef4:	3204      	adds	r2, #4

08004ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ef8:	d3fb      	bcc.n	8004ef2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004efa:	f003 ff01 	bl	8008d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004efe:	f7fc f99f 	bl	8001240 <main>
  bx  lr    
 8004f02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004f04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004f10:	08009054 	.word	0x08009054
  ldr r2, =_sbss
 8004f14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8004f18:	20001d7c 	.word	0x20001d7c

08004f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f1c:	e7fe      	b.n	8004f1c <ADC_IRQHandler>
	...

08004f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f24:	4b06      	ldr	r3, [pc, #24]	@ (8004f40 <SystemInit+0x20>)
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f2a:	4a05      	ldr	r2, [pc, #20]	@ (8004f40 <SystemInit+0x20>)
 8004f2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f34:	bf00      	nop
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	e000ed00 	.word	0xe000ed00

08004f44 <CPU_Cache_Init>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  CPU_Cache_Init (void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
    CPU_Cache_Linesize = CPU_DCache_LineSizeGet();
 8004f48:	f000 f808 	bl	8004f5c <CPU_DCache_LineSizeGet>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	4a02      	ldr	r2, [pc, #8]	@ (8004f58 <CPU_Cache_Init+0x14>)
 8004f50:	6013      	str	r3, [r2, #0]
}
 8004f52:	bf00      	nop
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20001098 	.word	0x20001098

08004f5c <CPU_DCache_LineSizeGet>:
* Note(s)     : Line Size = 2^(CCSIDR[2:0] + 2)
*********************************************************************************************************
*/

static  CPU_INT32U  CPU_DCache_LineSizeGet (void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
    return (1u << ((SCS_CCSIDR & 0x7u) + 2u));
 8004f60:	4b06      	ldr	r3, [pc, #24]	@ (8004f7c <CPU_DCache_LineSizeGet+0x20>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	3302      	adds	r3, #2
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	e000ed80 	.word	0xe000ed80

08004f80 <CPU_Init>:
*                                                   & other CPU interrupts disabled time measurement functions
*********************************************************************************************************
*/

void  CPU_Init (void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
    CPU_IntDisMeasInit();                                       /* See Note #3b.                                        */
#endif

                                                                /* ------------------ INIT CPU NAME ------------------- */
#if (CPU_CFG_NAME_EN == DEF_ENABLED)
     CPU_NameInit();
 8004f84:	f000 f81a 	bl	8004fbc <CPU_NameInit>
#endif

#if (CPU_CFG_CACHE_MGMT_EN == DEF_ENABLED)
     CPU_Cache_Init();
 8004f88:	f7ff ffdc 	bl	8004f44 <CPU_Cache_Init>
#endif
}
 8004f8c:	bf00      	nop
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <CPU_NameClr>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
void  CPU_NameClr (void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8004f96:	2300      	movs	r3, #0
 8004f98:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 8004f9a:	2040      	movs	r0, #64	@ 0x40
 8004f9c:	f7fb f918 	bl	80001d0 <CPU_SR_Save>
 8004fa0:	6078      	str	r0, [r7, #4]
    Mem_Clr((void     *)&CPU_Name[0],
 8004fa2:	2110      	movs	r1, #16
 8004fa4:	4804      	ldr	r0, [pc, #16]	@ (8004fb8 <CPU_NameClr+0x28>)
 8004fa6:	f000 f80f 	bl	8004fc8 <Mem_Clr>
            (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
    CPU_CRITICAL_EXIT();
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7fb f91e 	bl	80001ec <CPU_SR_Restore>
}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	2000109c 	.word	0x2000109c

08004fbc <CPU_NameInit>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
static  void  CPU_NameInit (void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
    CPU_NameClr();
 8004fc0:	f7ff ffe6 	bl	8004f90 <CPU_NameClr>
}
 8004fc4:	bf00      	nop
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <Mem_Clr>:
*********************************************************************************************************
*/

void  Mem_Clr (void        *pmem,
               CPU_SIZE_T   size)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
    Mem_Set(pmem,
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f804 	bl	8004fe4 <Mem_Set>
            0u,                                                 /* See Note #2.                                         */
            size);
}
 8004fdc:	bf00      	nop
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <Mem_Set>:
*/

void  Mem_Set (void        *pmem,
               CPU_INT08U   data_val,
               CPU_SIZE_T   size)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b08b      	sub	sp, #44	@ 0x2c
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	460b      	mov	r3, r1
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	72fb      	strb	r3, [r7, #11]
        return;
    }
#endif


    data_align = 0u;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	623b      	str	r3, [r7, #32]
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]
 8004ffa:	e009      	b.n	8005010 <Mem_Set+0x2c>
        data_align <<=  DEF_OCTET_NBR_BITS;
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	021b      	lsls	r3, r3, #8
 8005000:	623b      	str	r3, [r7, #32]
        data_align  |= (CPU_ALIGN)data_val;
 8005002:	7afb      	ldrb	r3, [r7, #11]
 8005004:	6a3a      	ldr	r2, [r7, #32]
 8005006:	4313      	orrs	r3, r2
 8005008:	623b      	str	r3, [r7, #32]
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	3301      	adds	r3, #1
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2b03      	cmp	r3, #3
 8005014:	d9f2      	bls.n	8004ffc <Mem_Set+0x18>
    }

    size_rem      =  size;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24
    mem_align_mod = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));   /* See Note #3.                                 */
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	613b      	str	r3, [r7, #16]

    pmem_08 = (CPU_INT08U *)pmem;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	61bb      	str	r3, [r7, #24]
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d013      	beq.n	8005056 <Mem_Set+0x72>
        i = mem_align_mod;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	617b      	str	r3, [r7, #20]
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8005032:	e00a      	b.n	800504a <Mem_Set+0x66>
               (i        < sizeof(CPU_ALIGN ))) {               /* ... until next CPU_ALIGN word boundary.              */
           *pmem_08++ = data_val;
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	61ba      	str	r2, [r7, #24]
 800503a:	7afa      	ldrb	r2, [r7, #11]
 800503c:	701a      	strb	r2, [r3, #0]
            size_rem -= sizeof(CPU_INT08U);
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	3b01      	subs	r3, #1
 8005042:	627b      	str	r3, [r7, #36]	@ 0x24
            i++;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	3301      	adds	r3, #1
 8005048:	617b      	str	r3, [r7, #20]
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <Mem_Set+0x72>
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2b03      	cmp	r3, #3
 8005054:	d9ee      	bls.n	8005034 <Mem_Set+0x50>
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2.                                         */
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	61fb      	str	r3, [r7, #28]
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 800505a:	e007      	b.n	800506c <Mem_Set+0x88>
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	1d1a      	adds	r2, r3, #4
 8005060:	61fa      	str	r2, [r7, #28]
 8005062:	6a3a      	ldr	r2, [r7, #32]
 8005064:	601a      	str	r2, [r3, #0]
        size_rem    -= sizeof(CPU_ALIGN);
 8005066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005068:	3b04      	subs	r3, #4
 800506a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	2b03      	cmp	r3, #3
 8005070:	d8f4      	bhi.n	800505c <Mem_Set+0x78>
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	61bb      	str	r3, [r7, #24]
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 8005076:	e007      	b.n	8005088 <Mem_Set+0xa4>
       *pmem_08++   = data_val;
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	61ba      	str	r2, [r7, #24]
 800507e:	7afa      	ldrb	r2, [r7, #11]
 8005080:	701a      	strb	r2, [r3, #0]
        size_rem   -= sizeof(CPU_INT08U);
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	3b01      	subs	r3, #1
 8005086:	627b      	str	r3, [r7, #36]	@ 0x24
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 8005088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f4      	bne.n	8005078 <Mem_Set+0x94>
    }
}
 800508e:	bf00      	nop
 8005090:	bf00      	nop
 8005092:	372c      	adds	r7, #44	@ 0x2c
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <OSIdleTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSIdleTaskHook (void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppIdleTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 80050a0:	4b04      	ldr	r3, [pc, #16]	@ (80050b4 <OSIdleTaskHook+0x18>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <OSIdleTaskHook+0x12>
        (*OS_AppIdleTaskHookPtr)();
 80050a8:	4b02      	ldr	r3, [pc, #8]	@ (80050b4 <OSIdleTaskHook+0x18>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4798      	blx	r3
    }
#endif
}
 80050ae:	bf00      	nop
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	200018d0 	.word	0x200018d0

080050b8 <OSInitHook>:
*                 b) Set bits ASPEN and LSPEN in FPCCR register.
*********************************************************************************************************
*/

void  OSInitHook (void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
#if (OS_CPU_ARM_FP_EN > 0u)
    CPU_INT32U   reg_val;
#endif
                                                                /* 8-byte align the ISR stack.                          */
    OS_CPU_ExceptStkBase = (CPU_STK *)(OSCfg_ISRStkBasePtr + OSCfg_ISRStkSize);
 80050be:	4b11      	ldr	r3, [pc, #68]	@ (8005104 <OSInitHook+0x4c>)
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	4b11      	ldr	r3, [pc, #68]	@ (8005108 <OSInitHook+0x50>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	4a10      	ldr	r2, [pc, #64]	@ (800510c <OSInitHook+0x54>)
 80050cc:	6013      	str	r3, [r2, #0]
    OS_CPU_ExceptStkBase = (CPU_STK *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 80050ce:	4b0f      	ldr	r3, [pc, #60]	@ (800510c <OSInitHook+0x54>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f023 0307 	bic.w	r3, r3, #7
 80050d6:	461a      	mov	r2, r3
 80050d8:	4b0c      	ldr	r3, [pc, #48]	@ (800510c <OSInitHook+0x54>)
 80050da:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    reg_val = CPU_REG_FP_FPCCR;                                 /* Check the floating point mode.                       */
 80050dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005110 <OSInitHook+0x58>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	607b      	str	r3, [r7, #4]
    if ((reg_val & CPU_REG_FPCCR_LAZY_STK) != CPU_REG_FPCCR_LAZY_STK) {
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80050e8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80050ec:	d001      	beq.n	80050f2 <OSInitHook+0x3a>
        while (1u) {                                            /* See Note (1).                                        */
 80050ee:	bf00      	nop
 80050f0:	e7fd      	b.n	80050ee <OSInitHook+0x36>
            ;
        }
    }
#endif
                                                                /* Set BASEPRI boundary from the configuration.         */
    OS_KA_BASEPRI_Boundary = (CPU_INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 80050f2:	4b08      	ldr	r3, [pc, #32]	@ (8005114 <OSInitHook+0x5c>)
 80050f4:	2240      	movs	r2, #64	@ 0x40
 80050f6:	601a      	str	r2, [r3, #0]
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	08008ea8 	.word	0x08008ea8
 8005108:	08008eac 	.word	0x08008eac
 800510c:	200010ac 	.word	0x200010ac
 8005110:	e000ef34 	.word	0xe000ef34
 8005114:	200010b0 	.word	0x200010b0

08005118 <OSStatTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSStatTaskHook (void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppStatTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 800511c:	4b04      	ldr	r3, [pc, #16]	@ (8005130 <OSStatTaskHook+0x18>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <OSStatTaskHook+0x12>
        (*OS_AppStatTaskHookPtr)();
 8005124:	4b02      	ldr	r3, [pc, #8]	@ (8005130 <OSStatTaskHook+0x18>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4798      	blx	r3
    }
#endif
}
 800512a:	bf00      	nop
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	200018d4 	.word	0x200018d4

08005134 <OSTaskCreateHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskCreateHook (OS_TCB  *p_tcb)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskCreateHookPtr != (OS_APP_HOOK_TCB)0) {
 800513c:	4b05      	ldr	r3, [pc, #20]	@ (8005154 <OSTaskCreateHook+0x20>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <OSTaskCreateHook+0x18>
        (*OS_AppTaskCreateHookPtr)(p_tcb);
 8005144:	4b03      	ldr	r3, [pc, #12]	@ (8005154 <OSTaskCreateHook+0x20>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                                /* Prevent compiler warning                             */
#endif
}
 800514c:	bf00      	nop
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	200018c4 	.word	0x200018c4

08005158 <OSTaskDelHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskDelHook (OS_TCB  *p_tcb)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskDelHookPtr != (OS_APP_HOOK_TCB)0) {
 8005160:	4b05      	ldr	r3, [pc, #20]	@ (8005178 <OSTaskDelHook+0x20>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d003      	beq.n	8005170 <OSTaskDelHook+0x18>
        (*OS_AppTaskDelHookPtr)(p_tcb);
 8005168:	4b03      	ldr	r3, [pc, #12]	@ (8005178 <OSTaskDelHook+0x20>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                                /* Prevent compiler warning                             */
#endif
}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	200018c8 	.word	0x200018c8

0800517c <OSTaskReturnHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskReturnHook (OS_TCB  *p_tcb)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskReturnHookPtr != (OS_APP_HOOK_TCB)0) {
 8005184:	4b05      	ldr	r3, [pc, #20]	@ (800519c <OSTaskReturnHook+0x20>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <OSTaskReturnHook+0x18>
        (*OS_AppTaskReturnHookPtr)(p_tcb);
 800518c:	4b03      	ldr	r3, [pc, #12]	@ (800519c <OSTaskReturnHook+0x20>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                                /* Prevent compiler warning                             */
#endif
}
 8005194:	bf00      	nop
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	200018cc 	.word	0x200018cc

080051a0 <OSTaskStkInit>:
                         void          *p_arg,
                         CPU_STK       *p_stk_base,
                         CPU_STK       *p_stk_limit,
                         CPU_STK_SIZE   stk_size,
                         OS_OPT         opt)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
    CPU_STK    *p_stk;


    (void)opt;                                                  /* 'opt' is not used, prevent warning                   */

    p_stk = &p_stk_base[stk_size];                              /* Load stack pointer                                   */
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	4413      	add	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                          */
    p_stk = (CPU_STK *)((CPU_STK)(p_stk) & 0xFFFFFFF8u);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f023 0307 	bic.w	r3, r3, #7
 80051be:	617b      	str	r3, [r7, #20]
                                                                /* Registers stacked as if auto-saved on exception      */
    *(--p_stk) = (CPU_STK)0x01000000u;                          /* xPSR                                                 */
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	3b04      	subs	r3, #4
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051cc:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)p_task;                               /* Entry Point                                          */
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	3b04      	subs	r3, #4
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)OS_TaskReturn;                        /* R14 (LR)                                             */
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	3b04      	subs	r3, #4
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	4a34      	ldr	r2, [pc, #208]	@ (80052b4 <OSTaskStkInit+0x114>)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x12121212u;                          /* R12                                                  */
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	3b04      	subs	r3, #4
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 80051f2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x03030303u;                          /* R3                                                   */
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	3b04      	subs	r3, #4
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8005200:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x02020202u;                          /* R2                                                   */
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	3b04      	subs	r3, #4
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800520e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)p_stk_limit;                          /* R1                                                   */
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	3b04      	subs	r3, #4
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)p_arg;                                /* R0 : argument                                        */
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	3b04      	subs	r3, #4
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0xFFFFFFFDuL;                         /* R14: EXEC_RETURN; See Note 5                         */
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	3b04      	subs	r3, #4
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f06f 0202 	mvn.w	r2, #2
 8005234:	601a      	str	r2, [r3, #0]
                                                                /* Remaining registers saved on process stack           */
    *(--p_stk) = (CPU_STK)0x11111111uL;                         /* R11                                                  */
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	3b04      	subs	r3, #4
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8005242:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x10101010uL;                         /* R10                                                  */
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	3b04      	subs	r3, #4
 8005248:	617b      	str	r3, [r7, #20]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8005250:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x09090909uL;                         /* R9                                                   */
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	3b04      	subs	r3, #4
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800525e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x08080808uL;                         /* R8                                                   */
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	3b04      	subs	r3, #4
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800526c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x07070707uL;                         /* R7                                                   */
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	3b04      	subs	r3, #4
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800527a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x06060606uL;                         /* R6                                                   */
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	3b04      	subs	r3, #4
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 8005288:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x05050505uL;                         /* R5                                                   */
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	3b04      	subs	r3, #4
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8005296:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x04040404uL;                         /* R4                                                   */
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	3b04      	subs	r3, #4
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 80052a4:	601a      	str	r2, [r3, #0]

    return (p_stk);
 80052a6:	697b      	ldr	r3, [r7, #20]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	371c      	adds	r7, #28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	08007d35 	.word	0x08007d35

080052b8 <OSTaskSwHook>:
*                 to the task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/

void  OSTaskSwHook (void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
    CPU_BOOLEAN  stk_status;
#endif

#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskSwHookPtr != (OS_APP_HOOK_VOID)0) {
 80052be:	4b17      	ldr	r3, [pc, #92]	@ (800531c <OSTaskSwHook+0x64>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <OSTaskSwHook+0x14>
        (*OS_AppTaskSwHookPtr)();
 80052c6:	4b15      	ldr	r3, [pc, #84]	@ (800531c <OSTaskSwHook+0x64>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4798      	blx	r3
#endif

    OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdyPtr);

#if OS_CFG_TASK_PROFILE_EN > 0u
    ts = OS_TS_GET();
 80052cc:	2300      	movs	r3, #0
 80052ce:	607b      	str	r3, [r7, #4]
    if (OSTCBCurPtr != OSTCBHighRdyPtr) {
 80052d0:	4b13      	ldr	r3, [pc, #76]	@ (8005320 <OSTaskSwHook+0x68>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	4b13      	ldr	r3, [pc, #76]	@ (8005324 <OSTaskSwHook+0x6c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d016      	beq.n	800530a <OSTaskSwHook+0x52>
        OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
 80052dc:	4b10      	ldr	r3, [pc, #64]	@ (8005320 <OSTaskSwHook+0x68>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80052e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005320 <OSTaskSwHook+0x68>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	1a8a      	subs	r2, r1, r2
 80052ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
 80052f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005320 <OSTaskSwHook+0x68>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80052f8:	4b09      	ldr	r3, [pc, #36]	@ (8005320 <OSTaskSwHook+0x68>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005300:	4b07      	ldr	r3, [pc, #28]	@ (8005320 <OSTaskSwHook+0x68>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	440a      	add	r2, r1
 8005306:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }

    OSTCBHighRdyPtr->CyclesStart = ts;
 800530a:	4b06      	ldr	r3, [pc, #24]	@ (8005324 <OSTaskSwHook+0x6c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    stk_status = OSTaskStkRedzoneChk((OS_TCB *)0u);
    if (stk_status != OS_TRUE) {
        OSRedzoneHitHook(OSTCBCurPtr);
    }
#endif
}
 8005314:	bf00      	nop
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	200018d8 	.word	0x200018d8
 8005320:	20001d74 	.word	0x20001d74
 8005324:	20001d78 	.word	0x20001d78

08005328 <OSTimeTickHook>:
* Note(s)    : 1) This function is assumed to be called from the Tick ISR.
*********************************************************************************************************
*/

void  OSTimeTickHook (void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTimeTickHookPtr != (OS_APP_HOOK_VOID)0) {
 800532c:	4b04      	ldr	r3, [pc, #16]	@ (8005340 <OSTimeTickHook+0x18>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <OSTimeTickHook+0x12>
        (*OS_AppTimeTickHookPtr)();
 8005334:	4b02      	ldr	r3, [pc, #8]	@ (8005340 <OSTimeTickHook+0x18>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4798      	blx	r3
    }
#endif
}
 800533a:	bf00      	nop
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	200018dc 	.word	0x200018dc

08005344 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler  (void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 800534a:	2300      	movs	r3, #0
 800534c:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 800534e:	2040      	movs	r0, #64	@ 0x40
 8005350:	f7fa ff3e 	bl	80001d0 <CPU_SR_Save>
 8005354:	6078      	str	r0, [r7, #4]
    OSIntEnter();                                               /* Tell uC/OS-III that we are starting an ISR           */
 8005356:	f000 f8f5 	bl	8005544 <OSIntEnter>
    CPU_CRITICAL_EXIT();
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fa ff46 	bl	80001ec <CPU_SR_Restore>

    OSTimeTick();                                               /* Call uC/OS-III's OSTimeTick()                        */
 8005360:	f003 f966 	bl	8008630 <OSTimeTick>

    OSIntExit();                                                /* Tell uC/OS-III that we are leaving the ISR           */
 8005364:	f000 f90a 	bl	800557c <OSIntExit>
}
 8005368:	bf00      	nop
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <OSCfg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OSCfg_Init (void)
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
    (void)OSCfg_TmrTaskStkBasePtr;
    (void)OSCfg_TmrTaskStkLimit;
    (void)OSCfg_TmrTaskStkSize;
    (void)OSCfg_TmrTaskStkSizeRAM;
#endif
}
 8005374:	bf00      	nop
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <OSInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSInit (OS_ERR  *p_err)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSInitHook();                                               /* Call port specific initialization code               */
 8005388:	f7ff fe96 	bl	80050b8 <OSInitHook>

    OSIntNestingCtr       =           0u;                       /* Clear the interrupt nesting counter                  */
 800538c:	4b53      	ldr	r3, [pc, #332]	@ (80054dc <OSInit+0x15c>)
 800538e:	2200      	movs	r2, #0
 8005390:	701a      	strb	r2, [r3, #0]

    OSRunning             =  OS_STATE_OS_STOPPED;               /* Indicate that multitasking has not started           */
 8005392:	4b53      	ldr	r3, [pc, #332]	@ (80054e0 <OSInit+0x160>)
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]

    OSSchedLockNestingCtr =           0u;                       /* Clear the scheduling lock counter                    */
 8005398:	4b52      	ldr	r3, [pc, #328]	@ (80054e4 <OSInit+0x164>)
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]

    OSTCBCurPtr           = (OS_TCB *)0;                        /* Initialize OS_TCB pointers to a known state          */
 800539e:	4b52      	ldr	r3, [pc, #328]	@ (80054e8 <OSInit+0x168>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]
    OSTCBHighRdyPtr       = (OS_TCB *)0;
 80053a4:	4b51      	ldr	r3, [pc, #324]	@ (80054ec <OSInit+0x16c>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]

    OSPrioCur             =           0u;                       /* Initialize priority variables to a known state       */
 80053aa:	4b51      	ldr	r3, [pc, #324]	@ (80054f0 <OSInit+0x170>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy         =           0u;
 80053b0:	4b50      	ldr	r3, [pc, #320]	@ (80054f4 <OSInit+0x174>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	701a      	strb	r2, [r3, #0]
    OSSchedRoundRobinEn             = OS_FALSE;
    OSSchedRoundRobinDfltTimeQuanta = OSCfg_TickRate_Hz / 10u;
#endif

#if (OS_CFG_ISR_STK_SIZE > 0u)
    p_stk = OSCfg_ISRStkBasePtr;                                /* Clear exception stack for stack checking.            */
 80053b6:	4b50      	ldr	r3, [pc, #320]	@ (80054f8 <OSInit+0x178>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]
    if (p_stk != (CPU_STK *)0) {
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00f      	beq.n	80053e2 <OSInit+0x62>
        size  = OSCfg_ISRStkSize;
 80053c2:	4b4e      	ldr	r3, [pc, #312]	@ (80054fc <OSInit+0x17c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60bb      	str	r3, [r7, #8]
        while (size > 0u) {
 80053c8:	e008      	b.n	80053dc <OSInit+0x5c>
            size--;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	3b01      	subs	r3, #1
 80053ce:	60bb      	str	r3, [r7, #8]
           *p_stk = 0u;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
            p_stk++;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3304      	adds	r3, #4
 80053da:	60fb      	str	r3, [r7, #12]
        while (size > 0u) {
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f3      	bne.n	80053ca <OSInit+0x4a>

#if (OS_CFG_APP_HOOKS_EN > 0u)                                  /* Clear application hook pointers                      */
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
    OS_AppRedzoneHitHookPtr = (OS_APP_HOOK_TCB )0;
#endif
    OS_AppTaskCreateHookPtr = (OS_APP_HOOK_TCB )0;
 80053e2:	4b47      	ldr	r3, [pc, #284]	@ (8005500 <OSInit+0x180>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
    OS_AppTaskDelHookPtr    = (OS_APP_HOOK_TCB )0;
 80053e8:	4b46      	ldr	r3, [pc, #280]	@ (8005504 <OSInit+0x184>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
    OS_AppTaskReturnHookPtr = (OS_APP_HOOK_TCB )0;
 80053ee:	4b46      	ldr	r3, [pc, #280]	@ (8005508 <OSInit+0x188>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]

    OS_AppIdleTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 80053f4:	4b45      	ldr	r3, [pc, #276]	@ (800550c <OSInit+0x18c>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
    OS_AppStatTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 80053fa:	4b45      	ldr	r3, [pc, #276]	@ (8005510 <OSInit+0x190>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
    OS_AppTaskSwHookPtr     = (OS_APP_HOOK_VOID)0;
 8005400:	4b44      	ldr	r3, [pc, #272]	@ (8005514 <OSInit+0x194>)
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
    OS_AppTimeTickHookPtr   = (OS_APP_HOOK_VOID)0;
 8005406:	4b44      	ldr	r3, [pc, #272]	@ (8005518 <OSInit+0x198>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]
#endif

#if (OS_CFG_TASK_REG_TBL_SIZE > 0u)
    OSTaskRegNextAvailID = 0u;
 800540c:	4b43      	ldr	r3, [pc, #268]	@ (800551c <OSInit+0x19c>)
 800540e:	2200      	movs	r2, #0
 8005410:	701a      	strb	r2, [r3, #0]
#endif

    OS_PrioInit();                                              /* Initialize the priority bitmap table                 */
 8005412:	f001 fdb9 	bl	8006f88 <OS_PrioInit>

    OS_RdyListInit();                                           /* Initialize the Ready List                            */
 8005416:	f000 fc29 	bl	8005c6c <OS_RdyListInit>


#if (OS_CFG_FLAG_EN > 0u)                                       /* Initialize the Event Flag module                     */
#if (OS_CFG_DBG_EN > 0u)
    OSFlagDbgListPtr = (OS_FLAG_GRP *)0;
 800541a:	4b41      	ldr	r3, [pc, #260]	@ (8005520 <OSInit+0x1a0>)
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
    OSFlagQty        =                0u;
 8005420:	4b40      	ldr	r3, [pc, #256]	@ (8005524 <OSInit+0x1a4>)
 8005422:	2200      	movs	r2, #0
 8005424:	801a      	strh	r2, [r3, #0]
#endif
#endif

#if (OS_CFG_MEM_EN > 0u)                                        /* Initialize the Memory Manager module                 */
    OS_MemInit(p_err);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f001 fad2 	bl	80069d0 <OS_MemInit>
    if (*p_err != OS_ERR_NONE) {
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d143      	bne.n	80054bc <OSInit+0x13c>
    }
#endif


#if (OS_MSG_EN > 0u)                                            /* Initialize the free list of OS_MSGs                  */
    OS_MsgPoolInit(p_err);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f001 fae3 	bl	8006a00 <OS_MsgPoolInit>
    if (*p_err != OS_ERR_NONE) {
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d13e      	bne.n	80054c0 <OSInit+0x140>
#endif


#if (OS_CFG_MUTEX_EN > 0u)                                      /* Initialize the Mutex Manager module                  */
#if (OS_CFG_DBG_EN > 0u)
    OSMutexDbgListPtr = (OS_MUTEX *)0;
 8005442:	4b39      	ldr	r3, [pc, #228]	@ (8005528 <OSInit+0x1a8>)
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
    OSMutexQty        =             0u;
 8005448:	4b38      	ldr	r3, [pc, #224]	@ (800552c <OSInit+0x1ac>)
 800544a:	2200      	movs	r2, #0
 800544c:	801a      	strh	r2, [r3, #0]
#endif


#if (OS_CFG_Q_EN > 0u)                                          /* Initialize the Message Queue Manager module          */
#if (OS_CFG_DBG_EN > 0u)
    OSQDbgListPtr = (OS_Q *)0;
 800544e:	4b38      	ldr	r3, [pc, #224]	@ (8005530 <OSInit+0x1b0>)
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]
    OSQQty        =         0u;
 8005454:	4b37      	ldr	r3, [pc, #220]	@ (8005534 <OSInit+0x1b4>)
 8005456:	2200      	movs	r2, #0
 8005458:	801a      	strh	r2, [r3, #0]
#endif


#if (OS_CFG_SEM_EN > 0u)                                        /* Initialize the Semaphore Manager module              */
#if (OS_CFG_DBG_EN > 0u)
    OSSemDbgListPtr = (OS_SEM *)0;
 800545a:	4b37      	ldr	r3, [pc, #220]	@ (8005538 <OSInit+0x1b8>)
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]
    OSSemQty        =           0u;
 8005460:	4b36      	ldr	r3, [pc, #216]	@ (800553c <OSInit+0x1bc>)
 8005462:	2200      	movs	r2, #0
 8005464:	801a      	strh	r2, [r3, #0]
        return;
    }
#endif


    OS_TaskInit(p_err);                                         /* Initialize the task manager                          */
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f002 fb86 	bl	8007b78 <OS_TaskInit>
    if (*p_err != OS_ERR_NONE) {
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d127      	bne.n	80054c4 <OSInit+0x144>
        return;
    }


#if (OS_CFG_TASK_IDLE_EN > 0u)
    OS_IdleTaskInit(p_err);                                     /* Initialize the Idle Task                             */
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f9cf 	bl	8005818 <OS_IdleTaskInit>
    if (*p_err != OS_ERR_NONE) {
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d122      	bne.n	80054c8 <OSInit+0x148>
    }
#endif


#if (OS_CFG_TICK_EN > 0u)
    OS_TickInit(p_err);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f002 fd08 	bl	8007e98 <OS_TickInit>
    if (*p_err != OS_ERR_NONE) {
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d11d      	bne.n	80054cc <OSInit+0x14c>
    }
#endif


#if (OS_CFG_STAT_TASK_EN > 0u)                                  /* Initialize the Statistic Task                        */
    OS_StatTaskInit(p_err);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f001 fff7 	bl	8007484 <OS_StatTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d118      	bne.n	80054d0 <OSInit+0x150>
    }
#endif


#if (OS_CFG_TMR_EN > 0u)                                        /* Initialize the Timer Manager module                  */
    OS_TmrInit(p_err);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f003 f8d6 	bl	8008650 <OS_TmrInit>
    if (*p_err != OS_ERR_NONE) {
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d113      	bne.n	80054d4 <OSInit+0x154>
    }
#endif


#if (OS_CFG_DBG_EN > 0u)
    OS_Dbg_Init();
 80054ac:	f000 fd1e 	bl	8005eec <OS_Dbg_Init>
#endif


    OSCfg_Init();
 80054b0:	f7ff ff5e 	bl	8005370 <OSCfg_Init>

    OSInitialized = OS_TRUE;                                    /* Kernel is initialized                                */
 80054b4:	4b22      	ldr	r3, [pc, #136]	@ (8005540 <OSInit+0x1c0>)
 80054b6:	2201      	movs	r2, #1
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	e00c      	b.n	80054d6 <OSInit+0x156>
        return;
 80054bc:	bf00      	nop
 80054be:	e00a      	b.n	80054d6 <OSInit+0x156>
        return;
 80054c0:	bf00      	nop
 80054c2:	e008      	b.n	80054d6 <OSInit+0x156>
        return;
 80054c4:	bf00      	nop
 80054c6:	e006      	b.n	80054d6 <OSInit+0x156>
        return;
 80054c8:	bf00      	nop
 80054ca:	e004      	b.n	80054d6 <OSInit+0x156>
        return;
 80054cc:	bf00      	nop
 80054ce:	e002      	b.n	80054d6 <OSInit+0x156>
        return;
 80054d0:	bf00      	nop
 80054d2:	e000      	b.n	80054d6 <OSInit+0x156>
        return;
 80054d4:	bf00      	nop
}
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	200019a0 	.word	0x200019a0
 80054e0:	200019a1 	.word	0x200019a1
 80054e4:	20001b5c 	.word	0x20001b5c
 80054e8:	20001d74 	.word	0x20001d74
 80054ec:	20001d78 	.word	0x20001d78
 80054f0:	200019ce 	.word	0x200019ce
 80054f4:	200019cf 	.word	0x200019cf
 80054f8:	08008ea8 	.word	0x08008ea8
 80054fc:	08008eac 	.word	0x08008eac
 8005500:	200018c4 	.word	0x200018c4
 8005504:	200018c8 	.word	0x200018c8
 8005508:	200018cc 	.word	0x200018cc
 800550c:	200018d0 	.word	0x200018d0
 8005510:	200018d4 	.word	0x200018d4
 8005514:	200018d8 	.word	0x200018d8
 8005518:	200018dc 	.word	0x200018dc
 800551c:	20001c42 	.word	0x20001c42
 8005520:	200019ac 	.word	0x200019ac
 8005524:	200019b0 	.word	0x200019b0
 8005528:	200019c8 	.word	0x200019c8
 800552c:	200019cc 	.word	0x200019cc
 8005530:	200019d4 	.word	0x200019d4
 8005534:	200019d8 	.word	0x200019d8
 8005538:	20001b60 	.word	0x20001b60
 800553c:	20001b64 	.word	0x20001b64
 8005540:	200019a2 	.word	0x200019a2

08005544 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 250 levels deep.
************************************************************************************************************************
*/

void  OSIntEnter (void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
    OS_TRACE_ISR_ENTER();

    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is OS running?                                       */
 8005548:	4b0a      	ldr	r3, [pc, #40]	@ (8005574 <OSIntEnter+0x30>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d10a      	bne.n	8005566 <OSIntEnter+0x22>
        return;                                                 /* No                                                   */
    }

    if (OSIntNestingCtr >= 250u) {                              /* Have we nested past 250 levels?                      */
 8005550:	4b09      	ldr	r3, [pc, #36]	@ (8005578 <OSIntEnter+0x34>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2bf9      	cmp	r3, #249	@ 0xf9
 8005556:	d808      	bhi.n	800556a <OSIntEnter+0x26>
        return;                                                 /* Yes                                                  */
    }

    OSIntNestingCtr++;                                          /* Increment ISR nesting level                          */
 8005558:	4b07      	ldr	r3, [pc, #28]	@ (8005578 <OSIntEnter+0x34>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	3301      	adds	r3, #1
 800555e:	b2da      	uxtb	r2, r3
 8005560:	4b05      	ldr	r3, [pc, #20]	@ (8005578 <OSIntEnter+0x34>)
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	e002      	b.n	800556c <OSIntEnter+0x28>
        return;                                                 /* No                                                   */
 8005566:	bf00      	nop
 8005568:	e000      	b.n	800556c <OSIntEnter+0x28>
        return;                                                 /* Yes                                                  */
 800556a:	bf00      	nop
}
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	200019a1 	.word	0x200019a1
 8005578:	200019a0 	.word	0x200019a0

0800557c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSIntExit (void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
    CPU_BOOLEAN  stk_status;
#endif
    CPU_SR_ALLOC();
 8005582:	2300      	movs	r3, #0
 8005584:	607b      	str	r3, [r7, #4]



    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Has the OS started?                                  */
 8005586:	4b2c      	ldr	r3, [pc, #176]	@ (8005638 <OSIntExit+0xbc>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d14f      	bne.n	800562e <OSIntExit+0xb2>
        OS_TRACE_ISR_EXIT();
        return;                                                 /* No                                                   */
    }

    CPU_INT_DIS();
 800558e:	2040      	movs	r0, #64	@ 0x40
 8005590:	f7fa fe1e 	bl	80001d0 <CPU_SR_Save>
 8005594:	6078      	str	r0, [r7, #4]
    if (OSIntNestingCtr == 0u) {                                /* Prevent OSIntNestingCtr from wrapping                */
 8005596:	4b29      	ldr	r3, [pc, #164]	@ (800563c <OSIntExit+0xc0>)
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d103      	bne.n	80055a6 <OSIntExit+0x2a>
        OS_TRACE_ISR_EXIT();
        CPU_INT_EN();
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7fa fe24 	bl	80001ec <CPU_SR_Restore>
        return;
 80055a4:	e044      	b.n	8005630 <OSIntExit+0xb4>
    }
    OSIntNestingCtr--;
 80055a6:	4b25      	ldr	r3, [pc, #148]	@ (800563c <OSIntExit+0xc0>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	4b23      	ldr	r3, [pc, #140]	@ (800563c <OSIntExit+0xc0>)
 80055b0:	701a      	strb	r2, [r3, #0]
    if (OSIntNestingCtr > 0u) {                                 /* ISRs still nested?                                   */
 80055b2:	4b22      	ldr	r3, [pc, #136]	@ (800563c <OSIntExit+0xc0>)
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <OSIntExit+0x46>
        OS_TRACE_ISR_EXIT();
        CPU_INT_EN();                                           /* Yes                                                  */
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fa fe16 	bl	80001ec <CPU_SR_Restore>
        return;
 80055c0:	e036      	b.n	8005630 <OSIntExit+0xb4>
    }

    if (OSSchedLockNestingCtr > 0u) {                           /* Scheduler still locked?                              */
 80055c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005640 <OSIntExit+0xc4>)
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <OSIntExit+0x56>
        OS_TRACE_ISR_EXIT();
        CPU_INT_EN();                                           /* Yes                                                  */
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fa fe0e 	bl	80001ec <CPU_SR_Restore>
        return;
 80055d0:	e02e      	b.n	8005630 <OSIntExit+0xb4>
        OSRedzoneHitHook((OS_TCB *)0);
    }
#endif
#endif

    OSPrioHighRdy   = OS_PrioGetHighest();                      /* Find highest priority                                */
 80055d2:	f001 fcf3 	bl	8006fbc <OS_PrioGetHighest>
 80055d6:	4603      	mov	r3, r0
 80055d8:	461a      	mov	r2, r3
 80055da:	4b1a      	ldr	r3, [pc, #104]	@ (8005644 <OSIntExit+0xc8>)
 80055dc:	701a      	strb	r2, [r3, #0]
#if (OS_CFG_TASK_IDLE_EN > 0u)
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;         /* Get highest priority task ready-to-run               */
 80055de:	4b19      	ldr	r3, [pc, #100]	@ (8005644 <OSIntExit+0xc8>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	4619      	mov	r1, r3
 80055e4:	4a18      	ldr	r2, [pc, #96]	@ (8005648 <OSIntExit+0xcc>)
 80055e6:	460b      	mov	r3, r1
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	440b      	add	r3, r1
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a16      	ldr	r2, [pc, #88]	@ (800564c <OSIntExit+0xd0>)
 80055f4:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                       /* Current task still the highest priority?             */
 80055f6:	4b15      	ldr	r3, [pc, #84]	@ (800564c <OSIntExit+0xd0>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b15      	ldr	r3, [pc, #84]	@ (8005650 <OSIntExit+0xd4>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d103      	bne.n	800560a <OSIntExit+0x8e>
        if (stk_status != OS_TRUE) {
            OSRedzoneHitHook(OSTCBCurPtr);
        }
#endif
        OS_TRACE_ISR_EXIT();
        CPU_INT_EN();
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fa fdf2 	bl	80001ec <CPU_SR_Restore>
        OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdyPtr);             /* Do this here because we don't execute OSIntCtxSw().  */
        return;
 8005608:	e012      	b.n	8005630 <OSIntExit+0xb4>
        }
    }
#endif

#if (OS_CFG_TASK_PROFILE_EN > 0u)
    OSTCBHighRdyPtr->CtxSwCtr++;                                /* Inc. # of context switches for this new task         */
 800560a:	4b10      	ldr	r3, [pc, #64]	@ (800564c <OSIntExit+0xd0>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005612:	3201      	adds	r2, #1
 8005614:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#endif
#if ((OS_CFG_TASK_PROFILE_EN > 0u) || (OS_CFG_DBG_EN > 0u))
    OSTaskCtxSwCtr++;                                           /* Keep track of the total number of ctx switches       */
 8005618:	4b0e      	ldr	r3, [pc, #56]	@ (8005654 <OSIntExit+0xd8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3301      	adds	r3, #1
 800561e:	4a0d      	ldr	r2, [pc, #52]	@ (8005654 <OSIntExit+0xd8>)
 8005620:	6013      	str	r3, [r2, #0]
    OS_TLS_TaskSw();
#endif

    OS_TRACE_ISR_EXIT_TO_SCHEDULER();

    OSIntCtxSw();                                               /* Perform interrupt level ctx switch                   */
 8005622:	f7fa fe3a 	bl	800029a <OSCtxSw>

    CPU_INT_EN();
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fa fde0 	bl	80001ec <CPU_SR_Restore>
 800562c:	e000      	b.n	8005630 <OSIntExit+0xb4>
        return;                                                 /* No                                                   */
 800562e:	bf00      	nop
}
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	200019a1 	.word	0x200019a1
 800563c:	200019a0 	.word	0x200019a0
 8005640:	20001b5c 	.word	0x20001b5c
 8005644:	200019cf 	.word	0x200019cf
 8005648:	200019dc 	.word	0x200019dc
 800564c:	20001d78 	.word	0x20001d78
 8005650:	20001d74 	.word	0x20001d74
 8005654:	20001c38 	.word	0x20001c38

08005658 <OSSched>:
* Note(s)    : 1) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSSched (void)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 800565e:	2300      	movs	r3, #0
 8005660:	607b      	str	r3, [r7, #4]


#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)                       /* Can't schedule when the kernel is stopped.           */
    if (OSRunning != OS_STATE_OS_RUNNING) {
 8005662:	4b24      	ldr	r3, [pc, #144]	@ (80056f4 <OSSched+0x9c>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d13b      	bne.n	80056e2 <OSSched+0x8a>
        return;
    }
#endif

    if (OSIntNestingCtr > 0u) {                                 /* ISRs still nested?                                   */
 800566a:	4b23      	ldr	r3, [pc, #140]	@ (80056f8 <OSSched+0xa0>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d139      	bne.n	80056e6 <OSSched+0x8e>
        return;                                                 /* Yes ... only schedule when no nested ISRs            */
    }

    if (OSSchedLockNestingCtr > 0u) {                           /* Scheduler locked?                                    */
 8005672:	4b22      	ldr	r3, [pc, #136]	@ (80056fc <OSSched+0xa4>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d137      	bne.n	80056ea <OSSched+0x92>
        return;                                                 /* Yes                                                  */
    }

    CPU_INT_DIS();
 800567a:	2040      	movs	r0, #64	@ 0x40
 800567c:	f7fa fda8 	bl	80001d0 <CPU_SR_Save>
 8005680:	6078      	str	r0, [r7, #4]
    OSPrioHighRdy   = OS_PrioGetHighest();                      /* Find the highest priority ready                      */
 8005682:	f001 fc9b 	bl	8006fbc <OS_PrioGetHighest>
 8005686:	4603      	mov	r3, r0
 8005688:	461a      	mov	r2, r3
 800568a:	4b1d      	ldr	r3, [pc, #116]	@ (8005700 <OSSched+0xa8>)
 800568c:	701a      	strb	r2, [r3, #0]
#if (OS_CFG_TASK_IDLE_EN > 0u)
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;         /* Get highest priority task ready-to-run               */
 800568e:	4b1c      	ldr	r3, [pc, #112]	@ (8005700 <OSSched+0xa8>)
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	4619      	mov	r1, r3
 8005694:	4a1b      	ldr	r2, [pc, #108]	@ (8005704 <OSSched+0xac>)
 8005696:	460b      	mov	r3, r1
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	440b      	add	r3, r1
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a19      	ldr	r2, [pc, #100]	@ (8005708 <OSSched+0xb0>)
 80056a4:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                       /* Current task still the highest priority?             */
 80056a6:	4b18      	ldr	r3, [pc, #96]	@ (8005708 <OSSched+0xb0>)
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	4b18      	ldr	r3, [pc, #96]	@ (800570c <OSSched+0xb4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d103      	bne.n	80056ba <OSSched+0x62>
        CPU_INT_EN();                                           /* Yes                                                  */
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fa fd9a 	bl	80001ec <CPU_SR_Restore>
        return;
 80056b8:	e018      	b.n	80056ec <OSSched+0x94>
#endif

    OS_TRACE_TASK_PREEMPT(OSTCBCurPtr);

#if (OS_CFG_TASK_PROFILE_EN > 0u)
    OSTCBHighRdyPtr->CtxSwCtr++;                                /* Inc. # of context switches to this task              */
 80056ba:	4b13      	ldr	r3, [pc, #76]	@ (8005708 <OSSched+0xb0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80056c2:	3201      	adds	r2, #1
 80056c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#endif

#if ((OS_CFG_TASK_PROFILE_EN > 0u) || (OS_CFG_DBG_EN > 0u))
    OSTaskCtxSwCtr++;                                           /* Increment context switch counter                     */
 80056c8:	4b11      	ldr	r3, [pc, #68]	@ (8005710 <OSSched+0xb8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	4a10      	ldr	r2, [pc, #64]	@ (8005710 <OSSched+0xb8>)
 80056d0:	6013      	str	r3, [r2, #0]
#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskSw();
#endif

#if (OS_CFG_TASK_IDLE_EN > 0u)
    OS_TASK_SW();                                               /* Perform a task level context switch                  */
 80056d2:	f7fa fde2 	bl	800029a <OSCtxSw>
    CPU_INT_EN();
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fa fd88 	bl	80001ec <CPU_SR_Restore>
        }
    }
#endif

#ifdef OS_TASK_SW_SYNC
    OS_TASK_SW_SYNC();
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	e004      	b.n	80056ec <OSSched+0x94>
        return;
 80056e2:	bf00      	nop
 80056e4:	e002      	b.n	80056ec <OSSched+0x94>
        return;                                                 /* Yes ... only schedule when no nested ISRs            */
 80056e6:	bf00      	nop
 80056e8:	e000      	b.n	80056ec <OSSched+0x94>
        return;                                                 /* Yes                                                  */
 80056ea:	bf00      	nop
#endif
}
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	200019a1 	.word	0x200019a1
 80056f8:	200019a0 	.word	0x200019a0
 80056fc:	20001b5c 	.word	0x20001b5c
 8005700:	200019cf 	.word	0x200019cf
 8005704:	200019dc 	.word	0x200019dc
 8005708:	20001d78 	.word	0x20001d78
 800570c:	20001d74 	.word	0x20001d74
 8005710:	20001c38 	.word	0x20001c38

08005714 <OSStart>:
*              2) OSStart() is not supposed to return.  If it does, that would be considered a fatal error.
************************************************************************************************************************
*/

void  OSStart (OS_ERR  *p_err)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    if (OSInitialized != OS_TRUE) {
 800571c:	4b26      	ldr	r3, [pc, #152]	@ (80057b8 <OSStart+0xa4>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d004      	beq.n	800572e <OSStart+0x1a>
       *p_err = OS_ERR_OS_NOT_INIT;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f645 628b 	movw	r2, #24203	@ 0x5e8b
 800572a:	801a      	strh	r2, [r3, #0]
        return;
 800572c:	e040      	b.n	80057b0 <OSStart+0x9c>
    }

    kernel_task_cnt = 0u;                                       /* Calculate the number of kernel tasks                 */
 800572e:	2300      	movs	r3, #0
 8005730:	81fb      	strh	r3, [r7, #14]
#if (OS_CFG_STAT_TASK_EN > 0u)
    kernel_task_cnt++;
 8005732:	89fb      	ldrh	r3, [r7, #14]
 8005734:	3301      	adds	r3, #1
 8005736:	81fb      	strh	r3, [r7, #14]
#endif
#if (OS_CFG_TMR_EN > 0u)
    kernel_task_cnt++;
 8005738:	89fb      	ldrh	r3, [r7, #14]
 800573a:	3301      	adds	r3, #1
 800573c:	81fb      	strh	r3, [r7, #14]
#endif
#if (OS_CFG_TASK_IDLE_EN > 0u)
    kernel_task_cnt++;
 800573e:	89fb      	ldrh	r3, [r7, #14]
 8005740:	3301      	adds	r3, #1
 8005742:	81fb      	strh	r3, [r7, #14]
#endif

    if (OSTaskQty <= kernel_task_cnt) {                         /* No application task created                          */
 8005744:	4b1d      	ldr	r3, [pc, #116]	@ (80057bc <OSStart+0xa8>)
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	89fa      	ldrh	r2, [r7, #14]
 800574a:	429a      	cmp	r2, r3
 800574c:	d304      	bcc.n	8005758 <OSStart+0x44>
        *p_err = OS_ERR_OS_NO_APP_TASK;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f645 628c 	movw	r2, #24204	@ 0x5e8c
 8005754:	801a      	strh	r2, [r3, #0]
         return;
 8005756:	e02b      	b.n	80057b0 <OSStart+0x9c>
    }

    if (OSRunning == OS_STATE_OS_STOPPED) {
 8005758:	4b19      	ldr	r3, [pc, #100]	@ (80057c0 <OSStart+0xac>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d123      	bne.n	80057a8 <OSStart+0x94>
        OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority                            */
 8005760:	f001 fc2c 	bl	8006fbc <OS_PrioGetHighest>
 8005764:	4603      	mov	r3, r0
 8005766:	461a      	mov	r2, r3
 8005768:	4b16      	ldr	r3, [pc, #88]	@ (80057c4 <OSStart+0xb0>)
 800576a:	701a      	strb	r2, [r3, #0]
        OSPrioCur       = OSPrioHighRdy;
 800576c:	4b15      	ldr	r3, [pc, #84]	@ (80057c4 <OSStart+0xb0>)
 800576e:	781a      	ldrb	r2, [r3, #0]
 8005770:	4b15      	ldr	r3, [pc, #84]	@ (80057c8 <OSStart+0xb4>)
 8005772:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8005774:	4b13      	ldr	r3, [pc, #76]	@ (80057c4 <OSStart+0xb0>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	4619      	mov	r1, r3
 800577a:	4a14      	ldr	r2, [pc, #80]	@ (80057cc <OSStart+0xb8>)
 800577c:	460b      	mov	r3, r1
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	440b      	add	r3, r1
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a11      	ldr	r2, [pc, #68]	@ (80057d0 <OSStart+0xbc>)
 800578a:	6013      	str	r3, [r2, #0]
        OSTCBCurPtr     = OSTCBHighRdyPtr;
 800578c:	4b10      	ldr	r3, [pc, #64]	@ (80057d0 <OSStart+0xbc>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a10      	ldr	r2, [pc, #64]	@ (80057d4 <OSStart+0xc0>)
 8005792:	6013      	str	r3, [r2, #0]
        OSRunning       = OS_STATE_OS_RUNNING;
 8005794:	4b0a      	ldr	r3, [pc, #40]	@ (80057c0 <OSStart+0xac>)
 8005796:	2201      	movs	r2, #1
 8005798:	701a      	strb	r2, [r3, #0]
        OSStartHighRdy();                                       /* Execute target specific code to start task           */
 800579a:	f7fa fd3f 	bl	800021c <OSStartHighRdy>
       *p_err           = OS_ERR_FATAL_RETURN;                  /* OSStart() is not supposed to return                  */
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f643 2299 	movw	r2, #15001	@ 0x3a99
 80057a4:	801a      	strh	r2, [r3, #0]
 80057a6:	e003      	b.n	80057b0 <OSStart+0x9c>
    } else {
       *p_err           = OS_ERR_OS_RUNNING;                    /* OS is already running                                */
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f645 628a 	movw	r2, #24202	@ 0x5e8a
 80057ae:	801a      	strh	r2, [r3, #0]
    }
}
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	200019a2 	.word	0x200019a2
 80057bc:	20001c40 	.word	0x20001c40
 80057c0:	200019a1 	.word	0x200019a1
 80057c4:	200019cf 	.word	0x200019cf
 80057c8:	200019ce 	.word	0x200019ce
 80057cc:	200019dc 	.word	0x200019dc
 80057d0:	20001d78 	.word	0x20001d78
 80057d4:	20001d74 	.word	0x20001d74

080057d8 <OS_IdleTask>:
*              3) This hook has been added to allow you to do such things as STOP the CPU to conserve power.
************************************************************************************************************************
*/
#if (OS_CFG_TASK_IDLE_EN > 0u)
void  OS_IdleTask (void  *p_arg)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_EN > 0u))
    CPU_SR_ALLOC();
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]

    (void)p_arg;                                                /* Prevent compiler warning for not using 'p_arg'       */

    for (;;) {
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_EN > 0u))
        CPU_CRITICAL_ENTER();
 80057e4:	2040      	movs	r0, #64	@ 0x40
 80057e6:	f7fa fcf3 	bl	80001d0 <CPU_SR_Save>
 80057ea:	60f8      	str	r0, [r7, #12]
#if (OS_CFG_DBG_EN > 0u)
        OSIdleTaskCtr++;
 80057ec:	4b08      	ldr	r3, [pc, #32]	@ (8005810 <OS_IdleTask+0x38>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3301      	adds	r3, #1
 80057f2:	4a07      	ldr	r2, [pc, #28]	@ (8005810 <OS_IdleTask+0x38>)
 80057f4:	6013      	str	r3, [r2, #0]
#endif
#if (OS_CFG_STAT_TASK_EN > 0u)
        OSStatTaskCtr++;
 80057f6:	4b07      	ldr	r3, [pc, #28]	@ (8005814 <OS_IdleTask+0x3c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3301      	adds	r3, #1
 80057fc:	4a05      	ldr	r2, [pc, #20]	@ (8005814 <OS_IdleTask+0x3c>)
 80057fe:	6013      	str	r3, [r2, #0]
#endif
        CPU_CRITICAL_EXIT();
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7fa fcf3 	bl	80001ec <CPU_SR_Restore>
#endif

#if (OS_CFG_APP_HOOKS_EN > 0u)
        OSIdleTaskHook();                                       /* Call user definable HOOK                             */
 8005806:	f7ff fc49 	bl	800509c <OSIdleTaskHook>
        CPU_CRITICAL_ENTER();
 800580a:	bf00      	nop
 800580c:	e7ea      	b.n	80057e4 <OS_IdleTask+0xc>
 800580e:	bf00      	nop
 8005810:	200018e0 	.word	0x200018e0
 8005814:	20001b6c 	.word	0x20001b6c

08005818 <OS_IdleTaskInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/
#if (OS_CFG_TASK_IDLE_EN > 0u)
void  OS_IdleTaskInit (OS_ERR  *p_err)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08c      	sub	sp, #48	@ 0x30
 800581c:	af0a      	add	r7, sp, #40	@ 0x28
 800581e:	6078      	str	r0, [r7, #4]
#if (OS_CFG_DBG_EN > 0u)
    OSIdleTaskCtr = 0u;
 8005820:	4b10      	ldr	r3, [pc, #64]	@ (8005864 <OS_IdleTaskInit+0x4c>)
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]
#endif
                                                                /* --------------- CREATE THE IDLE TASK --------------- */
    OSTaskCreate(&OSIdleTaskTCB,
 8005826:	4b10      	ldr	r3, [pc, #64]	@ (8005868 <OS_IdleTaskInit+0x50>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a10      	ldr	r2, [pc, #64]	@ (800586c <OS_IdleTaskInit+0x54>)
 800582c:	6812      	ldr	r2, [r2, #0]
 800582e:	4910      	ldr	r1, [pc, #64]	@ (8005870 <OS_IdleTaskInit+0x58>)
 8005830:	6809      	ldr	r1, [r1, #0]
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	9008      	str	r0, [sp, #32]
 8005836:	200b      	movs	r0, #11
 8005838:	9007      	str	r0, [sp, #28]
 800583a:	2000      	movs	r0, #0
 800583c:	9006      	str	r0, [sp, #24]
 800583e:	2000      	movs	r0, #0
 8005840:	9005      	str	r0, [sp, #20]
 8005842:	2000      	movs	r0, #0
 8005844:	9004      	str	r0, [sp, #16]
 8005846:	9103      	str	r1, [sp, #12]
 8005848:	9202      	str	r2, [sp, #8]
 800584a:	9301      	str	r3, [sp, #4]
 800584c:	231f      	movs	r3, #31
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	2300      	movs	r3, #0
 8005852:	4a08      	ldr	r2, [pc, #32]	@ (8005874 <OS_IdleTaskInit+0x5c>)
 8005854:	4908      	ldr	r1, [pc, #32]	@ (8005878 <OS_IdleTaskInit+0x60>)
 8005856:	4809      	ldr	r0, [pc, #36]	@ (800587c <OS_IdleTaskInit+0x64>)
 8005858:	f001 fe88 	bl	800756c <OSTaskCreate>
                  0u,
                  0u,
                 (void       *)0,
                 (OS_OPT_TASK_STK_CHK | (OS_OPT)(OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS)),
                  p_err);
}
 800585c:	bf00      	nop
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	200018e0 	.word	0x200018e0
 8005868:	08008e9c 	.word	0x08008e9c
 800586c:	08008ea0 	.word	0x08008ea0
 8005870:	08008ea4 	.word	0x08008ea4
 8005874:	080057d9 	.word	0x080057d9
 8005878:	08008df0 	.word	0x08008df0
 800587c:	200018e4 	.word	0x200018e4

08005880 <OS_Pend>:

void  OS_Pend (OS_PEND_OBJ  *p_obj,
               OS_TCB       *p_tcb,
               OS_STATE      pending_on,
               OS_TICK       timeout)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	603b      	str	r3, [r7, #0]
 800588c:	4613      	mov	r3, r2
 800588e:	71fb      	strb	r3, [r7, #7]
    OS_PEND_LIST  *p_pend_list;


    p_tcb->PendOn     = pending_on;                             /* Resource not available, wait until it is             */
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	79fa      	ldrb	r2, [r7, #7]
 8005894:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    p_tcb->PendStatus = OS_STATUS_PEND_OK;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    OS_TaskBlock(p_tcb,                                         /* Block the task and add it to the tick list if needed */
 80058a0:	6839      	ldr	r1, [r7, #0]
 80058a2:	68b8      	ldr	r0, [r7, #8]
 80058a4:	f000 fb00 	bl	8005ea8 <OS_TaskBlock>
                 timeout);

    if (p_obj != (OS_PEND_OBJ *)0) {                            /* Add the current task to the pend list ...            */
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <OS_Pend+0x44>
        p_pend_list             = &p_obj->PendList;             /* ... if there is an object to pend on                 */
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3308      	adds	r3, #8
 80058b2:	617b      	str	r3, [r7, #20]
        p_tcb->PendObjPtr =  p_obj;                             /* Save the pointer to the object pending on            */
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	635a      	str	r2, [r3, #52]	@ 0x34
        OS_PendListInsertPrio(p_pend_list,                      /* Insert in the pend list in priority order            */
 80058ba:	68b9      	ldr	r1, [r7, #8]
 80058bc:	6978      	ldr	r0, [r7, #20]
 80058be:	f000 f89f 	bl	8005a00 <OS_PendListInsertPrio>
 80058c2:	e002      	b.n	80058ca <OS_Pend+0x4a>
                              p_tcb);

    } else {
        p_tcb->PendObjPtr = (OS_PEND_OBJ *)0;                   /* If no object being pended on, clear the pend object  */
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2200      	movs	r2, #0
 80058c8:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#if (OS_CFG_DBG_EN > 0u)
    OS_PendDbgNameAdd(p_obj,
 80058ca:	68b9      	ldr	r1, [r7, #8]
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 f805 	bl	80058dc <OS_PendDbgNameAdd>
                      p_tcb);
#endif
}
 80058d2:	bf00      	nop
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <OS_PendDbgNameAdd>:
*/

#if (OS_CFG_DBG_EN > 0u)
void  OS_PendDbgNameAdd (OS_PEND_OBJ  *p_obj,
                         OS_TCB       *p_tcb)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb1;


    if (p_obj != (OS_PEND_OBJ *)0) {
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00f      	beq.n	800590c <OS_PendDbgNameAdd+0x30>
        p_tcb->DbgNamePtr =  p_obj->NamePtr;                    /* Task pending on this object ... save name in TCB     */
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        p_pend_list       = &p_obj->PendList;                   /* Find name of HP task pending on this object ...      */
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3308      	adds	r3, #8
 80058fa:	60fb      	str	r3, [r7, #12]
        p_tcb1            =  p_pend_list->HeadPtr;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60bb      	str	r3, [r7, #8]
        p_obj->DbgNamePtr =  p_tcb1->NamePtr;                   /* ... Save in object                                   */
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	61da      	str	r2, [r3, #28]
            default:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
                 break;
        }
    }
}
 800590a:	e016      	b.n	800593a <OS_PendDbgNameAdd+0x5e>
        switch (p_tcb->PendOn) {
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005912:	2b02      	cmp	r3, #2
 8005914:	d002      	beq.n	800591c <OS_PendDbgNameAdd+0x40>
 8005916:	2b07      	cmp	r3, #7
 8005918:	d005      	beq.n	8005926 <OS_PendDbgNameAdd+0x4a>
 800591a:	e009      	b.n	8005930 <OS_PendDbgNameAdd+0x54>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Q");
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	4a0a      	ldr	r2, [pc, #40]	@ (8005948 <OS_PendDbgNameAdd+0x6c>)
 8005920:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
                 break;
 8005924:	e009      	b.n	800593a <OS_PendDbgNameAdd+0x5e>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Sem");
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	4a08      	ldr	r2, [pc, #32]	@ (800594c <OS_PendDbgNameAdd+0x70>)
 800592a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
                 break;
 800592e:	e004      	b.n	800593a <OS_PendDbgNameAdd+0x5e>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	4a07      	ldr	r2, [pc, #28]	@ (8005950 <OS_PendDbgNameAdd+0x74>)
 8005934:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
                 break;
 8005938:	bf00      	nop
}
 800593a:	bf00      	nop
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	08008e04 	.word	0x08008e04
 800594c:	08008e0c 	.word	0x08008e0c
 8005950:	08008e18 	.word	0x08008e18

08005954 <OS_PendDbgNameRemove>:


void  OS_PendDbgNameRemove (OS_PEND_OBJ  *p_obj,
                            OS_TCB       *p_tcb)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb1;


    p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");              /* Remove name of object pended on for readied task     */
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	4a0e      	ldr	r2, [pc, #56]	@ (800599c <OS_PendDbgNameRemove+0x48>)
 8005962:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8

    if (p_obj != (OS_PEND_OBJ *)0) {
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d010      	beq.n	800598e <OS_PendDbgNameRemove+0x3a>
        p_pend_list = &p_obj->PendList;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3308      	adds	r3, #8
 8005970:	60fb      	str	r3, [r7, #12]
        p_tcb1      =  p_pend_list->HeadPtr;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60bb      	str	r3, [r7, #8]
        if (p_tcb1 != (OS_TCB *)0) {                            /* Find name of HP task pending on this object ...      */
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d004      	beq.n	8005988 <OS_PendDbgNameRemove+0x34>
            p_obj->DbgNamePtr = p_tcb1->NamePtr;                /* ... Save in object                                   */
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	61da      	str	r2, [r3, #28]
        } else {
            p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* Or no other task is pending on object                */
        }
    }
}
 8005986:	e002      	b.n	800598e <OS_PendDbgNameRemove+0x3a>
            p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* Or no other task is pending on object                */
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a04      	ldr	r2, [pc, #16]	@ (800599c <OS_PendDbgNameRemove+0x48>)
 800598c:	61da      	str	r2, [r3, #28]
}
 800598e:	bf00      	nop
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	08008e18 	.word	0x08008e18

080059a0 <OS_PendListChangePrio>:
*              2) It's assumed that the TCB contains the NEW priority in its .Prio field.
************************************************************************************************************************
*/

void  OS_PendListChangePrio (OS_TCB  *p_tcb)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_OBJ   *p_obj;

    p_obj       =  p_tcb->PendObjPtr;                           /* Get pointer to pend list                             */
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ac:	60fb      	str	r3, [r7, #12]
    p_pend_list = &p_obj->PendList;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3308      	adds	r3, #8
 80059b2:	60bb      	str	r3, [r7, #8]

    if (p_pend_list->HeadPtr->PendNextPtr != (OS_TCB *)0) {     /* Only move if multiple entries in the list            */
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <OS_PendListChangePrio+0x32>
            OS_PendListRemove(p_tcb);                           /* Remove entry from current position                   */
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f88a 	bl	8005ad8 <OS_PendListRemove>
            p_tcb->PendObjPtr = p_obj;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	635a      	str	r2, [r3, #52]	@ 0x34
            OS_PendListInsertPrio(p_pend_list,                  /* INSERT it back in the list                           */
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	68b8      	ldr	r0, [r7, #8]
 80059ce:	f000 f817 	bl	8005a00 <OS_PendListInsertPrio>
                                  p_tcb);
    }
}
 80059d2:	bf00      	nop
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <OS_PendListInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application must not call it.
************************************************************************************************************************
*/

void  OS_PendListInit (OS_PEND_LIST  *p_pend_list)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
    p_pend_list->HeadPtr    = (OS_TCB *)0;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	601a      	str	r2, [r3, #0]
    p_pend_list->TailPtr    = (OS_TCB *)0;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	605a      	str	r2, [r3, #4]
#if (OS_CFG_DBG_EN > 0u)
    p_pend_list->NbrEntries =           0u;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	811a      	strh	r2, [r3, #8]
#endif
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <OS_PendListInsertPrio>:
************************************************************************************************************************
*/

void  OS_PendListInsertPrio (OS_PEND_LIST  *p_pend_list,
                             OS_TCB        *p_tcb)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
    OS_PRIO   prio;
    OS_TCB   *p_tcb_next;


    prio  = p_tcb->Prio;                                        /* Obtain the priority of the task to insert            */
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005a10:	72fb      	strb	r3, [r7, #11]

    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* CASE 0: Insert when there are no entries             */
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10f      	bne.n	8005a3a <OS_PendListInsertPrio+0x3a>
#if (OS_CFG_DBG_EN > 0u)
        p_pend_list->NbrEntries = 1u;                           /* This is the first entry                              */
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	811a      	strh	r2, [r3, #8]
#endif
        p_tcb->PendNextPtr   = (OS_TCB *)0;                     /* No other OS_TCBs in the list                         */
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2200      	movs	r2, #0
 8005a24:	62da      	str	r2, [r3, #44]	@ 0x2c
        p_tcb->PendPrevPtr   = (OS_TCB *)0;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	631a      	str	r2, [r3, #48]	@ 0x30
        p_pend_list->HeadPtr =  p_tcb;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr =  p_tcb;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	605a      	str	r2, [r3, #4]
                p_tcb->PendPrevPtr->PendNextPtr = p_tcb;
                p_tcb_next->PendPrevPtr         = p_tcb;
            }
        }
    }
}
 8005a38:	e048      	b.n	8005acc <OS_PendListInsertPrio+0xcc>
        p_pend_list->NbrEntries++;                              /* CASE 1: One more OS_TCBs in the list                 */
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	891b      	ldrh	r3, [r3, #8]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	811a      	strh	r2, [r3, #8]
        p_tcb_next = p_pend_list->HeadPtr;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60fb      	str	r3, [r7, #12]
        while (p_tcb_next != (OS_TCB *)0) {                     /* Find the position where to insert                    */
 8005a4c:	e008      	b.n	8005a60 <OS_PendListInsertPrio+0x60>
            if (prio < p_tcb_next->Prio) {
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005a54:	7afa      	ldrb	r2, [r7, #11]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d306      	bcc.n	8005a68 <OS_PendListInsertPrio+0x68>
                p_tcb_next = p_tcb_next->PendNextPtr;           /* Not Found, follow the list                           */
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5e:	60fb      	str	r3, [r7, #12]
        while (p_tcb_next != (OS_TCB *)0) {                     /* Find the position where to insert                    */
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1f3      	bne.n	8005a4e <OS_PendListInsertPrio+0x4e>
 8005a66:	e000      	b.n	8005a6a <OS_PendListInsertPrio+0x6a>
                break;                                          /* Found! ... insert BEFORE current                     */
 8005a68:	bf00      	nop
        if (p_tcb_next == (OS_TCB *)0) {                        /* TCB to insert is lowest in priority                  */
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10e      	bne.n	8005a8e <OS_PendListInsertPrio+0x8e>
            p_tcb->PendNextPtr              = (OS_TCB *)0;      /* ... insert at the tail.                              */
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2200      	movs	r2, #0
 8005a74:	62da      	str	r2, [r3, #44]	@ 0x2c
            p_tcb->PendPrevPtr              =  p_pend_list->TailPtr;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	631a      	str	r2, [r3, #48]	@ 0x30
            p_tcb->PendPrevPtr->PendNextPtr =  p_tcb;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	62da      	str	r2, [r3, #44]	@ 0x2c
            p_pend_list->TailPtr            =  p_tcb;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	605a      	str	r2, [r3, #4]
}
 8005a8c:	e01e      	b.n	8005acc <OS_PendListInsertPrio+0xcc>
            if (p_tcb_next->PendPrevPtr == (OS_TCB *)0) {       /* Is new TCB highest priority?                         */
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10c      	bne.n	8005ab0 <OS_PendListInsertPrio+0xb0>
                p_tcb->PendNextPtr      =  p_tcb_next;          /* Yes, insert as new Head of list                      */
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
                p_tcb->PendPrevPtr      = (OS_TCB *)0;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	631a      	str	r2, [r3, #48]	@ 0x30
                p_tcb_next->PendPrevPtr =  p_tcb;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	631a      	str	r2, [r3, #48]	@ 0x30
                p_pend_list->HeadPtr    =  p_tcb;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	601a      	str	r2, [r3, #0]
}
 8005aae:	e00d      	b.n	8005acc <OS_PendListInsertPrio+0xcc>
                p_tcb->PendNextPtr              = p_tcb_next;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
                p_tcb->PendPrevPtr              = p_tcb_next->PendPrevPtr;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	631a      	str	r2, [r3, #48]	@ 0x30
                p_tcb->PendPrevPtr->PendNextPtr = p_tcb;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
                p_tcb_next->PendPrevPtr         = p_tcb;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005acc:	bf00      	nop
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <OS_PendListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PendListRemove (OS_TCB  *p_tcb)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_next;
    OS_TCB        *p_prev;


    if (p_tcb->PendObjPtr != (OS_PEND_OBJ *)0) {                /* Only remove if object has a pend list.               */
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d046      	beq.n	8005b76 <OS_PendListRemove+0x9e>
        p_pend_list = &p_tcb->PendObjPtr->PendList;             /* Get pointer to pend list                             */
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aec:	3308      	adds	r3, #8
 8005aee:	617b      	str	r3, [r7, #20]

                                                                /* Remove TCB from the pend list.                       */
        if (p_pend_list->HeadPtr->PendNextPtr == (OS_TCB *)0) {
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <OS_PendListRemove+0x30>
            p_pend_list->HeadPtr = (OS_TCB *)0;                 /* Only one entry in the pend list                      */
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2200      	movs	r2, #0
 8005afe:	601a      	str	r2, [r3, #0]
            p_pend_list->TailPtr = (OS_TCB *)0;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	2200      	movs	r2, #0
 8005b04:	605a      	str	r2, [r3, #4]
 8005b06:	e027      	b.n	8005b58 <OS_PendListRemove+0x80>
        } else if (p_tcb->PendPrevPtr == (OS_TCB *)0) {         /* See if entry is at the head of the list              */
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d109      	bne.n	8005b24 <OS_PendListRemove+0x4c>
            p_next               =  p_tcb->PendNextPtr;         /* Yes                                                  */
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b14:	60fb      	str	r3, [r7, #12]
            p_next->PendPrevPtr  = (OS_TCB *)0;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	631a      	str	r2, [r3, #48]	@ 0x30
            p_pend_list->HeadPtr =  p_next;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	e019      	b.n	8005b58 <OS_PendListRemove+0x80>

        } else if (p_tcb->PendNextPtr == (OS_TCB *)0) {         /* See if entry is at the tail of the list              */
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d109      	bne.n	8005b40 <OS_PendListRemove+0x68>
            p_prev               =  p_tcb->PendPrevPtr;         /* Yes                                                  */
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b30:	613b      	str	r3, [r7, #16]
            p_prev->PendNextPtr  = (OS_TCB *)0;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	2200      	movs	r2, #0
 8005b36:	62da      	str	r2, [r3, #44]	@ 0x2c
            p_pend_list->TailPtr =  p_prev;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	605a      	str	r2, [r3, #4]
 8005b3e:	e00b      	b.n	8005b58 <OS_PendListRemove+0x80>

        } else {
            p_prev               = p_tcb->PendPrevPtr;          /* Remove from inside the list                          */
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b44:	613b      	str	r3, [r7, #16]
            p_next               = p_tcb->PendNextPtr;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4a:	60fb      	str	r3, [r7, #12]
            p_prev->PendNextPtr  = p_next;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	62da      	str	r2, [r3, #44]	@ 0x2c
            p_next->PendPrevPtr  = p_prev;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	631a      	str	r2, [r3, #48]	@ 0x30
        }
#if (OS_CFG_DBG_EN > 0u)
        p_pend_list->NbrEntries--;                              /* One less entry in the list                           */
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	891b      	ldrh	r3, [r3, #8]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	811a      	strh	r2, [r3, #8]
#endif
        p_tcb->PendNextPtr = (OS_TCB      *)0;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	62da      	str	r2, [r3, #44]	@ 0x2c
        p_tcb->PendPrevPtr = (OS_TCB      *)0;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	631a      	str	r2, [r3, #48]	@ 0x30
        p_tcb->PendObjPtr  = (OS_PEND_OBJ *)0;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	635a      	str	r2, [r3, #52]	@ 0x34
    }
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
	...

08005b84 <OS_Post>:
void  OS_Post (OS_PEND_OBJ  *p_obj,
               OS_TCB       *p_tcb,
               void         *p_void,
               OS_MSG_SIZE   msg_size,
               CPU_TS        ts)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	807b      	strh	r3, [r7, #2]
#if (OS_MSG_EN == 0u)
    (void)p_void;
    (void)msg_size;
#endif

    switch (p_tcb->TaskState) {
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005b98:	2b07      	cmp	r3, #7
 8005b9a:	d862      	bhi.n	8005c62 <OS_Post+0xde>
 8005b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005ba4 <OS_Post+0x20>)
 8005b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba2:	bf00      	nop
 8005ba4:	08005c63 	.word	0x08005c63
 8005ba8:	08005c63 	.word	0x08005c63
 8005bac:	08005bc5 	.word	0x08005bc5
 8005bb0:	08005bc5 	.word	0x08005bc5
 8005bb4:	08005c63 	.word	0x08005c63
 8005bb8:	08005c63 	.word	0x08005c63
 8005bbc:	08005c17 	.word	0x08005c17
 8005bc0:	08005c17 	.word	0x08005c17
             break;

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
#if (OS_MSG_EN > 0u)
             p_tcb->MsgPtr  = p_void;                           /* Deposit message in OS_TCB of task waiting            */
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	659a      	str	r2, [r3, #88]	@ 0x58
             p_tcb->MsgSize = msg_size;                         /* ... assuming posting a message                       */
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	887a      	ldrh	r2, [r7, #2]
 8005bce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
#endif
#if (OS_CFG_TS_EN > 0u)
                 p_tcb->TS      = ts;
#endif
             if (p_obj != (OS_PEND_OBJ *)0) {
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <OS_Post+0x5a>
                 OS_PendListRemove(p_tcb);                      /* Remove task from pend list                           */
 8005bd8:	68b8      	ldr	r0, [r7, #8]
 8005bda:	f7ff ff7d 	bl	8005ad8 <OS_PendListRemove>
             }
#if (OS_CFG_DBG_EN > 0u)
             OS_PendDbgNameRemove(p_obj,
 8005bde:	68b9      	ldr	r1, [r7, #8]
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f7ff feb7 	bl	8005954 <OS_PendDbgNameRemove>
                                  p_tcb);
#endif
#if (OS_CFG_TICK_EN > 0u)
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d102      	bne.n	8005bf6 <OS_Post+0x72>
                 OS_TickListRemove(p_tcb);                      /* Remove from tick list                                */
 8005bf0:	68b8      	ldr	r0, [r7, #8]
 8005bf2:	f002 fa9d 	bl	8008130 <OS_TickListRemove>
             }
#endif
             OS_RdyListInsert(p_tcb);                           /* Insert the task in the ready list                    */
 8005bf6:	68b8      	ldr	r0, [r7, #8]
 8005bf8:	f000 f85e 	bl	8005cb8 <OS_RdyListInsert>
             p_tcb->TaskState  = OS_TASK_STATE_RDY;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
             p_tcb->PendStatus = OS_STATUS_PEND_OK;             /* Clear pend status                                    */
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;       /* Indicate no longer pending                           */
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
             break;
 8005c14:	e026      	b.n	8005c64 <OS_Post+0xe0>

        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
#if (OS_MSG_EN > 0u)
             p_tcb->MsgPtr  = p_void;                           /* Deposit message in OS_TCB of task waiting            */
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	659a      	str	r2, [r3, #88]	@ 0x58
             p_tcb->MsgSize = msg_size;                         /* ... assuming posting a message                       */
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	887a      	ldrh	r2, [r7, #2]
 8005c20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
#endif
#if (OS_CFG_TS_EN > 0u)
             p_tcb->TS      = ts;
#endif
             if (p_obj != (OS_PEND_OBJ *)0) {
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <OS_Post+0xac>
                 OS_PendListRemove(p_tcb);                      /* Remove from pend list                                */
 8005c2a:	68b8      	ldr	r0, [r7, #8]
 8005c2c:	f7ff ff54 	bl	8005ad8 <OS_PendListRemove>
             }
#if (OS_CFG_DBG_EN > 0u)
             OS_PendDbgNameRemove(p_obj,
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f7ff fe8e 	bl	8005954 <OS_PendDbgNameRemove>
                                  p_tcb);
#endif
#if (OS_CFG_TICK_EN > 0u)
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005c3e:	2b07      	cmp	r3, #7
 8005c40:	d102      	bne.n	8005c48 <OS_Post+0xc4>
                 OS_TickListRemove(p_tcb);                      /* Cancel any timeout                                   */
 8005c42:	68b8      	ldr	r0, [r7, #8]
 8005c44:	f002 fa74 	bl	8008130 <OS_TickListRemove>
             }
#endif
             p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2204      	movs	r2, #4
 8005c4c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
             p_tcb->PendStatus = OS_STATUS_PEND_OK;             /* Clear pend status                                    */
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;       /* Indicate no longer pending                           */
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
             break;
 8005c60:	e000      	b.n	8005c64 <OS_Post+0xe0>

        default:
                                                                /* Default case.                                        */
             break;
 8005c62:	bf00      	nop
    }
}
 8005c64:	bf00      	nop
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <OS_RdyListInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInit (void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
    CPU_INT32U    i;
    OS_RDY_LIST  *p_rdy_list;



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                    /* Initialize the array of OS_RDY_LIST at each priority */
 8005c72:	2300      	movs	r3, #0
 8005c74:	607b      	str	r3, [r7, #4]
 8005c76:	e013      	b.n	8005ca0 <OS_RdyListInit+0x34>
        p_rdy_list = &OSRdyList[i];
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4a0c      	ldr	r2, [pc, #48]	@ (8005cb4 <OS_RdyListInit+0x48>)
 8005c84:	4413      	add	r3, r2
 8005c86:	603b      	str	r3, [r7, #0]
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries =           0u;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	811a      	strh	r2, [r3, #8]
#endif
        p_rdy_list->HeadPtr    = (OS_TCB *)0;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2200      	movs	r2, #0
 8005c92:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    = (OS_TCB *)0;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2200      	movs	r2, #0
 8005c98:	605a      	str	r2, [r3, #4]
    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                    /* Initialize the array of OS_RDY_LIST at each priority */
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	607b      	str	r3, [r7, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b1f      	cmp	r3, #31
 8005ca4:	d9e8      	bls.n	8005c78 <OS_RdyListInit+0xc>
    }
}
 8005ca6:	bf00      	nop
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	200019dc 	.word	0x200019dc

08005cb8 <OS_RdyListInsert>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInsert (OS_TCB  *p_tcb)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
    OS_PrioInsert(p_tcb->Prio);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f001 f986 	bl	8006fd8 <OS_PrioInsert>
    if (p_tcb->Prio == OSPrioCur) {                             /* Are we readying a task at the same prio?             */
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 8005cd2:	4b07      	ldr	r3, [pc, #28]	@ (8005cf0 <OS_RdyListInsert+0x38>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d103      	bne.n	8005ce2 <OS_RdyListInsert+0x2a>
        OS_RdyListInsertTail(p_tcb);                            /* Yes, insert readied task at the end of the list      */
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f84c 	bl	8005d78 <OS_RdyListInsertTail>
    } else {
        OS_RdyListInsertHead(p_tcb);                            /* No,  insert readied task at the beginning of the list*/
    }

    OS_TRACE_TASK_READY(p_tcb);
}
 8005ce0:	e002      	b.n	8005ce8 <OS_RdyListInsert+0x30>
        OS_RdyListInsertHead(p_tcb);                            /* No,  insert readied task at the beginning of the list*/
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f806 	bl	8005cf4 <OS_RdyListInsertHead>
}
 8005ce8:	bf00      	nop
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	200019ce 	.word	0x200019ce

08005cf4 <OS_RdyListInsertHead>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertHead (OS_TCB  *p_tcb)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005d02:	461a      	mov	r2, r3
 8005d04:	4613      	mov	r3, r2
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	4413      	add	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4a19      	ldr	r2, [pc, #100]	@ (8005d74 <OS_RdyListInsertHead+0x80>)
 8005d0e:	4413      	add	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->HeadPtr == (OS_TCB *)0) {                   /* CASE 0: Insert when there are no entries             */
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10f      	bne.n	8005d3a <OS_RdyListInsertHead+0x46>
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries =           1u;                  /* This is the first entry                              */
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	811a      	strh	r2, [r3, #8]
#endif
        p_tcb->NextPtr         = (OS_TCB *)0;                   /* No other OS_TCBs in the list                         */
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	611a      	str	r2, [r3, #16]
        p_tcb->PrevPtr         = (OS_TCB *)0;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	615a      	str	r2, [r3, #20]
        p_rdy_list->HeadPtr    =  p_tcb;                        /* Both list pointers point to this OS_TCB              */
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    =  p_tcb;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	605a      	str	r2, [r3, #4]
        p_tcb->PrevPtr         = (OS_TCB *)0;
        p_tcb2                 =  p_rdy_list->HeadPtr;          /* Adjust old head of list's links                      */
        p_tcb2->PrevPtr        =  p_tcb;
        p_rdy_list->HeadPtr    =  p_tcb;
    }
}
 8005d38:	e015      	b.n	8005d66 <OS_RdyListInsertHead+0x72>
        p_rdy_list->NbrEntries++;                               /* One more OS_TCB in the list                          */
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	891b      	ldrh	r3, [r3, #8]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr         =  p_rdy_list->HeadPtr;          /* Adjust new OS_TCBs links                             */
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	611a      	str	r2, [r3, #16]
        p_tcb->PrevPtr         = (OS_TCB *)0;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	615a      	str	r2, [r3, #20]
        p_tcb2                 =  p_rdy_list->HeadPtr;          /* Adjust old head of list's links                      */
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	60bb      	str	r3, [r7, #8]
        p_tcb2->PrevPtr        =  p_tcb;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	615a      	str	r2, [r3, #20]
        p_rdy_list->HeadPtr    =  p_tcb;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	601a      	str	r2, [r3, #0]
}
 8005d66:	bf00      	nop
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	200019dc 	.word	0x200019dc

08005d78 <OS_RdyListInsertTail>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertTail (OS_TCB  *p_tcb)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005d86:	461a      	mov	r2, r3
 8005d88:	4613      	mov	r3, r2
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	4413      	add	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4a18      	ldr	r2, [pc, #96]	@ (8005df4 <OS_RdyListInsertTail+0x7c>)
 8005d92:	4413      	add	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->HeadPtr == (OS_TCB *)0) {                   /* CASE 0: Insert when there are no entries             */
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10f      	bne.n	8005dbe <OS_RdyListInsertTail+0x46>
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries  =           1u;                 /* This is the first entry                              */
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2201      	movs	r2, #1
 8005da2:	811a      	strh	r2, [r3, #8]
#endif
        p_tcb->NextPtr          = (OS_TCB *)0;                  /* No other OS_TCBs in the list                         */
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	611a      	str	r2, [r3, #16]
        p_tcb->PrevPtr          = (OS_TCB *)0;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	615a      	str	r2, [r3, #20]
        p_rdy_list->HeadPtr     =  p_tcb;                       /* Both list pointers point to this OS_TCB              */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr     =  p_tcb;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	605a      	str	r2, [r3, #4]
        p_tcb2                  =  p_rdy_list->TailPtr;
        p_tcb->PrevPtr          =  p_tcb2;
        p_tcb2->NextPtr         =  p_tcb;                       /* Adjust old tail of list's links                      */
        p_rdy_list->TailPtr     =  p_tcb;
    }
}
 8005dbc:	e014      	b.n	8005de8 <OS_RdyListInsertTail+0x70>
        p_rdy_list->NbrEntries++;                               /* One more OS_TCB in the list                          */
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	891b      	ldrh	r3, [r3, #8]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB *)0;                  /* Adjust new OS_TCBs links                             */
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	611a      	str	r2, [r3, #16]
        p_tcb2                  =  p_rdy_list->TailPtr;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	60bb      	str	r3, [r7, #8]
        p_tcb->PrevPtr          =  p_tcb2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	615a      	str	r2, [r3, #20]
        p_tcb2->NextPtr         =  p_tcb;                       /* Adjust old tail of list's links                      */
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	611a      	str	r2, [r3, #16]
        p_rdy_list->TailPtr     =  p_tcb;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	605a      	str	r2, [r3, #4]
}
 8005de8:	bf00      	nop
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	200019dc 	.word	0x200019dc

08005df8 <OS_RdyListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListRemove (OS_TCB  *p_tcb)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
    OS_TCB       *p_tcb1;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005e06:	461a      	mov	r2, r3
 8005e08:	4613      	mov	r3, r2
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4a24      	ldr	r2, [pc, #144]	@ (8005ea4 <OS_RdyListRemove+0xac>)
 8005e12:	4413      	add	r3, r2
 8005e14:	617b      	str	r3, [r7, #20]
    p_tcb1     = p_tcb->PrevPtr;                                /* Point to next and previous OS_TCB in the list        */
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	613b      	str	r3, [r7, #16]
    p_tcb2     = p_tcb->NextPtr;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {                                /* Was the OS_TCB to remove at the head?                */
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d11f      	bne.n	8005e68 <OS_RdyListRemove+0x70>
        if (p_tcb2 == (OS_TCB *)0) {                            /* Yes, was it the only OS_TCB?                         */
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10f      	bne.n	8005e4e <OS_RdyListRemove+0x56>
#if (OS_CFG_DBG_EN > 0u)
            p_rdy_list->NbrEntries =           0u;              /* Yes, no more entries                                 */
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2200      	movs	r2, #0
 8005e32:	811a      	strh	r2, [r3, #8]
#endif
            p_rdy_list->HeadPtr    = (OS_TCB *)0;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	2200      	movs	r2, #0
 8005e38:	601a      	str	r2, [r3, #0]
            p_rdy_list->TailPtr    = (OS_TCB *)0;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	605a      	str	r2, [r3, #4]
            OS_PrioRemove(p_tcb->Prio);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005e46:	4618      	mov	r0, r3
 8005e48:	f001 f8de 	bl	8007008 <OS_PrioRemove>
 8005e4c:	e01f      	b.n	8005e8e <OS_RdyListRemove+0x96>
        } else {
#if (OS_CFG_DBG_EN > 0u)
            p_rdy_list->NbrEntries--;                           /* No,  one less entry                                  */
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	891b      	ldrh	r3, [r3, #8]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	811a      	strh	r2, [r3, #8]
#endif
            p_tcb2->PrevPtr     = (OS_TCB *)0;                  /* adjust back link of new list head                    */
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	615a      	str	r2, [r3, #20]
            p_rdy_list->HeadPtr =  p_tcb2;                      /* adjust OS_RDY_LIST's new head                        */
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	e012      	b.n	8005e8e <OS_RdyListRemove+0x96>
        }
    } else {
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries--;                               /* No,  one less entry                                  */
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	891b      	ldrh	r3, [r3, #8]
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	811a      	strh	r2, [r3, #8]
#endif
        p_tcb1->NextPtr = p_tcb2;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	611a      	str	r2, [r3, #16]
        if (p_tcb2 == (OS_TCB *)0) {
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d103      	bne.n	8005e88 <OS_RdyListRemove+0x90>
            p_rdy_list->TailPtr = p_tcb1;                       /* Removing the TCB at the tail, adj the tail ptr       */
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	605a      	str	r2, [r3, #4]
 8005e86:	e002      	b.n	8005e8e <OS_RdyListRemove+0x96>
        } else {
            p_tcb2->PrevPtr     = p_tcb1;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	615a      	str	r2, [r3, #20]
        }
    }
    p_tcb->PrevPtr = (OS_TCB *)0;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	615a      	str	r2, [r3, #20]
    p_tcb->NextPtr = (OS_TCB *)0;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	611a      	str	r2, [r3, #16]

    OS_TRACE_TASK_SUSPENDED(p_tcb);
}
 8005e9a:	bf00      	nop
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	200019dc 	.word	0x200019dc

08005ea8 <OS_TaskBlock>:
************************************************************************************************************************
*/

void  OS_TaskBlock (OS_TCB   *p_tcb,
                    OS_TICK   timeout)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]

    elapsed = OS_DynTickGet();
#endif

#if (OS_CFG_TICK_EN > 0u)
    if (timeout > 0u) {                                         /* Add task to tick list if timeout non zero            */
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00b      	beq.n	8005ed0 <OS_TaskBlock+0x28>
#if (OS_CFG_DYN_TICK_EN > 0u)
        (void)OS_TickListInsert(p_tcb, elapsed, (OSTickCtr + elapsed), timeout);
#else
        (void)OS_TickListInsert(p_tcb,      0u,             OSTickCtr, timeout);
 8005eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee8 <OS_TaskBlock+0x40>)
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f002 f823 	bl	8007f0c <OS_TickListInsert>
#endif
        p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2203      	movs	r2, #3
 8005eca:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8005ece:	e003      	b.n	8005ed8 <OS_TaskBlock+0x30>
    } else {
        p_tcb->TaskState = OS_TASK_STATE_PEND;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
#else
    (void)timeout;
    p_tcb->TaskState = OS_TASK_STATE_PEND;
#endif
    OS_RdyListRemove(p_tcb);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff ff8d 	bl	8005df8 <OS_RdyListRemove>
}
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20001c44 	.word	0x20001c44

08005eec <OS_Dbg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OS_Dbg_Init (void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
    CPU_INT08U const * volatile  p_temp08;
    CPU_INT16U const * volatile  p_temp16;
    CPU_INT32U const * volatile  p_temp32;


    p_temp08 = (CPU_INT08U const *)&OSDbg_DbgEn;
 8005ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800601c <OS_Dbg_Init+0x130>)
 8005ef4:	60fb      	str	r3, [r7, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_DataSize;
 8005ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8006020 <OS_Dbg_Init+0x134>)
 8005ef8:	607b      	str	r3, [r7, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_ArgChkEn;
 8005efa:	4b4a      	ldr	r3, [pc, #296]	@ (8006024 <OS_Dbg_Init+0x138>)
 8005efc:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_AppHooksEn;
 8005efe:	4b4a      	ldr	r3, [pc, #296]	@ (8006028 <OS_Dbg_Init+0x13c>)
 8005f00:	60fb      	str	r3, [r7, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_EndiannessTest;
 8005f02:	4b4a      	ldr	r3, [pc, #296]	@ (800602c <OS_Dbg_Init+0x140>)
 8005f04:	607b      	str	r3, [r7, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_CalledFromISRChkEn;
 8005f06:	4b4a      	ldr	r3, [pc, #296]	@ (8006030 <OS_Dbg_Init+0x144>)
 8005f08:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrp;
 8005f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8006034 <OS_Dbg_Init+0x148>)
 8005f0c:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagEn;
 8005f0e:	4b4a      	ldr	r3, [pc, #296]	@ (8006038 <OS_Dbg_Init+0x14c>)
 8005f10:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_FLAG_EN > 0u)
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagDelEn;
 8005f12:	4b4a      	ldr	r3, [pc, #296]	@ (800603c <OS_Dbg_Init+0x150>)
 8005f14:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagModeClrEn;
 8005f16:	4b4a      	ldr	r3, [pc, #296]	@ (8006040 <OS_Dbg_Init+0x154>)
 8005f18:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagPendAbortEn;
 8005f1a:	4b4a      	ldr	r3, [pc, #296]	@ (8006044 <OS_Dbg_Init+0x158>)
 8005f1c:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrpSize;
 8005f1e:	4b4a      	ldr	r3, [pc, #296]	@ (8006048 <OS_Dbg_Init+0x15c>)
 8005f20:	60bb      	str	r3, [r7, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagWidth;
 8005f22:	4b4a      	ldr	r3, [pc, #296]	@ (800604c <OS_Dbg_Init+0x160>)
 8005f24:	60bb      	str	r3, [r7, #8]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mem;
 8005f26:	4b4a      	ldr	r3, [pc, #296]	@ (8006050 <OS_Dbg_Init+0x164>)
 8005f28:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MemEn;
 8005f2a:	4b4a      	ldr	r3, [pc, #296]	@ (8006054 <OS_Dbg_Init+0x168>)
 8005f2c:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_MEM_EN > 0u)
    p_temp16 = (CPU_INT16U const *)&OSDbg_MemSize;
 8005f2e:	4b4a      	ldr	r3, [pc, #296]	@ (8006058 <OS_Dbg_Init+0x16c>)
 8005f30:	60bb      	str	r3, [r7, #8]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_MsgEn;
 8005f32:	4b4a      	ldr	r3, [pc, #296]	@ (800605c <OS_Dbg_Init+0x170>)
 8005f34:	60fb      	str	r3, [r7, #12]
#if (OS_MSG_EN > 0u)
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgSize;
 8005f36:	4b4a      	ldr	r3, [pc, #296]	@ (8006060 <OS_Dbg_Init+0x174>)
 8005f38:	60bb      	str	r3, [r7, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgPoolSize;
 8005f3a:	4b4a      	ldr	r3, [pc, #296]	@ (8006064 <OS_Dbg_Init+0x178>)
 8005f3c:	60bb      	str	r3, [r7, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgQSize;
 8005f3e:	4b4a      	ldr	r3, [pc, #296]	@ (8006068 <OS_Dbg_Init+0x17c>)
 8005f40:	60bb      	str	r3, [r7, #8]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mutex;
 8005f42:	4b4a      	ldr	r3, [pc, #296]	@ (800606c <OS_Dbg_Init+0x180>)
 8005f44:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexEn;
 8005f46:	4b4a      	ldr	r3, [pc, #296]	@ (8006070 <OS_Dbg_Init+0x184>)
 8005f48:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_MUTEX_EN > 0u)
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexDelEn;
 8005f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8006074 <OS_Dbg_Init+0x188>)
 8005f4c:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexPendAbortEn;
 8005f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8006078 <OS_Dbg_Init+0x18c>)
 8005f50:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MutexSize;
 8005f52:	4b4a      	ldr	r3, [pc, #296]	@ (800607c <OS_Dbg_Init+0x190>)
 8005f54:	60bb      	str	r3, [r7, #8]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_ObjTypeChkEn;
 8005f56:	4b4a      	ldr	r3, [pc, #296]	@ (8006080 <OS_Dbg_Init+0x194>)
 8005f58:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_ObjCreatedChkEn;
 8005f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8006084 <OS_Dbg_Init+0x198>)
 8005f5c:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PendListSize;
 8005f5e:	4b4a      	ldr	r3, [pc, #296]	@ (8006088 <OS_Dbg_Init+0x19c>)
 8005f60:	60bb      	str	r3, [r7, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendObjSize;
 8005f62:	4b4a      	ldr	r3, [pc, #296]	@ (800608c <OS_Dbg_Init+0x1a0>)
 8005f64:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioMax;
 8005f66:	4b4a      	ldr	r3, [pc, #296]	@ (8006090 <OS_Dbg_Init+0x1a4>)
 8005f68:	60bb      	str	r3, [r7, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioTblSize;
 8005f6a:	4b4a      	ldr	r3, [pc, #296]	@ (8006094 <OS_Dbg_Init+0x1a8>)
 8005f6c:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PtrSize;
 8005f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8006098 <OS_Dbg_Init+0x1ac>)
 8005f70:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Q;
 8005f72:	4b4a      	ldr	r3, [pc, #296]	@ (800609c <OS_Dbg_Init+0x1b0>)
 8005f74:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QEn;
 8005f76:	4b4a      	ldr	r3, [pc, #296]	@ (80060a0 <OS_Dbg_Init+0x1b4>)
 8005f78:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_Q_EN > 0u)
    p_temp08 = (CPU_INT08U const *)&OSDbg_QDelEn;
 8005f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80060a4 <OS_Dbg_Init+0x1b8>)
 8005f7c:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QFlushEn;
 8005f7e:	4b4a      	ldr	r3, [pc, #296]	@ (80060a8 <OS_Dbg_Init+0x1bc>)
 8005f80:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QPendAbortEn;
 8005f82:	4b4a      	ldr	r3, [pc, #296]	@ (80060ac <OS_Dbg_Init+0x1c0>)
 8005f84:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_QSize;
 8005f86:	4b4a      	ldr	r3, [pc, #296]	@ (80060b0 <OS_Dbg_Init+0x1c4>)
 8005f88:	60bb      	str	r3, [r7, #8]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_SchedRoundRobinEn;
 8005f8a:	4b4a      	ldr	r3, [pc, #296]	@ (80060b4 <OS_Dbg_Init+0x1c8>)
 8005f8c:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Sem;
 8005f8e:	4b4a      	ldr	r3, [pc, #296]	@ (80060b8 <OS_Dbg_Init+0x1cc>)
 8005f90:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemEn;
 8005f92:	4b4a      	ldr	r3, [pc, #296]	@ (80060bc <OS_Dbg_Init+0x1d0>)
 8005f94:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_SEM_EN > 0u)
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemDelEn;
 8005f96:	4b4a      	ldr	r3, [pc, #296]	@ (80060c0 <OS_Dbg_Init+0x1d4>)
 8005f98:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemPendAbortEn;
 8005f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80060c4 <OS_Dbg_Init+0x1d8>)
 8005f9c:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSetEn;
 8005f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80060c8 <OS_Dbg_Init+0x1dc>)
 8005fa0:	60bb      	str	r3, [r7, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSize;
 8005fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80060cc <OS_Dbg_Init+0x1e0>)
 8005fa4:	60bb      	str	r3, [r7, #8]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_RdyList;
 8005fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80060d0 <OS_Dbg_Init+0x1e4>)
 8005fa8:	60bb      	str	r3, [r7, #8]
    p_temp32 = (CPU_INT32U const *)&OSDbg_RdyListSize;
 8005faa:	4b4a      	ldr	r3, [pc, #296]	@ (80060d4 <OS_Dbg_Init+0x1e8>)
 8005fac:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_StkWidth;
 8005fae:	4b4a      	ldr	r3, [pc, #296]	@ (80060d8 <OS_Dbg_Init+0x1ec>)
 8005fb0:	60bb      	str	r3, [r7, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskEn;
 8005fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80060dc <OS_Dbg_Init+0x1f0>)
 8005fb4:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskStkChkEn;
 8005fb6:	4b4a      	ldr	r3, [pc, #296]	@ (80060e0 <OS_Dbg_Init+0x1f4>)
 8005fb8:	60fb      	str	r3, [r7, #12]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskChangePrioEn;
 8005fba:	4b4a      	ldr	r3, [pc, #296]	@ (80060e4 <OS_Dbg_Init+0x1f8>)
 8005fbc:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskDelEn;
 8005fbe:	4b4a      	ldr	r3, [pc, #296]	@ (80060e8 <OS_Dbg_Init+0x1fc>)
 8005fc0:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQEn;
 8005fc2:	4b4a      	ldr	r3, [pc, #296]	@ (80060ec <OS_Dbg_Init+0x200>)
 8005fc4:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQPendAbortEn;
 8005fc6:	4b4a      	ldr	r3, [pc, #296]	@ (80060f0 <OS_Dbg_Init+0x204>)
 8005fc8:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskProfileEn;
 8005fca:	4b4a      	ldr	r3, [pc, #296]	@ (80060f4 <OS_Dbg_Init+0x208>)
 8005fcc:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TaskRegTblSize;
 8005fce:	4b4a      	ldr	r3, [pc, #296]	@ (80060f8 <OS_Dbg_Init+0x20c>)
 8005fd0:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSemPendAbortEn;
 8005fd2:	4b4a      	ldr	r3, [pc, #296]	@ (80060fc <OS_Dbg_Init+0x210>)
 8005fd4:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSuspendEn;
 8005fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8006100 <OS_Dbg_Init+0x214>)
 8005fd8:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TCBSize;
 8005fda:	4b4a      	ldr	r3, [pc, #296]	@ (8006104 <OS_Dbg_Init+0x218>)
 8005fdc:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TickListSize;
 8005fde:	4b4a      	ldr	r3, [pc, #296]	@ (8006108 <OS_Dbg_Init+0x21c>)
 8005fe0:	60bb      	str	r3, [r7, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyHMSMEn;
 8005fe2:	4b4a      	ldr	r3, [pc, #296]	@ (800610c <OS_Dbg_Init+0x220>)
 8005fe4:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyResumeEn;
 8005fe6:	4b4a      	ldr	r3, [pc, #296]	@ (8006110 <OS_Dbg_Init+0x224>)
 8005fe8:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TLS_TblSize;
 8005fea:	4b4a      	ldr	r3, [pc, #296]	@ (8006114 <OS_Dbg_Init+0x228>)
 8005fec:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Tmr;
 8005fee:	4b4a      	ldr	r3, [pc, #296]	@ (8006118 <OS_Dbg_Init+0x22c>)
 8005ff0:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrEn;
 8005ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800611c <OS_Dbg_Init+0x230>)
 8005ff4:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_TMR_EN > 0u)
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrDelEn;
 8005ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8006120 <OS_Dbg_Init+0x234>)
 8005ff8:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TmrSize;
 8005ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8006124 <OS_Dbg_Init+0x238>)
 8005ffc:	60bb      	str	r3, [r7, #8]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_VersionNbr;
 8005ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8006128 <OS_Dbg_Init+0x23c>)
 8006000:	60bb      	str	r3, [r7, #8]

    p_temp08 = p_temp08;                                     /* Prevent compiler warning for not using 'p_temp'        */
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	60fb      	str	r3, [r7, #12]
    p_temp16 = p_temp16;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	60bb      	str	r3, [r7, #8]
    p_temp32 = p_temp32;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	607b      	str	r3, [r7, #4]
}
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	08008ee8 	.word	0x08008ee8
 8006020:	08009040 	.word	0x08009040
 8006024:	08008ee9 	.word	0x08008ee9
 8006028:	08008eea 	.word	0x08008eea
 800602c:	08008eec 	.word	0x08008eec
 8006030:	08008ef0 	.word	0x08008ef0
 8006034:	08008ef4 	.word	0x08008ef4
 8006038:	08008ef1 	.word	0x08008ef1
 800603c:	08008f18 	.word	0x08008f18
 8006040:	08008f19 	.word	0x08008f19
 8006044:	08008f1a 	.word	0x08008f1a
 8006048:	08008f1c 	.word	0x08008f1c
 800604c:	08008f1e 	.word	0x08008f1e
 8006050:	08008f20 	.word	0x08008f20
 8006054:	08008f40 	.word	0x08008f40
 8006058:	08008f42 	.word	0x08008f42
 800605c:	08008f44 	.word	0x08008f44
 8006060:	08008f46 	.word	0x08008f46
 8006064:	08008f48 	.word	0x08008f48
 8006068:	08008f4a 	.word	0x08008f4a
 800606c:	08008f4c 	.word	0x08008f4c
 8006070:	08008f78 	.word	0x08008f78
 8006074:	08008f79 	.word	0x08008f79
 8006078:	08008f7a 	.word	0x08008f7a
 800607c:	08008f7c 	.word	0x08008f7c
 8006080:	08008f7e 	.word	0x08008f7e
 8006084:	08008f7f 	.word	0x08008f7f
 8006088:	08008f80 	.word	0x08008f80
 800608c:	08008f82 	.word	0x08008f82
 8006090:	08008f84 	.word	0x08008f84
 8006094:	08008f86 	.word	0x08008f86
 8006098:	08008f88 	.word	0x08008f88
 800609c:	08008f8c 	.word	0x08008f8c
 80060a0:	08008fbc 	.word	0x08008fbc
 80060a4:	08008fbd 	.word	0x08008fbd
 80060a8:	08008fbe 	.word	0x08008fbe
 80060ac:	08008fbf 	.word	0x08008fbf
 80060b0:	08008fc0 	.word	0x08008fc0
 80060b4:	08008fc2 	.word	0x08008fc2
 80060b8:	08008fc4 	.word	0x08008fc4
 80060bc:	08008fe8 	.word	0x08008fe8
 80060c0:	08008fe9 	.word	0x08008fe9
 80060c4:	08008fea 	.word	0x08008fea
 80060c8:	08008feb 	.word	0x08008feb
 80060cc:	08008fec 	.word	0x08008fec
 80060d0:	08008fee 	.word	0x08008fee
 80060d4:	08008ff0 	.word	0x08008ff0
 80060d8:	08008ff4 	.word	0x08008ff4
 80060dc:	08008ff5 	.word	0x08008ff5
 80060e0:	08008ff6 	.word	0x08008ff6
 80060e4:	08008ff7 	.word	0x08008ff7
 80060e8:	08008ff8 	.word	0x08008ff8
 80060ec:	08008ff9 	.word	0x08008ff9
 80060f0:	08008ffa 	.word	0x08008ffa
 80060f4:	08008ffb 	.word	0x08008ffb
 80060f8:	08008ffc 	.word	0x08008ffc
 80060fc:	08008ffe 	.word	0x08008ffe
 8006100:	08008fff 	.word	0x08008fff
 8006104:	08009000 	.word	0x08009000
 8006108:	08009002 	.word	0x08009002
 800610c:	08009004 	.word	0x08009004
 8006110:	08009005 	.word	0x08009005
 8006114:	08009006 	.word	0x08009006
 8006118:	08009008 	.word	0x08009008
 800611c:	08009038 	.word	0x08009038
 8006120:	08009039 	.word	0x08009039
 8006124:	0800903a 	.word	0x0800903a
 8006128:	0800903c 	.word	0x0800903c

0800612c <OSFlagCreate>:

void  OSFlagCreate (OS_FLAG_GRP  *p_grp,
                    CPU_CHAR     *p_name,
                    OS_FLAGS      flags,
                    OS_ERR       *p_err)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	603b      	str	r3, [r7, #0]
    CPU_SR_ALLOC();
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* See if called from ISR ...                           */
 800613e:	4b21      	ldr	r3, [pc, #132]	@ (80061c4 <OSFlagCreate+0x98>)
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d004      	beq.n	8006150 <OSFlagCreate+0x24>
       *p_err = OS_ERR_CREATE_ISR;                              /* ... can't CREATE from an ISR                         */
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	f642 62e1 	movw	r2, #12001	@ 0x2ee1
 800614c:	801a      	strh	r2, [r3, #0]
        return;
 800614e:	e035      	b.n	80061bc <OSFlagCreate+0x90>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_grp == (OS_FLAG_GRP *)0) {                            /* Validate 'p_grp'                                     */
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d104      	bne.n	8006160 <OSFlagCreate+0x34>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 800615c:	801a      	strh	r2, [r3, #0]
        return;
 800615e:	e02d      	b.n	80061bc <OSFlagCreate+0x90>
    }
#endif

    CPU_CRITICAL_ENTER();
 8006160:	2040      	movs	r0, #64	@ 0x40
 8006162:	f7fa f835 	bl	80001d0 <CPU_SR_Save>
 8006166:	6178      	str	r0, [r7, #20]
#if (OS_OBJ_TYPE_REQ > 0u)
#if (OS_CFG_OBJ_CREATED_CHK_EN > 0u)
    if (p_grp->Type == OS_OBJ_TYPE_FLAG) {
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a16      	ldr	r2, [pc, #88]	@ (80061c8 <OSFlagCreate+0x9c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d107      	bne.n	8006182 <OSFlagCreate+0x56>
        CPU_CRITICAL_EXIT();
 8006172:	6978      	ldr	r0, [r7, #20]
 8006174:	f7fa f83a 	bl	80001ec <CPU_SR_Restore>
        *p_err = OS_ERR_OBJ_CREATED;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	f645 52c1 	movw	r2, #24001	@ 0x5dc1
 800617e:	801a      	strh	r2, [r3, #0]
        return;
 8006180:	e01c      	b.n	80061bc <OSFlagCreate+0x90>
    }
#endif
    p_grp->Type    = OS_OBJ_TYPE_FLAG;                          /* Set to event flag group type                         */
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4a10      	ldr	r2, [pc, #64]	@ (80061c8 <OSFlagCreate+0x9c>)
 8006186:	601a      	str	r2, [r3, #0]
#endif
#if (OS_CFG_DBG_EN > 0u)
    p_grp->NamePtr = p_name;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	605a      	str	r2, [r3, #4]
#else
    (void)p_name;
#endif
    p_grp->Flags   = flags;                                     /* Set to desired initial value                         */
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	621a      	str	r2, [r3, #32]
#if (OS_CFG_TS_EN > 0u)
    p_grp->TS      = 0u;
#endif
    OS_PendListInit(&p_grp->PendList);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3308      	adds	r3, #8
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff fc1e 	bl	80059da <OS_PendListInit>

#if (OS_CFG_DBG_EN > 0u)
    OS_FlagDbgListAdd(p_grp);
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 fbaa 	bl	80068f8 <OS_FlagDbgListAdd>
    OSFlagQty++;
 80061a4:	4b09      	ldr	r3, [pc, #36]	@ (80061cc <OSFlagCreate+0xa0>)
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	3301      	adds	r3, #1
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	4b07      	ldr	r3, [pc, #28]	@ (80061cc <OSFlagCreate+0xa0>)
 80061ae:	801a      	strh	r2, [r3, #0]
#endif

    OS_TRACE_FLAG_CREATE(p_grp, p_name);

    CPU_CRITICAL_EXIT();
 80061b0:	6978      	ldr	r0, [r7, #20]
 80061b2:	f7fa f81b 	bl	80001ec <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2200      	movs	r2, #0
 80061ba:	801a      	strh	r2, [r3, #0]
}
 80061bc:	3718      	adds	r7, #24
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	200019a0 	.word	0x200019a0
 80061c8:	47414c46 	.word	0x47414c46
 80061cc:	200019b0 	.word	0x200019b0

080061d0 <OSFlagPend>:
                      OS_FLAGS      flags,
                      OS_TICK       timeout,
                      OS_OPT        opt,
                      CPU_TS       *p_ts,
                      OS_ERR       *p_err)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
 80061dc:	807b      	strh	r3, [r7, #2]
    CPU_BOOLEAN  consume;
    OS_FLAGS     flags_rdy;
    OS_OPT       mode;
    CPU_SR_ALLOC();
 80061de:	2300      	movs	r3, #0
 80061e0:	61bb      	str	r3, [r7, #24]
        return ((OS_FLAGS)0);
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* See if called from ISR ...                           */
 80061e2:	4ba1      	ldr	r3, [pc, #644]	@ (8006468 <OSFlagPend+0x298>)
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d009      	beq.n	80061fe <OSFlagPend+0x2e>
        if ((opt & OS_OPT_PEND_NON_BLOCKING) != OS_OPT_PEND_NON_BLOCKING) {
 80061ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	db05      	blt.n	80061fe <OSFlagPend+0x2e>
           *p_err = OS_ERR_PEND_ISR;                            /* ... can't PEND from an ISR                           */
 80061f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f4:	f246 12ae 	movw	r2, #25006	@ 0x61ae
 80061f8:	801a      	strh	r2, [r3, #0]
            OS_TRACE_FLAG_PEND_FAILED(p_grp);
            OS_TRACE_FLAG_PEND_EXIT(OS_ERR_PEND_ISR);
            return ((OS_FLAGS)0);
 80061fa:	2300      	movs	r3, #0
 80061fc:	e249      	b.n	8006692 <OSFlagPend+0x4c2>
        }
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 80061fe:	4b9b      	ldr	r3, [pc, #620]	@ (800646c <OSFlagPend+0x29c>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d005      	beq.n	8006212 <OSFlagPend+0x42>
        OS_TRACE_FLAG_PEND_EXIT(OS_ERR_OS_NOT_RUNNING);
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8006206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006208:	f645 6289 	movw	r2, #24201	@ 0x5e89
 800620c:	801a      	strh	r2, [r3, #0]
        return (0u);
 800620e:	2300      	movs	r3, #0
 8006210:	e23f      	b.n	8006692 <OSFlagPend+0x4c2>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_grp == (OS_FLAG_GRP *)0) {                            /* Validate 'p_grp'                                     */
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d105      	bne.n	8006224 <OSFlagPend+0x54>
        OS_TRACE_FLAG_PEND_FAILED(p_grp);
        OS_TRACE_FLAG_PEND_EXIT(OS_ERR_OBJ_PTR_NULL);
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8006218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621a:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 800621e:	801a      	strh	r2, [r3, #0]
        return (0u);
 8006220:	2300      	movs	r3, #0
 8006222:	e236      	b.n	8006692 <OSFlagPend+0x4c2>
    }
    switch (opt) {                                              /* Validate 'opt'                                       */
 8006224:	887b      	ldrh	r3, [r7, #2]
 8006226:	f248 1208 	movw	r2, #33032	@ 0x8108
 800622a:	4293      	cmp	r3, r2
 800622c:	dc51      	bgt.n	80062d2 <OSFlagPend+0x102>
 800622e:	f5b3 4f01 	cmp.w	r3, #33024	@ 0x8100
 8006232:	dc0b      	bgt.n	800624c <OSFlagPend+0x7c>
 8006234:	f248 0208 	movw	r2, #32776	@ 0x8008
 8006238:	4293      	cmp	r3, r2
 800623a:	dc4a      	bgt.n	80062d2 <OSFlagPend+0x102>
 800623c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006240:	dc14      	bgt.n	800626c <OSFlagPend+0x9c>
 8006242:	2b08      	cmp	r3, #8
 8006244:	dc3f      	bgt.n	80062c6 <OSFlagPend+0xf6>
 8006246:	2b00      	cmp	r3, #0
 8006248:	dc2f      	bgt.n	80062aa <OSFlagPend+0xda>
 800624a:	e042      	b.n	80062d2 <OSFlagPend+0x102>
 800624c:	f5a3 4301 	sub.w	r3, r3, #33024	@ 0x8100
 8006250:	3b01      	subs	r3, #1
 8006252:	228b      	movs	r2, #139	@ 0x8b
 8006254:	fa22 f303 	lsr.w	r3, r2, r3
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	bf14      	ite	ne
 8006260:	2301      	movne	r3, #1
 8006262:	2300      	moveq	r3, #0
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d139      	bne.n	80062de <OSFlagPend+0x10e>
 800626a:	e032      	b.n	80062d2 <OSFlagPend+0x102>
 800626c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8006270:	3b01      	subs	r3, #1
 8006272:	228b      	movs	r2, #139	@ 0x8b
 8006274:	fa22 f303 	lsr.w	r3, r2, r3
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	bf14      	ite	ne
 8006280:	2301      	movne	r3, #1
 8006282:	2300      	moveq	r3, #0
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d129      	bne.n	80062de <OSFlagPend+0x10e>
 800628a:	e022      	b.n	80062d2 <OSFlagPend+0x102>
 800628c:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8006290:	228b      	movs	r2, #139	@ 0x8b
 8006292:	fa22 f303 	lsr.w	r3, r2, r3
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	bf14      	ite	ne
 800629e:	2301      	movne	r3, #1
 80062a0:	2300      	moveq	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d11a      	bne.n	80062de <OSFlagPend+0x10e>
 80062a8:	e013      	b.n	80062d2 <OSFlagPend+0x102>
 80062aa:	461a      	mov	r2, r3
 80062ac:	f44f 738b 	mov.w	r3, #278	@ 0x116
 80062b0:	40d3      	lsrs	r3, r2
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	bf14      	ite	ne
 80062ba:	2301      	movne	r3, #1
 80062bc:	2300      	moveq	r3, #0
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10c      	bne.n	80062de <OSFlagPend+0x10e>
 80062c4:	e005      	b.n	80062d2 <OSFlagPend+0x102>
 80062c6:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80062ca:	dc02      	bgt.n	80062d2 <OSFlagPend+0x102>
 80062cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062d0:	dcdc      	bgt.n	800628c <OSFlagPend+0xbc>
             break;

        default:
             OS_TRACE_FLAG_PEND_FAILED(p_grp);
             OS_TRACE_FLAG_PEND_EXIT(OS_ERR_OPT_INVALID);
            *p_err = OS_ERR_OPT_INVALID;
 80062d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d4:	f645 6225 	movw	r2, #24101	@ 0x5e25
 80062d8:	801a      	strh	r2, [r3, #0]
             return (0u);
 80062da:	2300      	movs	r3, #0
 80062dc:	e1d9      	b.n	8006692 <OSFlagPend+0x4c2>
             break;
 80062de:	bf00      	nop
    }
#endif

#if (OS_CFG_OBJ_TYPE_CHK_EN > 0u)
    if (p_grp->Type != OS_OBJ_TYPE_FLAG) {                      /* Validate that we are pointing at an event flag       */
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a62      	ldr	r2, [pc, #392]	@ (8006470 <OSFlagPend+0x2a0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d005      	beq.n	80062f6 <OSFlagPend+0x126>
        OS_TRACE_FLAG_PEND_FAILED(p_grp);
        OS_TRACE_FLAG_PEND_EXIT(OS_ERR_OBJ_TYPE);
       *p_err = OS_ERR_OBJ_TYPE;
 80062ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ec:	f645 52c4 	movw	r2, #24004	@ 0x5dc4
 80062f0:	801a      	strh	r2, [r3, #0]
        return (0u);
 80062f2:	2300      	movs	r3, #0
 80062f4:	e1cd      	b.n	8006692 <OSFlagPend+0x4c2>
    }
#endif

    if ((opt & OS_OPT_PEND_FLAG_CONSUME) != 0u) {               /* See if we need to consume the flags                  */
 80062f6:	887b      	ldrh	r3, [r7, #2]
 80062f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <OSFlagPend+0x136>
        consume = OS_TRUE;
 8006300:	2301      	movs	r3, #1
 8006302:	77fb      	strb	r3, [r7, #31]
 8006304:	e001      	b.n	800630a <OSFlagPend+0x13a>
    } else {
        consume = OS_FALSE;
 8006306:	2300      	movs	r3, #0
 8006308:	77fb      	strb	r3, [r7, #31]
    }

    if (p_ts != (CPU_TS *)0) {
 800630a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <OSFlagPend+0x146>
       *p_ts = 0u;                                              /* Initialize the returned timestamp                    */
 8006310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
    }

    mode = opt & OS_OPT_PEND_FLAG_MASK;
 8006316:	887b      	ldrh	r3, [r7, #2]
 8006318:	f003 030f 	and.w	r3, r3, #15
 800631c:	82fb      	strh	r3, [r7, #22]
    CPU_CRITICAL_ENTER();
 800631e:	2040      	movs	r0, #64	@ 0x40
 8006320:	f7f9 ff56 	bl	80001d0 <CPU_SR_Save>
 8006324:	61b8      	str	r0, [r7, #24]
    switch (mode) {
 8006326:	8afb      	ldrh	r3, [r7, #22]
 8006328:	3b01      	subs	r3, #1
 800632a:	2b07      	cmp	r3, #7
 800632c:	f200 812d 	bhi.w	800658a <OSFlagPend+0x3ba>
 8006330:	a201      	add	r2, pc, #4	@ (adr r2, 8006338 <OSFlagPend+0x168>)
 8006332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006336:	bf00      	nop
 8006338:	0800647d 	.word	0x0800647d
 800633c:	08006505 	.word	0x08006505
 8006340:	0800658b 	.word	0x0800658b
 8006344:	08006359 	.word	0x08006359
 8006348:	0800658b 	.word	0x0800658b
 800634c:	0800658b 	.word	0x0800658b
 8006350:	0800658b 	.word	0x0800658b
 8006354:	080063e1 	.word	0x080063e1
        case OS_OPT_PEND_FLAG_SET_ALL:                          /* See if all required flags are set                    */
             flags_rdy = (p_grp->Flags & flags);                /* Extract only the bits we want                        */
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	4013      	ands	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
             if (flags_rdy == flags) {                          /* Must match ALL the bits that we want                 */
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	429a      	cmp	r2, r3
 8006368:	d116      	bne.n	8006398 <OSFlagPend+0x1c8>
                 if (consume == OS_TRUE) {                      /* See if we need to consume the flags                  */
 800636a:	7ffb      	ldrb	r3, [r7, #31]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d106      	bne.n	800637e <OSFlagPend+0x1ae>
                     p_grp->Flags &= ~flags_rdy;                /* Clear ONLY the flags that we wanted                  */
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a1a      	ldr	r2, [r3, #32]
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	43db      	mvns	r3, r3
 8006378:	401a      	ands	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	621a      	str	r2, [r3, #32]
                 }
                 OSTCBCurPtr->FlagsRdy = flags_rdy;             /* Save flags that were ready                           */
 800637e:	4b3d      	ldr	r3, [pc, #244]	@ (8006474 <OSFlagPend+0x2a4>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#if (OS_CFG_TS_EN > 0u)
                 if (p_ts != (CPU_TS *)0) {
                    *p_ts = p_grp->TS;
                 }
#endif
                 CPU_CRITICAL_EXIT();                           /* Yes, condition met, return to caller                 */
 8006388:	69b8      	ldr	r0, [r7, #24]
 800638a:	f7f9 ff2f 	bl	80001ec <CPU_SR_Restore>
                 OS_TRACE_FLAG_PEND(p_grp);
                 OS_TRACE_FLAG_PEND_EXIT(OS_ERR_NONE);
                *p_err = OS_ERR_NONE;
 800638e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006390:	2200      	movs	r2, #0
 8006392:	801a      	strh	r2, [r3, #0]
                 return (flags_rdy);
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	e17c      	b.n	8006692 <OSFlagPend+0x4c2>
             } else {                                           /* Block task until events occur or timeout             */
                 if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {
 8006398:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800639c:	2b00      	cmp	r3, #0
 800639e:	da08      	bge.n	80063b2 <OSFlagPend+0x1e2>
                     CPU_CRITICAL_EXIT();
 80063a0:	69b8      	ldr	r0, [r7, #24]
 80063a2:	f7f9 ff23 	bl	80001ec <CPU_SR_Restore>
                     OS_TRACE_FLAG_PEND_FAILED(p_grp);
                     OS_TRACE_FLAG_PEND_EXIT(OS_ERR_PEND_WOULD_BLOCK);
                    *p_err = OS_ERR_PEND_WOULD_BLOCK;           /* Specified non-blocking so task would block           */
 80063a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a8:	f246 12b0 	movw	r2, #25008	@ 0x61b0
 80063ac:	801a      	strh	r2, [r3, #0]
                     return ((OS_FLAGS)0);
 80063ae:	2300      	movs	r3, #0
 80063b0:	e16f      	b.n	8006692 <OSFlagPend+0x4c2>
                 } else {                                       /* Specified blocking so check is scheduler is locked   */
                     if (OSSchedLockNestingCtr > 0u) {          /* See if called with scheduler locked ...        */
 80063b2:	4b31      	ldr	r3, [pc, #196]	@ (8006478 <OSFlagPend+0x2a8>)
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d008      	beq.n	80063cc <OSFlagPend+0x1fc>
                         CPU_CRITICAL_EXIT();
 80063ba:	69b8      	ldr	r0, [r7, #24]
 80063bc:	f7f9 ff16 	bl	80001ec <CPU_SR_Restore>
                         OS_TRACE_FLAG_PEND_FAILED(p_grp);
                         OS_TRACE_FLAG_PEND_EXIT(OS_ERR_SCHED_LOCKED);
                        *p_err = OS_ERR_SCHED_LOCKED;           /* ... can't PEND when locked                           */
 80063c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c2:	f646 5263 	movw	r2, #28003	@ 0x6d63
 80063c6:	801a      	strh	r2, [r3, #0]
                         return (0u);
 80063c8:	2300      	movs	r3, #0
 80063ca:	e162      	b.n	8006692 <OSFlagPend+0x4c2>
                     }
                 }
                                                                /* Lock the scheduler/re-enable interrupts              */
                 OS_FlagBlock(p_grp,
 80063cc:	887a      	ldrh	r2, [r7, #2]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68b9      	ldr	r1, [r7, #8]
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 fa6c 	bl	80068b0 <OS_FlagBlock>
                              flags,
                              opt,
                              timeout);
                 CPU_CRITICAL_EXIT();
 80063d8:	69b8      	ldr	r0, [r7, #24]
 80063da:	f7f9 ff07 	bl	80001ec <CPU_SR_Restore>
             }
             break;
 80063de:	e0dd      	b.n	800659c <OSFlagPend+0x3cc>

        case OS_OPT_PEND_FLAG_SET_ANY:
             flags_rdy = (p_grp->Flags & flags);                /* Extract only the bits we want                        */
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	4013      	ands	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]
             if (flags_rdy != 0u) {                             /* See if any flag set                                  */
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d016      	beq.n	800641e <OSFlagPend+0x24e>
                 if (consume == OS_TRUE) {                      /* See if we need to consume the flags                  */
 80063f0:	7ffb      	ldrb	r3, [r7, #31]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d106      	bne.n	8006404 <OSFlagPend+0x234>
                     p_grp->Flags &= ~flags_rdy;                /* Clear ONLY the flags that we got                     */
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a1a      	ldr	r2, [r3, #32]
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	43db      	mvns	r3, r3
 80063fe:	401a      	ands	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	621a      	str	r2, [r3, #32]
                 }
                 OSTCBCurPtr->FlagsRdy = flags_rdy;             /* Save flags that were ready                           */
 8006404:	4b1b      	ldr	r3, [pc, #108]	@ (8006474 <OSFlagPend+0x2a4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#if (OS_CFG_TS_EN > 0u)
                 if (p_ts != (CPU_TS *)0) {
                    *p_ts  = p_grp->TS;
                 }
#endif
                 CPU_CRITICAL_EXIT();                           /* Yes, condition met, return to caller                 */
 800640e:	69b8      	ldr	r0, [r7, #24]
 8006410:	f7f9 feec 	bl	80001ec <CPU_SR_Restore>
                 OS_TRACE_FLAG_PEND(p_grp);
                 OS_TRACE_FLAG_PEND_EXIT(OS_ERR_NONE);
                *p_err = OS_ERR_NONE;
 8006414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006416:	2200      	movs	r2, #0
 8006418:	801a      	strh	r2, [r3, #0]
                 return (flags_rdy);
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	e139      	b.n	8006692 <OSFlagPend+0x4c2>
             } else {                                           /* Block task until events occur or timeout             */
                 if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {
 800641e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006422:	2b00      	cmp	r3, #0
 8006424:	da08      	bge.n	8006438 <OSFlagPend+0x268>
                     CPU_CRITICAL_EXIT();
 8006426:	69b8      	ldr	r0, [r7, #24]
 8006428:	f7f9 fee0 	bl	80001ec <CPU_SR_Restore>
                     OS_TRACE_FLAG_PEND_EXIT(OS_ERR_PEND_WOULD_BLOCK);
                    *p_err = OS_ERR_PEND_WOULD_BLOCK;           /* Specified non-blocking so task would block           */
 800642c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642e:	f246 12b0 	movw	r2, #25008	@ 0x61b0
 8006432:	801a      	strh	r2, [r3, #0]
                     return ((OS_FLAGS)0);
 8006434:	2300      	movs	r3, #0
 8006436:	e12c      	b.n	8006692 <OSFlagPend+0x4c2>
                 } else {                                       /* Specified blocking so check is scheduler is locked   */
                     if (OSSchedLockNestingCtr > 0u) {          /* See if called with scheduler locked ...        */
 8006438:	4b0f      	ldr	r3, [pc, #60]	@ (8006478 <OSFlagPend+0x2a8>)
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d008      	beq.n	8006452 <OSFlagPend+0x282>
                         CPU_CRITICAL_EXIT();
 8006440:	69b8      	ldr	r0, [r7, #24]
 8006442:	f7f9 fed3 	bl	80001ec <CPU_SR_Restore>
                         OS_TRACE_FLAG_PEND_EXIT(OS_ERR_SCHED_LOCKED);
                        *p_err = OS_ERR_SCHED_LOCKED;           /* ... can't PEND when locked                           */
 8006446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006448:	f646 5263 	movw	r2, #28003	@ 0x6d63
 800644c:	801a      	strh	r2, [r3, #0]
                         return ((OS_FLAGS)0);
 800644e:	2300      	movs	r3, #0
 8006450:	e11f      	b.n	8006692 <OSFlagPend+0x4c2>
                     }
                 }

                 OS_FlagBlock(p_grp,
 8006452:	887a      	ldrh	r2, [r7, #2]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 fa29 	bl	80068b0 <OS_FlagBlock>
                              flags,
                              opt,
                              timeout);
                 CPU_CRITICAL_EXIT();
 800645e:	69b8      	ldr	r0, [r7, #24]
 8006460:	f7f9 fec4 	bl	80001ec <CPU_SR_Restore>
             }
             break;
 8006464:	e09a      	b.n	800659c <OSFlagPend+0x3cc>
 8006466:	bf00      	nop
 8006468:	200019a0 	.word	0x200019a0
 800646c:	200019a1 	.word	0x200019a1
 8006470:	47414c46 	.word	0x47414c46
 8006474:	20001d74 	.word	0x20001d74
 8006478:	20001b5c 	.word	0x20001b5c

#if (OS_CFG_FLAG_MODE_CLR_EN > 0u)
        case OS_OPT_PEND_FLAG_CLR_ALL:                          /* See if all required flags are cleared                */
             flags_rdy = (OS_FLAGS)(~p_grp->Flags & flags);     /* Extract only the bits we want                        */
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	43db      	mvns	r3, r3
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	4013      	ands	r3, r2
 8006486:	613b      	str	r3, [r7, #16]
             if (flags_rdy == flags) {                          /* Must match ALL the bits that we want                 */
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	429a      	cmp	r2, r3
 800648e:	d115      	bne.n	80064bc <OSFlagPend+0x2ec>
                 if (consume == OS_TRUE) {                      /* See if we need to consume the flags                  */
 8006490:	7ffb      	ldrb	r3, [r7, #31]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d105      	bne.n	80064a2 <OSFlagPend+0x2d2>
                     p_grp->Flags |= flags_rdy;                 /* Set ONLY the flags that we wanted                    */
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a1a      	ldr	r2, [r3, #32]
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	431a      	orrs	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	621a      	str	r2, [r3, #32]
                 }
                 OSTCBCurPtr->FlagsRdy = flags_rdy;             /* Save flags that were ready                           */
 80064a2:	4b7e      	ldr	r3, [pc, #504]	@ (800669c <OSFlagPend+0x4cc>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#if (OS_CFG_TS_EN > 0u)
                 if (p_ts != (CPU_TS *)0) {
                    *p_ts  = p_grp->TS;
                 }
#endif
                 CPU_CRITICAL_EXIT();                           /* Yes, condition met, return to caller                 */
 80064ac:	69b8      	ldr	r0, [r7, #24]
 80064ae:	f7f9 fe9d 	bl	80001ec <CPU_SR_Restore>
                 OS_TRACE_FLAG_PEND(p_grp);
                 OS_TRACE_FLAG_PEND_EXIT(OS_ERR_NONE);
                *p_err = OS_ERR_NONE;
 80064b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b4:	2200      	movs	r2, #0
 80064b6:	801a      	strh	r2, [r3, #0]
                 return (flags_rdy);
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	e0ea      	b.n	8006692 <OSFlagPend+0x4c2>
             } else {                                           /* Block task until events occur or timeout             */
                 if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {
 80064bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	da08      	bge.n	80064d6 <OSFlagPend+0x306>
                     CPU_CRITICAL_EXIT();
 80064c4:	69b8      	ldr	r0, [r7, #24]
 80064c6:	f7f9 fe91 	bl	80001ec <CPU_SR_Restore>
                     OS_TRACE_FLAG_PEND_EXIT(OS_ERR_PEND_WOULD_BLOCK);
                    *p_err = OS_ERR_PEND_WOULD_BLOCK;           /* Specified non-blocking so task would block           */
 80064ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064cc:	f246 12b0 	movw	r2, #25008	@ 0x61b0
 80064d0:	801a      	strh	r2, [r3, #0]
                     return ((OS_FLAGS)0);
 80064d2:	2300      	movs	r3, #0
 80064d4:	e0dd      	b.n	8006692 <OSFlagPend+0x4c2>
                 } else {                                       /* Specified blocking so check is scheduler is locked   */
                     if (OSSchedLockNestingCtr > 0u) {          /* See if called with scheduler locked ...        */
 80064d6:	4b72      	ldr	r3, [pc, #456]	@ (80066a0 <OSFlagPend+0x4d0>)
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d008      	beq.n	80064f0 <OSFlagPend+0x320>
                         CPU_CRITICAL_EXIT();
 80064de:	69b8      	ldr	r0, [r7, #24]
 80064e0:	f7f9 fe84 	bl	80001ec <CPU_SR_Restore>
                         OS_TRACE_FLAG_PEND_EXIT(OS_ERR_SCHED_LOCKED);
                        *p_err = OS_ERR_SCHED_LOCKED;           /* ... can't PEND when locked                           */
 80064e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e6:	f646 5263 	movw	r2, #28003	@ 0x6d63
 80064ea:	801a      	strh	r2, [r3, #0]
                         return (0);
 80064ec:	2300      	movs	r3, #0
 80064ee:	e0d0      	b.n	8006692 <OSFlagPend+0x4c2>
                     }
                 }

                 OS_FlagBlock(p_grp,
 80064f0:	887a      	ldrh	r2, [r7, #2]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68b9      	ldr	r1, [r7, #8]
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f000 f9da 	bl	80068b0 <OS_FlagBlock>
                              flags,
                              opt,
                              timeout);
                 CPU_CRITICAL_EXIT();
 80064fc:	69b8      	ldr	r0, [r7, #24]
 80064fe:	f7f9 fe75 	bl	80001ec <CPU_SR_Restore>
             }
             break;
 8006502:	e04b      	b.n	800659c <OSFlagPend+0x3cc>

        case OS_OPT_PEND_FLAG_CLR_ANY:
             flags_rdy = (~p_grp->Flags & flags);               /* Extract only the bits we want                        */
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	43db      	mvns	r3, r3
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	4013      	ands	r3, r2
 800650e:	613b      	str	r3, [r7, #16]
             if (flags_rdy != 0u) {                             /* See if any flag cleared                              */
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d015      	beq.n	8006542 <OSFlagPend+0x372>
                 if (consume == OS_TRUE) {                      /* See if we need to consume the flags                  */
 8006516:	7ffb      	ldrb	r3, [r7, #31]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d105      	bne.n	8006528 <OSFlagPend+0x358>
                     p_grp->Flags |= flags_rdy;                 /* Set ONLY the flags that we got                       */
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6a1a      	ldr	r2, [r3, #32]
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	431a      	orrs	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	621a      	str	r2, [r3, #32]
                 }
                 OSTCBCurPtr->FlagsRdy = flags_rdy;             /* Save flags that were ready                           */
 8006528:	4b5c      	ldr	r3, [pc, #368]	@ (800669c <OSFlagPend+0x4cc>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#if (OS_CFG_TS_EN > 0u)
                 if (p_ts != (CPU_TS *)0) {
                    *p_ts  = p_grp->TS;
                 }
#endif
                 CPU_CRITICAL_EXIT();                           /* Yes, condition met, return to caller                 */
 8006532:	69b8      	ldr	r0, [r7, #24]
 8006534:	f7f9 fe5a 	bl	80001ec <CPU_SR_Restore>
                 OS_TRACE_FLAG_PEND(p_grp);
                 OS_TRACE_FLAG_PEND_EXIT(OS_ERR_NONE);
                *p_err = OS_ERR_NONE;
 8006538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800653a:	2200      	movs	r2, #0
 800653c:	801a      	strh	r2, [r3, #0]
                 return (flags_rdy);
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	e0a7      	b.n	8006692 <OSFlagPend+0x4c2>
             } else {                                           /* Block task until events occur or timeout             */
                 if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {
 8006542:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006546:	2b00      	cmp	r3, #0
 8006548:	da08      	bge.n	800655c <OSFlagPend+0x38c>
                     CPU_CRITICAL_EXIT();
 800654a:	69b8      	ldr	r0, [r7, #24]
 800654c:	f7f9 fe4e 	bl	80001ec <CPU_SR_Restore>
                     OS_TRACE_FLAG_PEND_EXIT(OS_ERR_PEND_WOULD_BLOCK);
                    *p_err = OS_ERR_PEND_WOULD_BLOCK;           /* Specified non-blocking so task would block           */
 8006550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006552:	f246 12b0 	movw	r2, #25008	@ 0x61b0
 8006556:	801a      	strh	r2, [r3, #0]
                     return ((OS_FLAGS)0);
 8006558:	2300      	movs	r3, #0
 800655a:	e09a      	b.n	8006692 <OSFlagPend+0x4c2>
                 } else {                                       /* Specified blocking so check is scheduler is locked   */
                     if (OSSchedLockNestingCtr > 0u) {          /* See if called with scheduler locked ...        */
 800655c:	4b50      	ldr	r3, [pc, #320]	@ (80066a0 <OSFlagPend+0x4d0>)
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d008      	beq.n	8006576 <OSFlagPend+0x3a6>
                         CPU_CRITICAL_EXIT();
 8006564:	69b8      	ldr	r0, [r7, #24]
 8006566:	f7f9 fe41 	bl	80001ec <CPU_SR_Restore>
                         OS_TRACE_FLAG_PEND_EXIT(OS_ERR_SCHED_LOCKED);
                        *p_err = OS_ERR_SCHED_LOCKED;           /* ... can't PEND when locked                           */
 800656a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656c:	f646 5263 	movw	r2, #28003	@ 0x6d63
 8006570:	801a      	strh	r2, [r3, #0]
                         return (0u);
 8006572:	2300      	movs	r3, #0
 8006574:	e08d      	b.n	8006692 <OSFlagPend+0x4c2>
                     }
                 }

                 OS_FlagBlock(p_grp,
 8006576:	887a      	ldrh	r2, [r7, #2]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68b9      	ldr	r1, [r7, #8]
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 f997 	bl	80068b0 <OS_FlagBlock>
                              flags,
                              opt,
                              timeout);
                 CPU_CRITICAL_EXIT();
 8006582:	69b8      	ldr	r0, [r7, #24]
 8006584:	f7f9 fe32 	bl	80001ec <CPU_SR_Restore>
             }
             break;
 8006588:	e008      	b.n	800659c <OSFlagPend+0x3cc>
#endif

        default:
             CPU_CRITICAL_EXIT();
 800658a:	69b8      	ldr	r0, [r7, #24]
 800658c:	f7f9 fe2e 	bl	80001ec <CPU_SR_Restore>
             OS_TRACE_FLAG_PEND_FAILED(p_grp);
             OS_TRACE_FLAG_PEND_EXIT(OS_ERR_OPT_INVALID);
            *p_err = OS_ERR_OPT_INVALID;
 8006590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006592:	f645 6225 	movw	r2, #24101	@ 0x5e25
 8006596:	801a      	strh	r2, [r3, #0]
             return (0u);
 8006598:	2300      	movs	r3, #0
 800659a:	e07a      	b.n	8006692 <OSFlagPend+0x4c2>
    }

    OS_TRACE_FLAG_PEND_BLOCK(p_grp);

    OSSched();                                                  /* Find next HPT ready to run                           */
 800659c:	f7ff f85c 	bl	8005658 <OSSched>

    CPU_CRITICAL_ENTER();
 80065a0:	2040      	movs	r0, #64	@ 0x40
 80065a2:	f7f9 fe15 	bl	80001d0 <CPU_SR_Save>
 80065a6:	61b8      	str	r0, [r7, #24]
    switch (OSTCBCurPtr->PendStatus) {
 80065a8:	4b3c      	ldr	r3, [pc, #240]	@ (800669c <OSFlagPend+0x4cc>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	d82d      	bhi.n	8006610 <OSFlagPend+0x440>
 80065b4:	a201      	add	r2, pc, #4	@ (adr r2, 80065bc <OSFlagPend+0x3ec>)
 80065b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ba:	bf00      	nop
 80065bc:	080065cd 	.word	0x080065cd
 80065c0:	080065d5 	.word	0x080065d5
 80065c4:	08006601 	.word	0x08006601
 80065c8:	080065e5 	.word	0x080065e5
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_FLAG_PEND(p_grp);
            *p_err = OS_ERR_NONE;
 80065cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ce:	2200      	movs	r2, #0
 80065d0:	801a      	strh	r2, [r3, #0]
             break;
 80065d2:	e025      	b.n	8006620 <OSFlagPend+0x450>
#if (OS_CFG_TS_EN > 0u)
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             CPU_CRITICAL_EXIT();
 80065d4:	69b8      	ldr	r0, [r7, #24]
 80065d6:	f7f9 fe09 	bl	80001ec <CPU_SR_Restore>
             OS_TRACE_FLAG_PEND_FAILED(p_grp);
            *p_err = OS_ERR_PEND_ABORT;
 80065da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065dc:	f246 12a9 	movw	r2, #25001	@ 0x61a9
 80065e0:	801a      	strh	r2, [r3, #0]
             break;
 80065e2:	e01d      	b.n	8006620 <OSFlagPend+0x450>

        case OS_STATUS_PEND_TIMEOUT:                            /* Indicate that we didn't get semaphore within timeout */
             if (p_ts != (CPU_TS *)0) {
 80065e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <OSFlagPend+0x420>
                *p_ts = 0u;
 80065ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]
             }
             CPU_CRITICAL_EXIT();
 80065f0:	69b8      	ldr	r0, [r7, #24]
 80065f2:	f7f9 fdfb 	bl	80001ec <CPU_SR_Restore>
             OS_TRACE_FLAG_PEND_FAILED(p_grp);
            *p_err = OS_ERR_TIMEOUT;
 80065f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f8:	f247 22d9 	movw	r2, #29401	@ 0x72d9
 80065fc:	801a      	strh	r2, [r3, #0]
             break;
 80065fe:	e00f      	b.n	8006620 <OSFlagPend+0x450>
#if (OS_CFG_TS_EN > 0u)
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             CPU_CRITICAL_EXIT();
 8006600:	69b8      	ldr	r0, [r7, #24]
 8006602:	f7f9 fdf3 	bl	80001ec <CPU_SR_Restore>
             OS_TRACE_FLAG_PEND_FAILED(p_grp);
            *p_err = OS_ERR_OBJ_DEL;
 8006606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006608:	f645 52c2 	movw	r2, #24002	@ 0x5dc2
 800660c:	801a      	strh	r2, [r3, #0]
             break;
 800660e:	e007      	b.n	8006620 <OSFlagPend+0x450>

        default:
             CPU_CRITICAL_EXIT();
 8006610:	69b8      	ldr	r0, [r7, #24]
 8006612:	f7f9 fdeb 	bl	80001ec <CPU_SR_Restore>
             OS_TRACE_FLAG_PEND_FAILED(p_grp);
            *p_err = OS_ERR_STATUS_INVALID;
 8006616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006618:	f646 622e 	movw	r2, #28206	@ 0x6e2e
 800661c:	801a      	strh	r2, [r3, #0]
             break;
 800661e:	bf00      	nop
    }
    if (*p_err != OS_ERR_NONE) {
 8006620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <OSFlagPend+0x45c>
        OS_TRACE_FLAG_PEND_EXIT(*p_err);
        return (0u);
 8006628:	2300      	movs	r3, #0
 800662a:	e032      	b.n	8006692 <OSFlagPend+0x4c2>
    }

    flags_rdy = OSTCBCurPtr->FlagsRdy;
 800662c:	4b1b      	ldr	r3, [pc, #108]	@ (800669c <OSFlagPend+0x4cc>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006634:	613b      	str	r3, [r7, #16]
    if (consume == OS_TRUE) {                                   /* See if we need to consume the flags                  */
 8006636:	7ffb      	ldrb	r3, [r7, #31]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d123      	bne.n	8006684 <OSFlagPend+0x4b4>
        switch (mode) {
 800663c:	8afb      	ldrh	r3, [r7, #22]
 800663e:	2b08      	cmp	r3, #8
 8006640:	d008      	beq.n	8006654 <OSFlagPend+0x484>
 8006642:	2b08      	cmp	r3, #8
 8006644:	dc15      	bgt.n	8006672 <OSFlagPend+0x4a2>
 8006646:	2b02      	cmp	r3, #2
 8006648:	dc02      	bgt.n	8006650 <OSFlagPend+0x480>
 800664a:	2b00      	cmp	r3, #0
 800664c:	dc0a      	bgt.n	8006664 <OSFlagPend+0x494>
 800664e:	e010      	b.n	8006672 <OSFlagPend+0x4a2>
 8006650:	2b04      	cmp	r3, #4
 8006652:	d10e      	bne.n	8006672 <OSFlagPend+0x4a2>
            case OS_OPT_PEND_FLAG_SET_ALL:
            case OS_OPT_PEND_FLAG_SET_ANY:                      /* Clear ONLY the flags we got                          */
                 p_grp->Flags &= ~flags_rdy;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6a1a      	ldr	r2, [r3, #32]
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	43db      	mvns	r3, r3
 800665c:	401a      	ands	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	621a      	str	r2, [r3, #32]
                 break;
 8006662:	e00f      	b.n	8006684 <OSFlagPend+0x4b4>

#if (OS_CFG_FLAG_MODE_CLR_EN > 0u)
            case OS_OPT_PEND_FLAG_CLR_ALL:
            case OS_OPT_PEND_FLAG_CLR_ANY:                      /* Set   ONLY the flags we got                          */
                 p_grp->Flags |=  flags_rdy;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a1a      	ldr	r2, [r3, #32]
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	431a      	orrs	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	621a      	str	r2, [r3, #32]
                 break;
 8006670:	e008      	b.n	8006684 <OSFlagPend+0x4b4>
#endif
            default:
                 CPU_CRITICAL_EXIT();
 8006672:	69b8      	ldr	r0, [r7, #24]
 8006674:	f7f9 fdba 	bl	80001ec <CPU_SR_Restore>
                 OS_TRACE_FLAG_PEND_EXIT(OS_ERR_OPT_INVALID);
                *p_err = OS_ERR_OPT_INVALID;
 8006678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667a:	f645 6225 	movw	r2, #24101	@ 0x5e25
 800667e:	801a      	strh	r2, [r3, #0]
                 return (0u);
 8006680:	2300      	movs	r3, #0
 8006682:	e006      	b.n	8006692 <OSFlagPend+0x4c2>
        }
    }
    CPU_CRITICAL_EXIT();
 8006684:	69b8      	ldr	r0, [r7, #24]
 8006686:	f7f9 fdb1 	bl	80001ec <CPU_SR_Restore>
    OS_TRACE_FLAG_PEND_EXIT(OS_ERR_NONE);
   *p_err = OS_ERR_NONE;                                        /* Event(s) must have occurred                          */
 800668a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800668c:	2200      	movs	r2, #0
 800668e:	801a      	strh	r2, [r3, #0]
    return (flags_rdy);
 8006690:	693b      	ldr	r3, [r7, #16]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3720      	adds	r7, #32
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	20001d74 	.word	0x20001d74
 80066a0:	20001b5c 	.word	0x20001b5c

080066a4 <OSFlagPost>:

OS_FLAGS  OSFlagPost (OS_FLAG_GRP  *p_grp,
                      OS_FLAGS      flags,
                      OS_OPT        opt,
                      OS_ERR       *p_err)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b08c      	sub	sp, #48	@ 0x30
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	603b      	str	r3, [r7, #0]
 80066b0:	4613      	mov	r3, r2
 80066b2:	80fb      	strh	r3, [r7, #6]
    OS_OPT         mode;
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb;
    OS_TCB        *p_tcb_next;
    CPU_TS         ts;
    CPU_SR_ALLOC();
 80066b4:	2300      	movs	r3, #0
 80066b6:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

    OS_TRACE_FLAG_POST_ENTER(p_grp, flags, opt);

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 80066b8:	4b7b      	ldr	r3, [pc, #492]	@ (80068a8 <OSFlagPost+0x204>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d005      	beq.n	80066cc <OSFlagPost+0x28>
        OS_TRACE_FLAG_POST_EXIT(OS_ERR_OS_NOT_RUNNING);
       *p_err = OS_ERR_OS_NOT_RUNNING;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	f645 6289 	movw	r2, #24201	@ 0x5e89
 80066c6:	801a      	strh	r2, [r3, #0]
        return (0u);
 80066c8:	2300      	movs	r3, #0
 80066ca:	e0e9      	b.n	80068a0 <OSFlagPost+0x1fc>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_grp == (OS_FLAG_GRP *)0) {                            /* Validate 'p_grp'                                     */
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d105      	bne.n	80066de <OSFlagPost+0x3a>
        OS_TRACE_FLAG_POST_FAILED(p_grp);
        OS_TRACE_FLAG_POST_EXIT(OS_ERR_OBJ_PTR_NULL);
       *p_err  = OS_ERR_OBJ_PTR_NULL;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 80066d8:	801a      	strh	r2, [r3, #0]
        return (0u);
 80066da:	2300      	movs	r3, #0
 80066dc:	e0e0      	b.n	80068a0 <OSFlagPost+0x1fc>
    }
#endif

#if (OS_CFG_OBJ_TYPE_CHK_EN > 0u)
    if (p_grp->Type != OS_OBJ_TYPE_FLAG) {                      /* Make sure we are pointing to an event flag grp       */
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a72      	ldr	r2, [pc, #456]	@ (80068ac <OSFlagPost+0x208>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d005      	beq.n	80066f4 <OSFlagPost+0x50>
        OS_TRACE_FLAG_POST_FAILED(p_grp);
        OS_TRACE_FLAG_POST_EXIT(OS_ERR_OBJ_TYPE);
       *p_err = OS_ERR_OBJ_TYPE;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	f645 52c4 	movw	r2, #24004	@ 0x5dc4
 80066ee:	801a      	strh	r2, [r3, #0]
        return (0u);
 80066f0:	2300      	movs	r3, #0
 80066f2:	e0d5      	b.n	80068a0 <OSFlagPost+0x1fc>
#endif

#if (OS_CFG_TS_EN > 0u)
    ts = OS_TS_GET();                                           /* Get timestamp                                        */
#else
    ts = 0u;
 80066f4:	2300      	movs	r3, #0
 80066f6:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

    OS_TRACE_FLAG_POST(p_grp);

    switch (opt) {
 80066f8:	88fb      	ldrh	r3, [r7, #6]
 80066fa:	f248 0201 	movw	r2, #32769	@ 0x8001
 80066fe:	4293      	cmp	r3, r2
 8006700:	d019      	beq.n	8006736 <OSFlagPost+0x92>
 8006702:	f248 0201 	movw	r2, #32769	@ 0x8001
 8006706:	4293      	cmp	r3, r2
 8006708:	dc21      	bgt.n	800674e <OSFlagPost+0xaa>
 800670a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800670e:	d007      	beq.n	8006720 <OSFlagPost+0x7c>
 8006710:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006714:	dc1b      	bgt.n	800674e <OSFlagPost+0xaa>
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <OSFlagPost+0x7c>
 800671a:	2b01      	cmp	r3, #1
 800671c:	d00b      	beq.n	8006736 <OSFlagPost+0x92>
 800671e:	e016      	b.n	800674e <OSFlagPost+0xaa>
        case OS_OPT_POST_FLAG_SET:
        case OS_OPT_POST_FLAG_SET | OS_OPT_POST_NO_SCHED:
             CPU_CRITICAL_ENTER();
 8006720:	2040      	movs	r0, #64	@ 0x40
 8006722:	f7f9 fd55 	bl	80001d0 <CPU_SR_Save>
 8006726:	62b8      	str	r0, [r7, #40]	@ 0x28
             p_grp->Flags |=  flags;                            /* Set   the flags specified in the group               */
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a1a      	ldr	r2, [r3, #32]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	431a      	orrs	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	621a      	str	r2, [r3, #32]
             break;
 8006734:	e011      	b.n	800675a <OSFlagPost+0xb6>

        case OS_OPT_POST_FLAG_CLR:
        case OS_OPT_POST_FLAG_CLR | OS_OPT_POST_NO_SCHED:
             CPU_CRITICAL_ENTER();
 8006736:	2040      	movs	r0, #64	@ 0x40
 8006738:	f7f9 fd4a 	bl	80001d0 <CPU_SR_Save>
 800673c:	62b8      	str	r0, [r7, #40]	@ 0x28
             p_grp->Flags &= ~flags;                            /* Clear the flags specified in the group               */
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6a1a      	ldr	r2, [r3, #32]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	43db      	mvns	r3, r3
 8006746:	401a      	ands	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	621a      	str	r2, [r3, #32]
             break;
 800674c:	e005      	b.n	800675a <OSFlagPost+0xb6>

        default:
            *p_err = OS_ERR_OPT_INVALID;                        /* INVALID option                                       */
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	f645 6225 	movw	r2, #24101	@ 0x5e25
 8006754:	801a      	strh	r2, [r3, #0]
             OS_TRACE_FLAG_POST_EXIT(*p_err);
             return (0u);
 8006756:	2300      	movs	r3, #0
 8006758:	e0a2      	b.n	80068a0 <OSFlagPost+0x1fc>
    }
#if (OS_CFG_TS_EN > 0u)
    p_grp->TS   = ts;
#endif
    p_pend_list = &p_grp->PendList;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3308      	adds	r3, #8
 800675e:	623b      	str	r3, [r7, #32]
    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* Any task waiting on event flag group?                */
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d108      	bne.n	800677a <OSFlagPost+0xd6>
        CPU_CRITICAL_EXIT();                                    /* No                                                   */
 8006768:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800676a:	f7f9 fd3f 	bl	80001ec <CPU_SR_Restore>
       *p_err = OS_ERR_NONE;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2200      	movs	r2, #0
 8006772:	801a      	strh	r2, [r3, #0]
        OS_TRACE_FLAG_POST_EXIT(*p_err);
        return (p_grp->Flags);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	e092      	b.n	80068a0 <OSFlagPost+0x1fc>
    }

    p_tcb = p_pend_list->HeadPtr;
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (p_tcb != (OS_TCB *)0) {                              /* Go through all tasks waiting on event flag(s)        */
 8006780:	e074      	b.n	800686c <OSFlagPost+0x1c8>
        p_tcb_next = p_tcb->PendNextPtr;
 8006782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006786:	61bb      	str	r3, [r7, #24]
        mode       = p_tcb->FlagsOpt & OS_OPT_PEND_FLAG_MASK;
 8006788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800678a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 800678e:	f003 030f 	and.w	r3, r3, #15
 8006792:	82fb      	strh	r3, [r7, #22]
        switch (mode) {
 8006794:	8afb      	ldrh	r3, [r7, #22]
 8006796:	3b01      	subs	r3, #1
 8006798:	2b07      	cmp	r3, #7
 800679a:	d855      	bhi.n	8006848 <OSFlagPost+0x1a4>
 800679c:	a201      	add	r2, pc, #4	@ (adr r2, 80067a4 <OSFlagPost+0x100>)
 800679e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a2:	bf00      	nop
 80067a4:	08006805 	.word	0x08006805
 80067a8:	08006829 	.word	0x08006829
 80067ac:	08006849 	.word	0x08006849
 80067b0:	080067c5 	.word	0x080067c5
 80067b4:	08006849 	.word	0x08006849
 80067b8:	08006849 	.word	0x08006849
 80067bc:	08006849 	.word	0x08006849
 80067c0:	080067e7 	.word	0x080067e7
            case OS_OPT_PEND_FLAG_SET_ALL:                      /* See if all req. flags are set for current node       */
                 flags_rdy = (p_grp->Flags & p_tcb->FlagsPend);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a1a      	ldr	r2, [r3, #32]
 80067c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067cc:	4013      	ands	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]
                 if (flags_rdy == p_tcb->FlagsPend) {
 80067d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d13f      	bne.n	800685a <OSFlagPost+0x1b6>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                         */
 80067da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067dc:	6939      	ldr	r1, [r7, #16]
 80067de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067e0:	f000 f8b2 	bl	8006948 <OS_FlagTaskRdy>
                                    flags_rdy,
                                    ts);
                 }
                 break;
 80067e4:	e039      	b.n	800685a <OSFlagPost+0x1b6>

            case OS_OPT_PEND_FLAG_SET_ANY:                      /* See if any flag set                                  */
                 flags_rdy = (p_grp->Flags & p_tcb->FlagsPend);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6a1a      	ldr	r2, [r3, #32]
 80067ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067ee:	4013      	ands	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]
                 if (flags_rdy != 0u) {
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d032      	beq.n	800685e <OSFlagPost+0x1ba>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                         */
 80067f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067fa:	6939      	ldr	r1, [r7, #16]
 80067fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067fe:	f000 f8a3 	bl	8006948 <OS_FlagTaskRdy>
                                    flags_rdy,
                                    ts);
                 }
                 break;
 8006802:	e02c      	b.n	800685e <OSFlagPost+0x1ba>

#if (OS_CFG_FLAG_MODE_CLR_EN > 0u)
            case OS_OPT_PEND_FLAG_CLR_ALL:                      /* See if all req. flags are set for current node       */
                 flags_rdy = (OS_FLAGS)(~p_grp->Flags & p_tcb->FlagsPend);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	43da      	mvns	r2, r3
 800680a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800680c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800680e:	4013      	ands	r3, r2
 8006810:	613b      	str	r3, [r7, #16]
                 if (flags_rdy == p_tcb->FlagsPend) {
 8006812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006814:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	429a      	cmp	r2, r3
 800681a:	d122      	bne.n	8006862 <OSFlagPost+0x1be>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                         */
 800681c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800681e:	6939      	ldr	r1, [r7, #16]
 8006820:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006822:	f000 f891 	bl	8006948 <OS_FlagTaskRdy>
                                    flags_rdy,
                                    ts);
                 }
                 break;
 8006826:	e01c      	b.n	8006862 <OSFlagPost+0x1be>

            case OS_OPT_PEND_FLAG_CLR_ANY:                      /* See if any flag set                                  */
                 flags_rdy = (OS_FLAGS)(~p_grp->Flags & p_tcb->FlagsPend);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	43da      	mvns	r2, r3
 800682e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006830:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006832:	4013      	ands	r3, r2
 8006834:	613b      	str	r3, [r7, #16]
                 if (flags_rdy != 0u) {
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d014      	beq.n	8006866 <OSFlagPost+0x1c2>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                         */
 800683c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800683e:	6939      	ldr	r1, [r7, #16]
 8006840:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006842:	f000 f881 	bl	8006948 <OS_FlagTaskRdy>
                                    flags_rdy,
                                    ts);
                 }
                 break;
 8006846:	e00e      	b.n	8006866 <OSFlagPost+0x1c2>
#endif
            default:
                 CPU_CRITICAL_EXIT();
 8006848:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800684a:	f7f9 fccf 	bl	80001ec <CPU_SR_Restore>
                *p_err = OS_ERR_FLAG_PEND_OPT;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	f643 22ff 	movw	r2, #15103	@ 0x3aff
 8006854:	801a      	strh	r2, [r3, #0]
                 OS_TRACE_FLAG_POST_EXIT(*p_err);
                 return (0u);
 8006856:	2300      	movs	r3, #0
 8006858:	e022      	b.n	80068a0 <OSFlagPost+0x1fc>
                 break;
 800685a:	bf00      	nop
 800685c:	e004      	b.n	8006868 <OSFlagPost+0x1c4>
                 break;
 800685e:	bf00      	nop
 8006860:	e002      	b.n	8006868 <OSFlagPost+0x1c4>
                 break;
 8006862:	bf00      	nop
 8006864:	e000      	b.n	8006868 <OSFlagPost+0x1c4>
                 break;
 8006866:	bf00      	nop
        }
                                                                /* Point to next task waiting for event flag(s)         */
        p_tcb = p_tcb_next;
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (p_tcb != (OS_TCB *)0) {                              /* Go through all tasks waiting on event flag(s)        */
 800686c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686e:	2b00      	cmp	r3, #0
 8006870:	d187      	bne.n	8006782 <OSFlagPost+0xde>
    }
    CPU_CRITICAL_EXIT();
 8006872:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006874:	f7f9 fcba 	bl	80001ec <CPU_SR_Restore>

    if ((opt & OS_OPT_POST_NO_SCHED) == 0u) {
 8006878:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800687c:	2b00      	cmp	r3, #0
 800687e:	db01      	blt.n	8006884 <OSFlagPost+0x1e0>
        OSSched();
 8006880:	f7fe feea 	bl	8005658 <OSSched>
    }

    CPU_CRITICAL_ENTER();
 8006884:	2040      	movs	r0, #64	@ 0x40
 8006886:	f7f9 fca3 	bl	80001d0 <CPU_SR_Save>
 800688a:	62b8      	str	r0, [r7, #40]	@ 0x28
    flags_cur = p_grp->Flags;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	61fb      	str	r3, [r7, #28]
    CPU_CRITICAL_EXIT();
 8006892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006894:	f7f9 fcaa 	bl	80001ec <CPU_SR_Restore>
   *p_err     = OS_ERR_NONE;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	2200      	movs	r2, #0
 800689c:	801a      	strh	r2, [r3, #0]

    OS_TRACE_FLAG_POST_EXIT(*p_err);
    return (flags_cur);
 800689e:	69fb      	ldr	r3, [r7, #28]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3730      	adds	r7, #48	@ 0x30
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	200019a1 	.word	0x200019a1
 80068ac:	47414c46 	.word	0x47414c46

080068b0 <OS_FlagBlock>:

void  OS_FlagBlock (OS_FLAG_GRP  *p_grp,
                    OS_FLAGS      flags,
                    OS_OPT        opt,
                    OS_TICK       timeout)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	4613      	mov	r3, r2
 80068be:	80fb      	strh	r3, [r7, #6]
    OSTCBCurPtr->FlagsPend = flags;                             /* Save the flags that we need to wait for              */
 80068c0:	4b0c      	ldr	r3, [pc, #48]	@ (80068f4 <OS_FlagBlock+0x44>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	67da      	str	r2, [r3, #124]	@ 0x7c
    OSTCBCurPtr->FlagsOpt  = opt;                               /* Save the type of wait we are doing                   */
 80068c8:	4b0a      	ldr	r3, [pc, #40]	@ (80068f4 <OS_FlagBlock+0x44>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	88fa      	ldrh	r2, [r7, #6]
 80068ce:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
    OSTCBCurPtr->FlagsRdy  = 0u;
 80068d2:	4b08      	ldr	r3, [pc, #32]	@ (80068f4 <OS_FlagBlock+0x44>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    OS_Pend((OS_PEND_OBJ *)((void *)p_grp),
 80068dc:	4b05      	ldr	r3, [pc, #20]	@ (80068f4 <OS_FlagBlock+0x44>)
 80068de:	6819      	ldr	r1, [r3, #0]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	2201      	movs	r2, #1
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f7fe ffcb 	bl	8005880 <OS_Pend>
             OSTCBCurPtr,
             OS_TASK_PEND_ON_FLAG,
             timeout);
}
 80068ea:	bf00      	nop
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	20001d74 	.word	0x20001d74

080068f8 <OS_FlagDbgListAdd>:
************************************************************************************************************************
*/

#if (OS_CFG_DBG_EN > 0u)
void  OS_FlagDbgListAdd (OS_FLAG_GRP  *p_grp)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
    p_grp->DbgNamePtr                = (CPU_CHAR *)((void *)" ");
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a0f      	ldr	r2, [pc, #60]	@ (8006940 <OS_FlagDbgListAdd+0x48>)
 8006904:	61da      	str	r2, [r3, #28]
    p_grp->DbgPrevPtr                = (OS_FLAG_GRP *)0;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	615a      	str	r2, [r3, #20]
    if (OSFlagDbgListPtr == (OS_FLAG_GRP *)0) {
 800690c:	4b0d      	ldr	r3, [pc, #52]	@ (8006944 <OS_FlagDbgListAdd+0x4c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d103      	bne.n	800691c <OS_FlagDbgListAdd+0x24>
        p_grp->DbgNextPtr            = (OS_FLAG_GRP *)0;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	619a      	str	r2, [r3, #24]
 800691a:	e007      	b.n	800692c <OS_FlagDbgListAdd+0x34>
    } else {
        p_grp->DbgNextPtr            = OSFlagDbgListPtr;
 800691c:	4b09      	ldr	r3, [pc, #36]	@ (8006944 <OS_FlagDbgListAdd+0x4c>)
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	619a      	str	r2, [r3, #24]
        OSFlagDbgListPtr->DbgPrevPtr = p_grp;
 8006924:	4b07      	ldr	r3, [pc, #28]	@ (8006944 <OS_FlagDbgListAdd+0x4c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	615a      	str	r2, [r3, #20]
    }
    OSFlagDbgListPtr                 = p_grp;
 800692c:	4a05      	ldr	r2, [pc, #20]	@ (8006944 <OS_FlagDbgListAdd+0x4c>)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6013      	str	r3, [r2, #0]
}
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	08008e24 	.word	0x08008e24
 8006944:	200019ac 	.word	0x200019ac

08006948 <OS_FlagTaskRdy>:
*/

void   OS_FlagTaskRdy (OS_TCB    *p_tcb,
                       OS_FLAGS   flags_rdy,
                       CPU_TS     ts)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
#if (OS_CFG_TS_EN == 0u)
    (void)ts;                                                   /* Prevent compiler warning for not using 'ts'          */
#endif

    p_tcb->FlagsRdy   = flags_rdy;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    p_tcb->PendStatus = OS_STATUS_PEND_OK;                      /* Clear pend status                                    */
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;                /* Indicate no longer pending                           */
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
#if (OS_CFG_TS_EN > 0u)
    p_tcb->TS         = ts;
#endif
    switch (p_tcb->TaskState) {
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006972:	2b03      	cmp	r3, #3
 8006974:	dc02      	bgt.n	800697c <OS_FlagTaskRdy+0x34>
 8006976:	2b02      	cmp	r3, #2
 8006978:	da04      	bge.n	8006984 <OS_FlagTaskRdy+0x3c>
        case OS_TASK_STATE_DLY:
        case OS_TASK_STATE_DLY_SUSPENDED:
        case OS_TASK_STATE_SUSPENDED:
        default:
                                                                /* Default case.                                        */
             break;
 800697a:	e020      	b.n	80069be <OS_FlagTaskRdy+0x76>
 800697c:	3b06      	subs	r3, #6
    switch (p_tcb->TaskState) {
 800697e:	2b01      	cmp	r3, #1
 8006980:	d81d      	bhi.n	80069be <OS_FlagTaskRdy+0x76>
 8006982:	e00f      	b.n	80069a4 <OS_FlagTaskRdy+0x5c>
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800698a:	2b03      	cmp	r3, #3
 800698c:	d102      	bne.n	8006994 <OS_FlagTaskRdy+0x4c>
                 OS_TickListRemove(p_tcb);                      /* Remove from tick list                                */
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f001 fbce 	bl	8008130 <OS_TickListRemove>
             OS_RdyListInsert(p_tcb);                           /* Insert the task in the ready list                    */
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f7ff f98f 	bl	8005cb8 <OS_RdyListInsert>
             p_tcb->TaskState = OS_TASK_STATE_RDY;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
             break;
 80069a2:	e00d      	b.n	80069c0 <OS_FlagTaskRdy+0x78>
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80069aa:	2b07      	cmp	r3, #7
 80069ac:	d102      	bne.n	80069b4 <OS_FlagTaskRdy+0x6c>
                 OS_TickListRemove(p_tcb);                      /* Remove from tick list                                */
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f001 fbbe 	bl	8008130 <OS_TickListRemove>
             p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2204      	movs	r2, #4
 80069b8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
             break;
 80069bc:	e000      	b.n	80069c0 <OS_FlagTaskRdy+0x78>
             break;
 80069be:	bf00      	nop
    }
    OS_PendListRemove(p_tcb);
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f7ff f889 	bl	8005ad8 <OS_PendListRemove>
}
 80069c6:	bf00      	nop
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_MemInit (OS_ERR  *p_err)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
#if (OS_CFG_DBG_EN > 0u)
    OSMemDbgListPtr = (OS_MEM *)0;
 80069d8:	4b07      	ldr	r3, [pc, #28]	@ (80069f8 <OS_MemInit+0x28>)
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
    OSMemQty        = 0u;
 80069de:	4b07      	ldr	r3, [pc, #28]	@ (80069fc <OS_MemInit+0x2c>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	801a      	strh	r2, [r3, #0]
#endif
   *p_err           = OS_ERR_NONE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	801a      	strh	r2, [r3, #0]
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	200019b4 	.word	0x200019b4
 80069fc:	200019b8 	.word	0x200019b8

08006a00 <OS_MsgPoolInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MsgPoolInit (OS_ERR  *p_err)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
    OS_MSG_QTY   i;
    OS_MSG_QTY   loops;


#if (OS_CFG_ARG_CHK_EN > 0u)
    if (OSCfg_MsgPoolBasePtr == (OS_MSG *)0) {
 8006a08:	4b2b      	ldr	r3, [pc, #172]	@ (8006ab8 <OS_MsgPoolInit+0xb8>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d104      	bne.n	8006a1a <OS_MsgPoolInit+0x1a>
       *p_err = OS_ERR_MSG_POOL_NULL_PTR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f245 721e 	movw	r2, #22302	@ 0x571e
 8006a16:	801a      	strh	r2, [r3, #0]
        return;
 8006a18:	e048      	b.n	8006aac <OS_MsgPoolInit+0xac>
    }
    if (OSCfg_MsgPoolSize == 0u) {
 8006a1a:	4b28      	ldr	r3, [pc, #160]	@ (8006abc <OS_MsgPoolInit+0xbc>)
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d104      	bne.n	8006a2c <OS_MsgPoolInit+0x2c>
       *p_err = OS_ERR_MSG_POOL_EMPTY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f245 721d 	movw	r2, #22301	@ 0x571d
 8006a28:	801a      	strh	r2, [r3, #0]
        return;
 8006a2a:	e03f      	b.n	8006aac <OS_MsgPoolInit+0xac>
    }
#endif

    p_msg1 = OSCfg_MsgPoolBasePtr;
 8006a2c:	4b22      	ldr	r3, [pc, #136]	@ (8006ab8 <OS_MsgPoolInit+0xb8>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	617b      	str	r3, [r7, #20]
    p_msg2 = OSCfg_MsgPoolBasePtr;
 8006a32:	4b21      	ldr	r3, [pc, #132]	@ (8006ab8 <OS_MsgPoolInit+0xb8>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	613b      	str	r3, [r7, #16]
    p_msg2++;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	330c      	adds	r3, #12
 8006a3c:	613b      	str	r3, [r7, #16]
    loops  = OSCfg_MsgPoolSize - 1u;
 8006a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8006abc <OS_MsgPoolInit+0xbc>)
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	3b01      	subs	r3, #1
 8006a44:	81bb      	strh	r3, [r7, #12]
    for (i = 0u; i < loops; i++) {                              /* Init. list of free OS_MSGs                           */
 8006a46:	2300      	movs	r3, #0
 8006a48:	81fb      	strh	r3, [r7, #14]
 8006a4a:	e011      	b.n	8006a70 <OS_MsgPoolInit+0x70>
        p_msg1->NextPtr = p_msg2;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	601a      	str	r2, [r3, #0]
        p_msg1->MsgPtr  = (void *)0;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2200      	movs	r2, #0
 8006a56:	605a      	str	r2, [r3, #4]
        p_msg1->MsgSize =         0u;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	811a      	strh	r2, [r3, #8]
#if (OS_CFG_TS_EN > 0u)
        p_msg1->MsgTS   =         0u;
#endif
        p_msg1++;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	330c      	adds	r3, #12
 8006a62:	617b      	str	r3, [r7, #20]
        p_msg2++;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	330c      	adds	r3, #12
 8006a68:	613b      	str	r3, [r7, #16]
    for (i = 0u; i < loops; i++) {                              /* Init. list of free OS_MSGs                           */
 8006a6a:	89fb      	ldrh	r3, [r7, #14]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	81fb      	strh	r3, [r7, #14]
 8006a70:	89fa      	ldrh	r2, [r7, #14]
 8006a72:	89bb      	ldrh	r3, [r7, #12]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d3e9      	bcc.n	8006a4c <OS_MsgPoolInit+0x4c>
    }
    p_msg1->NextPtr = (OS_MSG *)0;                              /* Last OS_MSG                                          */
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	601a      	str	r2, [r3, #0]
    p_msg1->MsgPtr  = (void   *)0;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	2200      	movs	r2, #0
 8006a82:	605a      	str	r2, [r3, #4]
    p_msg1->MsgSize =           0u;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2200      	movs	r2, #0
 8006a88:	811a      	strh	r2, [r3, #8]
#if (OS_CFG_TS_EN > 0u)
    p_msg1->MsgTS   =           0u;
#endif

    OSMsgPool.NextPtr    = OSCfg_MsgPoolBasePtr;
 8006a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab8 <OS_MsgPoolInit+0xb8>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ac0 <OS_MsgPoolInit+0xc0>)
 8006a90:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree    = OSCfg_MsgPoolSize;
 8006a92:	4b0a      	ldr	r3, [pc, #40]	@ (8006abc <OS_MsgPoolInit+0xbc>)
 8006a94:	881a      	ldrh	r2, [r3, #0]
 8006a96:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac0 <OS_MsgPoolInit+0xc0>)
 8006a98:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed    = 0u;
 8006a9a:	4b09      	ldr	r3, [pc, #36]	@ (8006ac0 <OS_MsgPoolInit+0xc0>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	80da      	strh	r2, [r3, #6]
#if (OS_CFG_DBG_EN > 0u)
    OSMsgPool.NbrUsedMax = 0u;
 8006aa0:	4b07      	ldr	r3, [pc, #28]	@ (8006ac0 <OS_MsgPoolInit+0xc0>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	811a      	strh	r2, [r3, #8]
#endif
   *p_err                = OS_ERR_NONE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	801a      	strh	r2, [r3, #0]
}
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	08008eb4 	.word	0x08008eb4
 8006abc:	08008eb0 	.word	0x08008eb0
 8006ac0:	200019bc 	.word	0x200019bc

08006ac4 <OS_MsgQFreeAll>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_MSG_QTY  OS_MsgQFreeAll (OS_MSG_Q  *p_msg_q)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
    OS_MSG      *p_msg;
    OS_MSG_QTY   qty;



    qty = p_msg_q->NbrEntries;                                  /* Get the number of OS_MSGs being freed                */
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	895b      	ldrh	r3, [r3, #10]
 8006ad0:	81fb      	strh	r3, [r7, #14]
    if (p_msg_q->NbrEntries > 0u) {
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	895b      	ldrh	r3, [r3, #10]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d026      	beq.n	8006b28 <OS_MsgQFreeAll+0x64>
        p_msg                   = p_msg_q->InPtr;               /* Point to end of message chain                        */
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	60bb      	str	r3, [r7, #8]
        p_msg->NextPtr          = OSMsgPool.NextPtr;
 8006ae0:	4b15      	ldr	r3, [pc, #84]	@ (8006b38 <OS_MsgQFreeAll+0x74>)
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	601a      	str	r2, [r3, #0]
        OSMsgPool.NextPtr       = p_msg_q->OutPtr;              /* Point to beginning of message chain                  */
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	4a12      	ldr	r2, [pc, #72]	@ (8006b38 <OS_MsgQFreeAll+0x74>)
 8006aee:	6013      	str	r3, [r2, #0]
        OSMsgPool.NbrUsed      -= p_msg_q->NbrEntries;          /* Update statistics for free list of messages          */
 8006af0:	4b11      	ldr	r3, [pc, #68]	@ (8006b38 <OS_MsgQFreeAll+0x74>)
 8006af2:	88da      	ldrh	r2, [r3, #6]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	895b      	ldrh	r3, [r3, #10]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	4b0e      	ldr	r3, [pc, #56]	@ (8006b38 <OS_MsgQFreeAll+0x74>)
 8006afe:	80da      	strh	r2, [r3, #6]
        OSMsgPool.NbrFree      += p_msg_q->NbrEntries;
 8006b00:	4b0d      	ldr	r3, [pc, #52]	@ (8006b38 <OS_MsgQFreeAll+0x74>)
 8006b02:	889a      	ldrh	r2, [r3, #4]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	895b      	ldrh	r3, [r3, #10]
 8006b08:	4413      	add	r3, r2
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b38 <OS_MsgQFreeAll+0x74>)
 8006b0e:	809a      	strh	r2, [r3, #4]
        p_msg_q->NbrEntries     =           0u;                 /* Flush the message queue                              */
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	815a      	strh	r2, [r3, #10]
#if (OS_CFG_DBG_EN > 0u)
        p_msg_q->NbrEntriesMax  =           0u;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	819a      	strh	r2, [r3, #12]
#endif
        p_msg_q->InPtr          = (OS_MSG *)0;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	601a      	str	r2, [r3, #0]
        p_msg_q->OutPtr         = (OS_MSG *)0;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	605a      	str	r2, [r3, #4]
    }
    return (qty);
 8006b28:	89fb      	ldrh	r3, [r7, #14]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	200019bc 	.word	0x200019bc

08006b3c <OS_MsgQInit>:
************************************************************************************************************************
*/

void  OS_MsgQInit (OS_MSG_Q    *p_msg_q,
                   OS_MSG_QTY   size)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	807b      	strh	r3, [r7, #2]
    p_msg_q->NbrEntriesSize = size;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	887a      	ldrh	r2, [r7, #2]
 8006b4c:	811a      	strh	r2, [r3, #8]
    p_msg_q->NbrEntries     =           0u;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	815a      	strh	r2, [r3, #10]
#if (OS_CFG_DBG_EN > 0u)
    p_msg_q->NbrEntriesMax  =           0u;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	819a      	strh	r2, [r3, #12]
#endif
    p_msg_q->InPtr          = (OS_MSG *)0;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	601a      	str	r2, [r3, #0]
    p_msg_q->OutPtr         = (OS_MSG *)0;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	605a      	str	r2, [r3, #4]
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
	...

08006b74 <OSMutexCreate>:
*/

void  OSMutexCreate (OS_MUTEX  *p_mutex,
                     CPU_CHAR  *p_name,
                     OS_ERR    *p_err)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
    CPU_SR_ALLOC();
 8006b80:	2300      	movs	r3, #0
 8006b82:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to be called from an ISR                 */
 8006b84:	4b24      	ldr	r3, [pc, #144]	@ (8006c18 <OSMutexCreate+0xa4>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d004      	beq.n	8006b96 <OSMutexCreate+0x22>
       *p_err = OS_ERR_CREATE_ISR;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f642 62e1 	movw	r2, #12001	@ 0x2ee1
 8006b92:	801a      	strh	r2, [r3, #0]
        return;
 8006b94:	e03c      	b.n	8006c10 <OSMutexCreate+0x9c>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_mutex == (OS_MUTEX *)0) {                             /* Validate 'p_mutex'                                   */
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d104      	bne.n	8006ba6 <OSMutexCreate+0x32>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 8006ba2:	801a      	strh	r2, [r3, #0]
        return;
 8006ba4:	e034      	b.n	8006c10 <OSMutexCreate+0x9c>
    }
#endif

    CPU_CRITICAL_ENTER();
 8006ba6:	2040      	movs	r0, #64	@ 0x40
 8006ba8:	f7f9 fb12 	bl	80001d0 <CPU_SR_Save>
 8006bac:	6178      	str	r0, [r7, #20]
#if (OS_OBJ_TYPE_REQ > 0u)
#if (OS_CFG_OBJ_CREATED_CHK_EN > 0u)
    if (p_mutex->Type == OS_OBJ_TYPE_MUTEX) {
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8006c1c <OSMutexCreate+0xa8>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d107      	bne.n	8006bc8 <OSMutexCreate+0x54>
        CPU_CRITICAL_EXIT();
 8006bb8:	6978      	ldr	r0, [r7, #20]
 8006bba:	f7f9 fb17 	bl	80001ec <CPU_SR_Restore>
        *p_err = OS_ERR_OBJ_CREATED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f645 52c1 	movw	r2, #24001	@ 0x5dc1
 8006bc4:	801a      	strh	r2, [r3, #0]
        return;
 8006bc6:	e023      	b.n	8006c10 <OSMutexCreate+0x9c>
    }
#endif
    p_mutex->Type              =  OS_OBJ_TYPE_MUTEX;            /* Mark the data structure as a mutex                   */
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4a14      	ldr	r2, [pc, #80]	@ (8006c1c <OSMutexCreate+0xa8>)
 8006bcc:	601a      	str	r2, [r3, #0]
#endif
#if (OS_CFG_DBG_EN > 0u)
    p_mutex->NamePtr           =  p_name;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	605a      	str	r2, [r3, #4]
#else
    (void)p_name;
#endif
    p_mutex->MutexGrpNextPtr   = (OS_MUTEX *)0;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	621a      	str	r2, [r3, #32]
    p_mutex->OwnerTCBPtr       = (OS_TCB   *)0;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	625a      	str	r2, [r3, #36]	@ 0x24
    p_mutex->OwnerNestingCtr   =             0u;                /* Mutex is available                                   */
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if (OS_CFG_TS_EN > 0u)
    p_mutex->TS                =             0u;
#endif
    OS_PendListInit(&p_mutex->PendList);                        /* Initialize the waiting list                          */
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	3308      	adds	r3, #8
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7fe fef4 	bl	80059da <OS_PendListInit>

#if (OS_CFG_DBG_EN > 0u)
    OS_MutexDbgListAdd(p_mutex);
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 f906 	bl	8006e04 <OS_MutexDbgListAdd>
    OSMutexQty++;
 8006bf8:	4b09      	ldr	r3, [pc, #36]	@ (8006c20 <OSMutexCreate+0xac>)
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	4b07      	ldr	r3, [pc, #28]	@ (8006c20 <OSMutexCreate+0xac>)
 8006c02:	801a      	strh	r2, [r3, #0]
#endif

    OS_TRACE_MUTEX_CREATE(p_mutex, p_name);
    CPU_CRITICAL_EXIT();
 8006c04:	6978      	ldr	r0, [r7, #20]
 8006c06:	f7f9 faf1 	bl	80001ec <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	801a      	strh	r2, [r3, #0]
}
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	200019a0 	.word	0x200019a0
 8006c1c:	5854554d 	.word	0x5854554d
 8006c20:	200019cc 	.word	0x200019cc

08006c24 <OSMutexPend>:
void  OSMutexPend (OS_MUTEX  *p_mutex,
                   OS_TICK    timeout,
                   OS_OPT     opt,
                   CPU_TS    *p_ts,
                   OS_ERR    *p_err)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	603b      	str	r3, [r7, #0]
 8006c30:	4613      	mov	r3, r2
 8006c32:	80fb      	strh	r3, [r7, #6]
    OS_TCB  *p_tcb;
    CPU_SR_ALLOC();
 8006c34:	2300      	movs	r3, #0
 8006c36:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
 8006c38:	4b6d      	ldr	r3, [pc, #436]	@ (8006df0 <OSMutexPend+0x1cc>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d004      	beq.n	8006c4a <OSMutexPend+0x26>
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_PEND_ISR);
       *p_err = OS_ERR_PEND_ISR;
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	f246 12ae 	movw	r2, #25006	@ 0x61ae
 8006c46:	801a      	strh	r2, [r3, #0]
        return;
 8006c48:	e0cf      	b.n	8006dea <OSMutexPend+0x1c6>
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 8006c4a:	4b6a      	ldr	r3, [pc, #424]	@ (8006df4 <OSMutexPend+0x1d0>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d004      	beq.n	8006c5c <OSMutexPend+0x38>
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_OS_NOT_RUNNING);
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	f645 6289 	movw	r2, #24201	@ 0x5e89
 8006c58:	801a      	strh	r2, [r3, #0]
        return;
 8006c5a:	e0c6      	b.n	8006dea <OSMutexPend+0x1c6>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_mutex == (OS_MUTEX *)0) {                             /* Validate arguments                                   */
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d104      	bne.n	8006c6c <OSMutexPend+0x48>
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_OBJ_PTR_NULL);
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 8006c68:	801a      	strh	r2, [r3, #0]
        return;
 8006c6a:	e0be      	b.n	8006dea <OSMutexPend+0x1c6>
    }
    switch (opt) {                                              /* Validate 'opt'                                       */
 8006c6c:	88fb      	ldrh	r3, [r7, #6]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d007      	beq.n	8006c82 <OSMutexPend+0x5e>
 8006c72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c76:	d004      	beq.n	8006c82 <OSMutexPend+0x5e>
             break;

        default:
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
             OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_OPT_INVALID);
            *p_err = OS_ERR_OPT_INVALID;
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	f645 6225 	movw	r2, #24101	@ 0x5e25
 8006c7e:	801a      	strh	r2, [r3, #0]
             return;
 8006c80:	e0b3      	b.n	8006dea <OSMutexPend+0x1c6>
             break;
 8006c82:	bf00      	nop
    }
#endif

#if (OS_CFG_OBJ_TYPE_CHK_EN > 0u)
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {                   /* Make sure mutex was created                          */
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a5b      	ldr	r2, [pc, #364]	@ (8006df8 <OSMutexPend+0x1d4>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d004      	beq.n	8006c98 <OSMutexPend+0x74>
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_OBJ_TYPE);
       *p_err = OS_ERR_OBJ_TYPE;
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	f645 52c4 	movw	r2, #24004	@ 0x5dc4
 8006c94:	801a      	strh	r2, [r3, #0]
        return;
 8006c96:	e0a8      	b.n	8006dea <OSMutexPend+0x1c6>
    }
#endif

    CPU_CRITICAL_ENTER();
 8006c98:	2040      	movs	r0, #64	@ 0x40
 8006c9a:	f7f9 fa99 	bl	80001d0 <CPU_SR_Save>
 8006c9e:	6178      	str	r0, [r7, #20]
    if (p_mutex->OwnerNestingCtr == 0u) {                       /* Resource available?                                  */
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d114      	bne.n	8006cd4 <OSMutexPend+0xb0>
        p_mutex->OwnerTCBPtr     = OSTCBCurPtr;                 /* Yes, caller may proceed                              */
 8006caa:	4b54      	ldr	r3, [pc, #336]	@ (8006dfc <OSMutexPend+0x1d8>)
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	625a      	str	r2, [r3, #36]	@ 0x24
        p_mutex->OwnerNestingCtr = 1u;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if (OS_CFG_TS_EN > 0u)
        if (p_ts != (CPU_TS *)0) {
           *p_ts = p_mutex->TS;
        }
#endif
        OS_MutexGrpAdd(OSTCBCurPtr, p_mutex);                   /* Add mutex to owner's group                           */
 8006cba:	4b50      	ldr	r3, [pc, #320]	@ (8006dfc <OSMutexPend+0x1d8>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68f9      	ldr	r1, [r7, #12]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 f8c7 	bl	8006e54 <OS_MutexGrpAdd>
        CPU_CRITICAL_EXIT();
 8006cc6:	6978      	ldr	r0, [r7, #20]
 8006cc8:	f7f9 fa90 	bl	80001ec <CPU_SR_Restore>
        OS_TRACE_MUTEX_PEND(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_NONE);
       *p_err = OS_ERR_NONE;
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	801a      	strh	r2, [r3, #0]
        return;
 8006cd2:	e08a      	b.n	8006dea <OSMutexPend+0x1c6>
    }

    if (OSTCBCurPtr == p_mutex->OwnerTCBPtr) {                  /* See if current task is already the owner of the mutex*/
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cd8:	4b48      	ldr	r3, [pc, #288]	@ (8006dfc <OSMutexPend+0x1d8>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d11c      	bne.n	8006d1a <OSMutexPend+0xf6>
        if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)-1) {
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ce6:	2bff      	cmp	r3, #255	@ 0xff
 8006ce8:	d107      	bne.n	8006cfa <OSMutexPend+0xd6>
            CPU_CRITICAL_EXIT();
 8006cea:	6978      	ldr	r0, [r7, #20]
 8006cec:	f7f9 fa7e 	bl	80001ec <CPU_SR_Restore>
            OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_MUTEX_OVF);
           *p_err = OS_ERR_MUTEX_OVF;
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	f245 7284 	movw	r2, #22404	@ 0x5784
 8006cf6:	801a      	strh	r2, [r3, #0]
            return;
 8006cf8:	e077      	b.n	8006dea <OSMutexPend+0x1c6>
        }
        p_mutex->OwnerNestingCtr++;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d00:	3301      	adds	r3, #1
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if (OS_CFG_TS_EN > 0u)
        if (p_ts != (CPU_TS *)0) {
           *p_ts = p_mutex->TS;
        }
#endif
        CPU_CRITICAL_EXIT();
 8006d0a:	6978      	ldr	r0, [r7, #20]
 8006d0c:	f7f9 fa6e 	bl	80001ec <CPU_SR_Restore>
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_MUTEX_OWNER);
       *p_err = OS_ERR_MUTEX_OWNER;                             /* Indicate that current task already owns the mutex    */
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	f245 7282 	movw	r2, #22402	@ 0x5782
 8006d16:	801a      	strh	r2, [r3, #0]
        return;
 8006d18:	e067      	b.n	8006dea <OSMutexPend+0x1c6>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {               /* Caller wants to block if not available?              */
 8006d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	da07      	bge.n	8006d32 <OSMutexPend+0x10e>
        CPU_CRITICAL_EXIT();
 8006d22:	6978      	ldr	r0, [r7, #20]
 8006d24:	f7f9 fa62 	bl	80001ec <CPU_SR_Restore>
           *p_ts = 0u;
        }
#endif
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_PEND_WOULD_BLOCK);
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                        /* No                                                   */
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	f246 12b0 	movw	r2, #25008	@ 0x61b0
 8006d2e:	801a      	strh	r2, [r3, #0]
        return;
 8006d30:	e05b      	b.n	8006dea <OSMutexPend+0x1c6>
    } else {
        if (OSSchedLockNestingCtr > 0u) {                       /* Can't pend when the scheduler is locked              */
 8006d32:	4b33      	ldr	r3, [pc, #204]	@ (8006e00 <OSMutexPend+0x1dc>)
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d007      	beq.n	8006d4a <OSMutexPend+0x126>
            CPU_CRITICAL_EXIT();
 8006d3a:	6978      	ldr	r0, [r7, #20]
 8006d3c:	f7f9 fa56 	bl	80001ec <CPU_SR_Restore>
               *p_ts = 0u;
            }
#endif
            OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_SCHED_LOCKED);
           *p_err = OS_ERR_SCHED_LOCKED;
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	f646 5263 	movw	r2, #28003	@ 0x6d63
 8006d46:	801a      	strh	r2, [r3, #0]
            return;
 8006d48:	e04f      	b.n	8006dea <OSMutexPend+0x1c6>
        }
    }

    p_tcb = p_mutex->OwnerTCBPtr;                               /* Point to the TCB of the Mutex owner                  */
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4e:	613b      	str	r3, [r7, #16]
    if (p_tcb->Prio > OSTCBCurPtr->Prio) {                      /* See if mutex owner has a lower priority than current */
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 8006d56:	4b29      	ldr	r3, [pc, #164]	@ (8006dfc <OSMutexPend+0x1d8>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d907      	bls.n	8006d72 <OSMutexPend+0x14e>
        OS_TaskChangePrio(p_tcb, OSTCBCurPtr->Prio);
 8006d62:	4b26      	ldr	r3, [pc, #152]	@ (8006dfc <OSMutexPend+0x1d8>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6938      	ldr	r0, [r7, #16]
 8006d6e:	f000 fff5 	bl	8007d5c <OS_TaskChangePrio>
        OS_TRACE_MUTEX_TASK_PRIO_INHERIT(p_tcb, p_tcb->Prio);
    }

    OS_Pend((OS_PEND_OBJ *)((void *)p_mutex),                   /* Block task pending on Mutex                          */
 8006d72:	4b22      	ldr	r3, [pc, #136]	@ (8006dfc <OSMutexPend+0x1d8>)
 8006d74:	6819      	ldr	r1, [r3, #0]
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2204      	movs	r2, #4
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f7fe fd80 	bl	8005880 <OS_Pend>
             OSTCBCurPtr,
             OS_TASK_PEND_ON_MUTEX,
             timeout);

    CPU_CRITICAL_EXIT();
 8006d80:	6978      	ldr	r0, [r7, #20]
 8006d82:	f7f9 fa33 	bl	80001ec <CPU_SR_Restore>
    OS_TRACE_MUTEX_PEND_BLOCK(p_mutex);
    OSSched();                                                  /* Find the next highest priority task ready to run     */
 8006d86:	f7fe fc67 	bl	8005658 <OSSched>

    CPU_CRITICAL_ENTER();
 8006d8a:	2040      	movs	r0, #64	@ 0x40
 8006d8c:	f7f9 fa20 	bl	80001d0 <CPU_SR_Save>
 8006d90:	6178      	str	r0, [r7, #20]
    switch (OSTCBCurPtr->PendStatus) {
 8006d92:	4b1a      	ldr	r3, [pc, #104]	@ (8006dfc <OSMutexPend+0x1d8>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d81d      	bhi.n	8006dda <OSMutexPend+0x1b6>
 8006d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8006da4 <OSMutexPend+0x180>)
 8006da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da4:	08006db5 	.word	0x08006db5
 8006da8:	08006dbd 	.word	0x08006dbd
 8006dac:	08006dd1 	.word	0x08006dd1
 8006db0:	08006dc7 	.word	0x08006dc7
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_MUTEX_PEND(p_mutex);
            *p_err = OS_ERR_NONE;
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	2200      	movs	r2, #0
 8006db8:	801a      	strh	r2, [r3, #0]
             break;
 8006dba:	e013      	b.n	8006de4 <OSMutexPend+0x1c0>
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            *p_err = OS_ERR_PEND_ABORT;
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	f246 12a9 	movw	r2, #25001	@ 0x61a9
 8006dc2:	801a      	strh	r2, [r3, #0]
             break;
 8006dc4:	e00e      	b.n	8006de4 <OSMutexPend+0x1c0>
             if (p_ts != (CPU_TS *)0) {
                *p_ts = 0u;
             }
#endif
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            *p_err = OS_ERR_TIMEOUT;
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	f247 22d9 	movw	r2, #29401	@ 0x72d9
 8006dcc:	801a      	strh	r2, [r3, #0]
             break;
 8006dce:	e009      	b.n	8006de4 <OSMutexPend+0x1c0>
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            *p_err = OS_ERR_OBJ_DEL;
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	f645 52c2 	movw	r2, #24002	@ 0x5dc2
 8006dd6:	801a      	strh	r2, [r3, #0]
             break;
 8006dd8:	e004      	b.n	8006de4 <OSMutexPend+0x1c0>

        default:
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            *p_err = OS_ERR_STATUS_INVALID;
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	f646 622e 	movw	r2, #28206	@ 0x6e2e
 8006de0:	801a      	strh	r2, [r3, #0]
             break;
 8006de2:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
 8006de4:	6978      	ldr	r0, [r7, #20]
 8006de6:	f7f9 fa01 	bl	80001ec <CPU_SR_Restore>
    OS_TRACE_MUTEX_PEND_EXIT(*p_err);
}
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	200019a0 	.word	0x200019a0
 8006df4:	200019a1 	.word	0x200019a1
 8006df8:	5854554d 	.word	0x5854554d
 8006dfc:	20001d74 	.word	0x20001d74
 8006e00:	20001b5c 	.word	0x20001b5c

08006e04 <OS_MutexDbgListAdd>:
************************************************************************************************************************
*/

#if (OS_CFG_DBG_EN > 0u)
void  OS_MutexDbgListAdd (OS_MUTEX  *p_mutex)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
    p_mutex->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a0f      	ldr	r2, [pc, #60]	@ (8006e4c <OS_MutexDbgListAdd+0x48>)
 8006e10:	61da      	str	r2, [r3, #28]
    p_mutex->DbgPrevPtr               = (OS_MUTEX *)0;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	615a      	str	r2, [r3, #20]
    if (OSMutexDbgListPtr == (OS_MUTEX *)0) {
 8006e18:	4b0d      	ldr	r3, [pc, #52]	@ (8006e50 <OS_MutexDbgListAdd+0x4c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d103      	bne.n	8006e28 <OS_MutexDbgListAdd+0x24>
        p_mutex->DbgNextPtr           = (OS_MUTEX *)0;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	619a      	str	r2, [r3, #24]
 8006e26:	e007      	b.n	8006e38 <OS_MutexDbgListAdd+0x34>
    } else {
        p_mutex->DbgNextPtr           =  OSMutexDbgListPtr;
 8006e28:	4b09      	ldr	r3, [pc, #36]	@ (8006e50 <OS_MutexDbgListAdd+0x4c>)
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	619a      	str	r2, [r3, #24]
        OSMutexDbgListPtr->DbgPrevPtr =  p_mutex;
 8006e30:	4b07      	ldr	r3, [pc, #28]	@ (8006e50 <OS_MutexDbgListAdd+0x4c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	615a      	str	r2, [r3, #20]
    }
    OSMutexDbgListPtr                 =  p_mutex;
 8006e38:	4a05      	ldr	r2, [pc, #20]	@ (8006e50 <OS_MutexDbgListAdd+0x4c>)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6013      	str	r3, [r2, #0]
}
 8006e3e:	bf00      	nop
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	08008e30 	.word	0x08008e30
 8006e50:	200019c8 	.word	0x200019c8

08006e54 <OS_MutexGrpAdd>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpAdd (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
    p_mutex->MutexGrpNextPtr = p_tcb->MutexGrpHeadPtr;      /* The mutex grp is not sorted add to head of list.       */
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	621a      	str	r2, [r3, #32]
    p_tcb->MutexGrpHeadPtr   = p_mutex;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <OS_MutexGrpRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpRemove (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
    OS_MUTEX  **pp_mutex;

    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	3340      	adds	r3, #64	@ 0x40
 8006e86:	60fb      	str	r3, [r7, #12]

    while(*pp_mutex != p_mutex) {
 8006e88:	e003      	b.n	8006e92 <OS_MutexGrpRemove+0x1a>
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3320      	adds	r3, #32
 8006e90:	60fb      	str	r3, [r7, #12]
    while(*pp_mutex != p_mutex) {
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d1f6      	bne.n	8006e8a <OS_MutexGrpRemove+0x12>
    }

    *pp_mutex = (*pp_mutex)->MutexGrpNextPtr;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6a1a      	ldr	r2, [r3, #32]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	601a      	str	r2, [r3, #0]
}
 8006ea6:	bf00      	nop
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <OS_MutexGrpPrioFindHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_MutexGrpPrioFindHighest (OS_TCB  *p_tcb)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b087      	sub	sp, #28
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
    OS_PRIO     highest_prio;
    OS_PRIO     prio;
    OS_TCB     *p_head;


    highest_prio = (OS_PRIO)(OS_CFG_PRIO_MAX - 1u);
 8006eba:	231f      	movs	r3, #31
 8006ebc:	74fb      	strb	r3, [r7, #19]
    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	3340      	adds	r3, #64	@ 0x40
 8006ec2:	617b      	str	r3, [r7, #20]

    while(*pp_mutex != (OS_MUTEX *)0) {
 8006ec4:	e014      	b.n	8006ef0 <OS_MutexGrpPrioFindHighest+0x3e>
        p_head = (*pp_mutex)->PendList.HeadPtr;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	60fb      	str	r3, [r7, #12]
        if (p_head != (OS_TCB *)0) {
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d009      	beq.n	8006ee8 <OS_MutexGrpPrioFindHighest+0x36>
            prio = p_head->Prio;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8006eda:	72fb      	strb	r3, [r7, #11]
            if(prio < highest_prio) {
 8006edc:	7afa      	ldrb	r2, [r7, #11]
 8006ede:	7cfb      	ldrb	r3, [r7, #19]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d201      	bcs.n	8006ee8 <OS_MutexGrpPrioFindHighest+0x36>
                highest_prio = prio;
 8006ee4:	7afb      	ldrb	r3, [r7, #11]
 8006ee6:	74fb      	strb	r3, [r7, #19]
            }
        }
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3320      	adds	r3, #32
 8006eee:	617b      	str	r3, [r7, #20]
    while(*pp_mutex != (OS_MUTEX *)0) {
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e6      	bne.n	8006ec6 <OS_MutexGrpPrioFindHighest+0x14>
    }

    return (highest_prio);
 8006ef8:	7cfb      	ldrb	r3, [r7, #19]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	371c      	adds	r7, #28
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <OS_MutexGrpPostAll>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpPostAll (OS_TCB  *p_tcb)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b08a      	sub	sp, #40	@ 0x28
 8006f0a:	af02      	add	r7, sp, #8
 8006f0c:	6078      	str	r0, [r7, #4]
    CPU_TS         ts;
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb_new;


    p_mutex = p_tcb->MutexGrpHeadPtr;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f12:	61fb      	str	r3, [r7, #28]

    while(p_mutex != (OS_MUTEX *)0) {
 8006f14:	e02f      	b.n	8006f76 <OS_MutexGrpPostAll+0x70>

        OS_TRACE_MUTEX_POST(p_mutex);

        p_mutex_next = p_mutex->MutexGrpNextPtr;
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	61bb      	str	r3, [r7, #24]
#if (OS_CFG_TS_EN > 0u)
        ts           = OS_TS_GET();                             /* Get timestamp                                        */
        p_mutex->TS  = ts;
#else
        ts           = 0u;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	617b      	str	r3, [r7, #20]
#endif
        OS_MutexGrpRemove(p_tcb,  p_mutex);                     /* Remove mutex from owner's group                      */
 8006f20:	69f9      	ldr	r1, [r7, #28]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7ff ffa8 	bl	8006e78 <OS_MutexGrpRemove>

        p_pend_list = &p_mutex->PendList;
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	3308      	adds	r3, #8
 8006f2c:	613b      	str	r3, [r7, #16]
        if (p_pend_list->HeadPtr == (OS_TCB *)0) {              /* Any task waiting on mutex?                           */
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d107      	bne.n	8006f46 <OS_MutexGrpPostAll+0x40>
            p_mutex->OwnerNestingCtr =           0u;            /* Decrement owner's nesting counter                    */
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            p_mutex->OwnerTCBPtr     = (OS_TCB *)0;             /* No                                                   */
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	2200      	movs	r2, #0
 8006f42:	625a      	str	r2, [r3, #36]	@ 0x24
 8006f44:	e015      	b.n	8006f72 <OS_MutexGrpPostAll+0x6c>
        } else {
                                                                /* Get TCB from head of pend list                       */
            p_tcb_new                = p_pend_list->HeadPtr;
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60fb      	str	r3, [r7, #12]
            p_mutex->OwnerTCBPtr     = p_tcb;                   /* Give mutex to new owner                              */
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	625a      	str	r2, [r3, #36]	@ 0x24
            p_mutex->OwnerNestingCtr = 1u;
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            OS_MutexGrpAdd(p_tcb_new, p_mutex);
 8006f5a:	69f9      	ldr	r1, [r7, #28]
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f7ff ff79 	bl	8006e54 <OS_MutexGrpAdd>
                                                                /* Post to mutex                                        */
            OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	2300      	movs	r3, #0
 8006f68:	2200      	movs	r2, #0
 8006f6a:	68f9      	ldr	r1, [r7, #12]
 8006f6c:	69f8      	ldr	r0, [r7, #28]
 8006f6e:	f7fe fe09 	bl	8005b84 <OS_Post>
                                   (void *)0,
                                   0u,
                                   ts);
        }

        p_mutex = p_mutex_next;
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	61fb      	str	r3, [r7, #28]
    while(p_mutex != (OS_MUTEX *)0) {
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1cc      	bne.n	8006f16 <OS_MutexGrpPostAll+0x10>
    }

}
 8006f7c:	bf00      	nop
 8006f7e:	bf00      	nop
 8006f80:	3720      	adds	r7, #32
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
	...

08006f88 <OS_PrioInit>:
* Note       : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_PrioInit (void)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
    CPU_DATA  i;


                                                                /* Clear the bitmap table ... no task is ready          */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 8006f8e:	2300      	movs	r3, #0
 8006f90:	607b      	str	r3, [r7, #4]
 8006f92:	e007      	b.n	8006fa4 <OS_PrioInit+0x1c>
         OSPrioTbl[i] = 0u;
 8006f94:	4a08      	ldr	r2, [pc, #32]	@ (8006fb8 <OS_PrioInit+0x30>)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2100      	movs	r1, #0
 8006f9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	607b      	str	r3, [r7, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0f4      	beq.n	8006f94 <OS_PrioInit+0xc>
    }

#if (OS_CFG_TASK_IDLE_EN == 0u)
    OS_PrioInsert ((OS_PRIO)(OS_CFG_PRIO_MAX - 1u));            /* Insert what would be the idle task                   */
#endif
}
 8006faa:	bf00      	nop
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	200019d0 	.word	0x200019d0

08006fbc <OS_PrioGetHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_PrioGetHighest (void)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
#if   (OS_CFG_PRIO_MAX <= (CPU_CFG_DATA_SIZE * 8u))             /* Optimize for less than word size nbr of priorities   */
    return ((OS_PRIO)CPU_CntLeadZeros(OSPrioTbl[0]));
 8006fc0:	4b04      	ldr	r3, [pc, #16]	@ (8006fd4 <OS_PrioGetHighest+0x18>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7f9 f91e 	bl	8000206 <CPU_CntLeadZeros>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	b2db      	uxtb	r3, r3
    }
    prio += (OS_PRIO)CPU_CntLeadZeros(*p_tbl);                  /* Find the position of the first bit set at the entry  */

    return (prio);
#endif
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	200019d0 	.word	0x200019d0

08006fd8 <OS_PrioInsert>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioInsert (OS_PRIO  prio)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4603      	mov	r3, r0
 8006fe0:	71fb      	strb	r3, [r7, #7]
#if   (OS_CFG_PRIO_MAX <= (CPU_CFG_DATA_SIZE * 8u))             /* Optimize for less than word size nbr of priorities   */
    OSPrioTbl[0] |= (CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - prio);
 8006fe2:	4b08      	ldr	r3, [pc, #32]	@ (8007004 <OS_PrioInsert+0x2c>)
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	79fb      	ldrb	r3, [r7, #7]
 8006fe8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006fec:	fa21 f303 	lsr.w	r3, r1, r3
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	4a04      	ldr	r2, [pc, #16]	@ (8007004 <OS_PrioInsert+0x2c>)
 8006ff4:	6013      	str	r3, [r2, #0]

    ix             = (OS_PRIO)(prio /  (CPU_CFG_DATA_SIZE * 8u));
    bit_nbr        = (CPU_DATA)prio & ((CPU_CFG_DATA_SIZE * 8u) - 1u);
    OSPrioTbl[ix] |= (CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - bit_nbr);
#endif
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	200019d0 	.word	0x200019d0

08007008 <OS_PrioRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioRemove (OS_PRIO  prio)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	4603      	mov	r3, r0
 8007010:	71fb      	strb	r3, [r7, #7]
#if   (OS_CFG_PRIO_MAX <= (CPU_CFG_DATA_SIZE * 8u))             /* Optimize for less than word size nbr of priorities   */
    OSPrioTbl[0] &= ~((CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - prio));
 8007012:	4b08      	ldr	r3, [pc, #32]	@ (8007034 <OS_PrioRemove+0x2c>)
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800701c:	fa21 f303 	lsr.w	r3, r1, r3
 8007020:	43db      	mvns	r3, r3
 8007022:	4013      	ands	r3, r2
 8007024:	4a03      	ldr	r2, [pc, #12]	@ (8007034 <OS_PrioRemove+0x2c>)
 8007026:	6013      	str	r3, [r2, #0]

    ix             =   (OS_PRIO)(prio  /   (CPU_CFG_DATA_SIZE * 8u));
    bit_nbr        =   (CPU_DATA)prio  &  ((CPU_CFG_DATA_SIZE * 8u) - 1u);
    OSPrioTbl[ix] &= ~((CPU_DATA)  1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - bit_nbr));
#endif
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	200019d0 	.word	0x200019d0

08007038 <OSStatReset>:
* Note(s)    : none
************************************************************************************************************************
*/

void  OSStatReset (OS_ERR  *p_err)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
#endif
#if (OS_CFG_Q_EN > 0u)
    OS_Q        *p_q;
#endif
#endif
    CPU_SR_ALLOC();
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 8007044:	2040      	movs	r0, #64	@ 0x40
 8007046:	f7f9 f8c3 	bl	80001d0 <CPU_SR_Save>
 800704a:	60f8      	str	r0, [r7, #12]
#if (OS_CFG_STAT_TASK_EN > 0u)
    OSStatTaskCPUUsageMax = 0u;
 800704c:	4b33      	ldr	r3, [pc, #204]	@ (800711c <OSStatReset+0xe4>)
 800704e:	2200      	movs	r2, #0
 8007050:	801a      	strh	r2, [r3, #0]
#if (OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u)
    OSSchedLockTimeMax    = 0u;                                 /* Reset the maximum scheduler lock time                */
#endif

#if ((OS_MSG_EN > 0u) && (OS_CFG_DBG_EN > 0u))
    OSMsgPool.NbrUsedMax  = 0u;
 8007052:	4b33      	ldr	r3, [pc, #204]	@ (8007120 <OSStatReset+0xe8>)
 8007054:	2200      	movs	r2, #0
 8007056:	811a      	strh	r2, [r3, #8]
#endif
    CPU_CRITICAL_EXIT();
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f7f9 f8c7 	bl	80001ec <CPU_SR_Restore>

#if (OS_CFG_DBG_EN > 0u)
    CPU_CRITICAL_ENTER();
 800705e:	2040      	movs	r0, #64	@ 0x40
 8007060:	f7f9 f8b6 	bl	80001d0 <CPU_SR_Save>
 8007064:	60f8      	str	r0, [r7, #12]
    p_tcb = OSTaskDbgListPtr;
 8007066:	4b2f      	ldr	r3, [pc, #188]	@ (8007124 <OSStatReset+0xec>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	617b      	str	r3, [r7, #20]
    CPU_CRITICAL_EXIT();
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f7f9 f8bd 	bl	80001ec <CPU_SR_Restore>
    while (p_tcb != (OS_TCB *)0) {                              /* Reset per-Task statistics                            */
 8007072:	e02b      	b.n	80070cc <OSStatReset+0x94>
        CPU_CRITICAL_ENTER();
 8007074:	2040      	movs	r0, #64	@ 0x40
 8007076:	f7f9 f8ab 	bl	80001d0 <CPU_SR_Save>
 800707a:	60f8      	str	r0, [r7, #12]
        p_tcb->SchedLockTimeMax = 0u;
#endif

#if (OS_CFG_TASK_PROFILE_EN > 0u)
#if (OS_CFG_TASK_Q_EN > 0u)
        p_tcb->MsgQPendTimeMax  = 0u;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2200      	movs	r2, #0
 8007080:	675a      	str	r2, [r3, #116]	@ 0x74
#endif
        p_tcb->SemPendTimeMax   = 0u;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2200      	movs	r2, #0
 8007086:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        p_tcb->CtxSwCtr         = 0u;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2200      	movs	r2, #0
 800708e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        p_tcb->CPUUsage         = 0u;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2200      	movs	r2, #0
 8007096:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
        p_tcb->CPUUsageMax      = 0u;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2200      	movs	r2, #0
 800709e:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
        p_tcb->CyclesTotal      = 0u;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        p_tcb->CyclesTotalPrev  = 0u;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        p_tcb->CyclesStart      = OS_TS_GET();
#endif
#endif

#if (OS_CFG_TASK_Q_EN > 0u)
        p_msg_q                 = &p_tcb->MsgQ;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	3360      	adds	r3, #96	@ 0x60
 80070b6:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax  = 0u;
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2200      	movs	r2, #0
 80070bc:	819a      	strh	r2, [r3, #12]
#endif
        p_tcb                   = p_tcb->DbgNextPtr;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070c4:	617b      	str	r3, [r7, #20]
        CPU_CRITICAL_EXIT();
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7f9 f890 	bl	80001ec <CPU_SR_Restore>
    while (p_tcb != (OS_TCB *)0) {                              /* Reset per-Task statistics                            */
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1d0      	bne.n	8007074 <OSStatReset+0x3c>
    }
#endif

#if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
    CPU_CRITICAL_ENTER();
 80070d2:	2040      	movs	r0, #64	@ 0x40
 80070d4:	f7f9 f87c 	bl	80001d0 <CPU_SR_Save>
 80070d8:	60f8      	str	r0, [r7, #12]
    p_q = OSQDbgListPtr;
 80070da:	4b13      	ldr	r3, [pc, #76]	@ (8007128 <OSStatReset+0xf0>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f7f9 f883 	bl	80001ec <CPU_SR_Restore>
    while (p_q != (OS_Q *)0) {                                  /* Reset message queues statistics                      */
 80070e6:	e00f      	b.n	8007108 <OSStatReset+0xd0>
        CPU_CRITICAL_ENTER();
 80070e8:	2040      	movs	r0, #64	@ 0x40
 80070ea:	f7f9 f871 	bl	80001d0 <CPU_SR_Save>
 80070ee:	60f8      	str	r0, [r7, #12]
        p_msg_q                = &p_q->MsgQ;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	3320      	adds	r3, #32
 80070f4:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax = 0u;
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2200      	movs	r2, #0
 80070fa:	819a      	strh	r2, [r3, #12]
        p_q                    = p_q->DbgNextPtr;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	613b      	str	r3, [r7, #16]
        CPU_CRITICAL_EXIT();
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7f9 f872 	bl	80001ec <CPU_SR_Restore>
    while (p_q != (OS_Q *)0) {                                  /* Reset message queues statistics                      */
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1ec      	bne.n	80070e8 <OSStatReset+0xb0>
    }
#endif


   *p_err = OS_ERR_NONE;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	801a      	strh	r2, [r3, #0]
}
 8007114:	bf00      	nop
 8007116:	3718      	adds	r7, #24
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	20001b6a 	.word	0x20001b6a
 8007120:	200019bc 	.word	0x200019bc
 8007124:	20001c3c 	.word	0x20001c3c
 8007128:	200019d4 	.word	0x200019d4

0800712c <OS_StatTask>:
*              4) This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTask (void  *p_arg)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b092      	sub	sp, #72	@ 0x48
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) && (OS_CFG_ISR_STK_SIZE > 0u)
    CPU_STK     *p_stk;
    CPU_INT32U   free_stk;
    CPU_INT32U   size_stk;
#endif
    CPU_SR_ALLOC();
 8007134:	2300      	movs	r3, #0
 8007136:	61bb      	str	r3, [r7, #24]


    (void)p_arg;                                                /* Prevent compiler warning for not using 'p_arg'       */

    while (OSStatTaskRdy != OS_TRUE) {
 8007138:	e008      	b.n	800714c <OS_StatTask+0x20>
        OSTimeDly(2u * OSCfg_StatTaskRate_Hz,                   /* Wait until statistic task is ready                   */
 800713a:	4b85      	ldr	r3, [pc, #532]	@ (8007350 <OS_StatTask+0x224>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	f107 020e 	add.w	r2, r7, #14
 8007144:	2100      	movs	r1, #0
 8007146:	4618      	mov	r0, r3
 8007148:	f001 f924 	bl	8008394 <OSTimeDly>
    while (OSStatTaskRdy != OS_TRUE) {
 800714c:	4b81      	ldr	r3, [pc, #516]	@ (8007354 <OS_StatTask+0x228>)
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d1f2      	bne.n	800713a <OS_StatTask+0xe>
                  OS_OPT_TIME_DLY,
                  &err);
    }
    OSStatReset(&err);                                          /* Reset statistics                                     */
 8007154:	f107 030e 	add.w	r3, r7, #14
 8007158:	4618      	mov	r0, r3
 800715a:	f7ff ff6d 	bl	8007038 <OSStatReset>

    dly = (OS_TICK)0;                                           /* Compute statistic task sleep delay                   */
 800715e:	2300      	movs	r3, #0
 8007160:	627b      	str	r3, [r7, #36]	@ 0x24
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 8007162:	4b7d      	ldr	r3, [pc, #500]	@ (8007358 <OS_StatTask+0x22c>)
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	4b7a      	ldr	r3, [pc, #488]	@ (8007350 <OS_StatTask+0x224>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d906      	bls.n	800717c <OS_StatTask+0x50>
        dly = (OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 800716e:	4b7a      	ldr	r3, [pc, #488]	@ (8007358 <OS_StatTask+0x22c>)
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	4b77      	ldr	r3, [pc, #476]	@ (8007350 <OS_StatTask+0x224>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	fbb2 f3f3 	udiv	r3, r2, r3
 800717a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    if (dly == 0u) {
 800717c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717e:	2b00      	cmp	r3, #0
 8007180:	d106      	bne.n	8007190 <OS_StatTask+0x64>
        dly =  (OSCfg_TickRate_Hz / 10u);
 8007182:	4b75      	ldr	r3, [pc, #468]	@ (8007358 <OS_StatTask+0x22c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a75      	ldr	r2, [pc, #468]	@ (800735c <OS_StatTask+0x230>)
 8007188:	fba2 2303 	umull	r2, r3, r2, r3
 800718c:	08db      	lsrs	r3, r3, #3
 800718e:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef  CPU_CFG_INT_DIS_MEAS_EN
        OSIntDisTimeMax = CPU_IntDisMeasMaxGet();
#endif
#endif

        CPU_CRITICAL_ENTER();                                   /* ---------------- OVERALL CPU USAGE ----------------- */
 8007190:	2040      	movs	r0, #64	@ 0x40
 8007192:	f7f9 f81d 	bl	80001d0 <CPU_SR_Save>
 8007196:	61b8      	str	r0, [r7, #24]
        OSStatTaskCtrRun   = OSStatTaskCtr;                     /* Obtain the of the stat counter for the past .1 second*/
 8007198:	4b71      	ldr	r3, [pc, #452]	@ (8007360 <OS_StatTask+0x234>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a71      	ldr	r2, [pc, #452]	@ (8007364 <OS_StatTask+0x238>)
 800719e:	6013      	str	r3, [r2, #0]
        OSStatTaskCtr      = 0u;                                /* Reset the stat counter for the next .1 second        */
 80071a0:	4b6f      	ldr	r3, [pc, #444]	@ (8007360 <OS_StatTask+0x234>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	601a      	str	r2, [r3, #0]
        CPU_CRITICAL_EXIT();
 80071a6:	69b8      	ldr	r0, [r7, #24]
 80071a8:	f7f9 f820 	bl	80001ec <CPU_SR_Restore>

        if (OSStatTaskCtrMax > OSStatTaskCtrRun) {              /* Compute CPU Usage with best resolution               */
 80071ac:	4b6e      	ldr	r3, [pc, #440]	@ (8007368 <OS_StatTask+0x23c>)
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	4b6c      	ldr	r3, [pc, #432]	@ (8007364 <OS_StatTask+0x238>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d94f      	bls.n	8007258 <OS_StatTask+0x12c>
            if (OSStatTaskCtrMax < 400000u) {                   /* 1 to       400,000                                   */
 80071b8:	4b6b      	ldr	r3, [pc, #428]	@ (8007368 <OS_StatTask+0x23c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a6b      	ldr	r2, [pc, #428]	@ (800736c <OS_StatTask+0x240>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d805      	bhi.n	80071ce <OS_StatTask+0xa2>
                ctr_mult = 10000u;
 80071c2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80071c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  =     1u;
 80071c8:	2301      	movs	r3, #1
 80071ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071cc:	e024      	b.n	8007218 <OS_StatTask+0xec>
            } else if (OSStatTaskCtrMax <   4000000u) {         /* 400,000 to     4,000,000                             */
 80071ce:	4b66      	ldr	r3, [pc, #408]	@ (8007368 <OS_StatTask+0x23c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a67      	ldr	r2, [pc, #412]	@ (8007370 <OS_StatTask+0x244>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d805      	bhi.n	80071e4 <OS_StatTask+0xb8>
                ctr_mult =  1000u;
 80071d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80071dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  =    10u;
 80071de:	230a      	movs	r3, #10
 80071e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071e2:	e019      	b.n	8007218 <OS_StatTask+0xec>
            } else if (OSStatTaskCtrMax <  40000000u) {         /* 4,000,000 to    40,000,000                           */
 80071e4:	4b60      	ldr	r3, [pc, #384]	@ (8007368 <OS_StatTask+0x23c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a62      	ldr	r2, [pc, #392]	@ (8007374 <OS_StatTask+0x248>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d204      	bcs.n	80071f8 <OS_StatTask+0xcc>
                ctr_mult =   100u;
 80071ee:	2364      	movs	r3, #100	@ 0x64
 80071f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  =   100u;
 80071f2:	2364      	movs	r3, #100	@ 0x64
 80071f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071f6:	e00f      	b.n	8007218 <OS_StatTask+0xec>
            } else if (OSStatTaskCtrMax < 400000000u) {         /* 40,000,000 to   400,000,000                          */
 80071f8:	4b5b      	ldr	r3, [pc, #364]	@ (8007368 <OS_StatTask+0x23c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a5e      	ldr	r2, [pc, #376]	@ (8007378 <OS_StatTask+0x24c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d805      	bhi.n	800720e <OS_StatTask+0xe2>
                ctr_mult =    10u;
 8007202:	230a      	movs	r3, #10
 8007204:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  =  1000u;
 8007206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800720a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800720c:	e004      	b.n	8007218 <OS_StatTask+0xec>
            } else {                                            /* 400,000,000 and up                                   */
                ctr_mult =     1u;
 800720e:	2301      	movs	r3, #1
 8007210:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  = 10000u;
 8007212:	f242 7310 	movw	r3, #10000	@ 0x2710
 8007216:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
            ctr_max            = OSStatTaskCtrMax / ctr_div;
 8007218:	4b53      	ldr	r3, [pc, #332]	@ (8007368 <OS_StatTask+0x23c>)
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007222:	617b      	str	r3, [r7, #20]
            OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ((ctr_mult * OSStatTaskCtrRun) / ctr_max));
 8007224:	4b4f      	ldr	r3, [pc, #316]	@ (8007364 <OS_StatTask+0x238>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800722a:	fb03 f202 	mul.w	r2, r3, r2
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	fbb2 f3f3 	udiv	r3, r2, r3
 8007234:	b29b      	uxth	r3, r3
 8007236:	f5c3 531c 	rsb	r3, r3, #9984	@ 0x2700
 800723a:	3310      	adds	r3, #16
 800723c:	b29a      	uxth	r2, r3
 800723e:	4b4f      	ldr	r3, [pc, #316]	@ (800737c <OS_StatTask+0x250>)
 8007240:	801a      	strh	r2, [r3, #0]
            if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
 8007242:	4b4f      	ldr	r3, [pc, #316]	@ (8007380 <OS_StatTask+0x254>)
 8007244:	881a      	ldrh	r2, [r3, #0]
 8007246:	4b4d      	ldr	r3, [pc, #308]	@ (800737c <OS_StatTask+0x250>)
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	429a      	cmp	r2, r3
 800724c:	d207      	bcs.n	800725e <OS_StatTask+0x132>
                OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
 800724e:	4b4b      	ldr	r3, [pc, #300]	@ (800737c <OS_StatTask+0x250>)
 8007250:	881a      	ldrh	r2, [r3, #0]
 8007252:	4b4b      	ldr	r3, [pc, #300]	@ (8007380 <OS_StatTask+0x254>)
 8007254:	801a      	strh	r2, [r3, #0]
 8007256:	e002      	b.n	800725e <OS_StatTask+0x132>
            }
        } else {
            OSStatTaskCPUUsage = 0u;
 8007258:	4b48      	ldr	r3, [pc, #288]	@ (800737c <OS_StatTask+0x250>)
 800725a:	2200      	movs	r2, #0
 800725c:	801a      	strh	r2, [r3, #0]
        }

        OSStatTaskHook();                                       /* Invoke user definable hook                           */
 800725e:	f7fd ff5b 	bl	8005118 <OSStatTaskHook>


#if (OS_CFG_DBG_EN > 0u)
#if (OS_CFG_TASK_PROFILE_EN > 0u)
        cycles_total = 0u;
 8007262:	2300      	movs	r3, #0
 8007264:	643b      	str	r3, [r7, #64]	@ 0x40

        CPU_CRITICAL_ENTER();
 8007266:	2040      	movs	r0, #64	@ 0x40
 8007268:	f7f8 ffb2 	bl	80001d0 <CPU_SR_Save>
 800726c:	61b8      	str	r0, [r7, #24]
        p_tcb = OSTaskDbgListPtr;
 800726e:	4b45      	ldr	r3, [pc, #276]	@ (8007384 <OS_StatTask+0x258>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	633b      	str	r3, [r7, #48]	@ 0x30
        CPU_CRITICAL_EXIT();
 8007274:	69b8      	ldr	r0, [r7, #24]
 8007276:	f7f8 ffb9 	bl	80001ec <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {                          /* ---------------- TOTAL CYCLES COUNT ---------------- */
 800727a:	e021      	b.n	80072c0 <OS_StatTask+0x194>
            CPU_CRITICAL_ENTER();
 800727c:	2040      	movs	r0, #64	@ 0x40
 800727e:	f7f8 ffa7 	bl	80001d0 <CPU_SR_Save>
 8007282:	61b8      	str	r0, [r7, #24]
            p_tcb->CyclesTotalPrev = p_tcb->CyclesTotal;        /* Save accumulated # cycles into a temp variable       */
 8007284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007286:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800728a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
            p_tcb->CyclesTotal     = 0u;                        /* Reset total cycles for task for next run             */
 8007290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007292:	2200      	movs	r2, #0
 8007294:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            CPU_CRITICAL_EXIT();
 8007298:	69b8      	ldr	r0, [r7, #24]
 800729a:	f7f8 ffa7 	bl	80001ec <CPU_SR_Restore>

            cycles_total          += p_tcb->CyclesTotalPrev;    /* Perform sum of all task # cycles                     */
 800729e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80072a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072a6:	4413      	add	r3, r2
 80072a8:	643b      	str	r3, [r7, #64]	@ 0x40

            CPU_CRITICAL_ENTER();
 80072aa:	2040      	movs	r0, #64	@ 0x40
 80072ac:	f7f8 ff90 	bl	80001d0 <CPU_SR_Save>
 80072b0:	61b8      	str	r0, [r7, #24]
            p_tcb                  = p_tcb->DbgNextPtr;
 80072b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80072b8:	633b      	str	r3, [r7, #48]	@ 0x30
            CPU_CRITICAL_EXIT();
 80072ba:	69b8      	ldr	r0, [r7, #24]
 80072bc:	f7f8 ff96 	bl	80001ec <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {                          /* ---------------- TOTAL CYCLES COUNT ---------------- */
 80072c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1da      	bne.n	800727c <OS_StatTask+0x150>
#endif


#if (OS_CFG_TASK_PROFILE_EN > 0u)
                                                                /* ------------ INDIVIDUAL TASK CPU USAGE ------------- */
        if (cycles_total > 0u) {                                /* 'cycles_total' scaling ...                           */
 80072c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d031      	beq.n	8007330 <OS_StatTask+0x204>
            if (cycles_total < 400000u) {                       /* 1 to       400,000                                   */
 80072cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072ce:	4a27      	ldr	r2, [pc, #156]	@ (800736c <OS_StatTask+0x240>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d805      	bhi.n	80072e0 <OS_StatTask+0x1b4>
                cycles_mult = 10000u;
 80072d4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80072d8:	63bb      	str	r3, [r7, #56]	@ 0x38
                cycles_div  =     1u;
 80072da:	2301      	movs	r3, #1
 80072dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072de:	e021      	b.n	8007324 <OS_StatTask+0x1f8>
            } else if (cycles_total <   4000000u) {             /* 400,000 to     4,000,000                             */
 80072e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072e2:	4a23      	ldr	r2, [pc, #140]	@ (8007370 <OS_StatTask+0x244>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d805      	bhi.n	80072f4 <OS_StatTask+0x1c8>
                cycles_mult =  1000u;
 80072e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80072ec:	63bb      	str	r3, [r7, #56]	@ 0x38
                cycles_div  =    10u;
 80072ee:	230a      	movs	r3, #10
 80072f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072f2:	e017      	b.n	8007324 <OS_StatTask+0x1f8>
            } else if (cycles_total <  40000000u) {             /* 4,000,000 to    40,000,000                           */
 80072f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072f6:	4a1f      	ldr	r2, [pc, #124]	@ (8007374 <OS_StatTask+0x248>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d204      	bcs.n	8007306 <OS_StatTask+0x1da>
                cycles_mult =   100u;
 80072fc:	2364      	movs	r3, #100	@ 0x64
 80072fe:	63bb      	str	r3, [r7, #56]	@ 0x38
                cycles_div  =   100u;
 8007300:	2364      	movs	r3, #100	@ 0x64
 8007302:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007304:	e00e      	b.n	8007324 <OS_StatTask+0x1f8>
            } else if (cycles_total < 400000000u) {             /* 40,000,000 to   400,000,000                          */
 8007306:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007308:	4a1b      	ldr	r2, [pc, #108]	@ (8007378 <OS_StatTask+0x24c>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d805      	bhi.n	800731a <OS_StatTask+0x1ee>
                cycles_mult =    10u;
 800730e:	230a      	movs	r3, #10
 8007310:	63bb      	str	r3, [r7, #56]	@ 0x38
                cycles_div  =  1000u;
 8007312:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007318:	e004      	b.n	8007324 <OS_StatTask+0x1f8>
            } else {                                            /* 400,000,000 and up                                   */
                cycles_mult =     1u;
 800731a:	2301      	movs	r3, #1
 800731c:	63bb      	str	r3, [r7, #56]	@ 0x38
                cycles_div  = 10000u;
 800731e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8007322:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            cycles_max  = cycles_total / cycles_div;
 8007324:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007328:	fbb2 f3f3 	udiv	r3, r2, r3
 800732c:	637b      	str	r3, [r7, #52]	@ 0x34
 800732e:	e003      	b.n	8007338 <OS_StatTask+0x20c>
        } else {
            cycles_mult = 0u;
 8007330:	2300      	movs	r3, #0
 8007332:	63bb      	str	r3, [r7, #56]	@ 0x38
            cycles_max  = 1u;
 8007334:	2301      	movs	r3, #1
 8007336:	637b      	str	r3, [r7, #52]	@ 0x34
        }
#endif
        CPU_CRITICAL_ENTER();
 8007338:	2040      	movs	r0, #64	@ 0x40
 800733a:	f7f8 ff49 	bl	80001d0 <CPU_SR_Save>
 800733e:	61b8      	str	r0, [r7, #24]
        p_tcb = OSTaskDbgListPtr;
 8007340:	4b10      	ldr	r3, [pc, #64]	@ (8007384 <OS_StatTask+0x258>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	633b      	str	r3, [r7, #48]	@ 0x30
        CPU_CRITICAL_EXIT();
 8007346:	69b8      	ldr	r0, [r7, #24]
 8007348:	f7f8 ff50 	bl	80001ec <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {
 800734c:	e058      	b.n	8007400 <OS_StatTask+0x2d4>
 800734e:	bf00      	nop
 8007350:	08008ebc 	.word	0x08008ebc
 8007354:	20001b78 	.word	0x20001b78
 8007358:	08008ed0 	.word	0x08008ed0
 800735c:	cccccccd 	.word	0xcccccccd
 8007360:	20001b6c 	.word	0x20001b6c
 8007364:	20001b74 	.word	0x20001b74
 8007368:	20001b70 	.word	0x20001b70
 800736c:	00061a7f 	.word	0x00061a7f
 8007370:	003d08ff 	.word	0x003d08ff
 8007374:	02625a00 	.word	0x02625a00
 8007378:	17d783ff 	.word	0x17d783ff
 800737c:	20001b68 	.word	0x20001b68
 8007380:	20001b6a 	.word	0x20001b6a
 8007384:	20001c3c 	.word	0x20001c3c
#if (OS_CFG_TASK_PROFILE_EN > 0u)                               /* Compute execution time of each task                  */
            usage = (OS_CPU_USAGE)(cycles_mult * p_tcb->CyclesTotalPrev / cycles_max);
 8007388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800738a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800738e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007390:	fb03 f202 	mul.w	r2, r3, r2
 8007394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007396:	fbb2 f3f3 	udiv	r3, r2, r3
 800739a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            if (usage > 10000u) {
 800739e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80073a2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d903      	bls.n	80073b2 <OS_StatTask+0x286>
                usage = 10000u;
 80073aa:	f242 7310 	movw	r3, #10000	@ 0x2710
 80073ae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            }
            p_tcb->CPUUsage = usage;
 80073b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80073b8:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            if (p_tcb->CPUUsageMax < usage) {                   /* Detect peak CPU usage                                */
 80073bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073be:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80073c2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d904      	bls.n	80073d4 <OS_StatTask+0x2a8>
                p_tcb->CPUUsageMax = usage;
 80073ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073cc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80073d0:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            }
#endif

#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u)
            OSTaskStkChk( p_tcb,                                /* Compute stack usage of active tasks only             */
 80073d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d6:	f103 01ac 	add.w	r1, r3, #172	@ 0xac
 80073da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073dc:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 80073e0:	f107 030e 	add.w	r3, r7, #14
 80073e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073e6:	f000 fadf 	bl	80079a8 <OSTaskStkChk>
                         &p_tcb->StkFree,
                         &p_tcb->StkUsed,
                         &err);
#endif

            CPU_CRITICAL_ENTER();
 80073ea:	2040      	movs	r0, #64	@ 0x40
 80073ec:	f7f8 fef0 	bl	80001d0 <CPU_SR_Save>
 80073f0:	61b8      	str	r0, [r7, #24]
            p_tcb = p_tcb->DbgNextPtr;
 80073f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80073f8:	633b      	str	r3, [r7, #48]	@ 0x30
            CPU_CRITICAL_EXIT();
 80073fa:	69b8      	ldr	r0, [r7, #24]
 80073fc:	f7f8 fef6 	bl	80001ec <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {
 8007400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1c0      	bne.n	8007388 <OS_StatTask+0x25c>
        }
#endif

                                                                /*------------------ Check ISR Stack -------------------*/
#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) && (OS_CFG_ISR_STK_SIZE > 0u)
        free_stk  = 0u;
 8007406:	2300      	movs	r3, #0
 8007408:	61fb      	str	r3, [r7, #28]
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
        p_stk     = OSCfg_ISRStkBasePtr;                        /*   Start at the lowest memory and go up               */
 800740a:	4b19      	ldr	r3, [pc, #100]	@ (8007470 <OS_StatTask+0x344>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	623b      	str	r3, [r7, #32]
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
        p_stk    += OS_CFG_TASK_STK_REDZONE_DEPTH;
        size_stk  = OSCfg_ISRStkSize - OS_CFG_TASK_STK_REDZONE_DEPTH;
#else
        size_stk  = OSCfg_ISRStkSize;
 8007410:	4b18      	ldr	r3, [pc, #96]	@ (8007474 <OS_StatTask+0x348>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	613b      	str	r3, [r7, #16]
#endif
        while ((*p_stk == 0u) && (free_stk < size_stk)) {       /*   Compute the number of zero entries on the stk      */
 8007416:	e005      	b.n	8007424 <OS_StatTask+0x2f8>
            p_stk++;
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	3304      	adds	r3, #4
 800741c:	623b      	str	r3, [r7, #32]
            free_stk++;
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	3301      	adds	r3, #1
 8007422:	61fb      	str	r3, [r7, #28]
        while ((*p_stk == 0u) && (free_stk < size_stk)) {       /*   Compute the number of zero entries on the stk      */
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d103      	bne.n	8007434 <OS_StatTask+0x308>
 800742c:	69fa      	ldr	r2, [r7, #28]
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	429a      	cmp	r2, r3
 8007432:	d3f1      	bcc.n	8007418 <OS_StatTask+0x2ec>
        while ((*p_stk == 0u) && (free_stk < size_stk)) {       /*   Compute the number of zero entries on the stk      */
            free_stk++;
            p_stk--;
        }
#endif
        OSISRStkFree = free_stk;
 8007434:	4a10      	ldr	r2, [pc, #64]	@ (8007478 <OS_StatTask+0x34c>)
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	6013      	str	r3, [r2, #0]
        OSISRStkUsed = OSCfg_ISRStkSize - free_stk;
 800743a:	4b0e      	ldr	r3, [pc, #56]	@ (8007474 <OS_StatTask+0x348>)
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	4a0e      	ldr	r2, [pc, #56]	@ (800747c <OS_StatTask+0x350>)
 8007444:	6013      	str	r3, [r2, #0]
#endif

        if (OSStatResetFlag == OS_TRUE) {                       /* Check if need to reset statistics                    */
 8007446:	4b0e      	ldr	r3, [pc, #56]	@ (8007480 <OS_StatTask+0x354>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d107      	bne.n	800745e <OS_StatTask+0x332>
            OSStatResetFlag  = OS_FALSE;
 800744e:	4b0c      	ldr	r3, [pc, #48]	@ (8007480 <OS_StatTask+0x354>)
 8007450:	2200      	movs	r2, #0
 8007452:	701a      	strb	r2, [r3, #0]
            OSStatReset(&err);
 8007454:	f107 030e 	add.w	r3, r7, #14
 8007458:	4618      	mov	r0, r3
 800745a:	f7ff fded 	bl	8007038 <OSStatReset>
        if (OSStatTaskTimeMax < OSStatTaskTime) {
            OSStatTaskTimeMax = OSStatTaskTime;
        }
#endif

        OSTimeDly(dly,
 800745e:	f107 030e 	add.w	r3, r7, #14
 8007462:	461a      	mov	r2, r3
 8007464:	2100      	movs	r1, #0
 8007466:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007468:	f000 ff94 	bl	8008394 <OSTimeDly>
        CPU_CRITICAL_ENTER();                                   /* ---------------- OVERALL CPU USAGE ----------------- */
 800746c:	e690      	b.n	8007190 <OS_StatTask+0x64>
 800746e:	bf00      	nop
 8007470:	08008ea8 	.word	0x08008ea8
 8007474:	08008eac 	.word	0x08008eac
 8007478:	200019a4 	.word	0x200019a4
 800747c:	200019a8 	.word	0x200019a8
 8007480:	20001b66 	.word	0x20001b66

08007484 <OS_StatTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTaskInit (OS_ERR  *p_err)
{
 8007484:	b590      	push	{r4, r7, lr}
 8007486:	b08d      	sub	sp, #52	@ 0x34
 8007488:	af0a      	add	r7, sp, #40	@ 0x28
 800748a:	6078      	str	r0, [r7, #4]
    OSStatTaskCtr    = 0u;
 800748c:	4b28      	ldr	r3, [pc, #160]	@ (8007530 <OS_StatTaskInit+0xac>)
 800748e:	2200      	movs	r2, #0
 8007490:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrRun = 0u;
 8007492:	4b28      	ldr	r3, [pc, #160]	@ (8007534 <OS_StatTaskInit+0xb0>)
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrMax = 0u;
 8007498:	4b27      	ldr	r3, [pc, #156]	@ (8007538 <OS_StatTaskInit+0xb4>)
 800749a:	2200      	movs	r2, #0
 800749c:	601a      	str	r2, [r3, #0]
    OSStatTaskRdy    = OS_STATE_NOT_RDY;                        /* Statistic task is not ready                          */
 800749e:	4b27      	ldr	r3, [pc, #156]	@ (800753c <OS_StatTaskInit+0xb8>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	701a      	strb	r2, [r3, #0]
    OSStatResetFlag  = OS_FALSE;
 80074a4:	4b26      	ldr	r3, [pc, #152]	@ (8007540 <OS_StatTaskInit+0xbc>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	701a      	strb	r2, [r3, #0]

#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) && (OS_CFG_ISR_STK_SIZE > 0u)
    OSISRStkFree     = 0u;
 80074aa:	4b26      	ldr	r3, [pc, #152]	@ (8007544 <OS_StatTaskInit+0xc0>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	601a      	str	r2, [r3, #0]
    OSISRStkUsed     = 0u;
 80074b0:	4b25      	ldr	r3, [pc, #148]	@ (8007548 <OS_StatTaskInit+0xc4>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	601a      	str	r2, [r3, #0]
#endif
                                                                /* --------------- CREATE THE STAT TASK --------------- */
    if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
 80074b6:	4b25      	ldr	r3, [pc, #148]	@ (800754c <OS_StatTaskInit+0xc8>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d104      	bne.n	80074c8 <OS_StatTaskInit+0x44>
       *p_err = OS_ERR_STAT_STK_INVALID;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f646 622b 	movw	r2, #28203	@ 0x6e2b
 80074c4:	801a      	strh	r2, [r3, #0]
        return;
 80074c6:	e02f      	b.n	8007528 <OS_StatTaskInit+0xa4>
    }

    if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
 80074c8:	4b21      	ldr	r3, [pc, #132]	@ (8007550 <OS_StatTaskInit+0xcc>)
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	4b21      	ldr	r3, [pc, #132]	@ (8007554 <OS_StatTaskInit+0xd0>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d204      	bcs.n	80074de <OS_StatTaskInit+0x5a>
       *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f646 622c 	movw	r2, #28204	@ 0x6e2c
 80074da:	801a      	strh	r2, [r3, #0]
        return;
 80074dc:	e024      	b.n	8007528 <OS_StatTaskInit+0xa4>
    }

    if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 80074de:	4b1e      	ldr	r3, [pc, #120]	@ (8007558 <OS_StatTaskInit+0xd4>)
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	2b1e      	cmp	r3, #30
 80074e4:	d904      	bls.n	80074f0 <OS_StatTaskInit+0x6c>
       *p_err = OS_ERR_STAT_PRIO_INVALID;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f646 622a 	movw	r2, #28202	@ 0x6e2a
 80074ec:	801a      	strh	r2, [r3, #0]
        return;
 80074ee:	e01b      	b.n	8007528 <OS_StatTaskInit+0xa4>
    }

    OSTaskCreate(&OSStatTaskTCB,
 80074f0:	4b19      	ldr	r3, [pc, #100]	@ (8007558 <OS_StatTaskInit+0xd4>)
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	4a15      	ldr	r2, [pc, #84]	@ (800754c <OS_StatTaskInit+0xc8>)
 80074f6:	6812      	ldr	r2, [r2, #0]
 80074f8:	4918      	ldr	r1, [pc, #96]	@ (800755c <OS_StatTaskInit+0xd8>)
 80074fa:	6809      	ldr	r1, [r1, #0]
 80074fc:	4814      	ldr	r0, [pc, #80]	@ (8007550 <OS_StatTaskInit+0xcc>)
 80074fe:	6800      	ldr	r0, [r0, #0]
 8007500:	687c      	ldr	r4, [r7, #4]
 8007502:	9408      	str	r4, [sp, #32]
 8007504:	2403      	movs	r4, #3
 8007506:	9407      	str	r4, [sp, #28]
 8007508:	2400      	movs	r4, #0
 800750a:	9406      	str	r4, [sp, #24]
 800750c:	2400      	movs	r4, #0
 800750e:	9405      	str	r4, [sp, #20]
 8007510:	2400      	movs	r4, #0
 8007512:	9404      	str	r4, [sp, #16]
 8007514:	9003      	str	r0, [sp, #12]
 8007516:	9102      	str	r1, [sp, #8]
 8007518:	9201      	str	r2, [sp, #4]
 800751a:	9300      	str	r3, [sp, #0]
 800751c:	2300      	movs	r3, #0
 800751e:	4a10      	ldr	r2, [pc, #64]	@ (8007560 <OS_StatTaskInit+0xdc>)
 8007520:	4910      	ldr	r1, [pc, #64]	@ (8007564 <OS_StatTaskInit+0xe0>)
 8007522:	4811      	ldr	r0, [pc, #68]	@ (8007568 <OS_StatTaskInit+0xe4>)
 8007524:	f000 f822 	bl	800756c <OSTaskCreate>
                  0u,
                  0u,
                 (void       *)0,
                 (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                  p_err);
}
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	bd90      	pop	{r4, r7, pc}
 800752e:	bf00      	nop
 8007530:	20001b6c 	.word	0x20001b6c
 8007534:	20001b74 	.word	0x20001b74
 8007538:	20001b70 	.word	0x20001b70
 800753c:	20001b78 	.word	0x20001b78
 8007540:	20001b66 	.word	0x20001b66
 8007544:	200019a4 	.word	0x200019a4
 8007548:	200019a8 	.word	0x200019a8
 800754c:	08008ec0 	.word	0x08008ec0
 8007550:	08008ec8 	.word	0x08008ec8
 8007554:	08008ecc 	.word	0x08008ecc
 8007558:	08008eb8 	.word	0x08008eb8
 800755c:	08008ec4 	.word	0x08008ec4
 8007560:	0800712d 	.word	0x0800712d
 8007564:	08008e34 	.word	0x08008e34
 8007568:	20001b7c 	.word	0x20001b7c

0800756c <OSTaskCreate>:
                    OS_MSG_QTY     q_size,
                    OS_TICK        time_quanta,
                    void          *p_ext,
                    OS_OPT         opt,
                    OS_ERR        *p_err)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08c      	sub	sp, #48	@ 0x30
 8007570:	af02      	add	r7, sp, #8
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
 8007578:	603b      	str	r3, [r7, #0]
    OS_TLS_ID      id;
#endif

    CPU_STK       *p_sp;
    CPU_STK       *p_stk_limit;
    CPU_SR_ALLOC();
 800757a:	2300      	movs	r3, #0
 800757c:	61bb      	str	r3, [r7, #24]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* --------- CANNOT CREATE A TASK FROM AN ISR --------- */
 800757e:	4b7f      	ldr	r3, [pc, #508]	@ (800777c <OSTaskCreate+0x210>)
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d004      	beq.n	8007590 <OSTaskCreate+0x24>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_TASK_CREATE_ISR;
 8007586:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007588:	f247 124a 	movw	r2, #29002	@ 0x714a
 800758c:	801a      	strh	r2, [r3, #0]
        return;
 800758e:	e0f1      	b.n	8007774 <OSTaskCreate+0x208>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)                                    /* ---------------- VALIDATE ARGUMENTS ---------------- */
    if (p_tcb == (OS_TCB *)0) {                                 /* User must supply a valid OS_TCB                      */
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d104      	bne.n	80075a0 <OSTaskCreate+0x34>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_TCB_INVALID;
 8007596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007598:	f247 12ad 	movw	r2, #29101	@ 0x71ad
 800759c:	801a      	strh	r2, [r3, #0]
        return;
 800759e:	e0e9      	b.n	8007774 <OSTaskCreate+0x208>
    }
    if (p_task == (OS_TASK_PTR)0u) {                            /* User must supply a valid task                        */
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d104      	bne.n	80075b0 <OSTaskCreate+0x44>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_TASK_INVALID;
 80075a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075a8:	f247 124f 	movw	r2, #29007	@ 0x714f
 80075ac:	801a      	strh	r2, [r3, #0]
        return;
 80075ae:	e0e1      	b.n	8007774 <OSTaskCreate+0x208>
    }
    if (p_stk_base == (CPU_STK *)0) {                           /* User must supply a valid stack base address          */
 80075b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d104      	bne.n	80075c0 <OSTaskCreate+0x54>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_STK_INVALID;
 80075b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075b8:	f646 622f 	movw	r2, #28207	@ 0x6e2f
 80075bc:	801a      	strh	r2, [r3, #0]
        return;
 80075be:	e0d9      	b.n	8007774 <OSTaskCreate+0x208>
    }
    if (stk_size < OSCfg_StkSizeMin) {                          /* User must supply a valid minimum stack size          */
 80075c0:	4b6f      	ldr	r3, [pc, #444]	@ (8007780 <OSTaskCreate+0x214>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d204      	bcs.n	80075d4 <OSTaskCreate+0x68>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_STK_SIZE_INVALID;
 80075ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075cc:	f646 6230 	movw	r2, #28208	@ 0x6e30
 80075d0:	801a      	strh	r2, [r3, #0]
        return;
 80075d2:	e0cf      	b.n	8007774 <OSTaskCreate+0x208>
    }
    if (stk_limit >= stk_size) {                                /* User must supply a valid stack limit                 */
 80075d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075d8:	429a      	cmp	r2, r3
 80075da:	d304      	bcc.n	80075e6 <OSTaskCreate+0x7a>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_STK_LIMIT_INVALID;
 80075dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075de:	f646 6231 	movw	r2, #28209	@ 0x6e31
 80075e2:	801a      	strh	r2, [r3, #0]
        return;
 80075e4:	e0c6      	b.n	8007774 <OSTaskCreate+0x208>
    }
    if ((prio  > (OS_CFG_PRIO_MAX - 2u)) &&                     /* Priority must be within 0 and OS_CFG_PRIO_MAX-1      */
 80075e6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80075ea:	2b1e      	cmp	r3, #30
 80075ec:	d908      	bls.n	8007600 <OSTaskCreate+0x94>
 80075ee:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80075f2:	2b1f      	cmp	r3, #31
 80075f4:	d004      	beq.n	8007600 <OSTaskCreate+0x94>
        (prio != (OS_CFG_PRIO_MAX - 1u))) {
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_PRIO_INVALID;
 80075f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075f8:	f246 2273 	movw	r2, #25203	@ 0x6273
 80075fc:	801a      	strh	r2, [r3, #0]
        return;
 80075fe:	e0b9      	b.n	8007774 <OSTaskCreate+0x208>
    }
#endif

    if (prio == (OS_CFG_PRIO_MAX - 1u)) {
 8007600:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8007604:	2b1f      	cmp	r3, #31
 8007606:	d108      	bne.n	800761a <OSTaskCreate+0xae>
#if (OS_CFG_TASK_IDLE_EN > 0u)
        if (p_tcb != &OSIdleTaskTCB) {
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	4a5e      	ldr	r2, [pc, #376]	@ (8007784 <OSTaskCreate+0x218>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d004      	beq.n	800761a <OSTaskCreate+0xae>
            OS_TRACE_TASK_CREATE_FAILED(p_tcb);
           *p_err = OS_ERR_PRIO_INVALID;                        /* Not allowed to use same priority as idle task        */
 8007610:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007612:	f246 2273 	movw	r2, #25203	@ 0x6273
 8007616:	801a      	strh	r2, [r3, #0]
            return;
 8007618:	e0ac      	b.n	8007774 <OSTaskCreate+0x208>
       *p_err = OS_ERR_PRIO_INVALID;                            /* Not allowed to use same priority as idle task        */
        return;
#endif
    }

    OS_TaskInitTCB(p_tcb);                                      /* Initialize the TCB to default values                 */
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 fac8 	bl	8007bb0 <OS_TaskInitTCB>

   *p_err = OS_ERR_NONE;
 8007620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007622:	2200      	movs	r2, #0
 8007624:	801a      	strh	r2, [r3, #0]
                                                                /* -------------- CLEAR THE TASK'S STACK -------------- */
    if (((opt & OS_OPT_TASK_STK_CHK) != 0u) ||                  /* See if stack checking has been enabled               */
 8007626:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b00      	cmp	r3, #0
 8007630:	d105      	bne.n	800763e <OSTaskCreate+0xd2>
        ((opt & OS_OPT_TASK_STK_CLR) != 0u)) {                  /* See if stack needs to be cleared                     */
 8007632:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007636:	f003 0302 	and.w	r3, r3, #2
    if (((opt & OS_OPT_TASK_STK_CHK) != 0u) ||                  /* See if stack checking has been enabled               */
 800763a:	2b00      	cmp	r3, #0
 800763c:	d017      	beq.n	800766e <OSTaskCreate+0x102>
        if ((opt & OS_OPT_TASK_STK_CLR) != 0u) {
 800763e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d011      	beq.n	800766e <OSTaskCreate+0x102>
            p_sp = p_stk_base;
 800764a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800764c:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {                   /* Stack grows from HIGH to LOW memory                  */
 800764e:	2300      	movs	r3, #0
 8007650:	627b      	str	r3, [r7, #36]	@ 0x24
 8007652:	e008      	b.n	8007666 <OSTaskCreate+0xfa>
               *p_sp = 0u;                                      /* Clear from bottom of stack and up!                   */
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	2200      	movs	r2, #0
 8007658:	601a      	str	r2, [r3, #0]
                p_sp++;
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	3304      	adds	r3, #4
 800765e:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {                   /* Stack grows from HIGH to LOW memory                  */
 8007660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007662:	3301      	adds	r3, #1
 8007664:	627b      	str	r3, [r7, #36]	@ 0x24
 8007666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800766a:	429a      	cmp	r2, r3
 800766c:	d3f2      	bcc.n	8007654 <OSTaskCreate+0xe8>
            }
        }
    }
                                                                /* ------ INITIALIZE THE STACK FRAME OF THE TASK ------ */
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    p_stk_limit = p_stk_base + stk_limit;
 800766e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007674:	4413      	add	r3, r2
 8007676:	617b      	str	r3, [r7, #20]
#else
    p_stk_limit = p_stk_base + (stk_size - 1u) - stk_limit;
#endif

    p_sp = OSTaskStkInit(p_task,
 8007678:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800767c:	9301      	str	r3, [sp, #4]
 800767e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f7fd fd89 	bl	80051a0 <OSTaskStkInit>
 800768e:	61f8      	str	r0, [r7, #28]
                         p_stk_limit,
                         stk_size,
                         opt);

#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)             /* Check if we overflown the stack during init          */
    if (p_sp < p_stk_base) {
 8007690:	69fa      	ldr	r2, [r7, #28]
 8007692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007694:	429a      	cmp	r2, r3
 8007696:	d204      	bcs.n	80076a2 <OSTaskCreate+0x136>
       *p_err = OS_ERR_STK_OVF;
 8007698:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800769a:	f646 6232 	movw	r2, #28210	@ 0x6e32
 800769e:	801a      	strh	r2, [r3, #0]
        return;
 80076a0:	e068      	b.n	8007774 <OSTaskCreate+0x208>
    OS_TaskStkRedzoneInit(p_stk_base, stk_size);
#endif

                                                                /* ------------ INITIALIZE THE TCB FIELDS ------------- */
#if (OS_CFG_DBG_EN > 0u)
    p_tcb->TaskEntryAddr = p_task;                              /* Save task entry point address                        */
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	625a      	str	r2, [r3, #36]	@ 0x24
    p_tcb->TaskEntryArg  = p_arg;                               /* Save task entry argument                             */
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

#if (OS_CFG_DBG_EN > 0u)
    p_tcb->NamePtr       = p_name;                              /* Save task name                                       */
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	60da      	str	r2, [r3, #12]
#else
    (void)p_name;
#endif

    p_tcb->Prio          = prio;                                /* Save the task's priority                             */
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80076ba:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

#if (OS_CFG_MUTEX_EN > 0u)
    p_tcb->BasePrio      = prio;                                /* Set the base priority                                */
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80076c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
#endif

    p_tcb->StkPtr        = p_sp;                                /* Save the new top-of-stack pointer                    */
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	69fa      	ldr	r2, [r7, #28]
 80076cc:	601a      	str	r2, [r3, #0]
    p_tcb->StkLimitPtr   = p_stk_limit;                         /* Save the stack limit pointer                         */
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	609a      	str	r2, [r3, #8]
    }
#else
    (void)time_quanta;
#endif

    p_tcb->ExtPtr        = p_ext;                               /* Save pointer to TCB extension                        */
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076d8:	605a      	str	r2, [r3, #4]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) || (OS_CFG_TASK_STK_REDZONE_EN > 0u))
    p_tcb->StkBasePtr    = p_stk_base;                          /* Save pointer to the base address of the stack        */
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076de:	621a      	str	r2, [r3, #32]
    p_tcb->StkSize       = stk_size;                            /* Save the stack size (in number of CPU_STK elements)  */
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80076e4:	645a      	str	r2, [r3, #68]	@ 0x44
#endif
    p_tcb->Opt           = opt;                                 /* Save task options                                    */
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80076ec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

#if (OS_CFG_TASK_REG_TBL_SIZE > 0u)
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 80076f0:	2300      	movs	r3, #0
 80076f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076f6:	e00b      	b.n	8007710 <OSTaskCreate+0x1a4>
        p_tcb->RegTbl[reg_nbr] = 0u;
 80076f8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	321e      	adds	r2, #30
 8007700:	2100      	movs	r1, #0
 8007702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 8007706:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800770a:	3301      	adds	r3, #1
 800770c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007710:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007714:	2b00      	cmp	r3, #0
 8007716:	d0ef      	beq.n	80076f8 <OSTaskCreate+0x18c>
    }
#endif

#if (OS_CFG_TASK_Q_EN > 0u)
    OS_MsgQInit(&p_tcb->MsgQ,                                   /* Initialize the task's message queue                  */
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3360      	adds	r3, #96	@ 0x60
 800771c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8007720:	4611      	mov	r1, r2
 8007722:	4618      	mov	r0, r3
 8007724:	f7ff fa0a 	bl	8006b3c <OS_MsgQInit>
                q_size);
#else
    (void)q_size;
#endif

    OSTaskCreateHook(p_tcb);                                    /* Call user defined hook                               */
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f7fd fd03 	bl	8005134 <OSTaskCreateHook>
        p_tcb->TLS_Tbl[id] = 0u;
    }
    OS_TLS_TaskCreate(p_tcb);                                   /* Call TLS hook                                        */
#endif
                                                                /* -------------- ADD TASK TO READY LIST -------------- */
    CPU_CRITICAL_ENTER();
 800772e:	2040      	movs	r0, #64	@ 0x40
 8007730:	f7f8 fd4e 	bl	80001d0 <CPU_SR_Save>
 8007734:	61b8      	str	r0, [r7, #24]
    OS_PrioInsert(p_tcb->Prio);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800773c:	4618      	mov	r0, r3
 800773e:	f7ff fc4b 	bl	8006fd8 <OS_PrioInsert>
    OS_RdyListInsertTail(p_tcb);
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f7fe fb18 	bl	8005d78 <OS_RdyListInsertTail>

#if (OS_CFG_DBG_EN > 0u)
    OS_TaskDbgListAdd(p_tcb);
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 f9ad 	bl	8007aa8 <OS_TaskDbgListAdd>
#endif

    OSTaskQty++;                                                /* Increment the #tasks counter                         */
 800774e:	4b0e      	ldr	r3, [pc, #56]	@ (8007788 <OSTaskCreate+0x21c>)
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	3301      	adds	r3, #1
 8007754:	b29a      	uxth	r2, r3
 8007756:	4b0c      	ldr	r3, [pc, #48]	@ (8007788 <OSTaskCreate+0x21c>)
 8007758:	801a      	strh	r2, [r3, #0]

    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Return if multitasking has not started               */
 800775a:	4b0c      	ldr	r3, [pc, #48]	@ (800778c <OSTaskCreate+0x220>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d003      	beq.n	800776a <OSTaskCreate+0x1fe>
        CPU_CRITICAL_EXIT();
 8007762:	69b8      	ldr	r0, [r7, #24]
 8007764:	f7f8 fd42 	bl	80001ec <CPU_SR_Restore>
        return;
 8007768:	e004      	b.n	8007774 <OSTaskCreate+0x208>
    }

    CPU_CRITICAL_EXIT();
 800776a:	69b8      	ldr	r0, [r7, #24]
 800776c:	f7f8 fd3e 	bl	80001ec <CPU_SR_Restore>

    OSSched();
 8007770:	f7fd ff72 	bl	8005658 <OSSched>
}
 8007774:	3728      	adds	r7, #40	@ 0x28
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	200019a0 	.word	0x200019a0
 8007780:	08008ecc 	.word	0x08008ecc
 8007784:	200018e4 	.word	0x200018e4
 8007788:	20001c40 	.word	0x20001c40
 800778c:	200019a1 	.word	0x200019a1

08007790 <OSTaskDel>:
*/

#if (OS_CFG_TASK_DEL_EN > 0u)
void  OSTaskDel (OS_TCB  *p_tcb,
                 OS_ERR  *p_err)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
#if (OS_CFG_MUTEX_EN > 0u)
    OS_TCB   *p_tcb_owner;
    OS_PRIO   prio_new;
#endif
    CPU_SR_ALLOC();
 800779a:	2300      	movs	r3, #0
 800779c:	613b      	str	r3, [r7, #16]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* See if trying to delete from ISR                     */
 800779e:	4b7d      	ldr	r3, [pc, #500]	@ (8007994 <OSTaskDel+0x204>)
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d004      	beq.n	80077b0 <OSTaskDel+0x20>
       *p_err = OS_ERR_TASK_DEL_ISR;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	f247 124e 	movw	r2, #29006	@ 0x714e
 80077ac:	801a      	strh	r2, [r3, #0]
        return;
 80077ae:	e0ed      	b.n	800798c <OSTaskDel+0x1fc>
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 80077b0:	4b79      	ldr	r3, [pc, #484]	@ (8007998 <OSTaskDel+0x208>)
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d004      	beq.n	80077c2 <OSTaskDel+0x32>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	f645 6289 	movw	r2, #24201	@ 0x5e89
 80077be:	801a      	strh	r2, [r3, #0]
        return;
 80077c0:	e0e4      	b.n	800798c <OSTaskDel+0x1fc>
    }
#endif

#if (OS_CFG_TASK_IDLE_EN > 0u)
    if (p_tcb == &OSIdleTaskTCB) {                              /* Not allowed to delete the idle task                  */
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a75      	ldr	r2, [pc, #468]	@ (800799c <OSTaskDel+0x20c>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d104      	bne.n	80077d4 <OSTaskDel+0x44>
       *p_err = OS_ERR_TASK_DEL_IDLE;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	f247 124c 	movw	r2, #29004	@ 0x714c
 80077d0:	801a      	strh	r2, [r3, #0]
        return;
 80077d2:	e0db      	b.n	800798c <OSTaskDel+0x1fc>
    }
#endif

    if (p_tcb == (OS_TCB *)0) {                                 /* Delete 'Self'?                                       */
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d109      	bne.n	80077ee <OSTaskDel+0x5e>
        CPU_CRITICAL_ENTER();
 80077da:	2040      	movs	r0, #64	@ 0x40
 80077dc:	f7f8 fcf8 	bl	80001d0 <CPU_SR_Save>
 80077e0:	6138      	str	r0, [r7, #16]
        p_tcb  = OSTCBCurPtr;                                   /* Yes.                                                 */
 80077e2:	4b6f      	ldr	r3, [pc, #444]	@ (80079a0 <OSTaskDel+0x210>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	607b      	str	r3, [r7, #4]
        CPU_CRITICAL_EXIT();
 80077e8:	6938      	ldr	r0, [r7, #16]
 80077ea:	f7f8 fcff 	bl	80001ec <CPU_SR_Restore>
    }

    CPU_CRITICAL_ENTER();
 80077ee:	2040      	movs	r0, #64	@ 0x40
 80077f0:	f7f8 fcee 	bl	80001d0 <CPU_SR_Save>
 80077f4:	6138      	str	r0, [r7, #16]
    switch (p_tcb->TaskState) {
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80077fc:	2b07      	cmp	r3, #7
 80077fe:	f200 8093 	bhi.w	8007928 <OSTaskDel+0x198>
 8007802:	a201      	add	r2, pc, #4	@ (adr r2, 8007808 <OSTaskDel+0x78>)
 8007804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007808:	08007829 	.word	0x08007829
 800780c:	08007831 	.word	0x08007831
 8007810:	08007839 	.word	0x08007839
 8007814:	08007839 	.word	0x08007839
 8007818:	08007939 	.word	0x08007939
 800781c:	08007831 	.word	0x08007831
 8007820:	08007839 	.word	0x08007839
 8007824:	08007839 	.word	0x08007839
        case OS_TASK_STATE_RDY:
             OS_RdyListRemove(p_tcb);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7fe fae5 	bl	8005df8 <OS_RdyListRemove>
             break;
 800782e:	e086      	b.n	800793e <OSTaskDel+0x1ae>
             break;

        case OS_TASK_STATE_DLY:                                 /* Task is only delayed, not on any wait list           */
        case OS_TASK_STATE_DLY_SUSPENDED:
#if (OS_CFG_TICK_EN > 0u)
             OS_TickListRemove(p_tcb);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fc7d 	bl	8008130 <OS_TickListRemove>
#endif
             break;
 8007836:	e082      	b.n	800793e <OSTaskDel+0x1ae>

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             switch (p_tcb->PendOn) {                           /* See what we are pending on                           */
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800783e:	2b07      	cmp	r3, #7
 8007840:	bf8c      	ite	hi
 8007842:	2201      	movhi	r2, #1
 8007844:	2200      	movls	r2, #0
 8007846:	b2d2      	uxtb	r2, r2
 8007848:	2a00      	cmp	r2, #0
 800784a:	d15a      	bne.n	8007902 <OSTaskDel+0x172>
 800784c:	2201      	movs	r2, #1
 800784e:	fa02 f303 	lsl.w	r3, r2, r3
 8007852:	f003 0262 	and.w	r2, r3, #98	@ 0x62
 8007856:	2a00      	cmp	r2, #0
 8007858:	bf14      	ite	ne
 800785a:	2201      	movne	r2, #1
 800785c:	2200      	moveq	r2, #0
 800785e:	b2d2      	uxtb	r2, r2
 8007860:	2a00      	cmp	r2, #0
 8007862:	d112      	bne.n	800788a <OSTaskDel+0xfa>
 8007864:	f003 0285 	and.w	r2, r3, #133	@ 0x85
 8007868:	2a00      	cmp	r2, #0
 800786a:	bf14      	ite	ne
 800786c:	2201      	movne	r2, #1
 800786e:	2200      	moveq	r2, #0
 8007870:	b2d2      	uxtb	r2, r2
 8007872:	2a00      	cmp	r2, #0
 8007874:	d147      	bne.n	8007906 <OSTaskDel+0x176>
 8007876:	f003 0310 	and.w	r3, r3, #16
 800787a:	2b00      	cmp	r3, #0
 800787c:	bf14      	ite	ne
 800787e:	2301      	movne	r3, #1
 8007880:	2300      	moveq	r3, #0
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	d104      	bne.n	8007892 <OSTaskDel+0x102>
                      break;
#endif

                 default:
                                                                /* Default case.                                        */
                      break;
 8007888:	e03b      	b.n	8007902 <OSTaskDel+0x172>
                      OS_PendListRemove(p_tcb);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7fe f924 	bl	8005ad8 <OS_PendListRemove>
                      break;
 8007890:	e03c      	b.n	800790c <OSTaskDel+0x17c>
                      p_tcb_owner = ((OS_MUTEX *)((void *)p_tcb->PendObjPtr))->OwnerTCBPtr;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007898:	60fb      	str	r3, [r7, #12]
                      prio_new = p_tcb_owner->Prio;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80078a0:	75fb      	strb	r3, [r7, #23]
                      OS_PendListRemove(p_tcb);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7fe f918 	bl	8005ad8 <OS_PendListRemove>
                      if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d014      	beq.n	80078e2 <OSTaskDel+0x152>
                          (p_tcb_owner->Prio == p_tcb->Prio)) { /* Has the owner inherited a priority?                  */
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
                      if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d10c      	bne.n	80078e2 <OSTaskDel+0x152>
                          prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f7ff faf2 	bl	8006eb2 <OS_MutexGrpPrioFindHighest>
 80078ce:	4603      	mov	r3, r0
 80078d0:	75fb      	strb	r3, [r7, #23]
                          prio_new = (prio_new > p_tcb_owner->BasePrio) ? p_tcb_owner->BasePrio : prio_new;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078d8:	7dfa      	ldrb	r2, [r7, #23]
 80078da:	4293      	cmp	r3, r2
 80078dc:	bf28      	it	cs
 80078de:	4613      	movcs	r3, r2
 80078e0:	75fb      	strb	r3, [r7, #23]
                      p_tcb->PendOn = OS_TASK_PEND_ON_NOTHING;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                      if (prio_new != p_tcb_owner->Prio) {
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80078f0:	7dfa      	ldrb	r2, [r7, #23]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d009      	beq.n	800790a <OSTaskDel+0x17a>
                          OS_TaskChangePrio(p_tcb_owner, prio_new);
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
 80078f8:	4619      	mov	r1, r3
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 fa2e 	bl	8007d5c <OS_TaskChangePrio>
                      break;
 8007900:	e003      	b.n	800790a <OSTaskDel+0x17a>
                      break;
 8007902:	bf00      	nop
 8007904:	e002      	b.n	800790c <OSTaskDel+0x17c>
                      break;
 8007906:	bf00      	nop
 8007908:	e000      	b.n	800790c <OSTaskDel+0x17c>
                      break;
 800790a:	bf00      	nop
             }
#if (OS_CFG_TICK_EN > 0u)
             if ((p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) ||
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007912:	2b03      	cmp	r3, #3
 8007914:	d004      	beq.n	8007920 <OSTaskDel+0x190>
                 (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED)) {
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
             if ((p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) ||
 800791c:	2b07      	cmp	r3, #7
 800791e:	d10d      	bne.n	800793c <OSTaskDel+0x1ac>
                 OS_TickListRemove(p_tcb);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fc05 	bl	8008130 <OS_TickListRemove>
             }
#endif
             break;
 8007926:	e009      	b.n	800793c <OSTaskDel+0x1ac>

        default:
            CPU_CRITICAL_EXIT();
 8007928:	6938      	ldr	r0, [r7, #16]
 800792a:	f7f8 fc5f 	bl	80001ec <CPU_SR_Restore>
           *p_err = OS_ERR_STATE_INVALID;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	f646 622d 	movw	r2, #28205	@ 0x6e2d
 8007934:	801a      	strh	r2, [r3, #0]
            return;
 8007936:	e029      	b.n	800798c <OSTaskDel+0x1fc>
             break;
 8007938:	bf00      	nop
 800793a:	e000      	b.n	800793e <OSTaskDel+0x1ae>
             break;
 800793c:	bf00      	nop
    }

#if (OS_CFG_MUTEX_EN > 0u)
    if(p_tcb->MutexGrpHeadPtr != (OS_MUTEX *)0) {
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <OSTaskDel+0x1bc>
        OS_MutexGrpPostAll(p_tcb);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7ff fadd 	bl	8006f06 <OS_MutexGrpPostAll>
    }
#endif

#if (OS_CFG_TASK_Q_EN > 0u)
    (void)OS_MsgQFreeAll(&p_tcb->MsgQ);                         /* Free task's message queue messages                   */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3360      	adds	r3, #96	@ 0x60
 8007950:	4618      	mov	r0, r3
 8007952:	f7ff f8b7 	bl	8006ac4 <OS_MsgQFreeAll>
#endif

    OSTaskDelHook(p_tcb);                                       /* Call user defined hook                               */
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7fd fbfe 	bl	8005158 <OSTaskDelHook>
#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskDel(p_tcb);                                      /* Call TLS hook                                        */
#endif

#if (OS_CFG_DBG_EN > 0u)
    OS_TaskDbgListRemove(p_tcb);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f8c9 	bl	8007af4 <OS_TaskDbgListRemove>
#endif

    OSTaskQty--;                                                /* One less task being managed                          */
 8007962:	4b10      	ldr	r3, [pc, #64]	@ (80079a4 <OSTaskDel+0x214>)
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	3b01      	subs	r3, #1
 8007968:	b29a      	uxth	r2, r3
 800796a:	4b0e      	ldr	r3, [pc, #56]	@ (80079a4 <OSTaskDel+0x214>)
 800796c:	801a      	strh	r2, [r3, #0]

    OS_TRACE_TASK_DEL(p_tcb);

#if (OS_CFG_TASK_STK_REDZONE_EN == 0u)                          /* Don't clear the TCB before checking the red-zone     */
    OS_TaskInitTCB(p_tcb);                                      /* Initialize the TCB to default values                 */
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f91e 	bl	8007bb0 <OS_TaskInitTCB>
#endif
    p_tcb->TaskState = (OS_STATE)OS_TASK_STATE_DEL;             /* Indicate that the task was deleted                   */
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	22ff      	movs	r2, #255	@ 0xff
 8007978:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

   *p_err = OS_ERR_NONE;                                        /* See Note #1.                                         */
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	2200      	movs	r2, #0
 8007980:	801a      	strh	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 8007982:	6938      	ldr	r0, [r7, #16]
 8007984:	f7f8 fc32 	bl	80001ec <CPU_SR_Restore>

    OSSched();                                                  /* Find new highest priority task                       */
 8007988:	f7fd fe66 	bl	8005658 <OSSched>
}
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	200019a0 	.word	0x200019a0
 8007998:	200019a1 	.word	0x200019a1
 800799c:	200018e4 	.word	0x200018e4
 80079a0:	20001d74 	.word	0x20001d74
 80079a4:	20001c40 	.word	0x20001c40

080079a8 <OSTaskStkChk>:
#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u)
void  OSTaskStkChk (OS_TCB        *p_tcb,
                    CPU_STK_SIZE  *p_free,
                    CPU_STK_SIZE  *p_used,
                    OS_ERR        *p_err)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b088      	sub	sp, #32
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	603b      	str	r3, [r7, #0]
    CPU_STK_SIZE  free_stk;
    CPU_STK_SIZE  stk_size;
    CPU_STK      *p_stk;
    CPU_SR_ALLOC();
 80079b6:	2300      	movs	r3, #0
 80079b8:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* See if trying to check stack from ISR                */
 80079ba:	4b39      	ldr	r3, [pc, #228]	@ (8007aa0 <OSTaskStkChk+0xf8>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <OSTaskStkChk+0x24>
       *p_err = OS_ERR_TASK_STK_CHK_ISR;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	f247 1259 	movw	r2, #29017	@ 0x7159
 80079c8:	801a      	strh	r2, [r3, #0]
        return;
 80079ca:	e065      	b.n	8007a98 <OSTaskStkChk+0xf0>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_free == (CPU_STK_SIZE *)0) {                          /* User must specify valid destinations for the sizes   */
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d104      	bne.n	80079dc <OSTaskStkChk+0x34>
       *p_err = OS_ERR_PTR_INVALID;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	f246 22d5 	movw	r2, #25301	@ 0x62d5
 80079d8:	801a      	strh	r2, [r3, #0]
        return;
 80079da:	e05d      	b.n	8007a98 <OSTaskStkChk+0xf0>
    }

    if (p_used == (CPU_STK_SIZE *)0) {
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d104      	bne.n	80079ec <OSTaskStkChk+0x44>
       *p_err = OS_ERR_PTR_INVALID;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	f246 22d5 	movw	r2, #25301	@ 0x62d5
 80079e8:	801a      	strh	r2, [r3, #0]
        return;
 80079ea:	e055      	b.n	8007a98 <OSTaskStkChk+0xf0>
    }
#endif

    CPU_CRITICAL_ENTER();
 80079ec:	2040      	movs	r0, #64	@ 0x40
 80079ee:	f7f8 fbef 	bl	80001d0 <CPU_SR_Save>
 80079f2:	6178      	str	r0, [r7, #20]
    if (p_tcb == (OS_TCB *)0) {                                 /* Check the stack of the current task?                 */
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d102      	bne.n	8007a00 <OSTaskStkChk+0x58>
        p_tcb = OSTCBCurPtr;                                    /* Yes                                                  */
 80079fa:	4b2a      	ldr	r3, [pc, #168]	@ (8007aa4 <OSTaskStkChk+0xfc>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	60fb      	str	r3, [r7, #12]
    }

    if (p_tcb->StkPtr == (CPU_STK *)0) {                        /* Make sure task exist                                 */
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10d      	bne.n	8007a24 <OSTaskStkChk+0x7c>
        CPU_CRITICAL_EXIT();
 8007a08:	6978      	ldr	r0, [r7, #20]
 8007a0a:	f7f8 fbef 	bl	80001ec <CPU_SR_Restore>
       *p_free = 0u;
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	2200      	movs	r2, #0
 8007a12:	601a      	str	r2, [r3, #0]
       *p_used = 0u;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]
       *p_err  = OS_ERR_TASK_NOT_EXIST;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	f247 1252 	movw	r2, #29010	@ 0x7152
 8007a20:	801a      	strh	r2, [r3, #0]
        return;
 8007a22:	e039      	b.n	8007a98 <OSTaskStkChk+0xf0>
    }

    if ((p_tcb->Opt & OS_OPT_TASK_STK_CHK) == 0u) {             /* Make sure stack checking option is set               */
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10d      	bne.n	8007a4e <OSTaskStkChk+0xa6>
        CPU_CRITICAL_EXIT();
 8007a32:	6978      	ldr	r0, [r7, #20]
 8007a34:	f7f8 fbda 	bl	80001ec <CPU_SR_Restore>
       *p_free = 0u;
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	601a      	str	r2, [r3, #0]
       *p_used = 0u;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	601a      	str	r2, [r3, #0]
       *p_err  = OS_ERR_TASK_OPT;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	f247 1254 	movw	r2, #29012	@ 0x7154
 8007a4a:	801a      	strh	r2, [r3, #0]
        return;
 8007a4c:	e024      	b.n	8007a98 <OSTaskStkChk+0xf0>
    }

#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    p_stk = p_tcb->StkBasePtr;                                  /* Start at the lowest memory and go up                 */
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	61bb      	str	r3, [r7, #24]
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
    p_stk -= OS_CFG_TASK_STK_REDZONE_DEPTH;
#endif
#endif

    stk_size = p_tcb->StkSize;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a58:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 8007a5a:	6978      	ldr	r0, [r7, #20]
 8007a5c:	f7f8 fbc6 	bl	80001ec <CPU_SR_Restore>

    free_stk = 0u;
 8007a60:	2300      	movs	r3, #0
 8007a62:	61fb      	str	r3, [r7, #28]
                                                                /* Compute the number of zero entries on the stk        */
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    while ((free_stk  < stk_size) &&
 8007a64:	e005      	b.n	8007a72 <OSTaskStkChk+0xca>
           (*p_stk   ==       0u)) {
        p_stk++;
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	3304      	adds	r3, #4
 8007a6a:	61bb      	str	r3, [r7, #24]
        free_stk++;
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	61fb      	str	r3, [r7, #28]
    while ((free_stk  < stk_size) &&
 8007a72:	69fa      	ldr	r2, [r7, #28]
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d203      	bcs.n	8007a82 <OSTaskStkChk+0xda>
           (*p_stk   ==       0u)) {
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	681b      	ldr	r3, [r3, #0]
    while ((free_stk  < stk_size) &&
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d0f1      	beq.n	8007a66 <OSTaskStkChk+0xbe>
           (*p_stk   ==       0u)) {
        free_stk++;
        p_stk--;
    }
#endif
   *p_free = free_stk;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	69fa      	ldr	r2, [r7, #28]
 8007a86:	601a      	str	r2, [r3, #0]
   *p_used = (stk_size - free_stk);                             /* Compute number of entries used on the stack          */
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	1ad2      	subs	r2, r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	601a      	str	r2, [r3, #0]
   *p_err  = OS_ERR_NONE;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	2200      	movs	r2, #0
 8007a96:	801a      	strh	r2, [r3, #0]
}
 8007a98:	3720      	adds	r7, #32
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	200019a0 	.word	0x200019a0
 8007aa4:	20001d74 	.word	0x20001d74

08007aa8 <OS_TaskDbgListAdd>:
************************************************************************************************************************
*/

#if (OS_CFG_DBG_EN > 0u)
void  OS_TaskDbgListAdd (OS_TCB  *p_tcb)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
    p_tcb->DbgPrevPtr                = (OS_TCB *)0;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    if (OSTaskDbgListPtr == (OS_TCB *)0) {
 8007ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8007af0 <OS_TaskDbgListAdd+0x48>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d104      	bne.n	8007aca <OS_TaskDbgListAdd+0x22>
        p_tcb->DbgNextPtr            = (OS_TCB *)0;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8007ac8:	e009      	b.n	8007ade <OS_TaskDbgListAdd+0x36>
    } else {
        p_tcb->DbgNextPtr            =  OSTaskDbgListPtr;
 8007aca:	4b09      	ldr	r3, [pc, #36]	@ (8007af0 <OS_TaskDbgListAdd+0x48>)
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        OSTaskDbgListPtr->DbgPrevPtr =  p_tcb;
 8007ad4:	4b06      	ldr	r3, [pc, #24]	@ (8007af0 <OS_TaskDbgListAdd+0x48>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    }
    OSTaskDbgListPtr                 =  p_tcb;
 8007ade:	4a04      	ldr	r2, [pc, #16]	@ (8007af0 <OS_TaskDbgListAdd+0x48>)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6013      	str	r3, [r2, #0]
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	20001c3c 	.word	0x20001c3c

08007af4 <OS_TaskDbgListRemove>:



void  OS_TaskDbgListRemove (OS_TCB  *p_tcb)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
    OS_TCB  *p_tcb_next;
    OS_TCB  *p_tcb_prev;


    p_tcb_prev = p_tcb->DbgPrevPtr;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b02:	60fb      	str	r3, [r7, #12]
    p_tcb_next = p_tcb->DbgNextPtr;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b0a:	60bb      	str	r3, [r7, #8]

    if (p_tcb_prev == (OS_TCB *)0) {
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10e      	bne.n	8007b30 <OS_TaskDbgListRemove+0x3c>
        OSTaskDbgListPtr = p_tcb_next;
 8007b12:	4a18      	ldr	r2, [pc, #96]	@ (8007b74 <OS_TaskDbgListRemove+0x80>)
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	6013      	str	r3, [r2, #0]
        if (p_tcb_next != (OS_TCB *)0) {
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <OS_TaskDbgListRemove+0x32>
            p_tcb_next->DbgPrevPtr = (OS_TCB *)0;
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        }
        p_tcb->DbgNextPtr = (OS_TCB *)0;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        p_tcb_prev->DbgNextPtr =  p_tcb_next;
        p_tcb_next->DbgPrevPtr =  p_tcb_prev;
        p_tcb->DbgNextPtr      = (OS_TCB *)0;
        p_tcb->DbgPrevPtr      = (OS_TCB *)0;
    }
}
 8007b2e:	e01b      	b.n	8007b68 <OS_TaskDbgListRemove+0x74>
    } else if (p_tcb_next == (OS_TCB *)0) {
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d108      	bne.n	8007b48 <OS_TaskDbgListRemove+0x54>
        p_tcb_prev->DbgNextPtr = (OS_TCB *)0;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        p_tcb->DbgPrevPtr      = (OS_TCB *)0;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8007b46:	e00f      	b.n	8007b68 <OS_TaskDbgListRemove+0x74>
        p_tcb_prev->DbgNextPtr =  p_tcb_next;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        p_tcb_next->DbgPrevPtr =  p_tcb_prev;
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        p_tcb->DbgNextPtr      = (OS_TCB *)0;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        p_tcb->DbgPrevPtr      = (OS_TCB *)0;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8007b68:	bf00      	nop
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	20001c3c 	.word	0x20001c3c

08007b78 <OS_TaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInit (OS_ERR  *p_err)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
#if (OS_CFG_DBG_EN > 0u)
    OSTaskDbgListPtr = (OS_TCB *)0;
 8007b80:	4b08      	ldr	r3, [pc, #32]	@ (8007ba4 <OS_TaskInit+0x2c>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]
#endif

    OSTaskQty        = 0u;                                      /* Clear the number of tasks                            */
 8007b86:	4b08      	ldr	r3, [pc, #32]	@ (8007ba8 <OS_TaskInit+0x30>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	801a      	strh	r2, [r3, #0]

#if ((OS_CFG_TASK_PROFILE_EN > 0u) || (OS_CFG_DBG_EN > 0u))
    OSTaskCtxSwCtr   = 0u;                                      /* Clear the context switch counter                     */
 8007b8c:	4b07      	ldr	r3, [pc, #28]	@ (8007bac <OS_TaskInit+0x34>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]
#endif

   *p_err            = OS_ERR_NONE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	801a      	strh	r2, [r3, #0]
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	20001c3c 	.word	0x20001c3c
 8007ba8:	20001c40 	.word	0x20001c40
 8007bac:	20001c38 	.word	0x20001c38

08007bb0 <OS_TaskInitTCB>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInitTCB (OS_TCB  *p_tcb)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_ID   id;
#endif


    p_tcb->StkPtr               = (CPU_STK          *)0;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	601a      	str	r2, [r3, #0]
    p_tcb->StkLimitPtr          = (CPU_STK          *)0;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	609a      	str	r2, [r3, #8]

    p_tcb->ExtPtr               = (void             *)0;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	605a      	str	r2, [r3, #4]

    p_tcb->NextPtr              = (OS_TCB           *)0;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	611a      	str	r2, [r3, #16]
    p_tcb->PrevPtr              = (OS_TCB           *)0;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	615a      	str	r2, [r3, #20]

#if (OS_CFG_TICK_EN > 0u)
    p_tcb->TickNextPtr          = (OS_TCB           *)0;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	619a      	str	r2, [r3, #24]
    p_tcb->TickPrevPtr          = (OS_TCB           *)0;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	61da      	str	r2, [r3, #28]
#endif

#if (OS_CFG_DBG_EN > 0u)
    p_tcb->NamePtr              = (CPU_CHAR *)((void *)"?Task");
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a51      	ldr	r2, [pc, #324]	@ (8007d2c <OS_TaskInitTCB+0x17c>)
 8007be6:	60da      	str	r2, [r3, #12]
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkBasePtr           = (CPU_STK          *)0;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	621a      	str	r2, [r3, #32]
#endif

#if (OS_CFG_DBG_EN > 0u)
    p_tcb->TaskEntryAddr        = (OS_TASK_PTR       )0;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	625a      	str	r2, [r3, #36]	@ 0x24
    p_tcb->TaskEntryArg         = (void             *)0;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	629a      	str	r2, [r3, #40]	@ 0x28
#if (OS_CFG_TS_EN > 0u)
    p_tcb->TS                   =                     0u;
#endif

#if (OS_MSG_EN > 0u)
    p_tcb->MsgPtr               = (void             *)0;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	659a      	str	r2, [r3, #88]	@ 0x58
    p_tcb->MsgSize              =                     0u;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
#endif

#if (OS_CFG_TASK_Q_EN > 0u)
    OS_MsgQInit(&p_tcb->MsgQ,
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3360      	adds	r3, #96	@ 0x60
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fe ff94 	bl	8006b3c <OS_MsgQInit>
                 0u);
#if (OS_CFG_TASK_PROFILE_EN > 0u)
    p_tcb->MsgQPendTime         =                     0u;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	671a      	str	r2, [r3, #112]	@ 0x70
    p_tcb->MsgQPendTimeMax      =                     0u;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	675a      	str	r2, [r3, #116]	@ 0x74
#endif
#endif

#if (OS_CFG_FLAG_EN > 0u)
    p_tcb->FlagsPend            =                     0u;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	67da      	str	r2, [r3, #124]	@ 0x7c
    p_tcb->FlagsOpt             =                     0u;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
    p_tcb->FlagsRdy             =                     0u;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif

#if (OS_CFG_TASK_REG_TBL_SIZE > 0u)
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 8007c36:	2300      	movs	r3, #0
 8007c38:	73fb      	strb	r3, [r7, #15]
 8007c3a:	e008      	b.n	8007c4e <OS_TaskInitTCB+0x9e>
        p_tcb->RegTbl[reg_id]   =                     0u;
 8007c3c:	7bfa      	ldrb	r2, [r7, #15]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	321e      	adds	r2, #30
 8007c42:	2100      	movs	r1, #0
 8007c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	73fb      	strb	r3, [r7, #15]
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d0f3      	beq.n	8007c3c <OS_TaskInitTCB+0x8c>
    for (id = 0u; id < OS_CFG_TLS_TBL_SIZE; id++) {
        p_tcb->TLS_Tbl[id]      =                     0u;
    }
#endif

    p_tcb->SemCtr               =                     0u;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	64da      	str	r2, [r3, #76]	@ 0x4c
#if (OS_CFG_TASK_PROFILE_EN > 0u)
    p_tcb->SemPendTime          =                     0u;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    p_tcb->SemPendTimeMax       =                     0u;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkSize              =                     0u;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	645a      	str	r2, [r3, #68]	@ 0x44
#endif


#if (OS_CFG_TASK_SUSPEND_EN > 0u)
    p_tcb->SuspendCtr           =                     0u;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
#endif

#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u)
    p_tcb->StkFree              =                     0u;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    p_tcb->StkUsed              =                     0u;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
#endif

    p_tcb->Opt                  =                     0u;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

#if (OS_CFG_TICK_EN > 0u)
    p_tcb->TickRemain           =                     0u;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	651a      	str	r2, [r3, #80]	@ 0x50
    p_tcb->TickCtrPrev          =                     0u;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	655a      	str	r2, [r3, #84]	@ 0x54
    p_tcb->TimeQuanta           =                     0u;
    p_tcb->TimeQuantaCtr        =                     0u;
#endif

#if (OS_CFG_TASK_PROFILE_EN > 0u)
    p_tcb->CPUUsage             =                     0u;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    p_tcb->CPUUsageMax          =                     0u;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
    p_tcb->CtxSwCtr             =                     0u;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    p_tcb->CyclesDelta          =                     0u;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (OS_CFG_TS_EN > 0u)
    p_tcb->CyclesStart          =  OS_TS_GET();                 /* Read the current timestamp and save                  */
#else
    p_tcb->CyclesStart          =                     0u;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#endif
    p_tcb->CyclesTotal          =                     0u;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif
#if (OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u)
    p_tcb->SchedLockTimeMax     =                     0u;
#endif

    p_tcb->PendNextPtr          = (OS_TCB           *)0;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
    p_tcb->PendPrevPtr          = (OS_TCB           *)0;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	631a      	str	r2, [r3, #48]	@ 0x30
    p_tcb->PendObjPtr           = (OS_PEND_OBJ      *)0;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	635a      	str	r2, [r3, #52]	@ 0x34
    p_tcb->PendOn               =  OS_TASK_PEND_ON_NOTHING;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    p_tcb->PendStatus           =  OS_STATUS_PEND_OK;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    p_tcb->TaskState            =  OS_TASK_STATE_RDY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    p_tcb->Prio                 =  OS_PRIO_INIT;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
#if (OS_CFG_MUTEX_EN > 0u)
    p_tcb->BasePrio             =  OS_PRIO_INIT;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2220      	movs	r2, #32
 8007d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    p_tcb->MutexGrpHeadPtr      = (OS_MUTEX         *)0;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif

#if (OS_CFG_DBG_EN > 0u)
    p_tcb->DbgPrevPtr           = (OS_TCB           *)0;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    p_tcb->DbgNextPtr           = (OS_TCB           *)0;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    p_tcb->DbgNamePtr           = (CPU_CHAR *)((void *)" ");
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a04      	ldr	r2, [pc, #16]	@ (8007d30 <OS_TaskInitTCB+0x180>)
 8007d20:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
#endif
}
 8007d24:	bf00      	nop
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	08008e48 	.word	0x08008e48
 8007d30:	08008e50 	.word	0x08008e50

08007d34 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
    OS_ERR  err;



    OSTaskReturnHook(OSTCBCurPtr);                              /* Call hook to let user decide on what to do           */
 8007d3a:	4b07      	ldr	r3, [pc, #28]	@ (8007d58 <OS_TaskReturn+0x24>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fd fa1c 	bl	800517c <OSTaskReturnHook>
#if (OS_CFG_TASK_DEL_EN > 0u)
    OSTaskDel((OS_TCB *)0,                                      /* Delete task if it accidentally returns!              */
 8007d44:	1dbb      	adds	r3, r7, #6
 8007d46:	4619      	mov	r1, r3
 8007d48:	2000      	movs	r0, #0
 8007d4a:	f7ff fd21 	bl	8007790 <OSTaskDel>
        OSTimeDly(OSCfg_TickRate_Hz,
                  OS_OPT_TIME_DLY,
                  &err);
    }
#endif
}
 8007d4e:	bf00      	nop
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20001d74 	.word	0x20001d74

08007d5c <OS_TaskChangePrio>:
************************************************************************************************************************
*/

void  OS_TaskChangePrio(OS_TCB  *p_tcb,
                        OS_PRIO  prio_new)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70fb      	strb	r3, [r7, #3]
    OS_PRIO  prio_cur;
#endif


    do {
        p_tcb_owner = (OS_TCB *)0;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_MUTEX_EN > 0u)
        prio_cur    =  p_tcb->Prio;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007d72:	72fb      	strb	r3, [r7, #11]
#endif
        switch (p_tcb->TaskState) {
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007d7a:	2b07      	cmp	r3, #7
 8007d7c:	f200 8085 	bhi.w	8007e8a <OS_TaskChangePrio+0x12e>
 8007d80:	a201      	add	r2, pc, #4	@ (adr r2, 8007d88 <OS_TaskChangePrio+0x2c>)
 8007d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d86:	bf00      	nop
 8007d88:	08007da9 	.word	0x08007da9
 8007d8c:	08007ddd 	.word	0x08007ddd
 8007d90:	08007de7 	.word	0x08007de7
 8007d94:	08007de7 	.word	0x08007de7
 8007d98:	08007ddd 	.word	0x08007ddd
 8007d9c:	08007ddd 	.word	0x08007ddd
 8007da0:	08007de7 	.word	0x08007de7
 8007da4:	08007de7 	.word	0x08007de7
            case OS_TASK_STATE_RDY:
                 OS_RdyListRemove(p_tcb);                       /* Remove from current priority                         */
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7fe f825 	bl	8005df8 <OS_RdyListRemove>
                 p_tcb->Prio = prio_new;                        /* Set new task priority                                */
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	78fa      	ldrb	r2, [r7, #3]
 8007db2:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
                 OS_PrioInsert(p_tcb->Prio);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7ff f90b 	bl	8006fd8 <OS_PrioInsert>
                 if (p_tcb == OSTCBCurPtr) {
 8007dc2:	4b34      	ldr	r3, [pc, #208]	@ (8007e94 <OS_TaskChangePrio+0x138>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d103      	bne.n	8007dd4 <OS_TaskChangePrio+0x78>
                     OS_RdyListInsertHead(p_tcb);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7fd ff91 	bl	8005cf4 <OS_RdyListInsertHead>
                 } else {
                     OS_RdyListInsertTail(p_tcb);
                 }
                 break;
 8007dd2:	e053      	b.n	8007e7c <OS_TaskChangePrio+0x120>
                     OS_RdyListInsertTail(p_tcb);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7fd ffcf 	bl	8005d78 <OS_RdyListInsertTail>
                 break;
 8007dda:	e04f      	b.n	8007e7c <OS_TaskChangePrio+0x120>

            case OS_TASK_STATE_DLY:                             /* Nothing to do except change the priority in the OS_TCB*/
            case OS_TASK_STATE_SUSPENDED:
            case OS_TASK_STATE_DLY_SUSPENDED:
                 p_tcb->Prio = prio_new;                        /* Set new task priority                                */
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	78fa      	ldrb	r2, [r7, #3]
 8007de0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
                 break;
 8007de4:	e04a      	b.n	8007e7c <OS_TaskChangePrio+0x120>

            case OS_TASK_STATE_PEND:
            case OS_TASK_STATE_PEND_TIMEOUT:
            case OS_TASK_STATE_PEND_SUSPENDED:
            case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                 p_tcb->Prio = prio_new;                        /* Set new task priority                                */
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	78fa      	ldrb	r2, [r7, #3]
 8007dea:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
                 switch (p_tcb->PendOn) {                       /* What to do depends on what we are pending on         */
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007df4:	2b06      	cmp	r3, #6
 8007df6:	dc3d      	bgt.n	8007e74 <OS_TaskChangePrio+0x118>
 8007df8:	2b05      	cmp	r3, #5
 8007dfa:	da04      	bge.n	8007e06 <OS_TaskChangePrio+0xaa>
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d002      	beq.n	8007e06 <OS_TaskChangePrio+0xaa>
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	d004      	beq.n	8007e0e <OS_TaskChangePrio+0xb2>

                     case OS_TASK_PEND_ON_TASK_Q:
                     case OS_TASK_PEND_ON_TASK_SEM:
                     default:
                                                                /* Default case.                                        */
                          break;
 8007e04:	e036      	b.n	8007e74 <OS_TaskChangePrio+0x118>
                          OS_PendListChangePrio(p_tcb);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7fd fdca 	bl	80059a0 <OS_PendListChangePrio>
                          break;
 8007e0c:	e035      	b.n	8007e7a <OS_TaskChangePrio+0x11e>
                          OS_PendListChangePrio(p_tcb);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7fd fdc6 	bl	80059a0 <OS_PendListChangePrio>
                          p_tcb_owner = ((OS_MUTEX *)((void *)p_tcb->PendObjPtr))->OwnerTCBPtr;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e1a:	60fb      	str	r3, [r7, #12]
                          if (prio_cur > prio_new) {            /* Are we increasing the priority?                      */
 8007e1c:	7afa      	ldrb	r2, [r7, #11]
 8007e1e:	78fb      	ldrb	r3, [r7, #3]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d908      	bls.n	8007e36 <OS_TaskChangePrio+0xda>
                              if (p_tcb_owner->Prio <= prio_new) { /* Yes, do we need to give this prio to the owner?   */
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007e2a:	78fa      	ldrb	r2, [r7, #3]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d323      	bcc.n	8007e78 <OS_TaskChangePrio+0x11c>
                                  p_tcb_owner = (OS_TCB *)0;
 8007e30:	2300      	movs	r3, #0
 8007e32:	60fb      	str	r3, [r7, #12]
                          break;
 8007e34:	e020      	b.n	8007e78 <OS_TaskChangePrio+0x11c>
                              if (p_tcb_owner->Prio == prio_cur) { /* No, is it required to check for a lower prio?     */
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007e3c:	7afa      	ldrb	r2, [r7, #11]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d115      	bne.n	8007e6e <OS_TaskChangePrio+0x112>
                                  prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f7ff f835 	bl	8006eb2 <OS_MutexGrpPrioFindHighest>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	70fb      	strb	r3, [r7, #3]
                                  prio_new = (prio_new > p_tcb_owner->BasePrio) ? p_tcb_owner->BasePrio : prio_new;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e52:	78fa      	ldrb	r2, [r7, #3]
 8007e54:	4293      	cmp	r3, r2
 8007e56:	bf28      	it	cs
 8007e58:	4613      	movcs	r3, r2
 8007e5a:	70fb      	strb	r3, [r7, #3]
                                  if (prio_new == p_tcb_owner->Prio) {
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007e62:	78fa      	ldrb	r2, [r7, #3]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d107      	bne.n	8007e78 <OS_TaskChangePrio+0x11c>
                                      p_tcb_owner = (OS_TCB *)0;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	60fb      	str	r3, [r7, #12]
                          break;
 8007e6c:	e004      	b.n	8007e78 <OS_TaskChangePrio+0x11c>
                                  p_tcb_owner = (OS_TCB *)0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	60fb      	str	r3, [r7, #12]
                          break;
 8007e72:	e001      	b.n	8007e78 <OS_TaskChangePrio+0x11c>
                          break;
 8007e74:	bf00      	nop
 8007e76:	e000      	b.n	8007e7a <OS_TaskChangePrio+0x11e>
                          break;
 8007e78:	bf00      	nop
                 }
                 break;
 8007e7a:	bf00      	nop

            default:
                 return;
        }
        p_tcb = p_tcb_owner;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	607b      	str	r3, [r7, #4]
    } while (p_tcb != (OS_TCB *)0);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f47f af70 	bne.w	8007d68 <OS_TaskChangePrio+0xc>
 8007e88:	e000      	b.n	8007e8c <OS_TaskChangePrio+0x130>
                 return;
 8007e8a:	bf00      	nop
}
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20001d74 	.word	0x20001d74

08007e98 <OS_TickInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickInit (OS_ERR  *p_err)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
    *p_err                = OS_ERR_NONE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	801a      	strh	r2, [r3, #0]

    OSTickCtr             = 0u;                               /* Clear the tick counter                               */
 8007ea6:	4b09      	ldr	r3, [pc, #36]	@ (8007ecc <OS_TickInit+0x34>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]

#if (OS_CFG_DYN_TICK_EN > 0u)
    OSTickCtrStep         = 0u;
#endif

    OSTickList.TCB_Ptr    = (OS_TCB *)0;
 8007eac:	4b08      	ldr	r3, [pc, #32]	@ (8007ed0 <OS_TickInit+0x38>)
 8007eae:	2200      	movs	r2, #0
 8007eb0:	601a      	str	r2, [r3, #0]

#if (OS_CFG_DBG_EN > 0u)
    OSTickList.NbrEntries = 0u;
 8007eb2:	4b07      	ldr	r3, [pc, #28]	@ (8007ed0 <OS_TickInit+0x38>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	809a      	strh	r2, [r3, #4]
    OSTickList.NbrUpdated = 0u;
 8007eb8:	4b05      	ldr	r3, [pc, #20]	@ (8007ed0 <OS_TickInit+0x38>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	80da      	strh	r2, [r3, #6]
#endif
}
 8007ebe:	bf00      	nop
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	20001c44 	.word	0x20001c44
 8007ed0:	20001c48 	.word	0x20001c48

08007ed4 <OS_TickUpdate>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickUpdate (OS_TICK  ticks)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
#if (OS_CFG_TS_EN > 0u)
    CPU_TS  ts_start;
#endif
    CPU_SR_ALLOC();
 8007edc:	2300      	movs	r3, #0
 8007ede:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 8007ee0:	2040      	movs	r0, #64	@ 0x40
 8007ee2:	f7f8 f975 	bl	80001d0 <CPU_SR_Save>
 8007ee6:	60f8      	str	r0, [r7, #12]

    OSTickCtr += ticks;                                         /* Keep track of the number of ticks                    */
 8007ee8:	4b07      	ldr	r3, [pc, #28]	@ (8007f08 <OS_TickUpdate+0x34>)
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4413      	add	r3, r2
 8007ef0:	4a05      	ldr	r2, [pc, #20]	@ (8007f08 <OS_TickUpdate+0x34>)
 8007ef2:	6013      	str	r3, [r2, #0]
    OSTickTime = OS_TS_GET() - ts_start;
    if (OSTickTimeMax < OSTickTime) {
        OSTickTimeMax = OSTickTime;
    }
#else
    OS_TickListUpdate(ticks);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f979 	bl	80081ec <OS_TickListUpdate>
        OSTickCtrStep = 0u;
    }

    OS_DynTickSet(OSTickCtrStep);
#endif
    CPU_CRITICAL_EXIT();
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f7f8 f976 	bl	80001ec <CPU_SR_Restore>
}
 8007f00:	bf00      	nop
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	20001c44 	.word	0x20001c44

08007f0c <OS_TickListInsert>:

CPU_BOOLEAN  OS_TickListInsert (OS_TCB   *p_tcb,
                                OS_TICK   elapsed,
                                OS_TICK   tick_base,
                                OS_TICK   time)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b08b      	sub	sp, #44	@ 0x2c
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
    OS_TICK_LIST  *p_list;
    OS_TICK        delta;
    OS_TICK        remain;


    delta = (time + tick_base) - (OSTickCtr + elapsed);         /* How many ticks until our delay expires?              */
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	441a      	add	r2, r3
 8007f20:	4b4d      	ldr	r3, [pc, #308]	@ (8008058 <OS_TickListInsert+0x14c>)
 8007f22:	6819      	ldr	r1, [r3, #0]
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	440b      	add	r3, r1
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	61fb      	str	r3, [r7, #28]

    if (delta == 0u) {
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d104      	bne.n	8007f3c <OS_TickListInsert+0x30>
        p_tcb->TickRemain = 0u;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	651a      	str	r2, [r3, #80]	@ 0x50
        return (OS_FALSE);
 8007f38:	2300      	movs	r3, #0
 8007f3a:	e087      	b.n	800804c <OS_TickListInsert+0x140>
    }

    OS_TRACE_TASK_DLY(delta);

    p_list = &OSTickList;
 8007f3c:	4b47      	ldr	r3, [pc, #284]	@ (800805c <OS_TickListInsert+0x150>)
 8007f3e:	61bb      	str	r3, [r7, #24]
    if (p_list->TCB_Ptr == (OS_TCB *)0) {                       /* Is the list empty?                                   */
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d110      	bne.n	8007f6a <OS_TickListInsert+0x5e>
        p_tcb->TickRemain   = delta;                            /* Yes, Store time in TCB                               */
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	69fa      	ldr	r2, [r7, #28]
 8007f4c:	651a      	str	r2, [r3, #80]	@ 0x50
        p_tcb->TickNextPtr  = (OS_TCB *)0;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	619a      	str	r2, [r3, #24]
        p_tcb->TickPrevPtr  = (OS_TCB *)0;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	61da      	str	r2, [r3, #28]
        p_list->TCB_Ptr     = p_tcb;                            /* Point to TCB of task to place in the list            */
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	601a      	str	r2, [r3, #0]

        OSTickCtrStep       = delta;
        OS_DynTickSet(OSTickCtrStep);
#endif
#if (OS_CFG_DBG_EN > 0u)
        p_list->NbrEntries  = 1u;                               /* List contains 1 entry                                */
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	2201      	movs	r2, #1
 8007f64:	809a      	strh	r2, [r3, #4]
#endif
        return (OS_TRUE);
 8007f66:	2301      	movs	r3, #1
 8007f68:	e070      	b.n	800804c <OS_TickListInsert+0x140>
    }


#if (OS_CFG_DBG_EN > 0u)
    p_list->NbrEntries++;                                       /* Update debug counter to reflect the new entry.       */
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	889b      	ldrh	r3, [r3, #4]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	809a      	strh	r2, [r3, #4]
#endif

    p_tcb2 = p_list->TCB_Ptr;
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	623b      	str	r3, [r7, #32]
    remain = p_tcb2->TickRemain - elapsed;                      /* How many ticks until the head's delay expires?       */
 8007f7c:	6a3b      	ldr	r3, [r7, #32]
 8007f7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	617b      	str	r3, [r7, #20]

    if ((delta               <   remain) &&                     /* If our entry is the new head of the tick list    ... */
 8007f86:	69fa      	ldr	r2, [r7, #28]
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d219      	bcs.n	8007fc2 <OS_TickListInsert+0xb6>
        (p_tcb2->TickPrevPtr == (OS_TCB *)0)) {
 8007f8e:	6a3b      	ldr	r3, [r7, #32]
 8007f90:	69db      	ldr	r3, [r3, #28]
    if ((delta               <   remain) &&                     /* If our entry is the new head of the tick list    ... */
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d115      	bne.n	8007fc2 <OS_TickListInsert+0xb6>
        p_tcb->TickRemain    =  delta;                          /* ... the delta is equivalent to the full delay    ... */
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	69fa      	ldr	r2, [r7, #28]
 8007f9a:	651a      	str	r2, [r3, #80]	@ 0x50
        p_tcb2->TickRemain   =  remain - delta;                 /* ... the previous head's delta is now relative to it. */
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	1ad2      	subs	r2, r2, r3
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	651a      	str	r2, [r3, #80]	@ 0x50

        p_tcb->TickPrevPtr   = (OS_TCB *)0;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	61da      	str	r2, [r3, #28]
        p_tcb->TickNextPtr   =  p_tcb2;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6a3a      	ldr	r2, [r7, #32]
 8007fb0:	619a      	str	r2, [r3, #24]
        p_tcb2->TickPrevPtr  =  p_tcb;
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	61da      	str	r2, [r3, #28]
        p_list->TCB_Ptr      =  p_tcb;
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	601a      	str	r2, [r3, #0]
                                                                /* In DTM, a new list head must update the tick     ... */
        OSTickCtrStep        =  delta;                          /* ... timer to interrupt at the new delay value.       */
        OS_DynTickSet(OSTickCtrStep);
#endif

        return (OS_TRUE);
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e044      	b.n	800804c <OS_TickListInsert+0x140>
    }

                                                                /* Our entry comes after the current list head.         */
    delta  -= remain;                                           /* Make delta relative to the head.                     */
 8007fc2:	69fa      	ldr	r2, [r7, #28]
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	61fb      	str	r3, [r7, #28]
    p_tcb1  = p_tcb2;
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    p_tcb2  = p_tcb1->TickNextPtr;
 8007fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	623b      	str	r3, [r7, #32]

    while ((p_tcb2 !=        (OS_TCB *)0) &&                    /* Find the appropriate position in the delta list.     */
 8007fd4:	e009      	b.n	8007fea <OS_TickListInsert+0xde>
           (delta  >= p_tcb2->TickRemain)) {
        delta  -= p_tcb2->TickRemain;
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fda:	69fa      	ldr	r2, [r7, #28]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	61fb      	str	r3, [r7, #28]
        p_tcb1  = p_tcb2;
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	627b      	str	r3, [r7, #36]	@ 0x24
        p_tcb2  = p_tcb2->TickNextPtr;
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	623b      	str	r3, [r7, #32]
    while ((p_tcb2 !=        (OS_TCB *)0) &&                    /* Find the appropriate position in the delta list.     */
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d004      	beq.n	8007ffa <OS_TickListInsert+0xee>
           (delta  >= p_tcb2->TickRemain)) {
 8007ff0:	6a3b      	ldr	r3, [r7, #32]
 8007ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    while ((p_tcb2 !=        (OS_TCB *)0) &&                    /* Find the appropriate position in the delta list.     */
 8007ff4:	69fa      	ldr	r2, [r7, #28]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d2ed      	bcs.n	8007fd6 <OS_TickListInsert+0xca>
    }

    if (p_tcb2 != (OS_TCB *)0) {                                /* Our entry is not the last element in the list.       */
 8007ffa:	6a3b      	ldr	r3, [r7, #32]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d018      	beq.n	8008032 <OS_TickListInsert+0x126>
        p_tcb1               = p_tcb2->TickPrevPtr;
 8008000:	6a3b      	ldr	r3, [r7, #32]
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	627b      	str	r3, [r7, #36]	@ 0x24
        p_tcb->TickRemain    = delta;                           /* Store remaining time                                 */
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	69fa      	ldr	r2, [r7, #28]
 800800a:	651a      	str	r2, [r3, #80]	@ 0x50
        p_tcb->TickPrevPtr   = p_tcb1;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008010:	61da      	str	r2, [r3, #28]
        p_tcb->TickNextPtr   = p_tcb2;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6a3a      	ldr	r2, [r7, #32]
 8008016:	619a      	str	r2, [r3, #24]
        p_tcb2->TickRemain  -= delta;                           /* Reduce time of next entry in the list                */
 8008018:	6a3b      	ldr	r3, [r7, #32]
 800801a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	1ad2      	subs	r2, r2, r3
 8008020:	6a3b      	ldr	r3, [r7, #32]
 8008022:	651a      	str	r2, [r3, #80]	@ 0x50
        p_tcb2->TickPrevPtr  = p_tcb;
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	61da      	str	r2, [r3, #28]
        p_tcb1->TickNextPtr  = p_tcb;
 800802a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	619a      	str	r2, [r3, #24]
 8008030:	e00b      	b.n	800804a <OS_TickListInsert+0x13e>

    } else {                                                    /* Our entry belongs at the end of the list.            */
        p_tcb->TickRemain    = delta;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	69fa      	ldr	r2, [r7, #28]
 8008036:	651a      	str	r2, [r3, #80]	@ 0x50
        p_tcb->TickPrevPtr   = p_tcb1;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800803c:	61da      	str	r2, [r3, #28]
        p_tcb->TickNextPtr   = (OS_TCB *)0;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	619a      	str	r2, [r3, #24]
        p_tcb1->TickNextPtr  = p_tcb;
 8008044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	619a      	str	r2, [r3, #24]
    }

    return (OS_TRUE);
 800804a:	2301      	movs	r3, #1
}
 800804c:	4618      	mov	r0, r3
 800804e:	372c      	adds	r7, #44	@ 0x2c
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	20001c44 	.word	0x20001c44
 800805c:	20001c48 	.word	0x20001c48

08008060 <OS_TickListInsertDly>:

void  OS_TickListInsertDly (OS_TCB   *p_tcb,
                            OS_TICK   time,
                            OS_OPT    opt,
                            OS_ERR   *p_err)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b088      	sub	sp, #32
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	603b      	str	r3, [r7, #0]
 800806c:	4613      	mov	r3, r2
 800806e:	80fb      	strh	r3, [r7, #6]


#if (OS_CFG_DYN_TICK_EN > 0u)
    elapsed  = OS_DynTickGet();
#else
    elapsed  = 0u;
 8008070:	2300      	movs	r3, #0
 8008072:	61bb      	str	r3, [r7, #24]
#endif

    if (opt == OS_OPT_TIME_MATCH) {                             /* MATCH to absolute tick ctr value mode                */
 8008074:	88fb      	ldrh	r3, [r7, #6]
 8008076:	2b04      	cmp	r3, #4
 8008078:	d102      	bne.n	8008080 <OS_TickListInsertDly+0x20>
        tick_base = 0u;                                         /* tick_base + time == time                             */
 800807a:	2300      	movs	r3, #0
 800807c:	61fb      	str	r3, [r7, #28]
 800807e:	e03b      	b.n	80080f8 <OS_TickListInsertDly+0x98>

    } else if (opt == OS_OPT_TIME_PERIODIC) {                   /* PERIODIC mode.                                       */
 8008080:	88fb      	ldrh	r3, [r7, #6]
 8008082:	2b08      	cmp	r3, #8
 8008084:	d135      	bne.n	80080f2 <OS_TickListInsertDly+0x92>
        if (time == 0u) {
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d104      	bne.n	8008096 <OS_TickListInsertDly+0x36>
           *p_err = OS_ERR_TIME_ZERO_DLY;                       /* Infinite frequency is invalid.                       */
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	f247 227e 	movw	r2, #29310	@ 0x727e
 8008092:	801a      	strh	r2, [r3, #0]
            return;
 8008094:	e047      	b.n	8008126 <OS_TickListInsertDly+0xc6>
        }

        tick_base = p_tcb->TickCtrPrev;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800809a:	61fb      	str	r3, [r7, #28]

#if (OS_CFG_DYN_TICK_EN > 0u)                                   /* How far is our tick-base from the system time?       */
        base_offset = OSTickCtr + elapsed - tick_base;
#else
        base_offset = OSTickCtr - tick_base;
 800809c:	4b23      	ldr	r3, [pc, #140]	@ (800812c <OS_TickListInsertDly+0xcc>)
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	617b      	str	r3, [r7, #20]
#endif

        if (base_offset >= time) {                              /* If our task missed the last period, move         ... */
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d31a      	bcc.n	80080e4 <OS_TickListInsertDly+0x84>
            tick_base += time * (base_offset / time);           /* ... tick_base up to the next one.                    */
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	fb02 f303 	mul.w	r3, r2, r3
 80080bc:	69fa      	ldr	r2, [r7, #28]
 80080be:	4413      	add	r3, r2
 80080c0:	61fb      	str	r3, [r7, #28]
            if ((base_offset % time) != 0u) {
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80080ca:	68b9      	ldr	r1, [r7, #8]
 80080cc:	fb01 f202 	mul.w	r2, r1, r2
 80080d0:	1a9b      	subs	r3, r3, r2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <OS_TickListInsertDly+0x7e>
                tick_base += time;                              /* Account for rounding errors with integer division    */
 80080d6:	69fa      	ldr	r2, [r7, #28]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	4413      	add	r3, r2
 80080dc:	61fb      	str	r3, [r7, #28]
            }

            p_tcb->TickCtrPrev = tick_base;                     /* Adjust the periodic tick base                        */
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	69fa      	ldr	r2, [r7, #28]
 80080e2:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        p_tcb->TickCtrPrev += time;                             /* Update for the next time we perform a periodic dly.  */
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	441a      	add	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80080f0:	e002      	b.n	80080f8 <OS_TickListInsertDly+0x98>

    } else {                                                    /* RELATIVE time delay mode                             */
#if (OS_CFG_DYN_TICK_EN > 0u)                                   /* Our base is always the current system time.          */
        tick_base = OSTickCtr + elapsed;
#else
        tick_base = OSTickCtr;
 80080f2:	4b0e      	ldr	r3, [pc, #56]	@ (800812c <OS_TickListInsertDly+0xcc>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	61fb      	str	r3, [r7, #28]
#endif
    }

    valid_dly = OS_TickListInsert(p_tcb, elapsed, tick_base, time);
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	69fa      	ldr	r2, [r7, #28]
 80080fc:	69b9      	ldr	r1, [r7, #24]
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f7ff ff04 	bl	8007f0c <OS_TickListInsert>
 8008104:	4603      	mov	r3, r0
 8008106:	74fb      	strb	r3, [r7, #19]

    if (valid_dly == OS_TRUE) {
 8008108:	7cfb      	ldrb	r3, [r7, #19]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d107      	bne.n	800811e <OS_TickListInsertDly+0xbe>
        p_tcb->TaskState = OS_TASK_STATE_DLY;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
       *p_err            = OS_ERR_NONE;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2200      	movs	r2, #0
 800811a:	801a      	strh	r2, [r3, #0]
 800811c:	e003      	b.n	8008126 <OS_TickListInsertDly+0xc6>
    } else {
       *p_err = OS_ERR_TIME_ZERO_DLY;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	f247 227e 	movw	r2, #29310	@ 0x727e
 8008124:	801a      	strh	r2, [r3, #0]
    }
}
 8008126:	3720      	adds	r7, #32
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	20001c44 	.word	0x20001c44

08008130 <OS_TickListRemove>:
*              2) This function is assumed to be called with interrupts disabled.
************************************************************************************************************************
*/

void  OS_TickListRemove (OS_TCB  *p_tcb)
{
 8008130:	b480      	push	{r7}
 8008132:	b087      	sub	sp, #28
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]

#if (OS_CFG_DYN_TICK_EN > 0u)
    elapsed = OS_DynTickGet();
#endif

    p_tcb1 = p_tcb->TickPrevPtr;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	617b      	str	r3, [r7, #20]
    p_tcb2 = p_tcb->TickNextPtr;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	613b      	str	r3, [r7, #16]
    p_list = &OSTickList;
 8008144:	4b28      	ldr	r3, [pc, #160]	@ (80081e8 <OS_TickListRemove+0xb8>)
 8008146:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d126      	bne.n	800819c <OS_TickListRemove+0x6c>
        if (p_tcb2 == (OS_TCB *)0) {                            /* Remove the ONLY entry in the list?                   */
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d109      	bne.n	8008168 <OS_TickListRemove+0x38>
            p_list->TCB_Ptr      = (OS_TCB *)0;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	601a      	str	r2, [r3, #0]
#if (OS_CFG_DBG_EN > 0u)
            p_list->NbrEntries   =           0u;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	809a      	strh	r2, [r3, #4]
#endif
            p_tcb->TickRemain    =           0u;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	651a      	str	r2, [r3, #80]	@ 0x50
        p_list->NbrEntries--;
#endif
        p_tcb->TickNextPtr       = (OS_TCB *)0;
        p_tcb->TickRemain        =           0u;
    }
}
 8008166:	e038      	b.n	80081da <OS_TickListRemove+0xaa>
            p_tcb2->TickPrevPtr  = (OS_TCB *)0;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	2200      	movs	r2, #0
 800816c:	61da      	str	r2, [r3, #28]
            p_tcb2->TickRemain  += p_tcb->TickRemain;           /* Add back the ticks to the delta                      */
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008176:	441a      	add	r2, r3
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	651a      	str	r2, [r3, #80]	@ 0x50
            p_list->TCB_Ptr      = p_tcb2;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	601a      	str	r2, [r3, #0]
            p_list->NbrEntries--;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	889b      	ldrh	r3, [r3, #4]
 8008186:	3b01      	subs	r3, #1
 8008188:	b29a      	uxth	r2, r3
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	809a      	strh	r2, [r3, #4]
            p_tcb->TickNextPtr          = (OS_TCB *)0;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	619a      	str	r2, [r3, #24]
            p_tcb->TickRemain           =           0u;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800819a:	e01e      	b.n	80081da <OS_TickListRemove+0xaa>
        p_tcb1->TickNextPtr = p_tcb2;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	619a      	str	r2, [r3, #24]
        if (p_tcb2 != (OS_TCB *)0) {
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d009      	beq.n	80081bc <OS_TickListRemove+0x8c>
            p_tcb2->TickPrevPtr  = p_tcb1;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	61da      	str	r2, [r3, #28]
            p_tcb2->TickRemain  += p_tcb->TickRemain;            /* Add back the ticks to the delta list                 */
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081b6:	441a      	add	r2, r3
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	651a      	str	r2, [r3, #80]	@ 0x50
        p_tcb->TickPrevPtr       = (OS_TCB *)0;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	61da      	str	r2, [r3, #28]
        p_list->NbrEntries--;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	889b      	ldrh	r3, [r3, #4]
 80081c6:	3b01      	subs	r3, #1
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	809a      	strh	r2, [r3, #4]
        p_tcb->TickNextPtr       = (OS_TCB *)0;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	619a      	str	r2, [r3, #24]
        p_tcb->TickRemain        =           0u;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80081da:	bf00      	nop
 80081dc:	371c      	adds	r7, #28
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	20001c48 	.word	0x20001c48

080081ec <OS_TickListUpdate>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TickListUpdate (OS_TICK  ticks)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b088      	sub	sp, #32
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
#endif



#if (OS_CFG_DBG_EN > 0u)
    nbr_updated = 0u;
 80081f4:	2300      	movs	r3, #0
 80081f6:	837b      	strh	r3, [r7, #26]
#endif
    p_list      = &OSTickList;
 80081f8:	4b65      	ldr	r3, [pc, #404]	@ (8008390 <OS_TickListUpdate+0x1a4>)
 80081fa:	613b      	str	r3, [r7, #16]
    p_tcb       = p_list->TCB_Ptr;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	61fb      	str	r3, [r7, #28]
    if (p_tcb != (OS_TCB *)0) {
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 80bb 	beq.w	8008380 <OS_TickListUpdate+0x194>
        if (p_tcb->TickRemain <= ticks) {
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	429a      	cmp	r2, r3
 8008212:	d308      	bcc.n	8008226 <OS_TickListUpdate+0x3a>
            ticks              = ticks - p_tcb->TickRemain;
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	607b      	str	r3, [r7, #4]
            p_tcb->TickRemain  = 0u;
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	2200      	movs	r2, #0
 8008222:	651a      	str	r2, [r3, #80]	@ 0x50
 8008224:	e0a7      	b.n	8008376 <OS_TickListUpdate+0x18a>
        } else {
            p_tcb->TickRemain -= ticks;
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	1ad2      	subs	r2, r2, r3
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        while (p_tcb->TickRemain == 0u) {
 8008232:	e0a0      	b.n	8008376 <OS_TickListUpdate+0x18a>
#if (OS_CFG_DBG_EN > 0u)
            nbr_updated++;
 8008234:	8b7b      	ldrh	r3, [r7, #26]
 8008236:	3301      	adds	r3, #1
 8008238:	837b      	strh	r3, [r7, #26]
#endif

            switch (p_tcb->TaskState) {
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008240:	2b01      	cmp	r3, #1
 8008242:	d002      	beq.n	800824a <OS_TickListUpdate+0x5e>
 8008244:	2b05      	cmp	r3, #5
 8008246:	d008      	beq.n	800825a <OS_TickListUpdate+0x6e>
 8008248:	e00c      	b.n	8008264 <OS_TickListUpdate+0x78>
                case OS_TASK_STATE_DLY:
                     p_tcb->TaskState = OS_TASK_STATE_RDY;
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                     OS_RdyListInsert(p_tcb);                            /* Insert the task in the ready list                    */
 8008252:	69f8      	ldr	r0, [r7, #28]
 8008254:	f7fd fd30 	bl	8005cb8 <OS_RdyListInsert>
                     break;
 8008258:	e062      	b.n	8008320 <OS_TickListUpdate+0x134>

                case OS_TASK_STATE_DLY_SUSPENDED:
                     p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	2204      	movs	r2, #4
 800825e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                     break;
 8008262:	e05d      	b.n	8008320 <OS_TickListUpdate+0x134>

                default:
#if (OS_CFG_MUTEX_EN > 0u)
                     p_tcb_owner = (OS_TCB *)0;
 8008264:	2300      	movs	r3, #0
 8008266:	617b      	str	r3, [r7, #20]
                     if (p_tcb->PendOn == OS_TASK_PEND_ON_MUTEX) {
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800826e:	2b04      	cmp	r3, #4
 8008270:	d103      	bne.n	800827a <OS_TickListUpdate+0x8e>
                         p_tcb_owner = (OS_TCB *)((OS_MUTEX *)((void *)p_tcb->PendObjPtr))->OwnerTCBPtr;
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008278:	617b      	str	r3, [r7, #20]
                     }
#endif

#if (OS_MSG_EN > 0u)
                     p_tcb->MsgPtr  = (void *)0;
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	2200      	movs	r2, #0
 800827e:	659a      	str	r2, [r3, #88]	@ 0x58
                     p_tcb->MsgSize = 0u;
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	2200      	movs	r2, #0
 8008284:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
#endif
#if (OS_CFG_TS_EN > 0u)
                     p_tcb->TS      = OS_TS_GET();
#endif
                     OS_PendListRemove(p_tcb);                           /* Remove task from pend list                           */
 8008288:	69f8      	ldr	r0, [r7, #28]
 800828a:	f7fd fc25 	bl	8005ad8 <OS_PendListRemove>

                     switch (p_tcb->TaskState) {
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008294:	2b03      	cmp	r3, #3
 8008296:	d002      	beq.n	800829e <OS_TickListUpdate+0xb2>
 8008298:	2b07      	cmp	r3, #7
 800829a:	d008      	beq.n	80082ae <OS_TickListUpdate+0xc2>
                         case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                              p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
                              break;

                         default:
                              break;
 800829c:	e00c      	b.n	80082b8 <OS_TickListUpdate+0xcc>
                              OS_RdyListInsert(p_tcb);                   /* Insert the task in the ready list                    */
 800829e:	69f8      	ldr	r0, [r7, #28]
 80082a0:	f7fd fd0a 	bl	8005cb8 <OS_RdyListInsert>
                              p_tcb->TaskState  = OS_TASK_STATE_RDY;
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                              break;
 80082ac:	e004      	b.n	80082b8 <OS_TickListUpdate+0xcc>
                              p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	2204      	movs	r2, #4
 80082b2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                              break;
 80082b6:	bf00      	nop
                     }
                     p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;         /* Indicate pend timed out                              */
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	2203      	movs	r2, #3
 80082bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                     p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                           */
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

#if (OS_CFG_MUTEX_EN > 0u)
                     if (p_tcb_owner != (OS_TCB *)0) {
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d027      	beq.n	800831e <OS_TickListUpdate+0x132>
                         if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082da:	429a      	cmp	r2, r3
 80082dc:	d01f      	beq.n	800831e <OS_TickListUpdate+0x132>
                             (p_tcb_owner->Prio == p_tcb->Prio)) {       /* Has the owner inherited a priority?                  */
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
                         if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d117      	bne.n	800831e <OS_TickListUpdate+0x132>
                             prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 80082ee:	6978      	ldr	r0, [r7, #20]
 80082f0:	f7fe fddf 	bl	8006eb2 <OS_MutexGrpPrioFindHighest>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]
                             prio_new = (prio_new > p_tcb_owner->BasePrio) ? p_tcb_owner->BasePrio : prio_new;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082fe:	7bfa      	ldrb	r2, [r7, #15]
 8008300:	4293      	cmp	r3, r2
 8008302:	bf28      	it	cs
 8008304:	4613      	movcs	r3, r2
 8008306:	73fb      	strb	r3, [r7, #15]
                             if (prio_new != p_tcb_owner->Prio) {
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800830e:	7bfa      	ldrb	r2, [r7, #15]
 8008310:	429a      	cmp	r2, r3
 8008312:	d004      	beq.n	800831e <OS_TickListUpdate+0x132>
                                 OS_TaskChangePrio(p_tcb_owner, prio_new);
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	4619      	mov	r1, r3
 8008318:	6978      	ldr	r0, [r7, #20]
 800831a:	f7ff fd1f 	bl	8007d5c <OS_TaskChangePrio>
                                 OS_TRACE_MUTEX_TASK_PRIO_DISINHERIT(p_tcb_owner, p_tcb_owner->Prio);
                             }
                         }
                     }
#endif
                     break;
 800831e:	bf00      	nop
            }

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	699a      	ldr	r2, [r3, #24]
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	601a      	str	r2, [r3, #0]
            p_tcb           = p_list->TCB_Ptr;                           /* Get 'p_tcb' again for loop                           */
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	61fb      	str	r3, [r7, #28]
            if (p_tcb == (OS_TCB *)0) {
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d103      	bne.n	800833c <OS_TickListUpdate+0x150>
#if (OS_CFG_DBG_EN > 0u)
                p_list->NbrEntries = 0u;
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	2200      	movs	r2, #0
 8008338:	809a      	strh	r2, [r3, #4]
#endif
                break;
 800833a:	e021      	b.n	8008380 <OS_TickListUpdate+0x194>
            } else {
#if (OS_CFG_DBG_EN > 0u)
                p_list->NbrEntries--;
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	889b      	ldrh	r3, [r3, #4]
 8008340:	3b01      	subs	r3, #1
 8008342:	b29a      	uxth	r2, r3
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	809a      	strh	r2, [r3, #4]
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	2200      	movs	r2, #0
 800834c:	61da      	str	r2, [r3, #28]
                if (p_tcb->TickRemain <= ticks) {
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	429a      	cmp	r2, r3
 8008356:	d308      	bcc.n	800836a <OS_TickListUpdate+0x17e>
                    ticks              = ticks - p_tcb->TickRemain;
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	607b      	str	r3, [r7, #4]
                    p_tcb->TickRemain  = 0u;
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	2200      	movs	r2, #0
 8008366:	651a      	str	r2, [r3, #80]	@ 0x50
 8008368:	e005      	b.n	8008376 <OS_TickListUpdate+0x18a>
                } else {
                    p_tcb->TickRemain -= ticks;
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	1ad2      	subs	r2, r2, r3
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	651a      	str	r2, [r3, #80]	@ 0x50
        while (p_tcb->TickRemain == 0u) {
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800837a:	2b00      	cmp	r3, #0
 800837c:	f43f af5a 	beq.w	8008234 <OS_TickListUpdate+0x48>
                }
            }
        }
    }
#if (OS_CFG_DBG_EN > 0u)
    p_list->NbrUpdated = nbr_updated;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	8b7a      	ldrh	r2, [r7, #26]
 8008384:	80da      	strh	r2, [r3, #6]
#endif
}
 8008386:	bf00      	nop
 8008388:	3720      	adds	r7, #32
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	20001c48 	.word	0x20001c48

08008394 <OSTimeDly>:
*/

void  OSTimeDly (OS_TICK   dly,
                 OS_OPT    opt,
                 OS_ERR   *p_err)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	460b      	mov	r3, r1
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	817b      	strh	r3, [r7, #10]
#if (OS_CFG_TICK_EN > 0u)
    CPU_SR_ALLOC();
 80083a2:	2300      	movs	r3, #0
 80083a4:	617b      	str	r3, [r7, #20]
    *p_err = OS_ERR_TICK_DISABLED;
    return;
#else

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
 80083a6:	4b2b      	ldr	r3, [pc, #172]	@ (8008454 <OSTimeDly+0xc0>)
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d004      	beq.n	80083b8 <OSTimeDly+0x24>
       *p_err = OS_ERR_TIME_DLY_ISR;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f247 2275 	movw	r2, #29301	@ 0x7275
 80083b4:	801a      	strh	r2, [r3, #0]
        return;
 80083b6:	e049      	b.n	800844c <OSTimeDly+0xb8>
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 80083b8:	4b27      	ldr	r3, [pc, #156]	@ (8008458 <OSTimeDly+0xc4>)
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d004      	beq.n	80083ca <OSTimeDly+0x36>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f645 6289 	movw	r2, #24201	@ 0x5e89
 80083c6:	801a      	strh	r2, [r3, #0]
        return;
 80083c8:	e040      	b.n	800844c <OSTimeDly+0xb8>
    }
#endif

    if (OSSchedLockNestingCtr > 0u) {                           /* Can't delay when the scheduler is locked             */
 80083ca:	4b24      	ldr	r3, [pc, #144]	@ (800845c <OSTimeDly+0xc8>)
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d004      	beq.n	80083dc <OSTimeDly+0x48>
       *p_err = OS_ERR_SCHED_LOCKED;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f646 5263 	movw	r2, #28003	@ 0x6d63
 80083d8:	801a      	strh	r2, [r3, #0]
        return;
 80083da:	e037      	b.n	800844c <OSTimeDly+0xb8>
    }

    switch (opt) {
 80083dc:	897b      	ldrh	r3, [r7, #10]
 80083de:	2b08      	cmp	r3, #8
 80083e0:	bf8c      	ite	hi
 80083e2:	2201      	movhi	r2, #1
 80083e4:	2200      	movls	r2, #0
 80083e6:	b2d2      	uxtb	r2, r2
 80083e8:	2a00      	cmp	r2, #0
 80083ea:	d10c      	bne.n	8008406 <OSTimeDly+0x72>
 80083ec:	f240 1215 	movw	r2, #277	@ 0x115
 80083f0:	fa22 f303 	lsr.w	r3, r2, r3
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	bf14      	ite	ne
 80083fc:	2301      	movne	r3, #1
 80083fe:	2300      	moveq	r3, #0
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d104      	bne.n	8008410 <OSTimeDly+0x7c>
        case OS_OPT_TIME_PERIODIC:
        case OS_OPT_TIME_MATCH:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f645 6225 	movw	r2, #24101	@ 0x5e25
 800840c:	801a      	strh	r2, [r3, #0]
             return;
 800840e:	e01d      	b.n	800844c <OSTimeDly+0xb8>
             break;
 8008410:	bf00      	nop
    }

#if (OS_CFG_TICK_EN > 0u)
    CPU_CRITICAL_ENTER();
 8008412:	2040      	movs	r0, #64	@ 0x40
 8008414:	f7f7 fedc 	bl	80001d0 <CPU_SR_Save>
 8008418:	6178      	str	r0, [r7, #20]
    OS_TickListInsertDly(OSTCBCurPtr,
 800841a:	4b11      	ldr	r3, [pc, #68]	@ (8008460 <OSTimeDly+0xcc>)
 800841c:	6818      	ldr	r0, [r3, #0]
 800841e:	897a      	ldrh	r2, [r7, #10]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	68f9      	ldr	r1, [r7, #12]
 8008424:	f7ff fe1c 	bl	8008060 <OS_TickListInsertDly>
                         dly,
                         opt,
                         p_err);
    if (*p_err != OS_ERR_NONE) {
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d003      	beq.n	8008438 <OSTimeDly+0xa4>
         CPU_CRITICAL_EXIT();
 8008430:	6978      	ldr	r0, [r7, #20]
 8008432:	f7f7 fedb 	bl	80001ec <CPU_SR_Restore>
         return;
 8008436:	e009      	b.n	800844c <OSTimeDly+0xb8>
    }

    OS_RdyListRemove(OSTCBCurPtr);                              /* Remove current task from ready list                  */
 8008438:	4b09      	ldr	r3, [pc, #36]	@ (8008460 <OSTimeDly+0xcc>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4618      	mov	r0, r3
 800843e:	f7fd fcdb 	bl	8005df8 <OS_RdyListRemove>
    CPU_CRITICAL_EXIT();
 8008442:	6978      	ldr	r0, [r7, #20]
 8008444:	f7f7 fed2 	bl	80001ec <CPU_SR_Restore>
    OSSched();                                                  /* Find next task to run!                               */
 8008448:	f7fd f906 	bl	8005658 <OSSched>
#endif
#endif
}
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	200019a0 	.word	0x200019a0
 8008458:	200019a1 	.word	0x200019a1
 800845c:	20001b5c 	.word	0x20001b5c
 8008460:	20001d74 	.word	0x20001d74

08008464 <OSTimeDlyHMSM>:
                     CPU_INT16U   minutes,
                     CPU_INT16U   seconds,
                     CPU_INT32U   milli,
                     OS_OPT       opt,
                     OS_ERR      *p_err)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b088      	sub	sp, #32
 8008468:	af00      	add	r7, sp, #0
 800846a:	607b      	str	r3, [r7, #4]
 800846c:	4603      	mov	r3, r0
 800846e:	81fb      	strh	r3, [r7, #14]
 8008470:	460b      	mov	r3, r1
 8008472:	81bb      	strh	r3, [r7, #12]
 8008474:	4613      	mov	r3, r2
 8008476:	817b      	strh	r3, [r7, #10]
    CPU_BOOLEAN  opt_non_strict;
#endif
    OS_OPT       opt_time;
    OS_RATE_HZ   tick_rate;
    OS_TICK      ticks;
    CPU_SR_ALLOC();
 8008478:	2300      	movs	r3, #0
 800847a:	61fb      	str	r3, [r7, #28]
#if (OS_CFG_TICK_EN == 0u)
    *p_err = OS_ERR_TICK_DISABLED;
    return;
#else
#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
 800847c:	4b66      	ldr	r3, [pc, #408]	@ (8008618 <OSTimeDlyHMSM+0x1b4>)
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d004      	beq.n	800848e <OSTimeDlyHMSM+0x2a>
       *p_err = OS_ERR_TIME_DLY_ISR;
 8008484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008486:	f247 2275 	movw	r2, #29301	@ 0x7275
 800848a:	801a      	strh	r2, [r3, #0]
        return;
 800848c:	e0c1      	b.n	8008612 <OSTimeDlyHMSM+0x1ae>
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 800848e:	4b63      	ldr	r3, [pc, #396]	@ (800861c <OSTimeDlyHMSM+0x1b8>)
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d004      	beq.n	80084a0 <OSTimeDlyHMSM+0x3c>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8008496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008498:	f645 6289 	movw	r2, #24201	@ 0x5e89
 800849c:	801a      	strh	r2, [r3, #0]
        return;
 800849e:	e0b8      	b.n	8008612 <OSTimeDlyHMSM+0x1ae>
    }
#endif

    if (OSSchedLockNestingCtr > 0u) {                           /* Can't delay when the scheduler is locked             */
 80084a0:	4b5f      	ldr	r3, [pc, #380]	@ (8008620 <OSTimeDlyHMSM+0x1bc>)
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d004      	beq.n	80084b2 <OSTimeDlyHMSM+0x4e>
       *p_err = OS_ERR_SCHED_LOCKED;
 80084a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084aa:	f646 5263 	movw	r2, #28003	@ 0x6d63
 80084ae:	801a      	strh	r2, [r3, #0]
        return;
 80084b0:	e0af      	b.n	8008612 <OSTimeDlyHMSM+0x1ae>
    }

    opt_time = opt & OS_OPT_TIME_MASK;                          /* Retrieve time options only.                          */
 80084b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80084b4:	f003 030e 	and.w	r3, r3, #14
 80084b8:	837b      	strh	r3, [r7, #26]
    switch (opt_time) {
 80084ba:	8b7b      	ldrh	r3, [r7, #26]
 80084bc:	2b08      	cmp	r3, #8
 80084be:	bf8c      	ite	hi
 80084c0:	2201      	movhi	r2, #1
 80084c2:	2200      	movls	r2, #0
 80084c4:	b2d2      	uxtb	r2, r2
 80084c6:	2a00      	cmp	r2, #0
 80084c8:	d10c      	bne.n	80084e4 <OSTimeDlyHMSM+0x80>
 80084ca:	f240 1215 	movw	r2, #277	@ 0x115
 80084ce:	fa22 f303 	lsr.w	r3, r2, r3
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	bf14      	ite	ne
 80084da:	2301      	movne	r3, #1
 80084dc:	2300      	moveq	r3, #0
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d104      	bne.n	80084ee <OSTimeDlyHMSM+0x8a>
        case OS_OPT_TIME_PERIODIC:
        case OS_OPT_TIME_MATCH:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
 80084e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e6:	f645 6225 	movw	r2, #24101	@ 0x5e25
 80084ea:	801a      	strh	r2, [r3, #0]
             return;
 80084ec:	e091      	b.n	8008612 <OSTimeDlyHMSM+0x1ae>
             break;
 80084ee:	bf00      	nop
    }

#if (OS_CFG_ARG_CHK_EN > 0u)                                    /* Validate arguments to be within range                */
    opt_invalid = ((((opt) & (~OS_OPT_TIME_OPTS_MASK)) == 0u) ? (OS_FALSE) : (OS_TRUE));
 80084f0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80084f2:	f023 031e 	bic.w	r3, r3, #30
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	bf14      	ite	ne
 80084fa:	2301      	movne	r3, #1
 80084fc:	2300      	moveq	r3, #0
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	767b      	strb	r3, [r7, #25]
    if (opt_invalid == OS_TRUE) {
 8008502:	7e7b      	ldrb	r3, [r7, #25]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d104      	bne.n	8008512 <OSTimeDlyHMSM+0xae>
       *p_err = OS_ERR_OPT_INVALID;
 8008508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800850a:	f645 6225 	movw	r2, #24101	@ 0x5e25
 800850e:	801a      	strh	r2, [r3, #0]
        return;
 8008510:	e07f      	b.n	8008612 <OSTimeDlyHMSM+0x1ae>
    }

    opt_non_strict = ((((opt) & (OS_OPT_TIME_HMSM_NON_STRICT)) == 0u) ? (OS_FALSE) : (OS_TRUE));
 8008512:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008514:	f003 0310 	and.w	r3, r3, #16
 8008518:	2b00      	cmp	r3, #0
 800851a:	bf14      	ite	ne
 800851c:	2301      	movne	r3, #1
 800851e:	2300      	moveq	r3, #0
 8008520:	b2db      	uxtb	r3, r3
 8008522:	763b      	strb	r3, [r7, #24]

    if (opt_non_strict != OS_TRUE) {
 8008524:	7e3b      	ldrb	r3, [r7, #24]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d020      	beq.n	800856c <OSTimeDlyHMSM+0x108>
         if (milli   > 999u) {
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008530:	d304      	bcc.n	800853c <OSTimeDlyHMSM+0xd8>
            *p_err = OS_ERR_TIME_INVALID_MILLISECONDS;
 8008532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008534:	f247 227b 	movw	r2, #29307	@ 0x727b
 8008538:	801a      	strh	r2, [r3, #0]
             return;
 800853a:	e06a      	b.n	8008612 <OSTimeDlyHMSM+0x1ae>
         }
         if (seconds > 59u) {
 800853c:	897b      	ldrh	r3, [r7, #10]
 800853e:	2b3b      	cmp	r3, #59	@ 0x3b
 8008540:	d904      	bls.n	800854c <OSTimeDlyHMSM+0xe8>
            *p_err = OS_ERR_TIME_INVALID_SECONDS;
 8008542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008544:	f247 227a 	movw	r2, #29306	@ 0x727a
 8008548:	801a      	strh	r2, [r3, #0]
             return;
 800854a:	e062      	b.n	8008612 <OSTimeDlyHMSM+0x1ae>
         }
         if (minutes > 59u) {
 800854c:	89bb      	ldrh	r3, [r7, #12]
 800854e:	2b3b      	cmp	r3, #59	@ 0x3b
 8008550:	d904      	bls.n	800855c <OSTimeDlyHMSM+0xf8>
            *p_err = OS_ERR_TIME_INVALID_MINUTES;
 8008552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008554:	f247 2279 	movw	r2, #29305	@ 0x7279
 8008558:	801a      	strh	r2, [r3, #0]
             return;
 800855a:	e05a      	b.n	8008612 <OSTimeDlyHMSM+0x1ae>
         }
         if (hours   > 99u) {
 800855c:	89fb      	ldrh	r3, [r7, #14]
 800855e:	2b63      	cmp	r3, #99	@ 0x63
 8008560:	d917      	bls.n	8008592 <OSTimeDlyHMSM+0x12e>
            *p_err = OS_ERR_TIME_INVALID_HOURS;
 8008562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008564:	f247 2278 	movw	r2, #29304	@ 0x7278
 8008568:	801a      	strh	r2, [r3, #0]
             return;
 800856a:	e052      	b.n	8008612 <OSTimeDlyHMSM+0x1ae>
         }
    } else {
         if (minutes > 9999u) {
 800856c:	89bb      	ldrh	r3, [r7, #12]
 800856e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008572:	4293      	cmp	r3, r2
 8008574:	d904      	bls.n	8008580 <OSTimeDlyHMSM+0x11c>
            *p_err = OS_ERR_TIME_INVALID_MINUTES;
 8008576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008578:	f247 2279 	movw	r2, #29305	@ 0x7279
 800857c:	801a      	strh	r2, [r3, #0]
             return;
 800857e:	e048      	b.n	8008612 <OSTimeDlyHMSM+0x1ae>
         }
         if (hours   > 999u) {
 8008580:	89fb      	ldrh	r3, [r7, #14]
 8008582:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008586:	d304      	bcc.n	8008592 <OSTimeDlyHMSM+0x12e>
            *p_err = OS_ERR_TIME_INVALID_HOURS;
 8008588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800858a:	f247 2278 	movw	r2, #29304	@ 0x7278
 800858e:	801a      	strh	r2, [r3, #0]
             return;
 8008590:	e03f      	b.n	8008612 <OSTimeDlyHMSM+0x1ae>
    }
#endif

                                                                /* Compute the total number of clock ticks required..   */
                                                                /* .. (rounded to the nearest tick)                     */
    tick_rate = OSCfg_TickRate_Hz;
 8008592:	4b24      	ldr	r3, [pc, #144]	@ (8008624 <OSTimeDlyHMSM+0x1c0>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	617b      	str	r3, [r7, #20]
    ticks     = ((((OS_TICK)hours * (OS_TICK)3600u) + ((OS_TICK)minutes * (OS_TICK)60u) + (OS_TICK)seconds) * tick_rate)
 8008598:	89fb      	ldrh	r3, [r7, #14]
 800859a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800859e:	fb02 f103 	mul.w	r1, r2, r3
 80085a2:	89ba      	ldrh	r2, [r7, #12]
 80085a4:	4613      	mov	r3, r2
 80085a6:	011b      	lsls	r3, r3, #4
 80085a8:	1a9b      	subs	r3, r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	18ca      	adds	r2, r1, r3
 80085ae:	897b      	ldrh	r3, [r7, #10]
 80085b0:	4413      	add	r3, r2
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	fb03 f202 	mul.w	r2, r3, r2
              + ((tick_rate * ((OS_TICK)milli + ((OS_TICK)500u / tick_rate))) / (OS_TICK)1000u);
 80085b8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	fbb1 f1f3 	udiv	r1, r1, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	440b      	add	r3, r1
 80085c6:	6979      	ldr	r1, [r7, #20]
 80085c8:	fb01 f303 	mul.w	r3, r1, r3
 80085cc:	4916      	ldr	r1, [pc, #88]	@ (8008628 <OSTimeDlyHMSM+0x1c4>)
 80085ce:	fba1 1303 	umull	r1, r3, r1, r3
 80085d2:	099b      	lsrs	r3, r3, #6
    ticks     = ((((OS_TICK)hours * (OS_TICK)3600u) + ((OS_TICK)minutes * (OS_TICK)60u) + (OS_TICK)seconds) * tick_rate)
 80085d4:	4413      	add	r3, r2
 80085d6:	613b      	str	r3, [r7, #16]


    CPU_CRITICAL_ENTER();
 80085d8:	2040      	movs	r0, #64	@ 0x40
 80085da:	f7f7 fdf9 	bl	80001d0 <CPU_SR_Save>
 80085de:	61f8      	str	r0, [r7, #28]
    OS_TickListInsertDly(OSTCBCurPtr,
 80085e0:	4b12      	ldr	r3, [pc, #72]	@ (800862c <OSTimeDlyHMSM+0x1c8>)
 80085e2:	6818      	ldr	r0, [r3, #0]
 80085e4:	8b7a      	ldrh	r2, [r7, #26]
 80085e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e8:	6939      	ldr	r1, [r7, #16]
 80085ea:	f7ff fd39 	bl	8008060 <OS_TickListInsertDly>
                         ticks,
                         opt_time,
                         p_err);
    if (*p_err != OS_ERR_NONE) {
 80085ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f0:	881b      	ldrh	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d003      	beq.n	80085fe <OSTimeDlyHMSM+0x19a>
         CPU_CRITICAL_EXIT();
 80085f6:	69f8      	ldr	r0, [r7, #28]
 80085f8:	f7f7 fdf8 	bl	80001ec <CPU_SR_Restore>
         return;
 80085fc:	e009      	b.n	8008612 <OSTimeDlyHMSM+0x1ae>
    }

    OS_RdyListRemove(OSTCBCurPtr);                              /* Remove current task from ready list                  */
 80085fe:	4b0b      	ldr	r3, [pc, #44]	@ (800862c <OSTimeDlyHMSM+0x1c8>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4618      	mov	r0, r3
 8008604:	f7fd fbf8 	bl	8005df8 <OS_RdyListRemove>
    CPU_CRITICAL_EXIT();
 8008608:	69f8      	ldr	r0, [r7, #28]
 800860a:	f7f7 fdef 	bl	80001ec <CPU_SR_Restore>
    OSSched();                                                  /* Find next task to run!                               */
 800860e:	f7fd f823 	bl	8005658 <OSSched>
#endif
}
 8008612:	3720      	adds	r7, #32
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	200019a0 	.word	0x200019a0
 800861c:	200019a1 	.word	0x200019a1
 8008620:	20001b5c 	.word	0x20001b5c
 8008624:	08008ed0 	.word	0x08008ed0
 8008628:	10624dd3 	.word	0x10624dd3
 800862c:	20001d74 	.word	0x20001d74

08008630 <OSTimeTick>:
* Note(s)    : none
************************************************************************************************************************
*/

void  OSTimeTick (void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	af00      	add	r7, sp, #0
    if (OSRunning != OS_STATE_OS_RUNNING) {
 8008634:	4b05      	ldr	r3, [pc, #20]	@ (800864c <OSTimeTick+0x1c>)
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d105      	bne.n	8008648 <OSTimeTick+0x18>
        return;
    }

    OSTimeTickHook();                                           /* Call user definable hook                             */
 800863c:	f7fc fe74 	bl	8005328 <OSTimeTickHook>
#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
    OS_SchedRoundRobin(&OSRdyList[OSPrioCur]);                  /* Update quanta ctr for the task which just ran        */
#endif

#if (OS_CFG_TICK_EN > 0u)
    OS_TickUpdate(1u);                                          /* Update from the ISR                                  */
 8008640:	2001      	movs	r0, #1
 8008642:	f7ff fc47 	bl	8007ed4 <OS_TickUpdate>
 8008646:	e000      	b.n	800864a <OSTimeTick+0x1a>
        return;
 8008648:	bf00      	nop
#endif
}
 800864a:	bd80      	pop	{r7, pc}
 800864c:	200019a1 	.word	0x200019a1

08008650 <OS_TmrInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrInit (OS_ERR  *p_err)
{
 8008650:	b590      	push	{r4, r7, lr}
 8008652:	b08d      	sub	sp, #52	@ 0x34
 8008654:	af0a      	add	r7, sp, #40	@ 0x28
 8008656:	6078      	str	r0, [r7, #4]
#if (OS_CFG_DBG_EN > 0u)
    OSTmrQty             =           0u;                        /* Keep track of the number of timers created           */
 8008658:	4b2e      	ldr	r3, [pc, #184]	@ (8008714 <OS_TmrInit+0xc4>)
 800865a:	2200      	movs	r2, #0
 800865c:	801a      	strh	r2, [r3, #0]
    OSTmrDbgListPtr      = (OS_TMR *)0;
 800865e:	4b2e      	ldr	r3, [pc, #184]	@ (8008718 <OS_TmrInit+0xc8>)
 8008660:	2200      	movs	r2, #0
 8008662:	601a      	str	r2, [r3, #0]
#endif

    OSTmrListPtr         = (OS_TMR *)0;                         /* Create an empty timer list                           */
 8008664:	4b2d      	ldr	r3, [pc, #180]	@ (800871c <OS_TmrInit+0xcc>)
 8008666:	2200      	movs	r2, #0
 8008668:	601a      	str	r2, [r3, #0]
#if (OS_CFG_DBG_EN > 0u)
    OSTmrListEntries     =           0u;
 800866a:	4b2d      	ldr	r3, [pc, #180]	@ (8008720 <OS_TmrInit+0xd0>)
 800866c:	2200      	movs	r2, #0
 800866e:	801a      	strh	r2, [r3, #0]
#endif
                                                                /* Calculate Timer to Ticks multiplier                  */
    OSTmrToTicksMult = OSCfg_TickRate_Hz / OSCfg_TmrTaskRate_Hz;
 8008670:	4b2c      	ldr	r3, [pc, #176]	@ (8008724 <OS_TmrInit+0xd4>)
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	4b2c      	ldr	r3, [pc, #176]	@ (8008728 <OS_TmrInit+0xd8>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	fbb2 f3f3 	udiv	r3, r2, r3
 800867c:	4a2b      	ldr	r2, [pc, #172]	@ (800872c <OS_TmrInit+0xdc>)
 800867e:	6013      	str	r3, [r2, #0]
#if (OS_CFG_TS_EN > 0u)
    OSTmrTaskTime        =           0u;
    OSTmrTaskTimeMax     =           0u;
#endif

    OSMutexCreate(&OSTmrMutex,                                  /* Use a mutex to protect the timers                    */
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	492b      	ldr	r1, [pc, #172]	@ (8008730 <OS_TmrInit+0xe0>)
 8008684:	482b      	ldr	r0, [pc, #172]	@ (8008734 <OS_TmrInit+0xe4>)
 8008686:	f7fe fa75 	bl	8006b74 <OSMutexCreate>
                  (CPU_CHAR *)0,
#else
                  (CPU_CHAR *)"OS Tmr Mutex",
#endif
                  p_err);
    if (*p_err != OS_ERR_NONE) {
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d13b      	bne.n	800870a <OS_TmrInit+0xba>
        return;
    }

    OS_TmrCondCreate();
 8008692:	f000 fa4d 	bl	8008b30 <OS_TmrCondCreate>
                                                                /* -------------- CREATE THE TIMER TASK --------------- */
    if (OSCfg_TmrTaskStkBasePtr == (CPU_STK *)0) {
 8008696:	4b28      	ldr	r3, [pc, #160]	@ (8008738 <OS_TmrInit+0xe8>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d104      	bne.n	80086a8 <OS_TmrInit+0x58>
       *p_err = OS_ERR_TMR_STK_INVALID;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f247 3247 	movw	r2, #29511	@ 0x7347
 80086a4:	801a      	strh	r2, [r3, #0]
        return;
 80086a6:	e031      	b.n	800870c <OS_TmrInit+0xbc>
    }

    if (OSCfg_TmrTaskStkSize < OSCfg_StkSizeMin) {
 80086a8:	4b24      	ldr	r3, [pc, #144]	@ (800873c <OS_TmrInit+0xec>)
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	4b24      	ldr	r3, [pc, #144]	@ (8008740 <OS_TmrInit+0xf0>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d204      	bcs.n	80086be <OS_TmrInit+0x6e>
       *p_err = OS_ERR_TMR_STK_SIZE_INVALID;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f247 3248 	movw	r2, #29512	@ 0x7348
 80086ba:	801a      	strh	r2, [r3, #0]
        return;
 80086bc:	e026      	b.n	800870c <OS_TmrInit+0xbc>
    }

    if (OSCfg_TmrTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 80086be:	4b21      	ldr	r3, [pc, #132]	@ (8008744 <OS_TmrInit+0xf4>)
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	2b1e      	cmp	r3, #30
 80086c4:	d904      	bls.n	80086d0 <OS_TmrInit+0x80>
       *p_err = OS_ERR_TMR_PRIO_INVALID;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f247 3246 	movw	r2, #29510	@ 0x7346
 80086cc:	801a      	strh	r2, [r3, #0]
        return;
 80086ce:	e01d      	b.n	800870c <OS_TmrInit+0xbc>
    }

    OSTaskCreate(&OSTmrTaskTCB,
 80086d0:	4b1c      	ldr	r3, [pc, #112]	@ (8008744 <OS_TmrInit+0xf4>)
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	4a18      	ldr	r2, [pc, #96]	@ (8008738 <OS_TmrInit+0xe8>)
 80086d6:	6812      	ldr	r2, [r2, #0]
 80086d8:	491b      	ldr	r1, [pc, #108]	@ (8008748 <OS_TmrInit+0xf8>)
 80086da:	6809      	ldr	r1, [r1, #0]
 80086dc:	4817      	ldr	r0, [pc, #92]	@ (800873c <OS_TmrInit+0xec>)
 80086de:	6800      	ldr	r0, [r0, #0]
 80086e0:	687c      	ldr	r4, [r7, #4]
 80086e2:	9408      	str	r4, [sp, #32]
 80086e4:	240b      	movs	r4, #11
 80086e6:	9407      	str	r4, [sp, #28]
 80086e8:	2400      	movs	r4, #0
 80086ea:	9406      	str	r4, [sp, #24]
 80086ec:	2400      	movs	r4, #0
 80086ee:	9405      	str	r4, [sp, #20]
 80086f0:	2400      	movs	r4, #0
 80086f2:	9404      	str	r4, [sp, #16]
 80086f4:	9003      	str	r0, [sp, #12]
 80086f6:	9102      	str	r1, [sp, #8]
 80086f8:	9201      	str	r2, [sp, #4]
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	2300      	movs	r3, #0
 80086fe:	4a13      	ldr	r2, [pc, #76]	@ (800874c <OS_TmrInit+0xfc>)
 8008700:	4913      	ldr	r1, [pc, #76]	@ (8008750 <OS_TmrInit+0x100>)
 8008702:	4814      	ldr	r0, [pc, #80]	@ (8008754 <OS_TmrInit+0x104>)
 8008704:	f7fe ff32 	bl	800756c <OSTaskCreate>
 8008708:	e000      	b.n	800870c <OS_TmrInit+0xbc>
        return;
 800870a:	bf00      	nop
                  0u,
                  0u,
                 (void     *)0,
                 (OS_OPT_TASK_STK_CHK | (OS_OPT)(OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS)),
                  p_err);
}
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	bd90      	pop	{r4, r7, pc}
 8008712:	bf00      	nop
 8008714:	20001cac 	.word	0x20001cac
 8008718:	20001c50 	.word	0x20001c50
 800871c:	20001c58 	.word	0x20001c58
 8008720:	20001c54 	.word	0x20001c54
 8008724:	08008ed0 	.word	0x08008ed0
 8008728:	08008ed8 	.word	0x08008ed8
 800872c:	20001d70 	.word	0x20001d70
 8008730:	08008e5c 	.word	0x08008e5c
 8008734:	20001c80 	.word	0x20001c80
 8008738:	08008edc 	.word	0x08008edc
 800873c:	08008ee4 	.word	0x08008ee4
 8008740:	08008ecc 	.word	0x08008ecc
 8008744:	08008ed4 	.word	0x08008ed4
 8008748:	08008ee0 	.word	0x08008ee0
 800874c:	080089c9 	.word	0x080089c9
 8008750:	08008e6c 	.word	0x08008e6c
 8008754:	20001cb0 	.word	0x20001cb0

08008758 <OS_TmrLink>:
************************************************************************************************************************
*/

void OS_TmrLink (OS_TMR   *p_tmr,
                 OS_TICK   time)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
    OS_TMR   *p_tmr2;
    OS_TICK   remain;
    OS_TICK   delta;


    if (OSTmrListPtr == (OS_TMR *)0) {                          /* Is the list empty?                                   */
 8008762:	4b48      	ldr	r3, [pc, #288]	@ (8008884 <OS_TmrLink+0x12c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d111      	bne.n	800878e <OS_TmrLink+0x36>
        p_tmr->NextPtr    = (OS_TMR *)0;                        /* Yes, this is the first entry                         */
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	611a      	str	r2, [r3, #16]
        p_tmr->PrevPtr    = (OS_TMR *)0;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	615a      	str	r2, [r3, #20]
        OSTmrListPtr      = p_tmr;
 8008776:	4a43      	ldr	r2, [pc, #268]	@ (8008884 <OS_TmrLink+0x12c>)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6013      	str	r3, [r2, #0]
#if (OS_CFG_DBG_EN > 0u)
        OSTmrListEntries  = 1u;
 800877c:	4b42      	ldr	r3, [pc, #264]	@ (8008888 <OS_TmrLink+0x130>)
 800877e:	2201      	movs	r2, #1
 8008780:	801a      	strh	r2, [r3, #0]
#endif
        OSTmrTaskTickBase = time;
 8008782:	4a42      	ldr	r2, [pc, #264]	@ (800888c <OS_TmrLink+0x134>)
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	6013      	str	r3, [r2, #0]
        OS_TmrCondSignal();
 8008788:	f000 fa88 	bl	8008c9c <OS_TmrCondSignal>

        return;
 800878c:	e076      	b.n	800887c <OS_TmrLink+0x124>
    }

#if (OS_CFG_DBG_EN > 0u)
    OSTmrListEntries++;
 800878e:	4b3e      	ldr	r3, [pc, #248]	@ (8008888 <OS_TmrLink+0x130>)
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	3301      	adds	r3, #1
 8008794:	b29a      	uxth	r2, r3
 8008796:	4b3c      	ldr	r3, [pc, #240]	@ (8008888 <OS_TmrLink+0x130>)
 8008798:	801a      	strh	r2, [r3, #0]
#endif

    delta = (time + p_tmr->Remain) - OSTmrTaskTickBase;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	699a      	ldr	r2, [r3, #24]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	441a      	add	r2, r3
 80087a2:	4b3a      	ldr	r3, [pc, #232]	@ (800888c <OS_TmrLink+0x134>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	60fb      	str	r3, [r7, #12]

    p_tmr2 = OSTmrListPtr;                                      /* No,  Insert somewhere in the list in delta order     */
 80087aa:	4b36      	ldr	r3, [pc, #216]	@ (8008884 <OS_TmrLink+0x12c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	613b      	str	r3, [r7, #16]
    remain = p_tmr2->Remain;
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	699b      	ldr	r3, [r3, #24]
 80087b4:	60bb      	str	r3, [r7, #8]

    if ((delta           <     remain) &&
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d21a      	bcs.n	80087f4 <OS_TmrLink+0x9c>
        (p_tmr2->PrevPtr == (OS_TMR *)0)) {                     /* Are we the new head of the list?                     */
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	695b      	ldr	r3, [r3, #20]
    if ((delta           <     remain) &&
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d116      	bne.n	80087f4 <OS_TmrLink+0x9c>
        p_tmr2->Remain    =  remain - delta;
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	1ad2      	subs	r2, r2, r3
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	619a      	str	r2, [r3, #24]
        p_tmr->PrevPtr    = (OS_TMR *)0;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	615a      	str	r2, [r3, #20]
        p_tmr->NextPtr    =  p_tmr2;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	611a      	str	r2, [r3, #16]
        p_tmr2->PrevPtr   =  p_tmr;
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	615a      	str	r2, [r3, #20]
        OSTmrListPtr      =  p_tmr;
 80087e2:	4a28      	ldr	r2, [pc, #160]	@ (8008884 <OS_TmrLink+0x12c>)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6013      	str	r3, [r2, #0]

        OSTmrTaskTickBase = time;
 80087e8:	4a28      	ldr	r2, [pc, #160]	@ (800888c <OS_TmrLink+0x134>)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	6013      	str	r3, [r2, #0]
        OS_TmrCondSignal();
 80087ee:	f000 fa55 	bl	8008c9c <OS_TmrCondSignal>

        return;
 80087f2:	e043      	b.n	800887c <OS_TmrLink+0x124>
    }

                                                                /* No                                                   */
    delta  -= remain;                                           /* Make delta relative to the current head.             */
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	60fb      	str	r3, [r7, #12]
    p_tmr1  = p_tmr2;
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	617b      	str	r3, [r7, #20]
    p_tmr2  = p_tmr1->NextPtr;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	613b      	str	r3, [r7, #16]


    while ((p_tmr2 !=        (OS_TMR *)0) &&                    /* Find the appropriate position in the delta list.     */
 8008806:	e009      	b.n	800881c <OS_TmrLink+0xc4>
           (delta  >= p_tmr2->Remain)) {
        delta  -= p_tmr2->Remain;                               /* Update our delta as we traverse the list.            */
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	60fb      	str	r3, [r7, #12]
        p_tmr1  = p_tmr2;
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	617b      	str	r3, [r7, #20]
        p_tmr2  = p_tmr2->NextPtr;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	613b      	str	r3, [r7, #16]
    while ((p_tmr2 !=        (OS_TMR *)0) &&                    /* Find the appropriate position in the delta list.     */
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d004      	beq.n	800882c <OS_TmrLink+0xd4>
           (delta  >= p_tmr2->Remain)) {
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	699b      	ldr	r3, [r3, #24]
    while ((p_tmr2 !=        (OS_TMR *)0) &&                    /* Find the appropriate position in the delta list.     */
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	429a      	cmp	r2, r3
 800882a:	d2ed      	bcs.n	8008808 <OS_TmrLink+0xb0>
    }


    if (p_tmr2 != (OS_TMR *)0) {                                /* Our entry is not the last element in the list.       */
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d018      	beq.n	8008864 <OS_TmrLink+0x10c>
        p_tmr1           = p_tmr2->PrevPtr;
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	617b      	str	r3, [r7, #20]
        p_tmr->Remain    = delta;                               /* Store remaining time                                 */
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	619a      	str	r2, [r3, #24]
        p_tmr->PrevPtr   = p_tmr1;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	615a      	str	r2, [r3, #20]
        p_tmr->NextPtr   = p_tmr2;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	611a      	str	r2, [r3, #16]
        p_tmr2->Remain  -= delta;                               /* Reduce time of next entry in the list                */
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	699a      	ldr	r2, [r3, #24]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	1ad2      	subs	r2, r2, r3
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	619a      	str	r2, [r3, #24]
        p_tmr2->PrevPtr  = p_tmr;
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	615a      	str	r2, [r3, #20]
        p_tmr1->NextPtr  = p_tmr;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	611a      	str	r2, [r3, #16]
 8008862:	e00b      	b.n	800887c <OS_TmrLink+0x124>

    } else {                                                    /* Our entry belongs at the end of the list.            */
        p_tmr->Remain    = delta;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	619a      	str	r2, [r3, #24]
        p_tmr->PrevPtr   = p_tmr1;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	615a      	str	r2, [r3, #20]
        p_tmr->NextPtr   = (OS_TMR *)0;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	611a      	str	r2, [r3, #16]
        p_tmr1->NextPtr  = p_tmr;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	611a      	str	r2, [r3, #16]
    }
}
 800887c:	3718      	adds	r7, #24
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	20001c58 	.word	0x20001c58
 8008888:	20001c54 	.word	0x20001c54
 800888c:	20001d6c 	.word	0x20001d6c

08008890 <OS_TmrUnlink>:
************************************************************************************************************************
*/

void  OS_TmrUnlink (OS_TMR   *p_tmr,
                    OS_TICK   time)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
    OS_TMR   *p_tmr1;
    OS_TMR   *p_tmr2;
    OS_TICK   elapsed;


    p_tmr1                          = p_tmr->PrevPtr;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	60fb      	str	r3, [r7, #12]
    p_tmr2                          = p_tmr->NextPtr;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	617b      	str	r3, [r7, #20]
    if (p_tmr1 == (OS_TMR *)0) {
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d163      	bne.n	8008974 <OS_TmrUnlink+0xe4>
        if (p_tmr2 == (OS_TMR *)0) {                            /* Remove the ONLY entry in the list?                   */
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10e      	bne.n	80088d0 <OS_TmrUnlink+0x40>
            OSTmrListPtr            = (OS_TMR *)0;
 80088b2:	4b42      	ldr	r3, [pc, #264]	@ (80089bc <OS_TmrUnlink+0x12c>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	601a      	str	r2, [r3, #0]
#if (OS_CFG_DBG_EN > 0u)
            OSTmrListEntries        = 0u;
 80088b8:	4b41      	ldr	r3, [pc, #260]	@ (80089c0 <OS_TmrUnlink+0x130>)
 80088ba:	2200      	movs	r2, #0
 80088bc:	801a      	strh	r2, [r3, #0]
#endif
            p_tmr->Remain           = 0u;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	619a      	str	r2, [r3, #24]

            OSTmrTaskTickBase       = time;
 80088c4:	4a3f      	ldr	r2, [pc, #252]	@ (80089c4 <OS_TmrUnlink+0x134>)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	6013      	str	r3, [r2, #0]
            OS_TmrCondSignal();
 80088ca:	f000 f9e7 	bl	8008c9c <OS_TmrCondSignal>
        }
        p_tmr->PrevPtr              = (OS_TMR *)0;
        p_tmr->NextPtr              = (OS_TMR *)0;
        p_tmr->Remain               =           0u;
    }
}
 80088ce:	e070      	b.n	80089b2 <OS_TmrUnlink+0x122>
            OSTmrListEntries--;
 80088d0:	4b3b      	ldr	r3, [pc, #236]	@ (80089c0 <OS_TmrUnlink+0x130>)
 80088d2:	881b      	ldrh	r3, [r3, #0]
 80088d4:	3b01      	subs	r3, #1
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	4b39      	ldr	r3, [pc, #228]	@ (80089c0 <OS_TmrUnlink+0x130>)
 80088da:	801a      	strh	r2, [r3, #0]
            elapsed                 = time - OSTmrTaskTickBase;
 80088dc:	4b39      	ldr	r3, [pc, #228]	@ (80089c4 <OS_TmrUnlink+0x134>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	613b      	str	r3, [r7, #16]
            p_tmr2->PrevPtr         = (OS_TMR *)0;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2200      	movs	r2, #0
 80088ea:	615a      	str	r2, [r3, #20]
            p_tmr2->Remain         += p_tmr->Remain;            /* Add back the ticks to the delta                      */
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	699a      	ldr	r2, [r3, #24]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	441a      	add	r2, r3
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	619a      	str	r2, [r3, #24]
            OSTmrListPtr            = p_tmr2;
 80088fa:	4a30      	ldr	r2, [pc, #192]	@ (80089bc <OS_TmrUnlink+0x12c>)
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	6013      	str	r3, [r2, #0]
            while ((elapsed >           0u) &&
 8008900:	e01a      	b.n	8008938 <OS_TmrUnlink+0xa8>
                if (elapsed > p_tmr2->Remain) {
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	699b      	ldr	r3, [r3, #24]
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	429a      	cmp	r2, r3
 800890a:	d908      	bls.n	800891e <OS_TmrUnlink+0x8e>
                    elapsed        -= p_tmr2->Remain;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	613b      	str	r3, [r7, #16]
                    p_tmr2->Remain  = 0u;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2200      	movs	r2, #0
 800891a:	619a      	str	r2, [r3, #24]
 800891c:	e007      	b.n	800892e <OS_TmrUnlink+0x9e>
                    p_tmr2->Remain -= elapsed;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	699a      	ldr	r2, [r3, #24]
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	1ad2      	subs	r2, r2, r3
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	619a      	str	r2, [r3, #24]
                    elapsed         = 0u;
 800892a:	2300      	movs	r3, #0
 800892c:	613b      	str	r3, [r7, #16]
                p_tmr1              = p_tmr2;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	60fb      	str	r3, [r7, #12]
                p_tmr2              = p_tmr1->NextPtr;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	617b      	str	r3, [r7, #20]
            while ((elapsed >           0u) &&
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d002      	beq.n	8008944 <OS_TmrUnlink+0xb4>
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1de      	bne.n	8008902 <OS_TmrUnlink+0x72>
            if ((OSTmrListPtr->Remain != p_tmr->Remain) ||      /* Reload if new head has a different delay         ... */
 8008944:	4b1d      	ldr	r3, [pc, #116]	@ (80089bc <OS_TmrUnlink+0x12c>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	699a      	ldr	r2, [r3, #24]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	429a      	cmp	r2, r3
 8008950:	d104      	bne.n	800895c <OS_TmrUnlink+0xcc>
                (OSTmrListPtr->Remain ==            0u)) {      /* ... or has already timed out.                        */
 8008952:	4b1a      	ldr	r3, [pc, #104]	@ (80089bc <OS_TmrUnlink+0x12c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	699b      	ldr	r3, [r3, #24]
            if ((OSTmrListPtr->Remain != p_tmr->Remain) ||      /* Reload if new head has a different delay         ... */
 8008958:	2b00      	cmp	r3, #0
 800895a:	d104      	bne.n	8008966 <OS_TmrUnlink+0xd6>
                OSTmrTaskTickBase   = time;
 800895c:	4a19      	ldr	r2, [pc, #100]	@ (80089c4 <OS_TmrUnlink+0x134>)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	6013      	str	r3, [r2, #0]
                OS_TmrCondSignal();
 8008962:	f000 f99b 	bl	8008c9c <OS_TmrCondSignal>
            p_tmr->NextPtr          = (OS_TMR *)0;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	611a      	str	r2, [r3, #16]
            p_tmr->Remain           =           0u;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	619a      	str	r2, [r3, #24]
}
 8008972:	e01e      	b.n	80089b2 <OS_TmrUnlink+0x122>
        OSTmrListEntries--;
 8008974:	4b12      	ldr	r3, [pc, #72]	@ (80089c0 <OS_TmrUnlink+0x130>)
 8008976:	881b      	ldrh	r3, [r3, #0]
 8008978:	3b01      	subs	r3, #1
 800897a:	b29a      	uxth	r2, r3
 800897c:	4b10      	ldr	r3, [pc, #64]	@ (80089c0 <OS_TmrUnlink+0x130>)
 800897e:	801a      	strh	r2, [r3, #0]
        p_tmr1->NextPtr             = p_tmr2;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	611a      	str	r2, [r3, #16]
        if (p_tmr2 != (OS_TMR *)0) {
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d009      	beq.n	80089a0 <OS_TmrUnlink+0x110>
            p_tmr2->PrevPtr         = p_tmr1;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	615a      	str	r2, [r3, #20]
            p_tmr2->Remain         += p_tmr->Remain;            /* Add back the ticks to the delta list                 */
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	699a      	ldr	r2, [r3, #24]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	441a      	add	r2, r3
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	619a      	str	r2, [r3, #24]
        p_tmr->PrevPtr              = (OS_TMR *)0;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	615a      	str	r2, [r3, #20]
        p_tmr->NextPtr              = (OS_TMR *)0;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	611a      	str	r2, [r3, #16]
        p_tmr->Remain               =           0u;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	619a      	str	r2, [r3, #24]
}
 80089b2:	bf00      	nop
 80089b4:	3718      	adds	r7, #24
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	20001c58 	.word	0x20001c58
 80089c0:	20001c54 	.word	0x20001c54
 80089c4:	20001d6c 	.word	0x20001d6c

080089c8 <OS_TmrTask>:
*              3) Timer callbacks are allowed to make calls to the Timer APIs.
************************************************************************************************************************
*/

void  OS_TmrTask (void  *p_arg)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b088      	sub	sp, #32
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
    OS_TICK               elapsed;
    OS_TICK               time;
#if (OS_CFG_TS_EN > 0u)
    CPU_TS                ts_start;
#endif
    CPU_SR_ALLOC();
 80089d0:	2300      	movs	r3, #0
 80089d2:	613b      	str	r3, [r7, #16]


    (void)p_arg;                                                /* Not using 'p_arg', prevent compiler warning          */

    OS_TmrLock();
 80089d4:	f000 f89a 	bl	8008b0c <OS_TmrLock>

    for (;;) {
        if (OSTmrListPtr == (OS_TMR *)0) {
 80089d8:	4b49      	ldr	r3, [pc, #292]	@ (8008b00 <OS_TmrTask+0x138>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d102      	bne.n	80089e6 <OS_TmrTask+0x1e>
            timeout                = 0u;
 80089e0:	2300      	movs	r3, #0
 80089e2:	61bb      	str	r3, [r7, #24]
 80089e4:	e003      	b.n	80089ee <OS_TmrTask+0x26>
        } else {
            timeout                = OSTmrListPtr->Remain;
 80089e6:	4b46      	ldr	r3, [pc, #280]	@ (8008b00 <OS_TmrTask+0x138>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	61bb      	str	r3, [r7, #24]
        }

        OS_TmrCondWait(timeout);                                /* Suspend the timer task until it needs to process ... */
 80089ee:	69b8      	ldr	r0, [r7, #24]
 80089f0:	f000 f8c0 	bl	8008b74 <OS_TmrCondWait>
                                                                /* ... the timer list again. Also release the mutex ... */
                                                                /* ... so that application tasks can add/remove timers. */

        if (OSTmrListPtr == (OS_TMR *)0) {                      /* Suppresses static analyzer warnings.                 */
 80089f4:	4b42      	ldr	r3, [pc, #264]	@ (8008b00 <OS_TmrTask+0x138>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d07f      	beq.n	8008afc <OS_TmrTask+0x134>

#if (OS_CFG_TS_EN > 0u)
        ts_start = OS_TS_GET();
#endif

        CPU_CRITICAL_ENTER();
 80089fc:	2040      	movs	r0, #64	@ 0x40
 80089fe:	f7f7 fbe7 	bl	80001d0 <CPU_SR_Save>
 8008a02:	6138      	str	r0, [r7, #16]
#if (OS_CFG_DYN_TICK_EN > 0u)
        time                       = OSTickCtr + OS_DynTickGet();
#else
        time                       = OSTickCtr;
 8008a04:	4b3f      	ldr	r3, [pc, #252]	@ (8008b04 <OS_TmrTask+0x13c>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	60fb      	str	r3, [r7, #12]
#endif
        CPU_CRITICAL_EXIT();
 8008a0a:	6938      	ldr	r0, [r7, #16]
 8008a0c:	f7f7 fbee 	bl	80001ec <CPU_SR_Restore>
        elapsed                    = time - OSTmrTaskTickBase;
 8008a10:	4b3d      	ldr	r3, [pc, #244]	@ (8008b08 <OS_TmrTask+0x140>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	617b      	str	r3, [r7, #20]
        OSTmrTaskTickBase          = time;
 8008a1a:	4a3b      	ldr	r2, [pc, #236]	@ (8008b08 <OS_TmrTask+0x140>)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6013      	str	r3, [r2, #0]

                                                                /* Update the delta values.                             */
        p_tmr = OSTmrListPtr;
 8008a20:	4b37      	ldr	r3, [pc, #220]	@ (8008b00 <OS_TmrTask+0x138>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	61fb      	str	r3, [r7, #28]
        while ((elapsed !=          0u) &&
 8008a26:	e018      	b.n	8008a5a <OS_TmrTask+0x92>
               (p_tmr   != (OS_TMR *)0)) {

            if (elapsed > p_tmr->Remain) {
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d908      	bls.n	8008a44 <OS_TmrTask+0x7c>
                elapsed           -= p_tmr->Remain;
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	617b      	str	r3, [r7, #20]
                p_tmr->Remain      = 0u;
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	619a      	str	r2, [r3, #24]
 8008a42:	e007      	b.n	8008a54 <OS_TmrTask+0x8c>
            } else {
                p_tmr->Remain     -= elapsed;
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	699a      	ldr	r2, [r3, #24]
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	1ad2      	subs	r2, r2, r3
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	619a      	str	r2, [r3, #24]
                elapsed            = 0u;
 8008a50:	2300      	movs	r3, #0
 8008a52:	617b      	str	r3, [r7, #20]
            }

            p_tmr                  = p_tmr->NextPtr;
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	61fb      	str	r3, [r7, #28]
        while ((elapsed !=          0u) &&
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <OS_TmrTask+0x9e>
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1e0      	bne.n	8008a28 <OS_TmrTask+0x60>
        }

                                                                /* Process timers that have expired.                    */
        p_tmr                      = OSTmrListPtr;
 8008a66:	4b26      	ldr	r3, [pc, #152]	@ (8008b00 <OS_TmrTask+0x138>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	61fb      	str	r3, [r7, #28]

        while ((p_tmr         != (OS_TMR *)0) &&
 8008a6c:	e03d      	b.n	8008aea <OS_TmrTask+0x122>
               (p_tmr->Remain ==          0u)) {
            p_tmr->State           = OS_TMR_STATE_TIMEOUT;
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	2204      	movs	r2, #4
 8008a72:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                                                                /* Execute callback function if available               */
            p_fnct                 = p_tmr->CallbackPtr;
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	60bb      	str	r3, [r7, #8]
            if (p_fnct != (OS_TMR_CALLBACK_PTR)0u) {
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d005      	beq.n	8008a8e <OS_TmrTask+0xc6>
                (*p_fnct)(p_tmr, p_tmr->CallbackPtrArg);
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	4611      	mov	r1, r2
 8008a8a:	69f8      	ldr	r0, [r7, #28]
 8008a8c:	4798      	blx	r3
            }

            if (p_tmr->State == OS_TMR_STATE_TIMEOUT) {
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	d125      	bne.n	8008ae4 <OS_TmrTask+0x11c>
                OS_TmrUnlink(p_tmr, OSTmrTaskTickBase);
 8008a98:	4b1b      	ldr	r3, [pc, #108]	@ (8008b08 <OS_TmrTask+0x140>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	69f8      	ldr	r0, [r7, #28]
 8008aa0:	f7ff fef6 	bl	8008890 <OS_TmrUnlink>

                if (p_tmr->Opt == OS_OPT_TMR_PERIODIC) {
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d10e      	bne.n	8008aca <OS_TmrTask+0x102>
                    p_tmr->State   = OS_TMR_STATE_RUNNING;
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                    p_tmr->Remain  = p_tmr->Period;
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	6a1a      	ldr	r2, [r3, #32]
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	619a      	str	r2, [r3, #24]
                    OS_TmrLink(p_tmr, OSTmrTaskTickBase);
 8008abc:	4b12      	ldr	r3, [pc, #72]	@ (8008b08 <OS_TmrTask+0x140>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	69f8      	ldr	r0, [r7, #28]
 8008ac4:	f7ff fe48 	bl	8008758 <OS_TmrLink>
 8008ac8:	e00c      	b.n	8008ae4 <OS_TmrTask+0x11c>
                } else {
                    p_tmr->PrevPtr = (OS_TMR *)0;
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	2200      	movs	r2, #0
 8008ace:	615a      	str	r2, [r3, #20]
                    p_tmr->NextPtr = (OS_TMR *)0;
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	611a      	str	r2, [r3, #16]
                    p_tmr->Remain  = 0u;
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	619a      	str	r2, [r3, #24]
                    p_tmr->State   = OS_TMR_STATE_COMPLETED;
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	2203      	movs	r2, #3
 8008ae0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                }
            }

            p_tmr                  = OSTmrListPtr;
 8008ae4:	4b06      	ldr	r3, [pc, #24]	@ (8008b00 <OS_TmrTask+0x138>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	61fb      	str	r3, [r7, #28]
        while ((p_tmr         != (OS_TMR *)0) &&
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f43f af73 	beq.w	80089d8 <OS_TmrTask+0x10>
               (p_tmr->Remain ==          0u)) {
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	699b      	ldr	r3, [r3, #24]
        while ((p_tmr         != (OS_TMR *)0) &&
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0b9      	beq.n	8008a6e <OS_TmrTask+0xa6>
 8008afa:	e76d      	b.n	80089d8 <OS_TmrTask+0x10>
            continue;
 8008afc:	bf00      	nop
        if (OSTmrListPtr == (OS_TMR *)0) {
 8008afe:	e76b      	b.n	80089d8 <OS_TmrTask+0x10>
 8008b00:	20001c58 	.word	0x20001c58
 8008b04:	20001c44 	.word	0x20001c44
 8008b08:	20001d6c 	.word	0x20001d6c

08008b0c <OS_TmrLock>:
* Note(s)    : 1) These functions are INTERNAL to uC/OS-III and your application MUST NOT call them.
************************************************************************************************************************
*/

static  void  OS_TmrLock (void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af02      	add	r7, sp, #8
    OS_ERR  err;


    OSMutexPend(&OSTmrMutex, 0u, OS_OPT_PEND_BLOCKING, (CPU_TS *)0, &err);
 8008b12:	1dbb      	adds	r3, r7, #6
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	2300      	movs	r3, #0
 8008b18:	2200      	movs	r2, #0
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	4803      	ldr	r0, [pc, #12]	@ (8008b2c <OS_TmrLock+0x20>)
 8008b1e:	f7fe f881 	bl	8006c24 <OSMutexPend>
}
 8008b22:	bf00      	nop
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20001c80 	.word	0x20001c80

08008b30 <OS_TmrCondCreate>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrCondCreate (void)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8008b36:	2300      	movs	r3, #0
 8008b38:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 8008b3a:	2040      	movs	r0, #64	@ 0x40
 8008b3c:	f7f7 fb48 	bl	80001d0 <CPU_SR_Save>
 8008b40:	6078      	str	r0, [r7, #4]
#if (OS_OBJ_TYPE_REQ > 0u)
    OSTmrCond.Type  = OS_OBJ_TYPE_COND;                         /* Mark the data structure as a condition variable.     */
 8008b42:	4b08      	ldr	r3, [pc, #32]	@ (8008b64 <OS_TmrCondCreate+0x34>)
 8008b44:	4a08      	ldr	r2, [pc, #32]	@ (8008b68 <OS_TmrCondCreate+0x38>)
 8008b46:	601a      	str	r2, [r3, #0]
#endif
    OSTmrCond.Mutex = &OSTmrMutex;                              /* Bind the timer mutex to the condition variable.      */
 8008b48:	4b06      	ldr	r3, [pc, #24]	@ (8008b64 <OS_TmrCondCreate+0x34>)
 8008b4a:	4a08      	ldr	r2, [pc, #32]	@ (8008b6c <OS_TmrCondCreate+0x3c>)
 8008b4c:	621a      	str	r2, [r3, #32]
    OS_PendListInit(&OSTmrCond.PendList);                       /* Initialize the waiting list                          */
 8008b4e:	4808      	ldr	r0, [pc, #32]	@ (8008b70 <OS_TmrCondCreate+0x40>)
 8008b50:	f7fc ff43 	bl	80059da <OS_PendListInit>
    CPU_CRITICAL_EXIT();
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7f7 fb49 	bl	80001ec <CPU_SR_Restore>
}
 8008b5a:	bf00      	nop
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	20001c5c 	.word	0x20001c5c
 8008b68:	444e4f43 	.word	0x444e4f43
 8008b6c:	20001c80 	.word	0x20001c80
 8008b70:	20001c64 	.word	0x20001c64

08008b74 <OS_TmrCondWait>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrCondWait (OS_TICK  timeout)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b088      	sub	sp, #32
 8008b78:	af02      	add	r7, sp, #8
 8008b7a:	6078      	str	r0, [r7, #4]
    OS_TCB        *p_tcb;
    OS_PEND_LIST  *p_pend_list;
    CPU_TS         ts;
    CPU_SR_ALLOC();
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	617b      	str	r3, [r7, #20]


    CPU_CRITICAL_ENTER();
 8008b80:	2040      	movs	r0, #64	@ 0x40
 8008b82:	f7f7 fb25 	bl	80001d0 <CPU_SR_Save>
 8008b86:	6178      	str	r0, [r7, #20]
#if (OS_CFG_TS_EN > 0u)
    ts             = OS_TS_GET();                               /* Get timestamp                                        */
    OSTmrMutex.TS  = ts;
#else
    ts             = 0u;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	613b      	str	r3, [r7, #16]
#endif
                                                                /* Release mutex to other tasks.                        */
    OS_MutexGrpRemove(&OSTmrTaskTCB, &OSTmrMutex);
 8008b8c:	493e      	ldr	r1, [pc, #248]	@ (8008c88 <OS_TmrCondWait+0x114>)
 8008b8e:	483f      	ldr	r0, [pc, #252]	@ (8008c8c <OS_TmrCondWait+0x118>)
 8008b90:	f7fe f972 	bl	8006e78 <OS_MutexGrpRemove>
    p_pend_list                    = &OSTmrMutex.PendList;
 8008b94:	4b3e      	ldr	r3, [pc, #248]	@ (8008c90 <OS_TmrCondWait+0x11c>)
 8008b96:	60fb      	str	r3, [r7, #12]

    if (OSTmrTaskTCB.Prio != OSTmrTaskTCB.BasePrio) {           /* Restore our original prio.                           */
 8008b98:	4b3c      	ldr	r3, [pc, #240]	@ (8008c8c <OS_TmrCondWait+0x118>)
 8008b9a:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 8008b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8008c8c <OS_TmrCondWait+0x118>)
 8008ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d00a      	beq.n	8008bbe <OS_TmrCondWait+0x4a>
        OS_TRACE_MUTEX_TASK_PRIO_DISINHERIT(&OSTmrTaskTCB, OSTmrTaskTCB.Prio);
        OSTmrTaskTCB.Prio          = OSTmrTaskTCB.BasePrio;
 8008ba8:	4b38      	ldr	r3, [pc, #224]	@ (8008c8c <OS_TmrCondWait+0x118>)
 8008baa:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8008bae:	4b37      	ldr	r3, [pc, #220]	@ (8008c8c <OS_TmrCondWait+0x118>)
 8008bb0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        OSPrioCur                  = OSTmrTaskTCB.BasePrio;
 8008bb4:	4b35      	ldr	r3, [pc, #212]	@ (8008c8c <OS_TmrCondWait+0x118>)
 8008bb6:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8008bba:	4b36      	ldr	r3, [pc, #216]	@ (8008c94 <OS_TmrCondWait+0x120>)
 8008bbc:	701a      	strb	r2, [r3, #0]
    }

    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* Any task waiting on mutex?                           */
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d107      	bne.n	8008bd6 <OS_TmrCondWait+0x62>
        OSTmrMutex.OwnerTCBPtr     = (OS_TCB *)0;               /* No                                                   */
 8008bc6:	4b30      	ldr	r3, [pc, #192]	@ (8008c88 <OS_TmrCondWait+0x114>)
 8008bc8:	2200      	movs	r2, #0
 8008bca:	625a      	str	r2, [r3, #36]	@ 0x24
        OSTmrMutex.OwnerNestingCtr =           0u;
 8008bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8008c88 <OS_TmrCondWait+0x114>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8008bd4:	e015      	b.n	8008c02 <OS_TmrCondWait+0x8e>
    } else {
        p_tcb                      = p_pend_list->HeadPtr;      /* Yes, give mutex to new owner                         */
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	60bb      	str	r3, [r7, #8]
        OSTmrMutex.OwnerTCBPtr     = p_tcb;
 8008bdc:	4a2a      	ldr	r2, [pc, #168]	@ (8008c88 <OS_TmrCondWait+0x114>)
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	6253      	str	r3, [r2, #36]	@ 0x24
        OSTmrMutex.OwnerNestingCtr =           1u;
 8008be2:	4b29      	ldr	r3, [pc, #164]	@ (8008c88 <OS_TmrCondWait+0x114>)
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        OS_MutexGrpAdd(p_tcb, &OSTmrMutex);
 8008bea:	4927      	ldr	r1, [pc, #156]	@ (8008c88 <OS_TmrCondWait+0x114>)
 8008bec:	68b8      	ldr	r0, [r7, #8]
 8008bee:	f7fe f931 	bl	8006e54 <OS_MutexGrpAdd>
                                                                /* Post to mutex                                        */
        OS_Post((OS_PEND_OBJ *)((void *)&OSTmrMutex),
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	68b9      	ldr	r1, [r7, #8]
 8008bfc:	4822      	ldr	r0, [pc, #136]	@ (8008c88 <OS_TmrCondWait+0x114>)
 8008bfe:	f7fc ffc1 	bl	8005b84 <OS_Post>
                                (void *) 0,
                                         0u,
                                         ts);
    }

    OS_Pend((OS_PEND_OBJ *)((void *)&OSTmrCond),                /* Pend on the condition variable.                      */
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2203      	movs	r2, #3
 8008c06:	4921      	ldr	r1, [pc, #132]	@ (8008c8c <OS_TmrCondWait+0x118>)
 8008c08:	4823      	ldr	r0, [pc, #140]	@ (8008c98 <OS_TmrCondWait+0x124>)
 8008c0a:	f7fc fe39 	bl	8005880 <OS_Pend>
                                   &OSTmrTaskTCB,
                                    OS_TASK_PEND_ON_COND,
                                    timeout);
    CPU_CRITICAL_EXIT();
 8008c0e:	6978      	ldr	r0, [r7, #20]
 8008c10:	f7f7 faec 	bl	80001ec <CPU_SR_Restore>

    OSSched();
 8008c14:	f7fc fd20 	bl	8005658 <OSSched>

    CPU_CRITICAL_ENTER();                                       /* Either we timed out, or were signaled.               */
 8008c18:	2040      	movs	r0, #64	@ 0x40
 8008c1a:	f7f7 fad9 	bl	80001d0 <CPU_SR_Save>
 8008c1e:	6178      	str	r0, [r7, #20]

    if (OSTmrMutex.OwnerTCBPtr == (OS_TCB *)0) {                /* Can we grab the mutex?                               */
 8008c20:	4b19      	ldr	r3, [pc, #100]	@ (8008c88 <OS_TmrCondWait+0x114>)
 8008c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10e      	bne.n	8008c46 <OS_TmrCondWait+0xd2>
        OS_MutexGrpAdd(&OSTmrTaskTCB, &OSTmrMutex);             /* Yes, no-one else pending.                            */
 8008c28:	4917      	ldr	r1, [pc, #92]	@ (8008c88 <OS_TmrCondWait+0x114>)
 8008c2a:	4818      	ldr	r0, [pc, #96]	@ (8008c8c <OS_TmrCondWait+0x118>)
 8008c2c:	f7fe f912 	bl	8006e54 <OS_MutexGrpAdd>
        OSTmrMutex.OwnerTCBPtr     = &OSTmrTaskTCB;
 8008c30:	4b15      	ldr	r3, [pc, #84]	@ (8008c88 <OS_TmrCondWait+0x114>)
 8008c32:	4a16      	ldr	r2, [pc, #88]	@ (8008c8c <OS_TmrCondWait+0x118>)
 8008c34:	625a      	str	r2, [r3, #36]	@ 0x24
        OSTmrMutex.OwnerNestingCtr = 1u;
 8008c36:	4b14      	ldr	r3, [pc, #80]	@ (8008c88 <OS_TmrCondWait+0x114>)
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        CPU_CRITICAL_EXIT();
 8008c3e:	6978      	ldr	r0, [r7, #20]
 8008c40:	f7f7 fad4 	bl	80001ec <CPU_SR_Restore>
                                         0u);
        CPU_CRITICAL_EXIT();

        OSSched();
    }
}
 8008c44:	e01c      	b.n	8008c80 <OS_TmrCondWait+0x10c>
        p_tcb = OSTmrMutex.OwnerTCBPtr;                         /* No, we need to wait for it.                          */
 8008c46:	4b10      	ldr	r3, [pc, #64]	@ (8008c88 <OS_TmrCondWait+0x114>)
 8008c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c4a:	60bb      	str	r3, [r7, #8]
        if (p_tcb->Prio > OSTmrTaskTCB.Prio) {                  /* See if mutex owner has a lower priority than TmrTask.*/
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 8008c52:	4b0e      	ldr	r3, [pc, #56]	@ (8008c8c <OS_TmrCondWait+0x118>)
 8008c54:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d906      	bls.n	8008c6a <OS_TmrCondWait+0xf6>
            OS_TaskChangePrio(p_tcb, OSTmrTaskTCB.Prio);
 8008c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8008c8c <OS_TmrCondWait+0x118>)
 8008c5e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8008c62:	4619      	mov	r1, r3
 8008c64:	68b8      	ldr	r0, [r7, #8]
 8008c66:	f7ff f879 	bl	8007d5c <OS_TaskChangePrio>
        OS_Pend((OS_PEND_OBJ *)((void *)&OSTmrMutex),           /* Block TmrTask until it gets the Mutex.               */
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	2204      	movs	r2, #4
 8008c6e:	4907      	ldr	r1, [pc, #28]	@ (8008c8c <OS_TmrCondWait+0x118>)
 8008c70:	4805      	ldr	r0, [pc, #20]	@ (8008c88 <OS_TmrCondWait+0x114>)
 8008c72:	f7fc fe05 	bl	8005880 <OS_Pend>
        CPU_CRITICAL_EXIT();
 8008c76:	6978      	ldr	r0, [r7, #20]
 8008c78:	f7f7 fab8 	bl	80001ec <CPU_SR_Restore>
        OSSched();
 8008c7c:	f7fc fcec 	bl	8005658 <OSSched>
}
 8008c80:	bf00      	nop
 8008c82:	3718      	adds	r7, #24
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	20001c80 	.word	0x20001c80
 8008c8c:	20001cb0 	.word	0x20001cb0
 8008c90:	20001c88 	.word	0x20001c88
 8008c94:	200019ce 	.word	0x200019ce
 8008c98:	20001c5c 	.word	0x20001c5c

08008c9c <OS_TmrCondSignal>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrCondSignal (void)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b086      	sub	sp, #24
 8008ca0:	af02      	add	r7, sp, #8
    OS_PEND_LIST  *p_pend_list;
    CPU_TS         ts;
    CPU_SR_ALLOC();
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 8008ca6:	2040      	movs	r0, #64	@ 0x40
 8008ca8:	f7f7 fa92 	bl	80001d0 <CPU_SR_Save>
 8008cac:	60f8      	str	r0, [r7, #12]
#if (OS_CFG_TS_EN > 0u)
    ts             = OS_TS_GET();                               /* Get timestamp                                        */
    OSTmrMutex.TS  = ts;
#else
    ts             = 0u;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60bb      	str	r3, [r7, #8]
#endif

    p_pend_list    = &OSTmrCond.PendList;
 8008cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ce4 <OS_TmrCondSignal+0x48>)
 8008cb4:	607b      	str	r3, [r7, #4]

    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* Timer task waiting on cond?                          */
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d103      	bne.n	8008cc6 <OS_TmrCondSignal+0x2a>
        CPU_CRITICAL_EXIT();
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f7f7 fa94 	bl	80001ec <CPU_SR_Restore>
        return;                                                 /* No, nothing to signal.                               */
 8008cc4:	e00a      	b.n	8008cdc <OS_TmrCondSignal+0x40>
    } else {
                                                                /* Yes, signal the timer task.                          */
        OS_Post((OS_PEND_OBJ *)((void *)&OSTmrCond),
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	2300      	movs	r3, #0
 8008ccc:	2200      	movs	r2, #0
 8008cce:	4906      	ldr	r1, [pc, #24]	@ (8008ce8 <OS_TmrCondSignal+0x4c>)
 8008cd0:	4806      	ldr	r0, [pc, #24]	@ (8008cec <OS_TmrCondSignal+0x50>)
 8008cd2:	f7fc ff57 	bl	8005b84 <OS_Post>
                                (void *) 0,
                                         0u,
                                         ts);
    }

    CPU_CRITICAL_EXIT();
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f7f7 fa88 	bl	80001ec <CPU_SR_Restore>
}
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20001c64 	.word	0x20001c64
 8008ce8:	20001cb0 	.word	0x20001cb0
 8008cec:	20001c5c 	.word	0x20001c5c

08008cf0 <memset>:
 8008cf0:	4402      	add	r2, r0
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d100      	bne.n	8008cfa <memset+0xa>
 8008cf8:	4770      	bx	lr
 8008cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8008cfe:	e7f9      	b.n	8008cf4 <memset+0x4>

08008d00 <__libc_init_array>:
 8008d00:	b570      	push	{r4, r5, r6, lr}
 8008d02:	4d0d      	ldr	r5, [pc, #52]	@ (8008d38 <__libc_init_array+0x38>)
 8008d04:	4c0d      	ldr	r4, [pc, #52]	@ (8008d3c <__libc_init_array+0x3c>)
 8008d06:	1b64      	subs	r4, r4, r5
 8008d08:	10a4      	asrs	r4, r4, #2
 8008d0a:	2600      	movs	r6, #0
 8008d0c:	42a6      	cmp	r6, r4
 8008d0e:	d109      	bne.n	8008d24 <__libc_init_array+0x24>
 8008d10:	4d0b      	ldr	r5, [pc, #44]	@ (8008d40 <__libc_init_array+0x40>)
 8008d12:	4c0c      	ldr	r4, [pc, #48]	@ (8008d44 <__libc_init_array+0x44>)
 8008d14:	f000 f818 	bl	8008d48 <_init>
 8008d18:	1b64      	subs	r4, r4, r5
 8008d1a:	10a4      	asrs	r4, r4, #2
 8008d1c:	2600      	movs	r6, #0
 8008d1e:	42a6      	cmp	r6, r4
 8008d20:	d105      	bne.n	8008d2e <__libc_init_array+0x2e>
 8008d22:	bd70      	pop	{r4, r5, r6, pc}
 8008d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d28:	4798      	blx	r3
 8008d2a:	3601      	adds	r6, #1
 8008d2c:	e7ee      	b.n	8008d0c <__libc_init_array+0xc>
 8008d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d32:	4798      	blx	r3
 8008d34:	3601      	adds	r6, #1
 8008d36:	e7f2      	b.n	8008d1e <__libc_init_array+0x1e>
 8008d38:	0800904c 	.word	0x0800904c
 8008d3c:	0800904c 	.word	0x0800904c
 8008d40:	0800904c 	.word	0x0800904c
 8008d44:	08009050 	.word	0x08009050

08008d48 <_init>:
 8008d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4a:	bf00      	nop
 8008d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d4e:	bc08      	pop	{r3}
 8008d50:	469e      	mov	lr, r3
 8008d52:	4770      	bx	lr

08008d54 <_fini>:
 8008d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d56:	bf00      	nop
 8008d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d5a:	bc08      	pop	{r3}
 8008d5c:	469e      	mov	lr, r3
 8008d5e:	4770      	bx	lr
