
Controle-Cabo_STM32F407ZGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d4  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  0800625c  0800625c  0000725c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800651c  0800651c  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  0800651c  0800651c  0000751c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006524  08006524  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006524  08006524  00007524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006528  08006528  00007528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800652c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000800c  2**0
                  CONTENTS
 10 .bss          00001e50  2000000c  2000000c  0000800c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001e5c  20001e5c  0000800c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024b2c  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c19  00000000  00000000  0002cb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000cf14  00000000  00000000  00031781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001490  00000000  00000000  0003e698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f54  00000000  00000000  0003fb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023b82  00000000  00000000  00040a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020b14  00000000  00000000  000645fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7177  00000000  00000000  00085112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0016c289  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003718  00000000  00000000  0016c2cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000c2  00000000  00000000  0016f9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006244 	.word	0x08006244

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006244 	.word	0x08006244

080001c8 <CPU_IntDis>:
@               void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 80001c8:	b672      	cpsid	i
        BX      LR
 80001ca:	4770      	bx	lr

080001cc <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 80001cc:	b662      	cpsie	i
        BX      LR
 80001ce:	4770      	bx	lr

080001d0 <CPU_SR_Save>:
@                       CPSIE i
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 80001d0:	b672      	cpsid	i
        PUSH   {R1}
 80001d2:	b402      	push	{r1}
        MRS     R1, BASEPRI
 80001d4:	f3ef 8111 	mrs	r1, BASEPRI
        MSR     BASEPRI, R0
 80001d8:	f380 8811 	msr	BASEPRI, r0
        DSB
 80001dc:	f3bf 8f4f 	dsb	sy
        ISB
 80001e0:	f3bf 8f6f 	isb	sy
        MOV     R0, R1
 80001e4:	4608      	mov	r0, r1
        POP    {R1}
 80001e6:	bc02      	pop	{r1}
        CPSIE   I
 80001e8:	b662      	cpsie	i
        BX      LR
 80001ea:	4770      	bx	lr

080001ec <CPU_SR_Restore>:


.thumb_func
CPU_SR_Restore:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 80001ec:	b672      	cpsid	i
        MSR     BASEPRI, R0
 80001ee:	f380 8811 	msr	BASEPRI, r0
        DSB
 80001f2:	f3bf 8f4f 	dsb	sy
        ISB
 80001f6:	f3bf 8f6f 	isb	sy
        CPSIE   I
 80001fa:	b662      	cpsie	i
        BX      LR
 80001fc:	4770      	bx	lr

080001fe <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 80001fe:	bf30      	wfi
        BX      LR
 8000200:	4770      	bx	lr

08000202 <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 8000202:	bf20      	wfe
        BX      LR
 8000204:	4770      	bx	lr

08000206 <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 8000206:	fab0 f080 	clz	r0, r0
        BX      LR
 800020a:	4770      	bx	lr

0800020c <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 800020c:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 8000210:	fab0 f080 	clz	r0, r0
        BX      LR
 8000214:	4770      	bx	lr

08000216 <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 8000216:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 800021a:	4770      	bx	lr

0800021c <OSStartHighRdy>:
@              h) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 800021c:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 800021e:	f64e 5022 	movw	r0, #60706	@ 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 8000222:	f2ce 0000 	movt	r0, #57344	@ 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 8000226:	f240 01ff 	movw	r1, #255	@ 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 800022a:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 800022e:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 8000230:	2000      	movs	r0, #0
    MSR     PSP, R0
 8000232:	f380 8809 	msr	PSP, r0

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 8000236:	f241 1070 	movw	r0, #4464	@ 0x1170
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 800023a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    LDR     R1, [R0]
 800023e:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 8000240:	f381 8808 	msr	MSP, r1

    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 8000244:	f003 fc08 	bl	8003a58 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000248:	f641 5049 	movw	r0, #7497	@ 0x1d49
    MOVT    R0, #:upper16:OSPrioCur
 800024c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 8000250:	f641 5148 	movw	r1, #7496	@ 0x1d48
    MOVT    R1, #:upper16:OSPrioHighRdy
 8000254:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 8000258:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 800025a:	7002      	strb	r2, [r0, #0]

    MOVW    R0, #:lower16:OSTCBCurPtr                           @ OSTCBCurPtr = OSTCBHighRdyPtr;
 800025c:	f641 1088 	movw	r0, #6536	@ 0x1988
    MOVT    R0, #:upper16:OSTCBCurPtr
 8000260:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdyPtr
 8000264:	f641 1184 	movw	r1, #6532	@ 0x1984
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 8000268:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 800026c:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 800026e:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 8000270:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 8000272:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 8000276:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 800027a:	f040 0002 	orr.w	r0, r0, #2
    BIC     R0, R0, #4                                          @ Clear FPCA bit to indicate FPU is not in use
 800027e:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, R0
 8000282:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 8000286:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11, LR}                                  @ Restore r4-11, lr from new process stack
 800028a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 800028e:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 8000290:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 8000294:	bc06      	pop	{r1, r2}
    CPSIE    I
 8000296:	b662      	cpsie	i
    BX       R1
 8000298:	4708      	bx	r1

0800029a <OSCtxSw>:

.thumb_func
OSCtxSw:
.thumb_func
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800029a:	4825      	ldr	r0, [pc, #148]	@ (8000330 <OS_CPU_PendSVHandler+0x8c>)
    LDR     R1, =NVIC_PENDSVSET
 800029c:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
    STR     R1, [R0]
 80002a0:	6001      	str	r1, [r0, #0]
    BX      LR
 80002a2:	4770      	bx	lr

080002a4 <OS_CPU_PendSVHandler>:
@                  CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 80002a4:	b672      	cpsid	i
    MOVW    R2, #:lower16:OS_KA_BASEPRI_Boundary                @ Set BASEPRI priority level required for exception preemption
 80002a6:	f241 126c 	movw	r2, #4460	@ 0x116c
    MOVT    R2, #:upper16:OS_KA_BASEPRI_Boundary
 80002aa:	f2c2 0200 	movt	r2, #8192	@ 0x2000
    LDR     R1, [R2]
 80002ae:	6811      	ldr	r1, [r2, #0]
    MSR     BASEPRI, R1
 80002b0:	f381 8811 	msr	BASEPRI, r1
    DSB
 80002b4:	f3bf 8f4f 	dsb	sy
    ISB
 80002b8:	f3bf 8f6f 	isb	sy
    CPSIE   I
 80002bc:	b662      	cpsie	i

    MRS     R0, PSP                                             @ PSP is process stack pointer
 80002be:	f3ef 8009 	mrs	r0, PSP
#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
                                                                @ Push high vfp registers if the task is using the FPU context
    TST       R14, #0x10
 80002c2:	f01e 0f10 	tst.w	lr, #16
    IT        EQ
 80002c6:	bf08      	it	eq
    VSTMDBEQ  R0!, {S16-S31}
 80002c8:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
#endif

    STMFD   R0!, {R4-R11, R14}                                  @ Save remaining regs r4-11, R14 on process stack
 80002cc:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    MOVW    R5, #:lower16:OSTCBCurPtr                           @ OSTCBCurPtr->StkPtr = SP;
 80002d0:	f641 1588 	movw	r5, #6536	@ 0x1988
    MOVT    R5, #:upper16:OSTCBCurPtr
 80002d4:	f2c2 0500 	movt	r5, #8192	@ 0x2000
    LDR     R1, [R5]
 80002d8:	6829      	ldr	r1, [r5, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 80002da:	6008      	str	r0, [r1, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 80002dc:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 80002de:	f003 fbbb 	bl	8003a58 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 80002e2:	f641 5049 	movw	r0, #7497	@ 0x1d49
    MOVT    R0, #:upper16:OSPrioCur
 80002e6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 80002ea:	f641 5148 	movw	r1, #7496	@ 0x1d48
    MOVT    R1, #:upper16:OSPrioHighRdy
 80002ee:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 80002f2:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002f4:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdyPtr                       @ OSTCBCurPtr = OSTCBHighRdyPtr;
 80002f6:	f641 1184 	movw	r1, #6532	@ 0x1984
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 80002fa:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 80002fe:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 8000300:	602a      	str	r2, [r5, #0]

    ORR     LR,  R4, #0x04                                      @ Ensure exception return uses process stack
 8000302:	f044 0e04 	orr.w	lr, r4, #4
    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 8000306:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11, R14}                                  @ Restore r4-11, R14 from new process stack
 8000308:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
                                                                @ Pop the high vfp registers if the next task is using the FPU context
    TST       R14, #0x10
 800030c:	f01e 0f10 	tst.w	lr, #16
    IT        EQ
 8000310:	bf08      	it	eq
    VLDMIAEQ  R0!, {S16-S31}
 8000312:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
#endif

    MSR     PSP, R0                                             @ Load PSP with new process SP
 8000316:	f380 8809 	msr	PSP, r0

    MOV     R2, #0                                              @ Restore BASEPRI priority level to 0
 800031a:	f04f 0200 	mov.w	r2, #0
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 800031e:	b672      	cpsid	i
    MSR     BASEPRI, R2
 8000320:	f382 8811 	msr	BASEPRI, r2
    DSB
 8000324:	f3bf 8f4f 	dsb	sy
    ISB
 8000328:	f3bf 8f6f 	isb	sy
    CPSIE   I
 800032c:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 800032e:	4770      	bx	lr
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000330:	e000ed04 	.word	0xe000ed04

08000334 <__aeabi_dmul>:
 8000334:	b570      	push	{r4, r5, r6, lr}
 8000336:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800033a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800033e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000342:	bf1d      	ittte	ne
 8000344:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000348:	ea94 0f0c 	teqne	r4, ip
 800034c:	ea95 0f0c 	teqne	r5, ip
 8000350:	f000 f8de 	bleq	8000510 <__aeabi_dmul+0x1dc>
 8000354:	442c      	add	r4, r5
 8000356:	ea81 0603 	eor.w	r6, r1, r3
 800035a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800035e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000362:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000366:	bf18      	it	ne
 8000368:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800036c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000370:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000374:	d038      	beq.n	80003e8 <__aeabi_dmul+0xb4>
 8000376:	fba0 ce02 	umull	ip, lr, r0, r2
 800037a:	f04f 0500 	mov.w	r5, #0
 800037e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000382:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000386:	fbe0 e503 	umlal	lr, r5, r0, r3
 800038a:	f04f 0600 	mov.w	r6, #0
 800038e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000392:	f09c 0f00 	teq	ip, #0
 8000396:	bf18      	it	ne
 8000398:	f04e 0e01 	orrne.w	lr, lr, #1
 800039c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80003a0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80003a4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80003a8:	d204      	bcs.n	80003b4 <__aeabi_dmul+0x80>
 80003aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80003ae:	416d      	adcs	r5, r5
 80003b0:	eb46 0606 	adc.w	r6, r6, r6
 80003b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80003b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80003bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80003c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80003c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80003c8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80003cc:	bf88      	it	hi
 80003ce:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80003d2:	d81e      	bhi.n	8000412 <__aeabi_dmul+0xde>
 80003d4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80003d8:	bf08      	it	eq
 80003da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80003de:	f150 0000 	adcs.w	r0, r0, #0
 80003e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e6:	bd70      	pop	{r4, r5, r6, pc}
 80003e8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80003ec:	ea46 0101 	orr.w	r1, r6, r1
 80003f0:	ea40 0002 	orr.w	r0, r0, r2
 80003f4:	ea81 0103 	eor.w	r1, r1, r3
 80003f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80003fc:	bfc2      	ittt	gt
 80003fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000402:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000406:	bd70      	popgt	{r4, r5, r6, pc}
 8000408:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800040c:	f04f 0e00 	mov.w	lr, #0
 8000410:	3c01      	subs	r4, #1
 8000412:	f300 80ab 	bgt.w	800056c <__aeabi_dmul+0x238>
 8000416:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800041a:	bfde      	ittt	le
 800041c:	2000      	movle	r0, #0
 800041e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000422:	bd70      	pople	{r4, r5, r6, pc}
 8000424:	f1c4 0400 	rsb	r4, r4, #0
 8000428:	3c20      	subs	r4, #32
 800042a:	da35      	bge.n	8000498 <__aeabi_dmul+0x164>
 800042c:	340c      	adds	r4, #12
 800042e:	dc1b      	bgt.n	8000468 <__aeabi_dmul+0x134>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0520 	rsb	r5, r4, #32
 8000438:	fa00 f305 	lsl.w	r3, r0, r5
 800043c:	fa20 f004 	lsr.w	r0, r0, r4
 8000440:	fa01 f205 	lsl.w	r2, r1, r5
 8000444:	ea40 0002 	orr.w	r0, r0, r2
 8000448:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000450:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000454:	fa21 f604 	lsr.w	r6, r1, r4
 8000458:	eb42 0106 	adc.w	r1, r2, r6
 800045c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000460:	bf08      	it	eq
 8000462:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000466:	bd70      	pop	{r4, r5, r6, pc}
 8000468:	f1c4 040c 	rsb	r4, r4, #12
 800046c:	f1c4 0520 	rsb	r5, r4, #32
 8000470:	fa00 f304 	lsl.w	r3, r0, r4
 8000474:	fa20 f005 	lsr.w	r0, r0, r5
 8000478:	fa01 f204 	lsl.w	r2, r1, r4
 800047c:	ea40 0002 	orr.w	r0, r0, r2
 8000480:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000484:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000488:	f141 0100 	adc.w	r1, r1, #0
 800048c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000490:	bf08      	it	eq
 8000492:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000496:	bd70      	pop	{r4, r5, r6, pc}
 8000498:	f1c4 0520 	rsb	r5, r4, #32
 800049c:	fa00 f205 	lsl.w	r2, r0, r5
 80004a0:	ea4e 0e02 	orr.w	lr, lr, r2
 80004a4:	fa20 f304 	lsr.w	r3, r0, r4
 80004a8:	fa01 f205 	lsl.w	r2, r1, r5
 80004ac:	ea43 0302 	orr.w	r3, r3, r2
 80004b0:	fa21 f004 	lsr.w	r0, r1, r4
 80004b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b8:	fa21 f204 	lsr.w	r2, r1, r4
 80004bc:	ea20 0002 	bic.w	r0, r0, r2
 80004c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80004c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004ce:	bd70      	pop	{r4, r5, r6, pc}
 80004d0:	f094 0f00 	teq	r4, #0
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_dmul+0x1c2>
 80004d6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80004da:	0040      	lsls	r0, r0, #1
 80004dc:	eb41 0101 	adc.w	r1, r1, r1
 80004e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80004e4:	bf08      	it	eq
 80004e6:	3c01      	subeq	r4, #1
 80004e8:	d0f7      	beq.n	80004da <__aeabi_dmul+0x1a6>
 80004ea:	ea41 0106 	orr.w	r1, r1, r6
 80004ee:	f095 0f00 	teq	r5, #0
 80004f2:	bf18      	it	ne
 80004f4:	4770      	bxne	lr
 80004f6:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80004fa:	0052      	lsls	r2, r2, #1
 80004fc:	eb43 0303 	adc.w	r3, r3, r3
 8000500:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000504:	bf08      	it	eq
 8000506:	3d01      	subeq	r5, #1
 8000508:	d0f7      	beq.n	80004fa <__aeabi_dmul+0x1c6>
 800050a:	ea43 0306 	orr.w	r3, r3, r6
 800050e:	4770      	bx	lr
 8000510:	ea94 0f0c 	teq	r4, ip
 8000514:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000518:	bf18      	it	ne
 800051a:	ea95 0f0c 	teqne	r5, ip
 800051e:	d00c      	beq.n	800053a <__aeabi_dmul+0x206>
 8000520:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800052a:	d1d1      	bne.n	80004d0 <__aeabi_dmul+0x19c>
 800052c:	ea81 0103 	eor.w	r1, r1, r3
 8000530:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd70      	pop	{r4, r5, r6, pc}
 800053a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800053e:	bf06      	itte	eq
 8000540:	4610      	moveq	r0, r2
 8000542:	4619      	moveq	r1, r3
 8000544:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000548:	d019      	beq.n	800057e <__aeabi_dmul+0x24a>
 800054a:	ea94 0f0c 	teq	r4, ip
 800054e:	d102      	bne.n	8000556 <__aeabi_dmul+0x222>
 8000550:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000554:	d113      	bne.n	800057e <__aeabi_dmul+0x24a>
 8000556:	ea95 0f0c 	teq	r5, ip
 800055a:	d105      	bne.n	8000568 <__aeabi_dmul+0x234>
 800055c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000560:	bf1c      	itt	ne
 8000562:	4610      	movne	r0, r2
 8000564:	4619      	movne	r1, r3
 8000566:	d10a      	bne.n	800057e <__aeabi_dmul+0x24a>
 8000568:	ea81 0103 	eor.w	r1, r1, r3
 800056c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000570:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000574:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000578:	f04f 0000 	mov.w	r0, #0
 800057c:	bd70      	pop	{r4, r5, r6, pc}
 800057e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000582:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000586:	bd70      	pop	{r4, r5, r6, pc}

08000588 <__aeabi_drsub>:
 8000588:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800058c:	e002      	b.n	8000594 <__adddf3>
 800058e:	bf00      	nop

08000590 <__aeabi_dsub>:
 8000590:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000594 <__adddf3>:
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800059a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800059e:	ea94 0f05 	teq	r4, r5
 80005a2:	bf08      	it	eq
 80005a4:	ea90 0f02 	teqeq	r0, r2
 80005a8:	bf1f      	itttt	ne
 80005aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80005ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80005b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80005b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005ba:	f000 80e2 	beq.w	8000782 <__adddf3+0x1ee>
 80005be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80005c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80005c6:	bfb8      	it	lt
 80005c8:	426d      	neglt	r5, r5
 80005ca:	dd0c      	ble.n	80005e6 <__adddf3+0x52>
 80005cc:	442c      	add	r4, r5
 80005ce:	ea80 0202 	eor.w	r2, r0, r2
 80005d2:	ea81 0303 	eor.w	r3, r1, r3
 80005d6:	ea82 0000 	eor.w	r0, r2, r0
 80005da:	ea83 0101 	eor.w	r1, r3, r1
 80005de:	ea80 0202 	eor.w	r2, r0, r2
 80005e2:	ea81 0303 	eor.w	r3, r1, r3
 80005e6:	2d36      	cmp	r5, #54	@ 0x36
 80005e8:	bf88      	it	hi
 80005ea:	bd30      	pophi	{r4, r5, pc}
 80005ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80005f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80005f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005fc:	d002      	beq.n	8000604 <__adddf3+0x70>
 80005fe:	4240      	negs	r0, r0
 8000600:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000604:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000608:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800060c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000610:	d002      	beq.n	8000618 <__adddf3+0x84>
 8000612:	4252      	negs	r2, r2
 8000614:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000618:	ea94 0f05 	teq	r4, r5
 800061c:	f000 80a7 	beq.w	800076e <__adddf3+0x1da>
 8000620:	f1a4 0401 	sub.w	r4, r4, #1
 8000624:	f1d5 0e20 	rsbs	lr, r5, #32
 8000628:	db0d      	blt.n	8000646 <__adddf3+0xb2>
 800062a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800062e:	fa22 f205 	lsr.w	r2, r2, r5
 8000632:	1880      	adds	r0, r0, r2
 8000634:	f141 0100 	adc.w	r1, r1, #0
 8000638:	fa03 f20e 	lsl.w	r2, r3, lr
 800063c:	1880      	adds	r0, r0, r2
 800063e:	fa43 f305 	asr.w	r3, r3, r5
 8000642:	4159      	adcs	r1, r3
 8000644:	e00e      	b.n	8000664 <__adddf3+0xd0>
 8000646:	f1a5 0520 	sub.w	r5, r5, #32
 800064a:	f10e 0e20 	add.w	lr, lr, #32
 800064e:	2a01      	cmp	r2, #1
 8000650:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000654:	bf28      	it	cs
 8000656:	f04c 0c02 	orrcs.w	ip, ip, #2
 800065a:	fa43 f305 	asr.w	r3, r3, r5
 800065e:	18c0      	adds	r0, r0, r3
 8000660:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	d507      	bpl.n	800067a <__adddf3+0xe6>
 800066a:	f04f 0e00 	mov.w	lr, #0
 800066e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000672:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000676:	eb6e 0101 	sbc.w	r1, lr, r1
 800067a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800067e:	d31b      	bcc.n	80006b8 <__adddf3+0x124>
 8000680:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000684:	d30c      	bcc.n	80006a0 <__adddf3+0x10c>
 8000686:	0849      	lsrs	r1, r1, #1
 8000688:	ea5f 0030 	movs.w	r0, r0, rrx
 800068c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000690:	f104 0401 	add.w	r4, r4, #1
 8000694:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000698:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800069c:	f080 809a 	bcs.w	80007d4 <__adddf3+0x240>
 80006a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	ea41 0105 	orr.w	r1, r1, r5
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80006bc:	4140      	adcs	r0, r0
 80006be:	eb41 0101 	adc.w	r1, r1, r1
 80006c2:	3c01      	subs	r4, #1
 80006c4:	bf28      	it	cs
 80006c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80006ca:	d2e9      	bcs.n	80006a0 <__adddf3+0x10c>
 80006cc:	f091 0f00 	teq	r1, #0
 80006d0:	bf04      	itt	eq
 80006d2:	4601      	moveq	r1, r0
 80006d4:	2000      	moveq	r0, #0
 80006d6:	fab1 f381 	clz	r3, r1
 80006da:	bf08      	it	eq
 80006dc:	3320      	addeq	r3, #32
 80006de:	f1a3 030b 	sub.w	r3, r3, #11
 80006e2:	f1b3 0220 	subs.w	r2, r3, #32
 80006e6:	da0c      	bge.n	8000702 <__adddf3+0x16e>
 80006e8:	320c      	adds	r2, #12
 80006ea:	dd08      	ble.n	80006fe <__adddf3+0x16a>
 80006ec:	f102 0c14 	add.w	ip, r2, #20
 80006f0:	f1c2 020c 	rsb	r2, r2, #12
 80006f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80006f8:	fa21 f102 	lsr.w	r1, r1, r2
 80006fc:	e00c      	b.n	8000718 <__adddf3+0x184>
 80006fe:	f102 0214 	add.w	r2, r2, #20
 8000702:	bfd8      	it	le
 8000704:	f1c2 0c20 	rsble	ip, r2, #32
 8000708:	fa01 f102 	lsl.w	r1, r1, r2
 800070c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000710:	bfdc      	itt	le
 8000712:	ea41 010c 	orrle.w	r1, r1, ip
 8000716:	4090      	lslle	r0, r2
 8000718:	1ae4      	subs	r4, r4, r3
 800071a:	bfa2      	ittt	ge
 800071c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000720:	4329      	orrge	r1, r5
 8000722:	bd30      	popge	{r4, r5, pc}
 8000724:	ea6f 0404 	mvn.w	r4, r4
 8000728:	3c1f      	subs	r4, #31
 800072a:	da1c      	bge.n	8000766 <__adddf3+0x1d2>
 800072c:	340c      	adds	r4, #12
 800072e:	dc0e      	bgt.n	800074e <__adddf3+0x1ba>
 8000730:	f104 0414 	add.w	r4, r4, #20
 8000734:	f1c4 0220 	rsb	r2, r4, #32
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f302 	lsl.w	r3, r1, r2
 8000740:	ea40 0003 	orr.w	r0, r0, r3
 8000744:	fa21 f304 	lsr.w	r3, r1, r4
 8000748:	ea45 0103 	orr.w	r1, r5, r3
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	f1c4 040c 	rsb	r4, r4, #12
 8000752:	f1c4 0220 	rsb	r2, r4, #32
 8000756:	fa20 f002 	lsr.w	r0, r0, r2
 800075a:	fa01 f304 	lsl.w	r3, r1, r4
 800075e:	ea40 0003 	orr.w	r0, r0, r3
 8000762:	4629      	mov	r1, r5
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	fa21 f004 	lsr.w	r0, r1, r4
 800076a:	4629      	mov	r1, r5
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	f094 0f00 	teq	r4, #0
 8000772:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000776:	bf06      	itte	eq
 8000778:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800077c:	3401      	addeq	r4, #1
 800077e:	3d01      	subne	r5, #1
 8000780:	e74e      	b.n	8000620 <__adddf3+0x8c>
 8000782:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000786:	bf18      	it	ne
 8000788:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800078c:	d029      	beq.n	80007e2 <__adddf3+0x24e>
 800078e:	ea94 0f05 	teq	r4, r5
 8000792:	bf08      	it	eq
 8000794:	ea90 0f02 	teqeq	r0, r2
 8000798:	d005      	beq.n	80007a6 <__adddf3+0x212>
 800079a:	ea54 0c00 	orrs.w	ip, r4, r0
 800079e:	bf04      	itt	eq
 80007a0:	4619      	moveq	r1, r3
 80007a2:	4610      	moveq	r0, r2
 80007a4:	bd30      	pop	{r4, r5, pc}
 80007a6:	ea91 0f03 	teq	r1, r3
 80007aa:	bf1e      	ittt	ne
 80007ac:	2100      	movne	r1, #0
 80007ae:	2000      	movne	r0, #0
 80007b0:	bd30      	popne	{r4, r5, pc}
 80007b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80007b6:	d105      	bne.n	80007c4 <__adddf3+0x230>
 80007b8:	0040      	lsls	r0, r0, #1
 80007ba:	4149      	adcs	r1, r1
 80007bc:	bf28      	it	cs
 80007be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80007c2:	bd30      	pop	{r4, r5, pc}
 80007c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80007c8:	bf3c      	itt	cc
 80007ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80007ce:	bd30      	popcc	{r4, r5, pc}
 80007d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd30      	pop	{r4, r5, pc}
 80007e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007e6:	bf1a      	itte	ne
 80007e8:	4619      	movne	r1, r3
 80007ea:	4610      	movne	r0, r2
 80007ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80007f0:	bf1c      	itt	ne
 80007f2:	460b      	movne	r3, r1
 80007f4:	4602      	movne	r2, r0
 80007f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007fa:	bf06      	itte	eq
 80007fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000800:	ea91 0f03 	teqeq	r1, r3
 8000804:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000808:	bd30      	pop	{r4, r5, pc}
 800080a:	bf00      	nop

0800080c <__aeabi_ui2d>:
 800080c:	f090 0f00 	teq	r0, #0
 8000810:	bf04      	itt	eq
 8000812:	2100      	moveq	r1, #0
 8000814:	4770      	bxeq	lr
 8000816:	b530      	push	{r4, r5, lr}
 8000818:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000820:	f04f 0500 	mov.w	r5, #0
 8000824:	f04f 0100 	mov.w	r1, #0
 8000828:	e750      	b.n	80006cc <__adddf3+0x138>
 800082a:	bf00      	nop

0800082c <__aeabi_i2d>:
 800082c:	f090 0f00 	teq	r0, #0
 8000830:	bf04      	itt	eq
 8000832:	2100      	moveq	r1, #0
 8000834:	4770      	bxeq	lr
 8000836:	b530      	push	{r4, r5, lr}
 8000838:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000840:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000844:	bf48      	it	mi
 8000846:	4240      	negmi	r0, r0
 8000848:	f04f 0100 	mov.w	r1, #0
 800084c:	e73e      	b.n	80006cc <__adddf3+0x138>
 800084e:	bf00      	nop

08000850 <__aeabi_f2d>:
 8000850:	0042      	lsls	r2, r0, #1
 8000852:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000856:	ea4f 0131 	mov.w	r1, r1, rrx
 800085a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800085e:	bf1f      	itttt	ne
 8000860:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000864:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000868:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800086c:	4770      	bxne	lr
 800086e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000872:	bf08      	it	eq
 8000874:	4770      	bxeq	lr
 8000876:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800087a:	bf04      	itt	eq
 800087c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000880:	4770      	bxeq	lr
 8000882:	b530      	push	{r4, r5, lr}
 8000884:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000888:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800088c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000890:	e71c      	b.n	80006cc <__adddf3+0x138>
 8000892:	bf00      	nop

08000894 <__aeabi_ul2d>:
 8000894:	ea50 0201 	orrs.w	r2, r0, r1
 8000898:	bf08      	it	eq
 800089a:	4770      	bxeq	lr
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	f04f 0500 	mov.w	r5, #0
 80008a2:	e00a      	b.n	80008ba <__aeabi_l2d+0x16>

080008a4 <__aeabi_l2d>:
 80008a4:	ea50 0201 	orrs.w	r2, r0, r1
 80008a8:	bf08      	it	eq
 80008aa:	4770      	bxeq	lr
 80008ac:	b530      	push	{r4, r5, lr}
 80008ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80008b2:	d502      	bpl.n	80008ba <__aeabi_l2d+0x16>
 80008b4:	4240      	negs	r0, r0
 80008b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80008be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80008c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80008c6:	f43f aed8 	beq.w	800067a <__adddf3+0xe6>
 80008ca:	f04f 0203 	mov.w	r2, #3
 80008ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008d2:	bf18      	it	ne
 80008d4:	3203      	addne	r2, #3
 80008d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008da:	bf18      	it	ne
 80008dc:	3203      	addne	r2, #3
 80008de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80008e2:	f1c2 0320 	rsb	r3, r2, #32
 80008e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80008ea:	fa20 f002 	lsr.w	r0, r0, r2
 80008ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80008f2:	ea40 000e 	orr.w	r0, r0, lr
 80008f6:	fa21 f102 	lsr.w	r1, r1, r2
 80008fa:	4414      	add	r4, r2
 80008fc:	e6bd      	b.n	800067a <__adddf3+0xe6>
 80008fe:	bf00      	nop

08000900 <__aeabi_d2f>:
 8000900:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000904:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000908:	bf24      	itt	cs
 800090a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800090e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000912:	d90d      	bls.n	8000930 <__aeabi_d2f+0x30>
 8000914:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000918:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800091c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000920:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000924:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000928:	bf08      	it	eq
 800092a:	f020 0001 	biceq.w	r0, r0, #1
 800092e:	4770      	bx	lr
 8000930:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000934:	d121      	bne.n	800097a <__aeabi_d2f+0x7a>
 8000936:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800093a:	bfbc      	itt	lt
 800093c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000940:	4770      	bxlt	lr
 8000942:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000946:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800094a:	f1c2 0218 	rsb	r2, r2, #24
 800094e:	f1c2 0c20 	rsb	ip, r2, #32
 8000952:	fa10 f30c 	lsls.w	r3, r0, ip
 8000956:	fa20 f002 	lsr.w	r0, r0, r2
 800095a:	bf18      	it	ne
 800095c:	f040 0001 	orrne.w	r0, r0, #1
 8000960:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000964:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000968:	fa03 fc0c 	lsl.w	ip, r3, ip
 800096c:	ea40 000c 	orr.w	r0, r0, ip
 8000970:	fa23 f302 	lsr.w	r3, r3, r2
 8000974:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000978:	e7cc      	b.n	8000914 <__aeabi_d2f+0x14>
 800097a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097e:	d107      	bne.n	8000990 <__aeabi_d2f+0x90>
 8000980:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000984:	bf1e      	ittt	ne
 8000986:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800098a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800098e:	4770      	bxne	lr
 8000990:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000994:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000998:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <__aeabi_uldivmod>:
 80009a0:	b953      	cbnz	r3, 80009b8 <__aeabi_uldivmod+0x18>
 80009a2:	b94a      	cbnz	r2, 80009b8 <__aeabi_uldivmod+0x18>
 80009a4:	2900      	cmp	r1, #0
 80009a6:	bf08      	it	eq
 80009a8:	2800      	cmpeq	r0, #0
 80009aa:	bf1c      	itt	ne
 80009ac:	f04f 31ff 	movne.w	r1, #4294967295
 80009b0:	f04f 30ff 	movne.w	r0, #4294967295
 80009b4:	f000 b96a 	b.w	8000c8c <__aeabi_idiv0>
 80009b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c0:	f000 f806 	bl	80009d0 <__udivmoddi4>
 80009c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009cc:	b004      	add	sp, #16
 80009ce:	4770      	bx	lr

080009d0 <__udivmoddi4>:
 80009d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d4:	9d08      	ldr	r5, [sp, #32]
 80009d6:	460c      	mov	r4, r1
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d14e      	bne.n	8000a7a <__udivmoddi4+0xaa>
 80009dc:	4694      	mov	ip, r2
 80009de:	458c      	cmp	ip, r1
 80009e0:	4686      	mov	lr, r0
 80009e2:	fab2 f282 	clz	r2, r2
 80009e6:	d962      	bls.n	8000aae <__udivmoddi4+0xde>
 80009e8:	b14a      	cbz	r2, 80009fe <__udivmoddi4+0x2e>
 80009ea:	f1c2 0320 	rsb	r3, r2, #32
 80009ee:	4091      	lsls	r1, r2
 80009f0:	fa20 f303 	lsr.w	r3, r0, r3
 80009f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009f8:	4319      	orrs	r1, r3
 80009fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80009fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a02:	fa1f f68c 	uxth.w	r6, ip
 8000a06:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a0e:	fb07 1114 	mls	r1, r7, r4, r1
 8000a12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a16:	fb04 f106 	mul.w	r1, r4, r6
 8000a1a:	4299      	cmp	r1, r3
 8000a1c:	d90a      	bls.n	8000a34 <__udivmoddi4+0x64>
 8000a1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a22:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a26:	f080 8112 	bcs.w	8000c4e <__udivmoddi4+0x27e>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 810f 	bls.w	8000c4e <__udivmoddi4+0x27e>
 8000a30:	3c02      	subs	r4, #2
 8000a32:	4463      	add	r3, ip
 8000a34:	1a59      	subs	r1, r3, r1
 8000a36:	fa1f f38e 	uxth.w	r3, lr
 8000a3a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a3e:	fb07 1110 	mls	r1, r7, r0, r1
 8000a42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a46:	fb00 f606 	mul.w	r6, r0, r6
 8000a4a:	429e      	cmp	r6, r3
 8000a4c:	d90a      	bls.n	8000a64 <__udivmoddi4+0x94>
 8000a4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a52:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a56:	f080 80fc 	bcs.w	8000c52 <__udivmoddi4+0x282>
 8000a5a:	429e      	cmp	r6, r3
 8000a5c:	f240 80f9 	bls.w	8000c52 <__udivmoddi4+0x282>
 8000a60:	4463      	add	r3, ip
 8000a62:	3802      	subs	r0, #2
 8000a64:	1b9b      	subs	r3, r3, r6
 8000a66:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	b11d      	cbz	r5, 8000a76 <__udivmoddi4+0xa6>
 8000a6e:	40d3      	lsrs	r3, r2
 8000a70:	2200      	movs	r2, #0
 8000a72:	e9c5 3200 	strd	r3, r2, [r5]
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d905      	bls.n	8000a8a <__udivmoddi4+0xba>
 8000a7e:	b10d      	cbz	r5, 8000a84 <__udivmoddi4+0xb4>
 8000a80:	e9c5 0100 	strd	r0, r1, [r5]
 8000a84:	2100      	movs	r1, #0
 8000a86:	4608      	mov	r0, r1
 8000a88:	e7f5      	b.n	8000a76 <__udivmoddi4+0xa6>
 8000a8a:	fab3 f183 	clz	r1, r3
 8000a8e:	2900      	cmp	r1, #0
 8000a90:	d146      	bne.n	8000b20 <__udivmoddi4+0x150>
 8000a92:	42a3      	cmp	r3, r4
 8000a94:	d302      	bcc.n	8000a9c <__udivmoddi4+0xcc>
 8000a96:	4290      	cmp	r0, r2
 8000a98:	f0c0 80f0 	bcc.w	8000c7c <__udivmoddi4+0x2ac>
 8000a9c:	1a86      	subs	r6, r0, r2
 8000a9e:	eb64 0303 	sbc.w	r3, r4, r3
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	2d00      	cmp	r5, #0
 8000aa6:	d0e6      	beq.n	8000a76 <__udivmoddi4+0xa6>
 8000aa8:	e9c5 6300 	strd	r6, r3, [r5]
 8000aac:	e7e3      	b.n	8000a76 <__udivmoddi4+0xa6>
 8000aae:	2a00      	cmp	r2, #0
 8000ab0:	f040 8090 	bne.w	8000bd4 <__udivmoddi4+0x204>
 8000ab4:	eba1 040c 	sub.w	r4, r1, ip
 8000ab8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000abc:	fa1f f78c 	uxth.w	r7, ip
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb08 4416 	mls	r4, r8, r6, r4
 8000ace:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ad2:	fb07 f006 	mul.w	r0, r7, r6
 8000ad6:	4298      	cmp	r0, r3
 8000ad8:	d908      	bls.n	8000aec <__udivmoddi4+0x11c>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ae2:	d202      	bcs.n	8000aea <__udivmoddi4+0x11a>
 8000ae4:	4298      	cmp	r0, r3
 8000ae6:	f200 80cd 	bhi.w	8000c84 <__udivmoddi4+0x2b4>
 8000aea:	4626      	mov	r6, r4
 8000aec:	1a1c      	subs	r4, r3, r0
 8000aee:	fa1f f38e 	uxth.w	r3, lr
 8000af2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000af6:	fb08 4410 	mls	r4, r8, r0, r4
 8000afa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000afe:	fb00 f707 	mul.w	r7, r0, r7
 8000b02:	429f      	cmp	r7, r3
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x148>
 8000b06:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x146>
 8000b10:	429f      	cmp	r7, r3
 8000b12:	f200 80b0 	bhi.w	8000c76 <__udivmoddi4+0x2a6>
 8000b16:	4620      	mov	r0, r4
 8000b18:	1bdb      	subs	r3, r3, r7
 8000b1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1e:	e7a5      	b.n	8000a6c <__udivmoddi4+0x9c>
 8000b20:	f1c1 0620 	rsb	r6, r1, #32
 8000b24:	408b      	lsls	r3, r1
 8000b26:	fa22 f706 	lsr.w	r7, r2, r6
 8000b2a:	431f      	orrs	r7, r3
 8000b2c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b30:	fa04 f301 	lsl.w	r3, r4, r1
 8000b34:	ea43 030c 	orr.w	r3, r3, ip
 8000b38:	40f4      	lsrs	r4, r6
 8000b3a:	fa00 f801 	lsl.w	r8, r0, r1
 8000b3e:	0c38      	lsrs	r0, r7, #16
 8000b40:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b44:	fbb4 fef0 	udiv	lr, r4, r0
 8000b48:	fa1f fc87 	uxth.w	ip, r7
 8000b4c:	fb00 441e 	mls	r4, r0, lr, r4
 8000b50:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b54:	fb0e f90c 	mul.w	r9, lr, ip
 8000b58:	45a1      	cmp	r9, r4
 8000b5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b5e:	d90a      	bls.n	8000b76 <__udivmoddi4+0x1a6>
 8000b60:	193c      	adds	r4, r7, r4
 8000b62:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b66:	f080 8084 	bcs.w	8000c72 <__udivmoddi4+0x2a2>
 8000b6a:	45a1      	cmp	r9, r4
 8000b6c:	f240 8081 	bls.w	8000c72 <__udivmoddi4+0x2a2>
 8000b70:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b74:	443c      	add	r4, r7
 8000b76:	eba4 0409 	sub.w	r4, r4, r9
 8000b7a:	fa1f f983 	uxth.w	r9, r3
 8000b7e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b82:	fb00 4413 	mls	r4, r0, r3, r4
 8000b86:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b8a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b8e:	45a4      	cmp	ip, r4
 8000b90:	d907      	bls.n	8000ba2 <__udivmoddi4+0x1d2>
 8000b92:	193c      	adds	r4, r7, r4
 8000b94:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b98:	d267      	bcs.n	8000c6a <__udivmoddi4+0x29a>
 8000b9a:	45a4      	cmp	ip, r4
 8000b9c:	d965      	bls.n	8000c6a <__udivmoddi4+0x29a>
 8000b9e:	3b02      	subs	r3, #2
 8000ba0:	443c      	add	r4, r7
 8000ba2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ba6:	fba0 9302 	umull	r9, r3, r0, r2
 8000baa:	eba4 040c 	sub.w	r4, r4, ip
 8000bae:	429c      	cmp	r4, r3
 8000bb0:	46ce      	mov	lr, r9
 8000bb2:	469c      	mov	ip, r3
 8000bb4:	d351      	bcc.n	8000c5a <__udivmoddi4+0x28a>
 8000bb6:	d04e      	beq.n	8000c56 <__udivmoddi4+0x286>
 8000bb8:	b155      	cbz	r5, 8000bd0 <__udivmoddi4+0x200>
 8000bba:	ebb8 030e 	subs.w	r3, r8, lr
 8000bbe:	eb64 040c 	sbc.w	r4, r4, ip
 8000bc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000bc6:	40cb      	lsrs	r3, r1
 8000bc8:	431e      	orrs	r6, r3
 8000bca:	40cc      	lsrs	r4, r1
 8000bcc:	e9c5 6400 	strd	r6, r4, [r5]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	e750      	b.n	8000a76 <__udivmoddi4+0xa6>
 8000bd4:	f1c2 0320 	rsb	r3, r2, #32
 8000bd8:	fa20 f103 	lsr.w	r1, r0, r3
 8000bdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be0:	fa24 f303 	lsr.w	r3, r4, r3
 8000be4:	4094      	lsls	r4, r2
 8000be6:	430c      	orrs	r4, r1
 8000be8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bec:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bf0:	fa1f f78c 	uxth.w	r7, ip
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3110 	mls	r1, r8, r0, r3
 8000bfc:	0c23      	lsrs	r3, r4, #16
 8000bfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c02:	fb00 f107 	mul.w	r1, r0, r7
 8000c06:	4299      	cmp	r1, r3
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x24c>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c12:	d22c      	bcs.n	8000c6e <__udivmoddi4+0x29e>
 8000c14:	4299      	cmp	r1, r3
 8000c16:	d92a      	bls.n	8000c6e <__udivmoddi4+0x29e>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	4463      	add	r3, ip
 8000c1c:	1a5b      	subs	r3, r3, r1
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c24:	fb08 3311 	mls	r3, r8, r1, r3
 8000c28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c2c:	fb01 f307 	mul.w	r3, r1, r7
 8000c30:	42a3      	cmp	r3, r4
 8000c32:	d908      	bls.n	8000c46 <__udivmoddi4+0x276>
 8000c34:	eb1c 0404 	adds.w	r4, ip, r4
 8000c38:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c3c:	d213      	bcs.n	8000c66 <__udivmoddi4+0x296>
 8000c3e:	42a3      	cmp	r3, r4
 8000c40:	d911      	bls.n	8000c66 <__udivmoddi4+0x296>
 8000c42:	3902      	subs	r1, #2
 8000c44:	4464      	add	r4, ip
 8000c46:	1ae4      	subs	r4, r4, r3
 8000c48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c4c:	e739      	b.n	8000ac2 <__udivmoddi4+0xf2>
 8000c4e:	4604      	mov	r4, r0
 8000c50:	e6f0      	b.n	8000a34 <__udivmoddi4+0x64>
 8000c52:	4608      	mov	r0, r1
 8000c54:	e706      	b.n	8000a64 <__udivmoddi4+0x94>
 8000c56:	45c8      	cmp	r8, r9
 8000c58:	d2ae      	bcs.n	8000bb8 <__udivmoddi4+0x1e8>
 8000c5a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c5e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c62:	3801      	subs	r0, #1
 8000c64:	e7a8      	b.n	8000bb8 <__udivmoddi4+0x1e8>
 8000c66:	4631      	mov	r1, r6
 8000c68:	e7ed      	b.n	8000c46 <__udivmoddi4+0x276>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	e799      	b.n	8000ba2 <__udivmoddi4+0x1d2>
 8000c6e:	4630      	mov	r0, r6
 8000c70:	e7d4      	b.n	8000c1c <__udivmoddi4+0x24c>
 8000c72:	46d6      	mov	lr, sl
 8000c74:	e77f      	b.n	8000b76 <__udivmoddi4+0x1a6>
 8000c76:	4463      	add	r3, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	e74d      	b.n	8000b18 <__udivmoddi4+0x148>
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	4623      	mov	r3, r4
 8000c80:	4608      	mov	r0, r1
 8000c82:	e70f      	b.n	8000aa4 <__udivmoddi4+0xd4>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	4463      	add	r3, ip
 8000c88:	e730      	b.n	8000aec <__udivmoddi4+0x11c>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_idiv0>:
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <motorBobinaTask>:
	}
}

/* Task ----------------------------------------------------------------------*/
static void motorBobinaTask(void *p_arg)
{
 8000c90:	b530      	push	{r4, r5, lr}
 8000c92:	b085      	sub	sp, #20
	CPU_TS ts;

	(void)p_arg;

	/* Inicializa a amostragem e conversão a/d e d/a */
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) &motorBobinaTensaoRead, 1);
 8000c94:	2201      	movs	r2, #1
 8000c96:	492e      	ldr	r1, [pc, #184]	@ (8000d50 <motorBobinaTask+0xc0>)
 8000c98:	482e      	ldr	r0, [pc, #184]	@ (8000d54 <motorBobinaTask+0xc4>)
 8000c9a:	f001 f83f 	bl	8001d1c <HAL_ADC_Start_DMA>
	HAL_DAC_Start_DMA(&hdac, MOTOR_BOBINA_VEL_DAC_CHANNEL, (const uint32_t *) &motorBobinaVel, 1, DAC_ALIGN_12B_R);
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	9100      	str	r1, [sp, #0]
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	4a2c      	ldr	r2, [pc, #176]	@ (8000d58 <motorBobinaTask+0xc8>)
 8000ca6:	482d      	ldr	r0, [pc, #180]	@ (8000d5c <motorBobinaTask+0xcc>)
 8000ca8:	f001 faaa 	bl	8002200 <HAL_DAC_Start_DMA>

	HAL_TIM_Base_Start(&htim2); /* 6.4 kHz */
 8000cac:	482c      	ldr	r0, [pc, #176]	@ (8000d60 <motorBobinaTask+0xd0>)
 8000cae:	f002 fa7b 	bl	80031a8 <HAL_TIM_Base_Start>

	int32_t kp = 15;
	int32_t motorBobinaTensaoRef = ADC_REF_STD;
 8000cb2:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8000cb6:	e01b      	b.n	8000cf0 <motorBobinaTask+0x60>
			if (HAL_GPIO_ReadPin(SW0_GPIO_Port, SW0_Pin) == SW_ON) {
				motorBobinaTensaoRef = motorBobinaTensaoRead;
			}
		}
		else {
			HAL_GPIO_WritePin(MOTOR_BOBINA_EN_GPIO_Port, MOTOR_BOBINA_EN_Pin, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cbe:	4829      	ldr	r0, [pc, #164]	@ (8000d64 <motorBobinaTask+0xd4>)
 8000cc0:	f001 fe87 	bl	80029d2 <HAL_GPIO_WritePin>
		}

		/* Controle P */
		int32_t controle = kp*erro;
 8000cc4:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
		int32_t vel_dac = abs(controle);
 8000cc8:	ea84 73e4 	eor.w	r3, r4, r4, asr #31
 8000ccc:	eba3 73e4 	sub.w	r3, r3, r4, asr #31

		/* Limita o valor para o máximo do DAC */
		motorBobinaVel = vel_dac > DAC_MAX ? DAC_MAX : vel_dac;
 8000cd0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	bfa8      	it	ge
 8000cd8:	4613      	movge	r3, r2
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	4a1e      	ldr	r2, [pc, #120]	@ (8000d58 <motorBobinaTask+0xc8>)
 8000cde:	8013      	strh	r3, [r2, #0]

		/* Caso o valor seja positivo, seta a direção CLOCK_WISE */
		if (controle >= 0) {
 8000ce0:	2c00      	cmp	r4, #0
 8000ce2:	db2d      	blt.n	8000d40 <motorBobinaTask+0xb0>
			HAL_GPIO_WritePin(MOTOR_BOBINA_DIR_GPIO_Port, MOTOR_BOBINA_DIR_Pin, GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cea:	481e      	ldr	r0, [pc, #120]	@ (8000d64 <motorBobinaTask+0xd4>)
 8000cec:	f001 fe71 	bl	80029d2 <HAL_GPIO_WritePin>
		OSFlagPend(
 8000cf0:	f10d 030e 	add.w	r3, sp, #14
 8000cf4:	9301      	str	r3, [sp, #4]
 8000cf6:	ab02      	add	r3, sp, #8
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2101      	movs	r1, #1
 8000d02:	4819      	ldr	r0, [pc, #100]	@ (8000d68 <motorBobinaTask+0xd8>)
 8000d04:	f003 fc22 	bl	800454c <OSFlagPend>
		int32_t erro = motorBobinaTensaoRef - (int32_t) motorBobinaTensaoRead;
 8000d08:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <motorBobinaTask+0xc0>)
 8000d0a:	881c      	ldrh	r4, [r3, #0]
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	1b2c      	subs	r4, r5, r4
		if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == SW_ON) {
 8000d10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d14:	4815      	ldr	r0, [pc, #84]	@ (8000d6c <motorBobinaTask+0xdc>)
 8000d16:	f001 fe55 	bl	80029c4 <HAL_GPIO_ReadPin>
 8000d1a:	2800      	cmp	r0, #0
 8000d1c:	d1cc      	bne.n	8000cb8 <motorBobinaTask+0x28>
			HAL_GPIO_WritePin(MOTOR_BOBINA_EN_GPIO_Port, MOTOR_BOBINA_EN_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d24:	480f      	ldr	r0, [pc, #60]	@ (8000d64 <motorBobinaTask+0xd4>)
 8000d26:	f001 fe54 	bl	80029d2 <HAL_GPIO_WritePin>
			if (HAL_GPIO_ReadPin(SW0_GPIO_Port, SW0_Pin) == SW_ON) {
 8000d2a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d2e:	480f      	ldr	r0, [pc, #60]	@ (8000d6c <motorBobinaTask+0xdc>)
 8000d30:	f001 fe48 	bl	80029c4 <HAL_GPIO_ReadPin>
 8000d34:	2800      	cmp	r0, #0
 8000d36:	d1c5      	bne.n	8000cc4 <motorBobinaTask+0x34>
				motorBobinaTensaoRef = motorBobinaTensaoRead;
 8000d38:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <motorBobinaTask+0xc0>)
 8000d3a:	881d      	ldrh	r5, [r3, #0]
 8000d3c:	b2ad      	uxth	r5, r5
 8000d3e:	e7c1      	b.n	8000cc4 <motorBobinaTask+0x34>
		}
		else {
			HAL_GPIO_WritePin(MOTOR_BOBINA_DIR_GPIO_Port, MOTOR_BOBINA_DIR_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d46:	4807      	ldr	r0, [pc, #28]	@ (8000d64 <motorBobinaTask+0xd4>)
 8000d48:	f001 fe43 	bl	80029d2 <HAL_GPIO_WritePin>
 8000d4c:	e7d0      	b.n	8000cf0 <motorBobinaTask+0x60>
 8000d4e:	bf00      	nop
 8000d50:	2000002a 	.word	0x2000002a
 8000d54:	2000110c 	.word	0x2000110c
 8000d58:	20000028 	.word	0x20000028
 8000d5c:	20000ff0 	.word	0x20000ff0
 8000d60:	20000ea0 	.word	0x20000ea0
 8000d64:	40021400 	.word	0x40021400
 8000d68:	20000e7c 	.word	0x20000e7c
 8000d6c:	40020c00 	.word	0x40020c00

08000d70 <HAL_ADC_ConvCpltCallback>:
	if (hadc->Instance == ADC2) {
 8000d70:	6802      	ldr	r2, [r0, #0]
 8000d72:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <HAL_ADC_ConvCpltCallback+0x24>)
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d000      	beq.n	8000d7a <HAL_ADC_ConvCpltCallback+0xa>
 8000d78:	4770      	bx	lr
{
 8000d7a:	b500      	push	{lr}
 8000d7c:	b083      	sub	sp, #12
		OSFlagPost(
 8000d7e:	f10d 0306 	add.w	r3, sp, #6
 8000d82:	2200      	movs	r2, #0
 8000d84:	2101      	movs	r1, #1
 8000d86:	4804      	ldr	r0, [pc, #16]	@ (8000d98 <HAL_ADC_ConvCpltCallback+0x28>)
 8000d88:	f003 fe50 	bl	8004a2c <OSFlagPost>
}
 8000d8c:	b003      	add	sp, #12
 8000d8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d92:	bf00      	nop
 8000d94:	40012100 	.word	0x40012100
 8000d98:	20000e7c 	.word	0x20000e7c

08000d9c <motorBobinaCreateTask>:
	}
}

/* Functions -----------------------------------------------------------------*/
void motorBobinaCreateTask(void)
{
 8000d9c:	b500      	push	{lr}
 8000d9e:	b08d      	sub	sp, #52	@ 0x34
    OS_ERR err;

	OSTaskCreate(
 8000da0:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 8000da4:	9308      	str	r3, [sp, #32]
 8000da6:	2203      	movs	r2, #3
 8000da8:	9207      	str	r2, [sp, #28]
 8000daa:	2300      	movs	r3, #0
 8000dac:	9306      	str	r3, [sp, #24]
 8000dae:	9305      	str	r3, [sp, #20]
 8000db0:	9304      	str	r3, [sp, #16]
 8000db2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000db6:	9103      	str	r1, [sp, #12]
 8000db8:	9302      	str	r3, [sp, #8]
 8000dba:	4908      	ldr	r1, [pc, #32]	@ (8000ddc <motorBobinaCreateTask+0x40>)
 8000dbc:	9101      	str	r1, [sp, #4]
 8000dbe:	9200      	str	r2, [sp, #0]
 8000dc0:	4a07      	ldr	r2, [pc, #28]	@ (8000de0 <motorBobinaCreateTask+0x44>)
 8000dc2:	4908      	ldr	r1, [pc, #32]	@ (8000de4 <motorBobinaCreateTask+0x48>)
 8000dc4:	4808      	ldr	r0, [pc, #32]	@ (8000de8 <motorBobinaCreateTask+0x4c>)
 8000dc6:	f004 fb87 	bl	80054d8 <OSTaskCreate>
        (void         *)0u,
        (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
        (OS_ERR       *)&err
	);

	if (err != OS_ERR_NONE) {
 8000dca:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8000dce:	b913      	cbnz	r3, 8000dd6 <motorBobinaCreateTask+0x3a>
		Error_Handler();
	}
}
 8000dd0:	b00d      	add	sp, #52	@ 0x34
 8000dd2:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8000dd6:	f000 f9db 	bl	8001190 <Error_Handler>
}
 8000dda:	e7f9      	b.n	8000dd0 <motorBobinaCreateTask+0x34>
 8000ddc:	2000002c 	.word	0x2000002c
 8000de0:	08000c91 	.word	0x08000c91
 8000de4:	0800625c 	.word	0x0800625c
 8000de8:	2000042c 	.word	0x2000042c

08000dec <carroTransversalSetDuty>:
	}
}

static void carroTransversalSetDuty(float duty)
{
	if (duty > 0 && duty < 1) {
 8000dec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df4:	dd06      	ble.n	8000e04 <carroTransversalSetDuty+0x18>
 8000df6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8000dfa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e02:	d409      	bmi.n	8000e18 <carroTransversalSetDuty+0x2c>
		MOTOR_CARRO_TRANSVERSAL_PWM_TIM->CCR4 = (uint32_t) (((float) MOTOR_CARRO_TRANSVERSAL_PWM_TIM->ARR) * duty);
	}
	else if (duty <= 0) {
 8000e04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0c:	d910      	bls.n	8000e30 <carroTransversalSetDuty+0x44>
		MOTOR_CARRO_TRANSVERSAL_PWM_TIM->CCR4 = 0;
	}
	else {
		MOTOR_CARRO_TRANSVERSAL_PWM_TIM->CCR4 = 65535;
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e38 <carroTransversalSetDuty+0x4c>)
 8000e10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e14:	641a      	str	r2, [r3, #64]	@ 0x40
	}
}
 8000e16:	4770      	bx	lr
		MOTOR_CARRO_TRANSVERSAL_PWM_TIM->CCR4 = (uint32_t) (((float) MOTOR_CARRO_TRANSVERSAL_PWM_TIM->ARR) * duty);
 8000e18:	4b07      	ldr	r3, [pc, #28]	@ (8000e38 <carroTransversalSetDuty+0x4c>)
 8000e1a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e22:	ee67 7a80 	vmul.f32	s15, s15, s0
 8000e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e2a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
 8000e2e:	4770      	bx	lr
		MOTOR_CARRO_TRANSVERSAL_PWM_TIM->CCR4 = 0;
 8000e30:	4b01      	ldr	r3, [pc, #4]	@ (8000e38 <carroTransversalSetDuty+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e36:	4770      	bx	lr
 8000e38:	40010000 	.word	0x40010000

08000e3c <carroTransversalDir>:
{
 8000e3c:	b510      	push	{r4, lr}
	switch(ctrl) {
 8000e3e:	2801      	cmp	r0, #1
 8000e40:	d01a      	beq.n	8000e78 <carroTransversalDir+0x3c>
 8000e42:	2802      	cmp	r0, #2
 8000e44:	d024      	beq.n	8000e90 <carroTransversalDir+0x54>
 8000e46:	b158      	cbz	r0, 8000e60 <carroTransversalDir+0x24>
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR1_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin, GPIO_PIN_RESET);
 8000e48:	4c17      	ldr	r4, [pc, #92]	@ (8000ea8 <carroTransversalDir+0x6c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2120      	movs	r1, #32
 8000e4e:	4620      	mov	r0, r4
 8000e50:	f001 fdbf 	bl	80029d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR2_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2140      	movs	r1, #64	@ 0x40
 8000e58:	4620      	mov	r0, r4
 8000e5a:	f001 fdba 	bl	80029d2 <HAL_GPIO_WritePin>
}
 8000e5e:	e00a      	b.n	8000e76 <carroTransversalDir+0x3a>
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR1_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin, GPIO_PIN_SET);
 8000e60:	4c11      	ldr	r4, [pc, #68]	@ (8000ea8 <carroTransversalDir+0x6c>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	2120      	movs	r1, #32
 8000e66:	4620      	mov	r0, r4
 8000e68:	f001 fdb3 	bl	80029d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR2_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2140      	movs	r1, #64	@ 0x40
 8000e70:	4620      	mov	r0, r4
 8000e72:	f001 fdae 	bl	80029d2 <HAL_GPIO_WritePin>
}
 8000e76:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR1_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin, GPIO_PIN_RESET);
 8000e78:	4c0b      	ldr	r4, [pc, #44]	@ (8000ea8 <carroTransversalDir+0x6c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	4620      	mov	r0, r4
 8000e80:	f001 fda7 	bl	80029d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR2_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin, GPIO_PIN_SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	2140      	movs	r1, #64	@ 0x40
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f001 fda2 	bl	80029d2 <HAL_GPIO_WritePin>
			break;
 8000e8e:	e7f2      	b.n	8000e76 <carroTransversalDir+0x3a>
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR1_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin, GPIO_PIN_SET);
 8000e90:	4c05      	ldr	r4, [pc, #20]	@ (8000ea8 <carroTransversalDir+0x6c>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	2120      	movs	r1, #32
 8000e96:	4620      	mov	r0, r4
 8000e98:	f001 fd9b 	bl	80029d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR2_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2140      	movs	r1, #64	@ 0x40
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f001 fd96 	bl	80029d2 <HAL_GPIO_WritePin>
			break;
 8000ea6:	e7e6      	b.n	8000e76 <carroTransversalDir+0x3a>
 8000ea8:	40021000 	.word	0x40021000

08000eac <carroTransversalHome>:
{
 8000eac:	b510      	push	{r4, lr}
	int32_t homeTimeout = HOME_TIMEOUT;
 8000eae:	4c0d      	ldr	r4, [pc, #52]	@ (8000ee4 <carroTransversalHome+0x38>)
	while (homeTimeout > 0 && (HAL_GPIO_ReadPin(FIM_CURSO_2_GPIO_Port, FIM_CURSO_2_Pin) == GPIO_PIN_RESET)) {
 8000eb0:	e007      	b.n	8000ec2 <carroTransversalHome+0x16>
		carroTransversalDir(DIREITA);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f7ff ffc2 	bl	8000e3c <carroTransversalDir>
		carroTransversalSetDuty(1.0);
 8000eb8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000ebc:	f7ff ff96 	bl	8000dec <carroTransversalSetDuty>
		homeTimeout--;
 8000ec0:	3c01      	subs	r4, #1
	while (homeTimeout > 0 && (HAL_GPIO_ReadPin(FIM_CURSO_2_GPIO_Port, FIM_CURSO_2_Pin) == GPIO_PIN_RESET)) {
 8000ec2:	2c00      	cmp	r4, #0
 8000ec4:	dd06      	ble.n	8000ed4 <carroTransversalHome+0x28>
 8000ec6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eca:	4807      	ldr	r0, [pc, #28]	@ (8000ee8 <carroTransversalHome+0x3c>)
 8000ecc:	f001 fd7a 	bl	80029c4 <HAL_GPIO_ReadPin>
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	d0ee      	beq.n	8000eb2 <carroTransversalHome+0x6>
	carroTransversalDir(PARADO);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f7ff ffb1 	bl	8000e3c <carroTransversalDir>
	carroTransversalSetDuty(0.0);
 8000eda:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8000eec <carroTransversalHome+0x40>
 8000ede:	f7ff ff85 	bl	8000dec <carroTransversalSetDuty>
}
 8000ee2:	bd10      	pop	{r4, pc}
 8000ee4:	017d7840 	.word	0x017d7840
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	00000000 	.word	0x00000000

08000ef0 <carroTransversalTask>:
{
 8000ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ef4:	b084      	sub	sp, #16
	HAL_TIM_PWM_Start(&htim1, MOTOR_CARRO_TRANSVERSAL_PWM_Channel); /* 20kHz */
 8000ef6:	210c      	movs	r1, #12
 8000ef8:	483b      	ldr	r0, [pc, #236]	@ (8000fe8 <carroTransversalTask+0xf8>)
 8000efa:	f002 fb9b 	bl	8003634 <HAL_TIM_PWM_Start>
	carroTransversalHome();
 8000efe:	f7ff ffd5 	bl	8000eac <carroTransversalHome>
	carroTransversalSetDuty(0);
 8000f02:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 8000fec <carroTransversalTask+0xfc>
 8000f06:	f7ff ff71 	bl	8000dec <carroTransversalSetDuty>
	bobinaTick = 0;
 8000f0a:	2700      	movs	r7, #0
 8000f0c:	4b38      	ldr	r3, [pc, #224]	@ (8000ff0 <carroTransversalTask+0x100>)
 8000f0e:	701f      	strb	r7, [r3, #0]
	carroTransversalTick = 0;
 8000f10:	4b38      	ldr	r3, [pc, #224]	@ (8000ff4 <carroTransversalTask+0x104>)
 8000f12:	701f      	strb	r7, [r3, #0]
	carroTransversalAndar = false;
 8000f14:	4b38      	ldr	r3, [pc, #224]	@ (8000ff8 <carroTransversalTask+0x108>)
 8000f16:	701f      	strb	r7, [r3, #0]
	OS_FLAGS comandoPrev = MOTOR_BOBINA_LIBERANDO;
 8000f18:	f04f 0802 	mov.w	r8, #2
 8000f1c:	e04d      	b.n	8000fba <carroTransversalTask+0xca>
			GPIO_PinState fimCurso_1 = HAL_GPIO_ReadPin(FIM_CURSO_1_GPIO_Port, FIM_CURSO_1_Pin);
 8000f1e:	2108      	movs	r1, #8
 8000f20:	4836      	ldr	r0, [pc, #216]	@ (8000ffc <carroTransversalTask+0x10c>)
 8000f22:	f001 fd4f 	bl	80029c4 <HAL_GPIO_ReadPin>
 8000f26:	4604      	mov	r4, r0
			GPIO_PinState fimCurso_2 = HAL_GPIO_ReadPin(FIM_CURSO_2_GPIO_Port, FIM_CURSO_2_Pin);
 8000f28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f2c:	4834      	ldr	r0, [pc, #208]	@ (8001000 <carroTransversalTask+0x110>)
 8000f2e:	f001 fd49 	bl	80029c4 <HAL_GPIO_ReadPin>
 8000f32:	4605      	mov	r5, r0
			if (carroTransversalTick < CARRO_TRANSVERSAL_DESACELERA) {
 8000f34:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff4 <carroTransversalTask+0x104>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b0e      	cmp	r3, #14
 8000f3c:	d80e      	bhi.n	8000f5c <carroTransversalTask+0x6c>
				carroTransversalSetDuty(1.0);
 8000f3e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000f42:	f7ff ff53 	bl	8000dec <carroTransversalSetDuty>
			if ((fimCurso_1 == GPIO_PIN_SET) && (fimCurso_2 == GPIO_PIN_SET)) { /* Ambas fim de cursos acionado -> impossível */
 8000f46:	2c01      	cmp	r4, #1
 8000f48:	d01f      	beq.n	8000f8a <carroTransversalTask+0x9a>
			else if (fimCurso_2 == GPIO_PIN_SET) {
 8000f4a:	2d01      	cmp	r5, #1
 8000f4c:	d026      	beq.n	8000f9c <carroTransversalTask+0xac>
				if (comando != comandoPrev) {
 8000f4e:	45b0      	cmp	r8, r6
 8000f50:	d025      	beq.n	8000f9e <carroTransversalTask+0xae>
					if (carroDir == ESQUERDA) {
 8000f52:	2f00      	cmp	r7, #0
 8000f54:	d13f      	bne.n	8000fd6 <carroTransversalTask+0xe6>
					comandoPrev = comando;
 8000f56:	46b0      	mov	r8, r6
						carroDir = DIREITA;
 8000f58:	2701      	movs	r7, #1
 8000f5a:	e020      	b.n	8000f9e <carroTransversalTask+0xae>
				carroTransversalSetDuty(1.0 - 0.1*(carroTransversalTick - CARRO_TRANSVERSAL_DESACELERA));
 8000f5c:	4b25      	ldr	r3, [pc, #148]	@ (8000ff4 <carroTransversalTask+0x104>)
 8000f5e:	7818      	ldrb	r0, [r3, #0]
 8000f60:	380f      	subs	r0, #15
 8000f62:	f7ff fc53 	bl	800080c <__aeabi_ui2d>
 8000f66:	a31e      	add	r3, pc, #120	@ (adr r3, 8000fe0 <carroTransversalTask+0xf0>)
 8000f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6c:	f7ff f9e2 	bl	8000334 <__aeabi_dmul>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	2000      	movs	r0, #0
 8000f76:	4923      	ldr	r1, [pc, #140]	@ (8001004 <carroTransversalTask+0x114>)
 8000f78:	f7ff fb0a 	bl	8000590 <__aeabi_dsub>
 8000f7c:	f7ff fcc0 	bl	8000900 <__aeabi_d2f>
 8000f80:	ee00 0a10 	vmov	s0, r0
 8000f84:	f7ff ff32 	bl	8000dec <carroTransversalSetDuty>
 8000f88:	e7dd      	b.n	8000f46 <carroTransversalTask+0x56>
			if ((fimCurso_1 == GPIO_PIN_SET) && (fimCurso_2 == GPIO_PIN_SET)) { /* Ambas fim de cursos acionado -> impossível */
 8000f8a:	2d01      	cmp	r5, #1
 8000f8c:	d001      	beq.n	8000f92 <carroTransversalTask+0xa2>
				carroDir = DIREITA;
 8000f8e:	4627      	mov	r7, r4
 8000f90:	e005      	b.n	8000f9e <carroTransversalTask+0xae>
				carroTransversalAndar = false;
 8000f92:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <carroTransversalTask+0x108>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
				carroDir = PARADO;
 8000f98:	2703      	movs	r7, #3
 8000f9a:	e000      	b.n	8000f9e <carroTransversalTask+0xae>
				carroDir = ESQUERDA;
 8000f9c:	2700      	movs	r7, #0
			carroTransversalDir(carroDir);
 8000f9e:	4638      	mov	r0, r7
 8000fa0:	f7ff ff4c 	bl	8000e3c <carroTransversalDir>
		while (carroTransversalAndar == true) {
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <carroTransversalTask+0x108>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1b8      	bne.n	8000f1e <carroTransversalTask+0x2e>
		carroTransversalSetDuty(1);
 8000fac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000fb0:	f7ff ff1c 	bl	8000dec <carroTransversalSetDuty>
		carroTransversalDir(FREIO);
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f7ff ff41 	bl	8000e3c <carroTransversalDir>
		comando = OSFlagPend(
 8000fba:	f10d 030e 	add.w	r3, sp, #14
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	ab02      	add	r3, sp, #8
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2106      	movs	r1, #6
 8000fcc:	480e      	ldr	r0, [pc, #56]	@ (8001008 <carroTransversalTask+0x118>)
 8000fce:	f003 fabd 	bl	800454c <OSFlagPend>
 8000fd2:	4606      	mov	r6, r0
		while (carroTransversalAndar == true) {
 8000fd4:	e7e6      	b.n	8000fa4 <carroTransversalTask+0xb4>
					comandoPrev = comando;
 8000fd6:	46b0      	mov	r8, r6
						carroDir = ESQUERDA;
 8000fd8:	2700      	movs	r7, #0
 8000fda:	e7e0      	b.n	8000f9e <carroTransversalTask+0xae>
 8000fdc:	f3af 8000 	nop.w
 8000fe0:	9999999a 	.word	0x9999999a
 8000fe4:	3fb99999 	.word	0x3fb99999
 8000fe8:	20000ee8 	.word	0x20000ee8
 8000fec:	00000000 	.word	0x00000000
 8000ff0:	200004f2 	.word	0x200004f2
 8000ff4:	200004f1 	.word	0x200004f1
 8000ff8:	200004f0 	.word	0x200004f0
 8000ffc:	40020400 	.word	0x40020400
 8001000:	40020000 	.word	0x40020000
 8001004:	3ff00000 	.word	0x3ff00000
 8001008:	20000e7c 	.word	0x20000e7c

0800100c <HAL_GPIO_EXTI_Callback>:
{
 800100c:	b500      	push	{lr}
 800100e:	b083      	sub	sp, #12
	switch (GPIO_Pin) {
 8001010:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 8001014:	d008      	beq.n	8001028 <HAL_GPIO_EXTI_Callback+0x1c>
 8001016:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800101a:	d025      	beq.n	8001068 <HAL_GPIO_EXTI_Callback+0x5c>
 800101c:	2808      	cmp	r0, #8
 800101e:	d044      	beq.n	80010aa <HAL_GPIO_EXTI_Callback+0x9e>
			__NOP();
 8001020:	bf00      	nop
}
 8001022:	b003      	add	sp, #12
 8001024:	f85d fb04 	ldr.w	pc, [sp], #4
			if (HAL_GPIO_ReadPin(OPTO_2_GPIO_Port, OPTO_2_Pin) == OPTO_OFF) {
 8001028:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800102c:	4826      	ldr	r0, [pc, #152]	@ (80010c8 <HAL_GPIO_EXTI_Callback+0xbc>)
 800102e:	f001 fcc9 	bl	80029c4 <HAL_GPIO_ReadPin>
 8001032:	2801      	cmp	r0, #1
 8001034:	d1f5      	bne.n	8001022 <HAL_GPIO_EXTI_Callback+0x16>
				bobinaTick++;
 8001036:	4a25      	ldr	r2, [pc, #148]	@ (80010cc <HAL_GPIO_EXTI_Callback+0xc0>)
 8001038:	7813      	ldrb	r3, [r2, #0]
 800103a:	b25b      	sxtb	r3, r3
 800103c:	3301      	adds	r3, #1
 800103e:	b25b      	sxtb	r3, r3
 8001040:	7013      	strb	r3, [r2, #0]
				if (bobinaTick >= BOBINA_TICK_VOLTA) {
 8001042:	7813      	ldrb	r3, [r2, #0]
 8001044:	b25b      	sxtb	r3, r3
 8001046:	2b07      	cmp	r3, #7
 8001048:	ddeb      	ble.n	8001022 <HAL_GPIO_EXTI_Callback+0x16>
					bobinaTick = 0;
 800104a:	2200      	movs	r2, #0
 800104c:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <HAL_GPIO_EXTI_Callback+0xc0>)
 800104e:	701a      	strb	r2, [r3, #0]
					carroTransversalTick = 0;
 8001050:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001052:	701a      	strb	r2, [r3, #0]
					carroTransversalAndar = true;
 8001054:	4b1f      	ldr	r3, [pc, #124]	@ (80010d4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001056:	2101      	movs	r1, #1
 8001058:	7019      	strb	r1, [r3, #0]
					OSFlagPost(
 800105a:	f10d 0306 	add.w	r3, sp, #6
 800105e:	2102      	movs	r1, #2
 8001060:	481d      	ldr	r0, [pc, #116]	@ (80010d8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001062:	f003 fce3 	bl	8004a2c <OSFlagPost>
 8001066:	e7dc      	b.n	8001022 <HAL_GPIO_EXTI_Callback+0x16>
			if (HAL_GPIO_ReadPin(OPTO_1_GPIO_Port, OPTO_1_Pin) == OPTO_OFF) {
 8001068:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800106c:	4816      	ldr	r0, [pc, #88]	@ (80010c8 <HAL_GPIO_EXTI_Callback+0xbc>)
 800106e:	f001 fca9 	bl	80029c4 <HAL_GPIO_ReadPin>
 8001072:	2801      	cmp	r0, #1
 8001074:	d1d5      	bne.n	8001022 <HAL_GPIO_EXTI_Callback+0x16>
				bobinaTick--;
 8001076:	4a15      	ldr	r2, [pc, #84]	@ (80010cc <HAL_GPIO_EXTI_Callback+0xc0>)
 8001078:	7813      	ldrb	r3, [r2, #0]
 800107a:	b25b      	sxtb	r3, r3
 800107c:	3b01      	subs	r3, #1
 800107e:	b25b      	sxtb	r3, r3
 8001080:	7013      	strb	r3, [r2, #0]
				if (bobinaTick <= -1*BOBINA_TICK_VOLTA) {
 8001082:	7813      	ldrb	r3, [r2, #0]
 8001084:	b25b      	sxtb	r3, r3
 8001086:	f113 0f07 	cmn.w	r3, #7
 800108a:	daca      	bge.n	8001022 <HAL_GPIO_EXTI_Callback+0x16>
					bobinaTick = 0;
 800108c:	2200      	movs	r2, #0
 800108e:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <HAL_GPIO_EXTI_Callback+0xc0>)
 8001090:	701a      	strb	r2, [r3, #0]
					carroTransversalTick = 0;
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001094:	701a      	strb	r2, [r3, #0]
					carroTransversalAndar = true;
 8001096:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001098:	2101      	movs	r1, #1
 800109a:	7019      	strb	r1, [r3, #0]
					OSFlagPost(
 800109c:	f10d 0306 	add.w	r3, sp, #6
 80010a0:	2104      	movs	r1, #4
 80010a2:	480d      	ldr	r0, [pc, #52]	@ (80010d8 <HAL_GPIO_EXTI_Callback+0xcc>)
 80010a4:	f003 fcc2 	bl	8004a2c <OSFlagPost>
 80010a8:	e7bb      	b.n	8001022 <HAL_GPIO_EXTI_Callback+0x16>
			carroTransversalTick++;
 80010aa:	4a09      	ldr	r2, [pc, #36]	@ (80010d0 <HAL_GPIO_EXTI_Callback+0xc4>)
 80010ac:	7813      	ldrb	r3, [r2, #0]
 80010ae:	3301      	adds	r3, #1
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	7013      	strb	r3, [r2, #0]
			if (carroTransversalTick >= CARRO_TRANSVERSAL_TICK_VOLTA) {
 80010b4:	7813      	ldrb	r3, [r2, #0]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b13      	cmp	r3, #19
 80010ba:	d9b2      	bls.n	8001022 <HAL_GPIO_EXTI_Callback+0x16>
				carroTransversalTick = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	7013      	strb	r3, [r2, #0]
				carroTransversalAndar = false;
 80010c0:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <HAL_GPIO_EXTI_Callback+0xc8>)
 80010c2:	7013      	strb	r3, [r2, #0]
 80010c4:	e7ad      	b.n	8001022 <HAL_GPIO_EXTI_Callback+0x16>
 80010c6:	bf00      	nop
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	200004f2 	.word	0x200004f2
 80010d0:	200004f1 	.word	0x200004f1
 80010d4:	200004f0 	.word	0x200004f0
 80010d8:	20000e7c 	.word	0x20000e7c

080010dc <carroTransversalCreateTask>:
{
 80010dc:	b500      	push	{lr}
 80010de:	b08d      	sub	sp, #52	@ 0x34
	OSTaskCreate(
 80010e0:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 80010e4:	9308      	str	r3, [sp, #32]
 80010e6:	2303      	movs	r3, #3
 80010e8:	9307      	str	r3, [sp, #28]
 80010ea:	2300      	movs	r3, #0
 80010ec:	9306      	str	r3, [sp, #24]
 80010ee:	9305      	str	r3, [sp, #20]
 80010f0:	9304      	str	r3, [sp, #16]
 80010f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010f6:	9203      	str	r2, [sp, #12]
 80010f8:	9302      	str	r3, [sp, #8]
 80010fa:	4a09      	ldr	r2, [pc, #36]	@ (8001120 <carroTransversalCreateTask+0x44>)
 80010fc:	9201      	str	r2, [sp, #4]
 80010fe:	2204      	movs	r2, #4
 8001100:	9200      	str	r2, [sp, #0]
 8001102:	4a08      	ldr	r2, [pc, #32]	@ (8001124 <carroTransversalCreateTask+0x48>)
 8001104:	4908      	ldr	r1, [pc, #32]	@ (8001128 <carroTransversalCreateTask+0x4c>)
 8001106:	4809      	ldr	r0, [pc, #36]	@ (800112c <carroTransversalCreateTask+0x50>)
 8001108:	f004 f9e6 	bl	80054d8 <OSTaskCreate>
	if (err != OS_ERR_NONE) {
 800110c:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8001110:	b913      	cbnz	r3, 8001118 <carroTransversalCreateTask+0x3c>
}
 8001112:	b00d      	add	sp, #52	@ 0x34
 8001114:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001118:	f000 f83a 	bl	8001190 <Error_Handler>
}
 800111c:	e7f9      	b.n	8001112 <carroTransversalCreateTask+0x36>
 800111e:	bf00      	nop
 8001120:	200004f4 	.word	0x200004f4
 8001124:	08000ef1 	.word	0x08000ef1
 8001128:	08006284 	.word	0x08006284
 800112c:	200008f4 	.word	0x200008f4

08001130 <programStartTask>:
	return (0);
}

/* Task ----------------------------------------------------------------------*/
static void programStartTask(void *p_arg)
{
 8001130:	b500      	push	{lr}
 8001132:	b085      	sub	sp, #20
	OS_ERR err;
	(void)p_arg;

	/* Inicializa todos os periféricos configurados */
	MX_GPIO_Init();
 8001134:	f000 fa58 	bl	80015e8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001138:	f000 fa2a 	bl	8001590 <MX_DMA_Init>
	MX_ADC2_Init();
 800113c:	f000 f8dc 	bl	80012f8 <MX_ADC2_Init>
	MX_ADC3_Init();
 8001140:	f000 f910 	bl	8001364 <MX_ADC3_Init>
	MX_DAC_Init();
 8001144:	f000 f950 	bl	80013e8 <MX_DAC_Init>
	MX_TIM1_Init();
 8001148:	f000 f978 	bl	800143c <MX_TIM1_Init>
	MX_TIM2_Init();
 800114c:	f000 f9e8 	bl	8001520 <MX_TIM2_Init>

	/* Habilita as saídas digitais */
	HAL_GPIO_WritePin(ENAOUT03_GPIO_Port, ENAOUT03_Pin | ENAOUT04_Pin, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001156:	480c      	ldr	r0, [pc, #48]	@ (8001188 <programStartTask+0x58>)
 8001158:	f001 fc3b 	bl	80029d2 <HAL_GPIO_WritePin>

	/* Cria a tarefa de controle do motor do carro transversal */
	carroTransversalCreateTask();
 800115c:	f7ff ffbe 	bl	80010dc <carroTransversalCreateTask>

	/* Cria a tarefa de controle do motor da bobina */
	motorBobinaCreateTask();
 8001160:	f7ff fe1c 	bl	8000d9c <motorBobinaCreateTask>

	/* Infinite loop */
	while (DEF_TRUE) {
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001164:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001168:	4808      	ldr	r0, [pc, #32]	@ (800118c <programStartTask+0x5c>)
 800116a:	f001 fc38 	bl	80029de <HAL_GPIO_TogglePin>
		OSTimeDlyHMSM(0, 0, 1, 0, OS_OPT_TIME_HMSM_NON_STRICT + OS_OPT_TIME_DLY, &err);
 800116e:	f10d 030e 	add.w	r3, sp, #14
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	2310      	movs	r3, #16
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2300      	movs	r3, #0
 800117a:	2201      	movs	r2, #1
 800117c:	4619      	mov	r1, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f004 fd5c 	bl	8005c3c <OSTimeDlyHMSM>
	while (DEF_TRUE) {
 8001184:	e7ee      	b.n	8001164 <programStartTask+0x34>
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000
 800118c:	40021400 	.word	0x40021400

08001190 <Error_Handler>:
	}
}

/* Error ---------------------------------------------------------------------*/
void Error_Handler(void)
{
 8001190:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001192:	b672      	cpsid	i
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	HAL_GPIO_WritePin(LED_ERRO_GPIO_Port, LED_ERRO_Pin, LED_ON);
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800119a:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <Error_Handler+0x14>)
 800119c:	f001 fc19 	bl	80029d2 <HAL_GPIO_WritePin>

	while (1) {
 80011a0:	e7fe      	b.n	80011a0 <Error_Handler+0x10>
 80011a2:	bf00      	nop
 80011a4:	40021400 	.word	0x40021400

080011a8 <main>:
{
 80011a8:	b500      	push	{lr}
 80011aa:	b08d      	sub	sp, #52	@ 0x34
	HAL_Init();
 80011ac:	f000 fcd0 	bl	8001b50 <HAL_Init>
	SystemClock_Config();
 80011b0:	f000 f84a 	bl	8001248 <SystemClock_Config>
	CPU_Init();
 80011b4:	f002 fb8a 	bl	80038cc <CPU_Init>
	OSInit(&err);
 80011b8:	f10d 002e 	add.w	r0, sp, #46	@ 0x2e
 80011bc:	f002 fe4e 	bl	8003e5c <OSInit>
	if (err != OS_ERR_NONE) {
 80011c0:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 80011c4:	b10b      	cbz	r3, 80011ca <main+0x22>
		Error_Handler();
 80011c6:	f7ff ffe3 	bl	8001190 <Error_Handler>
	OSFlagCreate(
 80011ca:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 80011ce:	2200      	movs	r2, #0
 80011d0:	4917      	ldr	r1, [pc, #92]	@ (8001230 <main+0x88>)
 80011d2:	4818      	ldr	r0, [pc, #96]	@ (8001234 <main+0x8c>)
 80011d4:	f003 fbc2 	bl	800495c <OSFlagCreate>
	if (err != OS_ERR_NONE) {
 80011d8:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 80011dc:	b10b      	cbz	r3, 80011e2 <main+0x3a>
		Error_Handler();
 80011de:	f7ff ffd7 	bl	8001190 <Error_Handler>
        (CPU_STK_SIZE  )programStartTaskStk[PROGRAM_START_TASK_STK_SIZE / 10u],
 80011e2:	4a15      	ldr	r2, [pc, #84]	@ (8001238 <main+0x90>)
 80011e4:	6e51      	ldr	r1, [r2, #100]	@ 0x64
    OSTaskCreate(
 80011e6:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 80011ea:	9308      	str	r3, [sp, #32]
 80011ec:	2303      	movs	r3, #3
 80011ee:	9307      	str	r3, [sp, #28]
 80011f0:	2300      	movs	r3, #0
 80011f2:	9306      	str	r3, [sp, #24]
 80011f4:	9305      	str	r3, [sp, #20]
 80011f6:	9304      	str	r3, [sp, #16]
 80011f8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80011fc:	9003      	str	r0, [sp, #12]
 80011fe:	9102      	str	r1, [sp, #8]
 8001200:	9201      	str	r2, [sp, #4]
 8001202:	2205      	movs	r2, #5
 8001204:	9200      	str	r2, [sp, #0]
 8001206:	4a0d      	ldr	r2, [pc, #52]	@ (800123c <main+0x94>)
 8001208:	490d      	ldr	r1, [pc, #52]	@ (8001240 <main+0x98>)
 800120a:	480e      	ldr	r0, [pc, #56]	@ (8001244 <main+0x9c>)
 800120c:	f004 f964 	bl	80054d8 <OSTaskCreate>
	if (err != OS_ERR_NONE) {
 8001210:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8001214:	b10b      	cbz	r3, 800121a <main+0x72>
		Error_Handler();
 8001216:	f7ff ffbb 	bl	8001190 <Error_Handler>
    OSStart(&err);
 800121a:	f10d 002e 	add.w	r0, sp, #46	@ 0x2e
 800121e:	f002 fd0d 	bl	8003c3c <OSStart>
	if (err != OS_ERR_NONE) {
 8001222:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8001226:	b903      	cbnz	r3, 800122a <main+0x82>
	while (DEF_TRUE) {
 8001228:	e7fe      	b.n	8001228 <main+0x80>
		Error_Handler();
 800122a:	f7ff ffb1 	bl	8001190 <Error_Handler>
 800122e:	bf00      	nop
 8001230:	080062b8 	.word	0x080062b8
 8001234:	20000e7c 	.word	0x20000e7c
 8001238:	200009b8 	.word	0x200009b8
 800123c:	08001131 	.word	0x08001131
 8001240:	080062c8 	.word	0x080062c8
 8001244:	20000db8 	.word	0x20000db8

08001248 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b500      	push	{lr}
 800124a:	b095      	sub	sp, #84	@ 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124c:	2230      	movs	r2, #48	@ 0x30
 800124e:	2100      	movs	r1, #0
 8001250:	a808      	add	r0, sp, #32
 8001252:	f004 ffcb 	bl	80061ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001256:	2300      	movs	r3, #0
 8001258:	9303      	str	r3, [sp, #12]
 800125a:	9304      	str	r3, [sp, #16]
 800125c:	9305      	str	r3, [sp, #20]
 800125e:	9306      	str	r3, [sp, #24]
 8001260:	9307      	str	r3, [sp, #28]

	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	4a22      	ldr	r2, [pc, #136]	@ (80012f0 <SystemClock_Config+0xa8>)
 8001266:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001268:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800126c:	6411      	str	r1, [r2, #64]	@ 0x40
 800126e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001270:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001274:	9201      	str	r2, [sp, #4]
 8001276:	9a01      	ldr	r2, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001278:	9302      	str	r3, [sp, #8]
 800127a:	4b1e      	ldr	r3, [pc, #120]	@ (80012f4 <SystemClock_Config+0xac>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	9b02      	ldr	r3, [sp, #8]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800128e:	2301      	movs	r3, #1
 8001290:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001292:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001296:	9309      	str	r3, [sp, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001298:	2302      	movs	r3, #2
 800129a:	930e      	str	r3, [sp, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800129c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80012a0:	920f      	str	r2, [sp, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 15;
 80012a2:	220f      	movs	r2, #15
 80012a4:	9210      	str	r2, [sp, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 80012a6:	22c0      	movs	r2, #192	@ 0xc0
 80012a8:	9211      	str	r2, [sp, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012aa:	9312      	str	r3, [sp, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80012ac:	2304      	movs	r3, #4
 80012ae:	9313      	str	r3, [sp, #76]	@ 0x4c

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012b0:	a808      	add	r0, sp, #32
 80012b2:	f001 fbab 	bl	8002a0c <HAL_RCC_OscConfig>
 80012b6:	b9a8      	cbnz	r0, 80012e4 <SystemClock_Config+0x9c>
		Error_Handler();
	}

	/* Initializes the CPU, AHB and APB buses clocks */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b8:	230f      	movs	r3, #15
 80012ba:	9303      	str	r3, [sp, #12]
								 |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012bc:	2302      	movs	r3, #2
 80012be:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012c8:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ce:	9307      	str	r3, [sp, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80012d0:	2105      	movs	r1, #5
 80012d2:	a803      	add	r0, sp, #12
 80012d4:	f001 fdf0 	bl	8002eb8 <HAL_RCC_ClockConfig>
 80012d8:	b938      	cbnz	r0, 80012ea <SystemClock_Config+0xa2>
		Error_Handler();
	}

	/* Enables the Clock Security System */
	HAL_RCC_EnableCSS();
 80012da:	f001 fd93 	bl	8002e04 <HAL_RCC_EnableCSS>
}
 80012de:	b015      	add	sp, #84	@ 0x54
 80012e0:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 80012e4:	f7ff ff54 	bl	8001190 <Error_Handler>
 80012e8:	e7e6      	b.n	80012b8 <SystemClock_Config+0x70>
		Error_Handler();
 80012ea:	f7ff ff51 	bl	8001190 <Error_Handler>
 80012ee:	e7f4      	b.n	80012da <SystemClock_Config+0x92>
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40007000 	.word	0x40007000

080012f8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC2_Init(void)
{
 80012f8:	b500      	push	{lr}
 80012fa:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012fc:	2300      	movs	r3, #0
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001306:	4815      	ldr	r0, [pc, #84]	@ (800135c <MX_ADC2_Init+0x64>)
 8001308:	4a15      	ldr	r2, [pc, #84]	@ (8001360 <MX_ADC2_Init+0x68>)
 800130a:	6002      	str	r2, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800130c:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800130e:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001310:	2201      	movs	r2, #1
 8001312:	6102      	str	r2, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001314:	7603      	strb	r3, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001316:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800131a:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800131e:	62c1      	str	r1, [r0, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001320:	f04f 61c0 	mov.w	r1, #100663296	@ 0x6000000
 8001324:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001326:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001328:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800132a:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800132e:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001330:	f000 fcc8 	bl	8001cc4 <HAL_ADC_Init>
 8001334:	b960      	cbnz	r0, 8001350 <MX_ADC2_Init+0x58>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001336:	2306      	movs	r3, #6
 8001338:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 800133a:	2201      	movs	r2, #1
 800133c:	9201      	str	r2, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800133e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001340:	4669      	mov	r1, sp
 8001342:	4806      	ldr	r0, [pc, #24]	@ (800135c <MX_ADC2_Init+0x64>)
 8001344:	f000 fe04 	bl	8001f50 <HAL_ADC_ConfigChannel>
 8001348:	b928      	cbnz	r0, 8001356 <MX_ADC2_Init+0x5e>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800134a:	b005      	add	sp, #20
 800134c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001350:	f7ff ff1e 	bl	8001190 <Error_Handler>
 8001354:	e7ef      	b.n	8001336 <MX_ADC2_Init+0x3e>
    Error_Handler();
 8001356:	f7ff ff1b 	bl	8001190 <Error_Handler>
}
 800135a:	e7f6      	b.n	800134a <MX_ADC2_Init+0x52>
 800135c:	2000110c 	.word	0x2000110c
 8001360:	40012100 	.word	0x40012100

08001364 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC3_Init(void)
{
 8001364:	b500      	push	{lr}
 8001366:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001368:	2300      	movs	r3, #0
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001372:	481b      	ldr	r0, [pc, #108]	@ (80013e0 <MX_ADC3_Init+0x7c>)
 8001374:	4a1b      	ldr	r2, [pc, #108]	@ (80013e4 <MX_ADC3_Init+0x80>)
 8001376:	6002      	str	r2, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001378:	6043      	str	r3, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800137a:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800137c:	2201      	movs	r2, #1
 800137e:	6102      	str	r2, [r0, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001380:	7603      	strb	r3, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001382:	f880 3020 	strb.w	r3, [r0, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001386:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800138a:	62c1      	str	r1, [r0, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800138c:	f04f 61c0 	mov.w	r1, #100663296	@ 0x6000000
 8001390:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001392:	60c3      	str	r3, [r0, #12]
  hadc3.Init.NbrOfConversion = 2;
 8001394:	2102      	movs	r1, #2
 8001396:	61c1      	str	r1, [r0, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001398:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800139c:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800139e:	f000 fc91 	bl	8001cc4 <HAL_ADC_Init>
 80013a2:	b9a0      	cbnz	r0, 80013ce <MX_ADC3_Init+0x6a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013a4:	2304      	movs	r3, #4
 80013a6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80013ac:	2303      	movs	r3, #3
 80013ae:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013b0:	4669      	mov	r1, sp
 80013b2:	480b      	ldr	r0, [pc, #44]	@ (80013e0 <MX_ADC3_Init+0x7c>)
 80013b4:	f000 fdcc 	bl	8001f50 <HAL_ADC_ConfigChannel>
 80013b8:	b960      	cbnz	r0, 80013d4 <MX_ADC3_Init+0x70>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80013ba:	2302      	movs	r3, #2
 80013bc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013be:	4669      	mov	r1, sp
 80013c0:	4807      	ldr	r0, [pc, #28]	@ (80013e0 <MX_ADC3_Init+0x7c>)
 80013c2:	f000 fdc5 	bl	8001f50 <HAL_ADC_ConfigChannel>
 80013c6:	b940      	cbnz	r0, 80013da <MX_ADC3_Init+0x76>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80013c8:	b005      	add	sp, #20
 80013ca:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80013ce:	f7ff fedf 	bl	8001190 <Error_Handler>
 80013d2:	e7e7      	b.n	80013a4 <MX_ADC3_Init+0x40>
    Error_Handler();
 80013d4:	f7ff fedc 	bl	8001190 <Error_Handler>
 80013d8:	e7ef      	b.n	80013ba <MX_ADC3_Init+0x56>
    Error_Handler();
 80013da:	f7ff fed9 	bl	8001190 <Error_Handler>
}
 80013de:	e7f3      	b.n	80013c8 <MX_ADC3_Init+0x64>
 80013e0:	200010c4 	.word	0x200010c4
 80013e4:	40012200 	.word	0x40012200

080013e8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
void MX_DAC_Init(void)
{
 80013e8:	b500      	push	{lr}
 80013ea:	b083      	sub	sp, #12

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013ec:	2300      	movs	r3, #0
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	9301      	str	r3, [sp, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80013f2:	4810      	ldr	r0, [pc, #64]	@ (8001434 <MX_DAC_Init+0x4c>)
 80013f4:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <MX_DAC_Init+0x50>)
 80013f6:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80013f8:	f000 fef0 	bl	80021dc <HAL_DAC_Init>
 80013fc:	b988      	cbnz	r0, 8001422 <MX_DAC_Init+0x3a>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80013fe:	2324      	movs	r3, #36	@ 0x24
 8001400:	9300      	str	r3, [sp, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001402:	2200      	movs	r2, #0
 8001404:	9201      	str	r2, [sp, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001406:	4669      	mov	r1, sp
 8001408:	480a      	ldr	r0, [pc, #40]	@ (8001434 <MX_DAC_Init+0x4c>)
 800140a:	f000 ff8d 	bl	8002328 <HAL_DAC_ConfigChannel>
 800140e:	b958      	cbnz	r0, 8001428 <MX_DAC_Init+0x40>
    Error_Handler();
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001410:	2210      	movs	r2, #16
 8001412:	4669      	mov	r1, sp
 8001414:	4807      	ldr	r0, [pc, #28]	@ (8001434 <MX_DAC_Init+0x4c>)
 8001416:	f000 ff87 	bl	8002328 <HAL_DAC_ConfigChannel>
 800141a:	b940      	cbnz	r0, 800142e <MX_DAC_Init+0x46>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800141c:	b003      	add	sp, #12
 800141e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001422:	f7ff feb5 	bl	8001190 <Error_Handler>
 8001426:	e7ea      	b.n	80013fe <MX_DAC_Init+0x16>
    Error_Handler();
 8001428:	f7ff feb2 	bl	8001190 <Error_Handler>
 800142c:	e7f0      	b.n	8001410 <MX_DAC_Init+0x28>
    Error_Handler();
 800142e:	f7ff feaf 	bl	8001190 <Error_Handler>
}
 8001432:	e7f3      	b.n	800141c <MX_DAC_Init+0x34>
 8001434:	20000ff0 	.word	0x20000ff0
 8001438:	40007400 	.word	0x40007400

0800143c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 800143c:	b510      	push	{r4, lr}
 800143e:	b096      	sub	sp, #88	@ 0x58

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001440:	2400      	movs	r4, #0
 8001442:	9412      	str	r4, [sp, #72]	@ 0x48
 8001444:	9413      	str	r4, [sp, #76]	@ 0x4c
 8001446:	9414      	str	r4, [sp, #80]	@ 0x50
 8001448:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144a:	9410      	str	r4, [sp, #64]	@ 0x40
 800144c:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 800144e:	9409      	str	r4, [sp, #36]	@ 0x24
 8001450:	940a      	str	r4, [sp, #40]	@ 0x28
 8001452:	940b      	str	r4, [sp, #44]	@ 0x2c
 8001454:	940c      	str	r4, [sp, #48]	@ 0x30
 8001456:	940d      	str	r4, [sp, #52]	@ 0x34
 8001458:	940e      	str	r4, [sp, #56]	@ 0x38
 800145a:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800145c:	2220      	movs	r2, #32
 800145e:	4621      	mov	r1, r4
 8001460:	a801      	add	r0, sp, #4
 8001462:	f004 fec3 	bl	80061ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001466:	482c      	ldr	r0, [pc, #176]	@ (8001518 <MX_TIM1_Init+0xdc>)
 8001468:	4b2c      	ldr	r3, [pc, #176]	@ (800151c <MX_TIM1_Init+0xe0>)
 800146a:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 80-1;
 800146c:	234f      	movs	r3, #79	@ 0x4f
 800146e:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 100-1;
 8001472:	2363      	movs	r3, #99	@ 0x63
 8001474:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001476:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001478:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147a:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800147c:	f001 ff40 	bl	8003300 <HAL_TIM_Base_Init>
 8001480:	2800      	cmp	r0, #0
 8001482:	d137      	bne.n	80014f4 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001484:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001488:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800148a:	a912      	add	r1, sp, #72	@ 0x48
 800148c:	4822      	ldr	r0, [pc, #136]	@ (8001518 <MX_TIM1_Init+0xdc>)
 800148e:	f002 f842 	bl	8003516 <HAL_TIM_ConfigClockSource>
 8001492:	2800      	cmp	r0, #0
 8001494:	d131      	bne.n	80014fa <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001496:	4820      	ldr	r0, [pc, #128]	@ (8001518 <MX_TIM1_Init+0xdc>)
 8001498:	f001 ff5e 	bl	8003358 <HAL_TIM_PWM_Init>
 800149c:	2800      	cmp	r0, #0
 800149e:	d12f      	bne.n	8001500 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a4:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014a6:	a910      	add	r1, sp, #64	@ 0x40
 80014a8:	481b      	ldr	r0, [pc, #108]	@ (8001518 <MX_TIM1_Init+0xdc>)
 80014aa:	f002 f945 	bl	8003738 <HAL_TIMEx_MasterConfigSynchronization>
 80014ae:	bb50      	cbnz	r0, 8001506 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b0:	2360      	movs	r3, #96	@ 0x60
 80014b2:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b8:	930b      	str	r3, [sp, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ba:	930d      	str	r3, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014bc:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014be:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014c0:	220c      	movs	r2, #12
 80014c2:	a909      	add	r1, sp, #36	@ 0x24
 80014c4:	4814      	ldr	r0, [pc, #80]	@ (8001518 <MX_TIM1_Init+0xdc>)
 80014c6:	f001 ffab 	bl	8003420 <HAL_TIM_PWM_ConfigChannel>
 80014ca:	b9f8      	cbnz	r0, 800150c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014d0:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014d2:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014d4:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014d6:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014dc:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014de:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014e0:	a901      	add	r1, sp, #4
 80014e2:	480d      	ldr	r0, [pc, #52]	@ (8001518 <MX_TIM1_Init+0xdc>)
 80014e4:	f002 f96e 	bl	80037c4 <HAL_TIMEx_ConfigBreakDeadTime>
 80014e8:	b998      	cbnz	r0, 8001512 <MX_TIM1_Init+0xd6>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014ea:	480b      	ldr	r0, [pc, #44]	@ (8001518 <MX_TIM1_Init+0xdc>)
 80014ec:	f000 fab6 	bl	8001a5c <HAL_TIM_MspPostInit>

}
 80014f0:	b016      	add	sp, #88	@ 0x58
 80014f2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80014f4:	f7ff fe4c 	bl	8001190 <Error_Handler>
 80014f8:	e7c4      	b.n	8001484 <MX_TIM1_Init+0x48>
    Error_Handler();
 80014fa:	f7ff fe49 	bl	8001190 <Error_Handler>
 80014fe:	e7ca      	b.n	8001496 <MX_TIM1_Init+0x5a>
    Error_Handler();
 8001500:	f7ff fe46 	bl	8001190 <Error_Handler>
 8001504:	e7cc      	b.n	80014a0 <MX_TIM1_Init+0x64>
    Error_Handler();
 8001506:	f7ff fe43 	bl	8001190 <Error_Handler>
 800150a:	e7d1      	b.n	80014b0 <MX_TIM1_Init+0x74>
    Error_Handler();
 800150c:	f7ff fe40 	bl	8001190 <Error_Handler>
 8001510:	e7dc      	b.n	80014cc <MX_TIM1_Init+0x90>
    Error_Handler();
 8001512:	f7ff fe3d 	bl	8001190 <Error_Handler>
 8001516:	e7e8      	b.n	80014ea <MX_TIM1_Init+0xae>
 8001518:	20000ee8 	.word	0x20000ee8
 800151c:	40010000 	.word	0x40010000

08001520 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8001520:	b500      	push	{lr}
 8001522:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001524:	2300      	movs	r3, #0
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	9303      	str	r3, [sp, #12]
 800152a:	9304      	str	r3, [sp, #16]
 800152c:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001532:	4816      	ldr	r0, [pc, #88]	@ (800158c <MX_TIM2_Init+0x6c>)
 8001534:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001538:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 100-1;
 800153a:	2263      	movs	r2, #99	@ 0x63
 800153c:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 250-1;
 8001540:	22f9      	movs	r2, #249	@ 0xf9
 8001542:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001544:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800154a:	f001 fed9 	bl	8003300 <HAL_TIM_Base_Init>
 800154e:	b998      	cbnz	r0, 8001578 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001550:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001554:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001556:	a902      	add	r1, sp, #8
 8001558:	480c      	ldr	r0, [pc, #48]	@ (800158c <MX_TIM2_Init+0x6c>)
 800155a:	f001 ffdc 	bl	8003516 <HAL_TIM_ConfigClockSource>
 800155e:	b970      	cbnz	r0, 800157e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001560:	2320      	movs	r3, #32
 8001562:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001568:	4669      	mov	r1, sp
 800156a:	4808      	ldr	r0, [pc, #32]	@ (800158c <MX_TIM2_Init+0x6c>)
 800156c:	f002 f8e4 	bl	8003738 <HAL_TIMEx_MasterConfigSynchronization>
 8001570:	b940      	cbnz	r0, 8001584 <MX_TIM2_Init+0x64>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001572:	b007      	add	sp, #28
 8001574:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001578:	f7ff fe0a 	bl	8001190 <Error_Handler>
 800157c:	e7e8      	b.n	8001550 <MX_TIM2_Init+0x30>
    Error_Handler();
 800157e:	f7ff fe07 	bl	8001190 <Error_Handler>
 8001582:	e7ed      	b.n	8001560 <MX_TIM2_Init+0x40>
    Error_Handler();
 8001584:	f7ff fe04 	bl	8001190 <Error_Handler>
}
 8001588:	e7f3      	b.n	8001572 <MX_TIM2_Init+0x52>
 800158a:	bf00      	nop
 800158c:	20000ea0 	.word	0x20000ea0

08001590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001590:	b510      	push	{r4, lr}
 8001592:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001594:	2400      	movs	r4, #0
 8001596:	9400      	str	r4, [sp, #0]
 8001598:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <MX_DMA_Init+0x54>)
 800159a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800159c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80015a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80015a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015a4:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 80015a8:	9200      	str	r2, [sp, #0]
 80015aa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ac:	9401      	str	r4, [sp, #4]
 80015ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015b0:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80015b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80015b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015c0:	4622      	mov	r2, r4
 80015c2:	4621      	mov	r1, r4
 80015c4:	2038      	movs	r0, #56	@ 0x38
 80015c6:	f000 fde1 	bl	800218c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015ca:	2038      	movs	r0, #56	@ 0x38
 80015cc:	f000 fdee 	bl	80021ac <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80015d0:	4622      	mov	r2, r4
 80015d2:	4621      	mov	r1, r4
 80015d4:	203a      	movs	r0, #58	@ 0x3a
 80015d6:	f000 fdd9 	bl	800218c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80015da:	203a      	movs	r0, #58	@ 0x3a
 80015dc:	f000 fde6 	bl	80021ac <HAL_NVIC_EnableIRQ>

}
 80015e0:	b002      	add	sp, #8
 80015e2:	bd10      	pop	{r4, pc}
 80015e4:	40023800 	.word	0x40023800

080015e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80015e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015ec:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	2400      	movs	r4, #0
 80015f0:	9407      	str	r4, [sp, #28]
 80015f2:	9408      	str	r4, [sp, #32]
 80015f4:	9409      	str	r4, [sp, #36]	@ 0x24
 80015f6:	940a      	str	r4, [sp, #40]	@ 0x28
 80015f8:	940b      	str	r4, [sp, #44]	@ 0x2c
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015fa:	9400      	str	r4, [sp, #0]
 80015fc:	4b61      	ldr	r3, [pc, #388]	@ (8001784 <MX_GPIO_Init+0x19c>)
 80015fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001600:	f042 0210 	orr.w	r2, r2, #16
 8001604:	631a      	str	r2, [r3, #48]	@ 0x30
 8001606:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001608:	f002 0210 	and.w	r2, r2, #16
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001610:	9401      	str	r4, [sp, #4]
 8001612:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001614:	f042 0220 	orr.w	r2, r2, #32
 8001618:	631a      	str	r2, [r3, #48]	@ 0x30
 800161a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800161c:	f002 0220 	and.w	r2, r2, #32
 8001620:	9201      	str	r2, [sp, #4]
 8001622:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001624:	9402      	str	r4, [sp, #8]
 8001626:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001628:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800162c:	631a      	str	r2, [r3, #48]	@ 0x30
 800162e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001630:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001634:	9202      	str	r2, [sp, #8]
 8001636:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001638:	9403      	str	r4, [sp, #12]
 800163a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800163c:	f042 0201 	orr.w	r2, r2, #1
 8001640:	631a      	str	r2, [r3, #48]	@ 0x30
 8001642:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001644:	f002 0201 	and.w	r2, r2, #1
 8001648:	9203      	str	r2, [sp, #12]
 800164a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800164c:	9404      	str	r4, [sp, #16]
 800164e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001650:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001654:	631a      	str	r2, [r3, #48]	@ 0x30
 8001656:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001658:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800165c:	9204      	str	r2, [sp, #16]
 800165e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001660:	9405      	str	r4, [sp, #20]
 8001662:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001664:	f042 0208 	orr.w	r2, r2, #8
 8001668:	631a      	str	r2, [r3, #48]	@ 0x30
 800166a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800166c:	f002 0208 	and.w	r2, r2, #8
 8001670:	9205      	str	r2, [sp, #20]
 8001672:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001674:	9406      	str	r4, [sp, #24]
 8001676:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001678:	f042 0202 	orr.w	r2, r2, #2
 800167c:	631a      	str	r2, [r3, #48]	@ 0x30
 800167e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	9306      	str	r3, [sp, #24]
 8001686:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin|MOTOR_CARRO_TRANSVERSAL_DIR2_Pin|MOTOR_POLIA_EN_Pin|ENAOUT03_Pin
 8001688:	f8df 810c 	ldr.w	r8, [pc, #268]	@ 8001798 <MX_GPIO_Init+0x1b0>
 800168c:	4622      	mov	r2, r4
 800168e:	f44f 51f3 	mov.w	r1, #7776	@ 0x1e60
 8001692:	4640      	mov	r0, r8
 8001694:	f001 f99d 	bl	80029d2 <HAL_GPIO_WritePin>
                          |MOTOR_POLIA_DIR_Pin|ENAOUT04_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MOTOR_BOBINA_EN_Pin|MOTOR_BOBINA_DIR_Pin, GPIO_PIN_RESET);
 8001698:	4d3b      	ldr	r5, [pc, #236]	@ (8001788 <MX_GPIO_Init+0x1a0>)
 800169a:	4622      	mov	r2, r4
 800169c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80016a0:	4628      	mov	r0, r5
 80016a2:	f001 f996 	bl	80029d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80016a6:	2201      	movs	r2, #1
 80016a8:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80016ac:	4628      	mov	r0, r5
 80016ae:	f001 f990 	bl	80029d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_SET);
 80016b2:	4e36      	ldr	r6, [pc, #216]	@ (800178c <MX_GPIO_Init+0x1a4>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	2103      	movs	r1, #3
 80016b8:	4630      	mov	r0, r6
 80016ba:	f001 f98a 	bl	80029d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOTOR_CARRO_TRANSVERSAL_DIR1_Pin MOTOR_CARRO_TRANSVERSAL_DIR2_Pin MOTOR_POLIA_EN_Pin ENAOUT03_Pin
                           MOTOR_POLIA_DIR_Pin ENAOUT04_Pin */
  GPIO_InitStruct.Pin = MOTOR_CARRO_TRANSVERSAL_DIR1_Pin|MOTOR_CARRO_TRANSVERSAL_DIR2_Pin|MOTOR_POLIA_EN_Pin|ENAOUT03_Pin
 80016be:	f44f 53f3 	mov.w	r3, #7776	@ 0x1e60
 80016c2:	9307      	str	r3, [sp, #28]
                          |MOTOR_POLIA_DIR_Pin|ENAOUT04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	2701      	movs	r7, #1
 80016c6:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016cc:	a907      	add	r1, sp, #28
 80016ce:	4640      	mov	r0, r8
 80016d0:	f001 f882 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_BOBINA_EN_Pin MOTOR_BOBINA_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_BOBINA_EN_Pin|MOTOR_BOBINA_DIR_Pin;
 80016d4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016d8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016da:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016e0:	a907      	add	r1, sp, #28
 80016e2:	4628      	mov	r0, r5
 80016e4:	f001 f878 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 80016e8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80016ec:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016ee:	2711      	movs	r7, #17
 80016f0:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016f6:	a907      	add	r1, sp, #28
 80016f8:	4628      	mov	r0, r5
 80016fa:	f001 f86d 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 80016fe:	2303      	movs	r3, #3
 8001700:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001702:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001708:	a907      	add	r1, sp, #28
 800170a:	4630      	mov	r0, r6
 800170c:	f001 f864 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW0_Pin SW1_Pin SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW0_Pin|SW1_Pin|SW2_Pin|SW3_Pin;
 8001710:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8001714:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001716:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800171a:	f5a5 6500 	sub.w	r5, r5, #2048	@ 0x800
 800171e:	a907      	add	r1, sp, #28
 8001720:	4628      	mov	r0, r5
 8001722:	f001 f859 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OPTO_1_Pin OPTO_2_Pin OPTO_3_Pin */
  GPIO_InitStruct.Pin = OPTO_1_Pin|OPTO_2_Pin|OPTO_3_Pin;
 8001726:	f24c 0308 	movw	r3, #49160	@ 0xc008
 800172a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800172c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001730:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001734:	a907      	add	r1, sp, #28
 8001736:	4628      	mov	r0, r5
 8001738:	f001 f84e 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FIM_CURSO_2_Pin */
  GPIO_InitStruct.Pin = FIM_CURSO_2_Pin;
 800173c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001740:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001742:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(FIM_CURSO_2_GPIO_Port, &GPIO_InitStruct);
 8001746:	a907      	add	r1, sp, #28
 8001748:	4811      	ldr	r0, [pc, #68]	@ (8001790 <MX_GPIO_Init+0x1a8>)
 800174a:	f001 f845 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FIM_CURSO_1_Pin */
  GPIO_InitStruct.Pin = FIM_CURSO_1_Pin;
 800174e:	2308      	movs	r3, #8
 8001750:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001752:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(FIM_CURSO_1_GPIO_Port, &GPIO_InitStruct);
 8001756:	a907      	add	r1, sp, #28
 8001758:	480e      	ldr	r0, [pc, #56]	@ (8001794 <MX_GPIO_Init+0x1ac>)
 800175a:	f001 f83d 	bl	80027d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800175e:	4622      	mov	r2, r4
 8001760:	4621      	mov	r1, r4
 8001762:	2009      	movs	r0, #9
 8001764:	f000 fd12 	bl	800218c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001768:	2009      	movs	r0, #9
 800176a:	f000 fd1f 	bl	80021ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800176e:	4622      	mov	r2, r4
 8001770:	4621      	mov	r1, r4
 8001772:	2028      	movs	r0, #40	@ 0x28
 8001774:	f000 fd0a 	bl	800218c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001778:	2028      	movs	r0, #40	@ 0x28
 800177a:	f000 fd17 	bl	80021ac <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800177e:	b00c      	add	sp, #48	@ 0x30
 8001780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001784:	40023800 	.word	0x40023800
 8001788:	40021400 	.word	0x40021400
 800178c:	40021800 	.word	0x40021800
 8001790:	40020000 	.word	0x40020000
 8001794:	40020400 	.word	0x40020400
 8001798:	40021000 	.word	0x40021000

0800179c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800179c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	2100      	movs	r1, #0
 80017a0:	9100      	str	r1, [sp, #0]
 80017a2:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <HAL_MspInit+0x34>)
 80017a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80017a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80017aa:	645a      	str	r2, [r3, #68]	@ 0x44
 80017ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80017ae:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80017b2:	9200      	str	r2, [sp, #0]
 80017b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	9101      	str	r1, [sp, #4]
 80017b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017ba:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80017be:	641a      	str	r2, [r3, #64]	@ 0x40
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ca:	b002      	add	sp, #8
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800

080017d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017d4:	b530      	push	{r4, r5, lr}
 80017d6:	b08b      	sub	sp, #44	@ 0x2c
 80017d8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	2300      	movs	r3, #0
 80017dc:	9305      	str	r3, [sp, #20]
 80017de:	9306      	str	r3, [sp, #24]
 80017e0:	9307      	str	r3, [sp, #28]
 80017e2:	9308      	str	r3, [sp, #32]
 80017e4:	9309      	str	r3, [sp, #36]	@ 0x24
  if(hadc->Instance==ADC2)
 80017e6:	6803      	ldr	r3, [r0, #0]
 80017e8:	4a41      	ldr	r2, [pc, #260]	@ (80018f0 <HAL_ADC_MspInit+0x11c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d004      	beq.n	80017f8 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 80017ee:	4a41      	ldr	r2, [pc, #260]	@ (80018f4 <HAL_ADC_MspInit+0x120>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d03f      	beq.n	8001874 <HAL_ADC_MspInit+0xa0>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80017f4:	b00b      	add	sp, #44	@ 0x2c
 80017f6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 80017f8:	2500      	movs	r5, #0
 80017fa:	9501      	str	r5, [sp, #4]
 80017fc:	4b3e      	ldr	r3, [pc, #248]	@ (80018f8 <HAL_ADC_MspInit+0x124>)
 80017fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001800:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001804:	645a      	str	r2, [r3, #68]	@ 0x44
 8001806:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001808:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800180c:	9201      	str	r2, [sp, #4]
 800180e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001810:	9502      	str	r5, [sp, #8]
 8001812:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001814:	f042 0201 	orr.w	r2, r2, #1
 8001818:	631a      	str	r2, [r3, #48]	@ 0x30
 800181a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	9302      	str	r3, [sp, #8]
 8001822:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = MOTOR_BOBINA_TENSAO_Pin;
 8001824:	2340      	movs	r3, #64	@ 0x40
 8001826:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001828:	2303      	movs	r3, #3
 800182a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MOTOR_BOBINA_TENSAO_GPIO_Port, &GPIO_InitStruct);
 800182c:	a905      	add	r1, sp, #20
 800182e:	4833      	ldr	r0, [pc, #204]	@ (80018fc <HAL_ADC_MspInit+0x128>)
 8001830:	f000 ffd2 	bl	80027d8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001834:	4832      	ldr	r0, [pc, #200]	@ (8001900 <HAL_ADC_MspInit+0x12c>)
 8001836:	4b33      	ldr	r3, [pc, #204]	@ (8001904 <HAL_ADC_MspInit+0x130>)
 8001838:	6003      	str	r3, [r0, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800183a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800183e:	6043      	str	r3, [r0, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001840:	6085      	str	r5, [r0, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001842:	60c5      	str	r5, [r0, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001844:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001848:	6103      	str	r3, [r0, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800184a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800184e:	6143      	str	r3, [r0, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001850:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001854:	6183      	str	r3, [r0, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001856:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800185a:	61c3      	str	r3, [r0, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800185c:	6205      	str	r5, [r0, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800185e:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001860:	f000 fe30 	bl	80024c4 <HAL_DMA_Init>
 8001864:	b918      	cbnz	r0, 800186e <HAL_ADC_MspInit+0x9a>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001866:	4b26      	ldr	r3, [pc, #152]	@ (8001900 <HAL_ADC_MspInit+0x12c>)
 8001868:	63a3      	str	r3, [r4, #56]	@ 0x38
 800186a:	639c      	str	r4, [r3, #56]	@ 0x38
 800186c:	e7c2      	b.n	80017f4 <HAL_ADC_MspInit+0x20>
      Error_Handler();
 800186e:	f7ff fc8f 	bl	8001190 <Error_Handler>
 8001872:	e7f8      	b.n	8001866 <HAL_ADC_MspInit+0x92>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001874:	2500      	movs	r5, #0
 8001876:	9503      	str	r5, [sp, #12]
 8001878:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <HAL_ADC_MspInit+0x124>)
 800187a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800187c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001880:	645a      	str	r2, [r3, #68]	@ 0x44
 8001882:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001884:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8001888:	9203      	str	r2, [sp, #12]
 800188a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800188c:	9504      	str	r5, [sp, #16]
 800188e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001890:	f042 0220 	orr.w	r2, r2, #32
 8001894:	631a      	str	r2, [r3, #48]	@ 0x30
 8001896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001898:	f003 0320 	and.w	r3, r3, #32
 800189c:	9304      	str	r3, [sp, #16]
 800189e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = MOTOR_POLIA_TENSAO1_Pin|MOTOR_POLIA_TENSAO2_Pin;
 80018a0:	23c0      	movs	r3, #192	@ 0xc0
 80018a2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a4:	2303      	movs	r3, #3
 80018a6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018a8:	a905      	add	r1, sp, #20
 80018aa:	4817      	ldr	r0, [pc, #92]	@ (8001908 <HAL_ADC_MspInit+0x134>)
 80018ac:	f000 ff94 	bl	80027d8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 80018b0:	4816      	ldr	r0, [pc, #88]	@ (800190c <HAL_ADC_MspInit+0x138>)
 80018b2:	4b17      	ldr	r3, [pc, #92]	@ (8001910 <HAL_ADC_MspInit+0x13c>)
 80018b4:	6003      	str	r3, [r0, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80018b6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80018ba:	6043      	str	r3, [r0, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018bc:	6085      	str	r5, [r0, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80018be:	60c5      	str	r5, [r0, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80018c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018c4:	6103      	str	r3, [r0, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018ca:	6143      	str	r3, [r0, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018d0:	6183      	str	r3, [r0, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80018d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018d6:	61c3      	str	r3, [r0, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80018d8:	6205      	str	r5, [r0, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018da:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80018dc:	f000 fdf2 	bl	80024c4 <HAL_DMA_Init>
 80018e0:	b918      	cbnz	r0, 80018ea <HAL_ADC_MspInit+0x116>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80018e2:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <HAL_ADC_MspInit+0x138>)
 80018e4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80018e6:	639c      	str	r4, [r3, #56]	@ 0x38
}
 80018e8:	e784      	b.n	80017f4 <HAL_ADC_MspInit+0x20>
      Error_Handler();
 80018ea:	f7ff fc51 	bl	8001190 <Error_Handler>
 80018ee:	e7f8      	b.n	80018e2 <HAL_ADC_MspInit+0x10e>
 80018f0:	40012100 	.word	0x40012100
 80018f4:	40012200 	.word	0x40012200
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020000 	.word	0x40020000
 8001900:	20001064 	.word	0x20001064
 8001904:	40026440 	.word	0x40026440
 8001908:	40021400 	.word	0x40021400
 800190c:	20001004 	.word	0x20001004
 8001910:	40026410 	.word	0x40026410

08001914 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001914:	b530      	push	{r4, r5, lr}
 8001916:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	2300      	movs	r3, #0
 800191a:	9303      	str	r3, [sp, #12]
 800191c:	9304      	str	r3, [sp, #16]
 800191e:	9305      	str	r3, [sp, #20]
 8001920:	9306      	str	r3, [sp, #24]
 8001922:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC)
 8001924:	6802      	ldr	r2, [r0, #0]
 8001926:	4b33      	ldr	r3, [pc, #204]	@ (80019f4 <HAL_DAC_MspInit+0xe0>)
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_DAC_MspInit+0x1c>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 800192c:	b009      	add	sp, #36	@ 0x24
 800192e:	bd30      	pop	{r4, r5, pc}
 8001930:	4604      	mov	r4, r0
    __HAL_RCC_DAC_CLK_ENABLE();
 8001932:	2500      	movs	r5, #0
 8001934:	9501      	str	r5, [sp, #4]
 8001936:	f503 33e2 	add.w	r3, r3, #115712	@ 0x1c400
 800193a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800193c:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001940:	641a      	str	r2, [r3, #64]	@ 0x40
 8001942:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001944:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8001948:	9201      	str	r2, [sp, #4]
 800194a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194c:	9502      	str	r5, [sp, #8]
 800194e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001950:	f042 0201 	orr.w	r2, r2, #1
 8001954:	631a      	str	r2, [r3, #48]	@ 0x30
 8001956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	9302      	str	r3, [sp, #8]
 800195e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = MOTOR_BOBINA_VEL_Pin|MOTOR_POLIA_VEL_Pin;
 8001960:	2330      	movs	r3, #48	@ 0x30
 8001962:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001964:	2303      	movs	r3, #3
 8001966:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	a903      	add	r1, sp, #12
 800196a:	4823      	ldr	r0, [pc, #140]	@ (80019f8 <HAL_DAC_MspInit+0xe4>)
 800196c:	f000 ff34 	bl	80027d8 <HAL_GPIO_Init>
    hdma_dac1.Instance = DMA1_Stream5;
 8001970:	4822      	ldr	r0, [pc, #136]	@ (80019fc <HAL_DAC_MspInit+0xe8>)
 8001972:	4b23      	ldr	r3, [pc, #140]	@ (8001a00 <HAL_DAC_MspInit+0xec>)
 8001974:	6003      	str	r3, [r0, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001976:	f04f 6360 	mov.w	r3, #234881024	@ 0xe000000
 800197a:	6043      	str	r3, [r0, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800197c:	2340      	movs	r3, #64	@ 0x40
 800197e:	6083      	str	r3, [r0, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001980:	60c5      	str	r5, [r0, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001982:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001986:	6103      	str	r3, [r0, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001988:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800198c:	6143      	str	r3, [r0, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800198e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001992:	6183      	str	r3, [r0, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001994:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001998:	61c3      	str	r3, [r0, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 800199a:	6205      	str	r5, [r0, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800199c:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800199e:	f000 fd91 	bl	80024c4 <HAL_DMA_Init>
 80019a2:	bb08      	cbnz	r0, 80019e8 <HAL_DAC_MspInit+0xd4>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80019a4:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <HAL_DAC_MspInit+0xe8>)
 80019a6:	60a3      	str	r3, [r4, #8]
 80019a8:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_dac2.Instance = DMA1_Stream6;
 80019aa:	4816      	ldr	r0, [pc, #88]	@ (8001a04 <HAL_DAC_MspInit+0xf0>)
 80019ac:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <HAL_DAC_MspInit+0xf4>)
 80019ae:	6003      	str	r3, [r0, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80019b0:	f04f 6360 	mov.w	r3, #234881024	@ 0xe000000
 80019b4:	6043      	str	r3, [r0, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019b6:	2340      	movs	r3, #64	@ 0x40
 80019b8:	6083      	str	r3, [r0, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60c3      	str	r3, [r0, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80019be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019c2:	6102      	str	r2, [r0, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019c8:	6142      	str	r2, [r0, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019ce:	6182      	str	r2, [r0, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80019d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019d4:	61c2      	str	r2, [r0, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80019d6:	6203      	str	r3, [r0, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019d8:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80019da:	f000 fd73 	bl	80024c4 <HAL_DMA_Init>
 80019de:	b930      	cbnz	r0, 80019ee <HAL_DAC_MspInit+0xda>
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <HAL_DAC_MspInit+0xf0>)
 80019e2:	60e3      	str	r3, [r4, #12]
 80019e4:	639c      	str	r4, [r3, #56]	@ 0x38
}
 80019e6:	e7a1      	b.n	800192c <HAL_DAC_MspInit+0x18>
      Error_Handler();
 80019e8:	f7ff fbd2 	bl	8001190 <Error_Handler>
 80019ec:	e7da      	b.n	80019a4 <HAL_DAC_MspInit+0x90>
      Error_Handler();
 80019ee:	f7ff fbcf 	bl	8001190 <Error_Handler>
 80019f2:	e7f5      	b.n	80019e0 <HAL_DAC_MspInit+0xcc>
 80019f4:	40007400 	.word	0x40007400
 80019f8:	40020000 	.word	0x40020000
 80019fc:	20000f90 	.word	0x20000f90
 8001a00:	40026088 	.word	0x40026088
 8001a04:	20000f30 	.word	0x20000f30
 8001a08:	400260a0 	.word	0x400260a0

08001a0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a0c:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8001a0e:	6803      	ldr	r3, [r0, #0]
 8001a10:	4a10      	ldr	r2, [pc, #64]	@ (8001a54 <HAL_TIM_Base_MspInit+0x48>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d004      	beq.n	8001a20 <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8001a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a1a:	d00e      	beq.n	8001a3a <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a1c:	b002      	add	sp, #8
 8001a1e:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a20:	2300      	movs	r3, #0
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <HAL_TIM_Base_MspInit+0x4c>)
 8001a26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a28:	f042 0201 	orr.w	r2, r2, #1
 8001a2c:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	9b00      	ldr	r3, [sp, #0]
 8001a38:	e7f0      	b.n	8001a1c <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <HAL_TIM_Base_MspInit+0x4c>)
 8001a40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	9b01      	ldr	r3, [sp, #4]
}
 8001a52:	e7e3      	b.n	8001a1c <HAL_TIM_Base_MspInit+0x10>
 8001a54:	40010000 	.word	0x40010000
 8001a58:	40023800 	.word	0x40023800

08001a5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a5c:	b500      	push	{lr}
 8001a5e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	2300      	movs	r3, #0
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	9302      	str	r3, [sp, #8]
 8001a66:	9303      	str	r3, [sp, #12]
 8001a68:	9304      	str	r3, [sp, #16]
 8001a6a:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8001a6c:	6802      	ldr	r2, [r0, #0]
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <HAL_TIM_MspPostInit+0x50>)
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d002      	beq.n	8001a7a <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a74:	b007      	add	sp, #28
 8001a76:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <HAL_TIM_MspPostInit+0x54>)
 8001a80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a82:	f042 0210 	orr.w	r2, r2, #16
 8001a86:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MOTOR_CARRO_TRANSVERSAL_PWM_Pin;
 8001a92:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a96:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(MOTOR_CARRO_TRANSVERSAL_PWM_GPIO_Port, &GPIO_InitStruct);
 8001aa0:	a901      	add	r1, sp, #4
 8001aa2:	4804      	ldr	r0, [pc, #16]	@ (8001ab4 <HAL_TIM_MspPostInit+0x58>)
 8001aa4:	f000 fe98 	bl	80027d8 <HAL_GPIO_Init>
}
 8001aa8:	e7e4      	b.n	8001a74 <HAL_TIM_MspPostInit+0x18>
 8001aaa:	bf00      	nop
 8001aac:	40010000 	.word	0x40010000
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <NMI_Handler>

08001aba <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <HardFault_Handler>

08001abc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <MemManage_Handler>

08001abe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <BusFault_Handler>

08001ac0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <UsageFault_Handler>

08001ac2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac2:	4770      	bx	lr

08001ac4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac4:	4770      	bx	lr

08001ac6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001ac6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPTO_3_Pin);
 8001ac8:	2008      	movs	r0, #8
 8001aca:	f000 ff91 	bl	80029f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001ace:	bd08      	pop	{r3, pc}

08001ad0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ad0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPTO_1_Pin);
 8001ad2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001ad6:	f000 ff8b 	bl	80029f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPTO_2_Pin);
 8001ada:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001ade:	f000 ff87 	bl	80029f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ae2:	bd08      	pop	{r3, pc}

08001ae4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ae4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001ae6:	4802      	ldr	r0, [pc, #8]	@ (8001af0 <DMA2_Stream0_IRQHandler+0xc>)
 8001ae8:	f000 fd88 	bl	80025fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001aec:	bd08      	pop	{r3, pc}
 8001aee:	bf00      	nop
 8001af0:	20001004 	.word	0x20001004

08001af4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001af4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001af6:	4802      	ldr	r0, [pc, #8]	@ (8001b00 <DMA2_Stream2_IRQHandler+0xc>)
 8001af8:	f000 fd80 	bl	80025fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001afc:	bd08      	pop	{r3, pc}
 8001afe:	bf00      	nop
 8001b00:	20001064 	.word	0x20001064

08001b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b04:	b510      	push	{r4, lr}
 8001b06:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b08:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <HAL_InitTick+0x40>)
 8001b0a:	781a      	ldrb	r2, [r3, #0]
 8001b0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b10:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b14:	4a0c      	ldr	r2, [pc, #48]	@ (8001b48 <HAL_InitTick+0x44>)
 8001b16:	6810      	ldr	r0, [r2, #0]
 8001b18:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b1c:	f000 fb4a 	bl	80021b4 <HAL_SYSTICK_Config>
 8001b20:	b968      	cbnz	r0, 8001b3e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b22:	2c0f      	cmp	r4, #15
 8001b24:	d901      	bls.n	8001b2a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001b26:	2001      	movs	r0, #1
 8001b28:	e00a      	b.n	8001b40 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b32:	f000 fb2b 	bl	800218c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b36:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <HAL_InitTick+0x48>)
 8001b38:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	e000      	b.n	8001b40 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001b3e:	2001      	movs	r0, #1
}
 8001b40:	bd10      	pop	{r4, pc}
 8001b42:	bf00      	nop
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	20000004 	.word	0x20000004

08001b50 <HAL_Init>:
{
 8001b50:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b52:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <HAL_Init+0x30>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b5a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001b62:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b6a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f000 fafb 	bl	8002168 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b72:	200f      	movs	r0, #15
 8001b74:	f7ff ffc6 	bl	8001b04 <HAL_InitTick>
  HAL_MspInit();
 8001b78:	f7ff fe10 	bl	800179c <HAL_MspInit>
}
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	bd08      	pop	{r3, pc}
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001b84:	4b01      	ldr	r3, [pc, #4]	@ (8001b8c <HAL_GetTick+0x8>)
 8001b86:	6818      	ldr	r0, [r3, #0]
}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20001154 	.word	0x20001154

08001b90 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b90:	4b4a      	ldr	r3, [pc, #296]	@ (8001cbc <ADC_Init+0x12c>)
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8001b98:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	6841      	ldr	r1, [r0, #4]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ba2:	6802      	ldr	r2, [r0, #0]
 8001ba4:	6853      	ldr	r3, [r2, #4]
 8001ba6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001baa:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bac:	6802      	ldr	r2, [r0, #0]
 8001bae:	6853      	ldr	r3, [r2, #4]
 8001bb0:	6901      	ldr	r1, [r0, #16]
 8001bb2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001bb6:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bb8:	6802      	ldr	r2, [r0, #0]
 8001bba:	6853      	ldr	r3, [r2, #4]
 8001bbc:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001bc0:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bc2:	6802      	ldr	r2, [r0, #0]
 8001bc4:	6853      	ldr	r3, [r2, #4]
 8001bc6:	6881      	ldr	r1, [r0, #8]
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bcc:	6802      	ldr	r2, [r0, #0]
 8001bce:	6893      	ldr	r3, [r2, #8]
 8001bd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001bd4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bd6:	6802      	ldr	r2, [r0, #0]
 8001bd8:	6893      	ldr	r3, [r2, #8]
 8001bda:	68c1      	ldr	r1, [r0, #12]
 8001bdc:	430b      	orrs	r3, r1
 8001bde:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001be0:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8001be2:	4b37      	ldr	r3, [pc, #220]	@ (8001cc0 <ADC_Init+0x130>)
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d057      	beq.n	8001c98 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001be8:	6802      	ldr	r2, [r0, #0]
 8001bea:	6893      	ldr	r3, [r2, #8]
 8001bec:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001bf0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bf2:	6802      	ldr	r2, [r0, #0]
 8001bf4:	6893      	ldr	r3, [r2, #8]
 8001bf6:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bfc:	6802      	ldr	r2, [r0, #0]
 8001bfe:	6893      	ldr	r3, [r2, #8]
 8001c00:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001c04:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c06:	6802      	ldr	r2, [r0, #0]
 8001c08:	6893      	ldr	r3, [r2, #8]
 8001c0a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c10:	6802      	ldr	r2, [r0, #0]
 8001c12:	6893      	ldr	r3, [r2, #8]
 8001c14:	f023 0302 	bic.w	r3, r3, #2
 8001c18:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c1a:	6802      	ldr	r2, [r0, #0]
 8001c1c:	6893      	ldr	r3, [r2, #8]
 8001c1e:	7e01      	ldrb	r1, [r0, #24]
 8001c20:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001c24:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c26:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d03f      	beq.n	8001cae <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c2e:	6802      	ldr	r2, [r0, #0]
 8001c30:	6853      	ldr	r3, [r2, #4]
 8001c32:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c36:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c38:	6802      	ldr	r2, [r0, #0]
 8001c3a:	6853      	ldr	r3, [r2, #4]
 8001c3c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001c40:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c42:	6801      	ldr	r1, [r0, #0]
 8001c44:	684b      	ldr	r3, [r1, #4]
 8001c46:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8001c48:	3a01      	subs	r2, #1
 8001c4a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001c4e:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c50:	6802      	ldr	r2, [r0, #0]
 8001c52:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001c54:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001c58:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c5a:	6801      	ldr	r1, [r0, #0]
 8001c5c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8001c5e:	69c2      	ldr	r2, [r0, #28]
 8001c60:	3a01      	subs	r2, #1
 8001c62:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001c66:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c68:	6802      	ldr	r2, [r0, #0]
 8001c6a:	6893      	ldr	r3, [r2, #8]
 8001c6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001c70:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c72:	6802      	ldr	r2, [r0, #0]
 8001c74:	6893      	ldr	r3, [r2, #8]
 8001c76:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8001c7a:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001c7e:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c80:	6802      	ldr	r2, [r0, #0]
 8001c82:	6893      	ldr	r3, [r2, #8]
 8001c84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c88:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c8a:	6802      	ldr	r2, [r0, #0]
 8001c8c:	6893      	ldr	r3, [r2, #8]
 8001c8e:	6941      	ldr	r1, [r0, #20]
 8001c90:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001c94:	6093      	str	r3, [r2, #8]
}
 8001c96:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c98:	6802      	ldr	r2, [r0, #0]
 8001c9a:	6893      	ldr	r3, [r2, #8]
 8001c9c:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001ca0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ca2:	6802      	ldr	r2, [r0, #0]
 8001ca4:	6893      	ldr	r3, [r2, #8]
 8001ca6:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001caa:	6093      	str	r3, [r2, #8]
 8001cac:	e7b0      	b.n	8001c10 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cae:	6802      	ldr	r2, [r0, #0]
 8001cb0:	6853      	ldr	r3, [r2, #4]
 8001cb2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001cb6:	6053      	str	r3, [r2, #4]
 8001cb8:	e7ca      	b.n	8001c50 <ADC_Init+0xc0>
 8001cba:	bf00      	nop
 8001cbc:	40012300 	.word	0x40012300
 8001cc0:	0f000001 	.word	0x0f000001

08001cc4 <HAL_ADC_Init>:
  if (hadc == NULL)
 8001cc4:	b338      	cbz	r0, 8001d16 <HAL_ADC_Init+0x52>
{
 8001cc6:	b510      	push	{r4, lr}
 8001cc8:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cca:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001ccc:	b143      	cbz	r3, 8001ce0 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001cd0:	f013 0f10 	tst.w	r3, #16
 8001cd4:	d00b      	beq.n	8001cee <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8001cd6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001cde:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001ce0:	f7ff fd78 	bl	80017d4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001ce8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8001cec:	e7ef      	b.n	8001cce <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001cee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001cf0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001cf4:	f023 0302 	bic.w	r3, r3, #2
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8001cfe:	4620      	mov	r0, r4
 8001d00:	f7ff ff46 	bl	8001b90 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001d04:	2000      	movs	r0, #0
 8001d06:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001d08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d0a:	f023 0303 	bic.w	r3, r3, #3
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6423      	str	r3, [r4, #64]	@ 0x40
 8001d14:	e7e0      	b.n	8001cd8 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8001d16:	2001      	movs	r0, #1
}
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_ADC_Start_DMA>:
{
 8001d1c:	b510      	push	{r4, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8001d22:	2200      	movs	r2, #0
 8001d24:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001d26:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001d2a:	2a01      	cmp	r2, #1
 8001d2c:	f000 80ae 	beq.w	8001e8c <HAL_ADC_Start_DMA+0x170>
 8001d30:	4604      	mov	r4, r0
 8001d32:	2201      	movs	r2, #1
 8001d34:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d38:	6802      	ldr	r2, [r0, #0]
 8001d3a:	6890      	ldr	r0, [r2, #8]
 8001d3c:	f010 0f01 	tst.w	r0, #1
 8001d40:	d113      	bne.n	8001d6a <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 8001d42:	6890      	ldr	r0, [r2, #8]
 8001d44:	f040 0001 	orr.w	r0, r0, #1
 8001d48:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d4a:	4a53      	ldr	r2, [pc, #332]	@ (8001e98 <HAL_ADC_Start_DMA+0x17c>)
 8001d4c:	6810      	ldr	r0, [r2, #0]
 8001d4e:	4a53      	ldr	r2, [pc, #332]	@ (8001e9c <HAL_ADC_Start_DMA+0x180>)
 8001d50:	fba2 2000 	umull	r2, r0, r2, r0
 8001d54:	0c80      	lsrs	r0, r0, #18
 8001d56:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001d5a:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8001d5c:	e002      	b.n	8001d64 <HAL_ADC_Start_DMA+0x48>
      counter--;
 8001d5e:	9801      	ldr	r0, [sp, #4]
 8001d60:	3801      	subs	r0, #1
 8001d62:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8001d64:	9801      	ldr	r0, [sp, #4]
 8001d66:	2800      	cmp	r0, #0
 8001d68:	d1f9      	bne.n	8001d5e <HAL_ADC_Start_DMA+0x42>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d6a:	6822      	ldr	r2, [r4, #0]
 8001d6c:	6890      	ldr	r0, [r2, #8]
 8001d6e:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8001d72:	d003      	beq.n	8001d7c <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d74:	6890      	ldr	r0, [r2, #8]
 8001d76:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8001d7a:	6090      	str	r0, [r2, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d7c:	6822      	ldr	r2, [r4, #0]
 8001d7e:	6890      	ldr	r0, [r2, #8]
 8001d80:	f010 0f01 	tst.w	r0, #1
 8001d84:	d077      	beq.n	8001e76 <HAL_ADC_Start_DMA+0x15a>
    ADC_STATE_CLR_SET(hadc->State,
 8001d86:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8001d88:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 8001d8c:	f020 0001 	bic.w	r0, r0, #1
 8001d90:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8001d94:	6420      	str	r0, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d96:	6852      	ldr	r2, [r2, #4]
 8001d98:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001d9c:	d005      	beq.n	8001daa <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d9e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001da0:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8001da4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001da8:	6422      	str	r2, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001daa:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001dac:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8001db0:	d036      	beq.n	8001e20 <HAL_ADC_Start_DMA+0x104>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001db2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001db4:	f022 0206 	bic.w	r2, r2, #6
 8001db8:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dc0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001dc2:	4837      	ldr	r0, [pc, #220]	@ (8001ea0 <HAL_ADC_Start_DMA+0x184>)
 8001dc4:	63d0      	str	r0, [r2, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001dc6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001dc8:	4836      	ldr	r0, [pc, #216]	@ (8001ea4 <HAL_ADC_Start_DMA+0x188>)
 8001dca:	6410      	str	r0, [r2, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dcc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001dce:	4836      	ldr	r0, [pc, #216]	@ (8001ea8 <HAL_ADC_Start_DMA+0x18c>)
 8001dd0:	64d0      	str	r0, [r2, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dd2:	6822      	ldr	r2, [r4, #0]
 8001dd4:	f06f 0022 	mvn.w	r0, #34	@ 0x22
 8001dd8:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dda:	6820      	ldr	r0, [r4, #0]
 8001ddc:	6842      	ldr	r2, [r0, #4]
 8001dde:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001de2:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001de4:	6820      	ldr	r0, [r4, #0]
 8001de6:	6882      	ldr	r2, [r0, #8]
 8001de8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dec:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dee:	6820      	ldr	r0, [r4, #0]
 8001df0:	460a      	mov	r2, r1
 8001df2:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 8001df6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001df8:	f000 fbca 	bl	8002590 <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001eac <HAL_ADC_Start_DMA+0x190>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f013 0f1f 	tst.w	r3, #31
 8001e04:	d127      	bne.n	8001e56 <HAL_ADC_Start_DMA+0x13a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	4a29      	ldr	r2, [pc, #164]	@ (8001eb0 <HAL_ADC_Start_DMA+0x194>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d011      	beq.n	8001e32 <HAL_ADC_Start_DMA+0x116>
 8001e0e:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d007      	beq.n	8001e26 <HAL_ADC_Start_DMA+0x10a>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e16:	4a27      	ldr	r2, [pc, #156]	@ (8001eb4 <HAL_ADC_Start_DMA+0x198>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d014      	beq.n	8001e46 <HAL_ADC_Start_DMA+0x12a>
  return HAL_OK;
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	e033      	b.n	8001e88 <HAL_ADC_Start_DMA+0x16c>
      ADC_CLEAR_ERRORCODE(hadc);
 8001e20:	2200      	movs	r2, #0
 8001e22:	6462      	str	r2, [r4, #68]	@ 0x44
 8001e24:	e7c9      	b.n	8001dba <HAL_ADC_Start_DMA+0x9e>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e26:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8001e2a:	6852      	ldr	r2, [r2, #4]
 8001e2c:	f012 0f1f 	tst.w	r2, #31
 8001e30:	d1f1      	bne.n	8001e16 <HAL_ADC_Start_DMA+0xfa>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001e38:	d12a      	bne.n	8001e90 <HAL_ADC_Start_DMA+0x174>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001e42:	2000      	movs	r0, #0
 8001e44:	e020      	b.n	8001e88 <HAL_ADC_Start_DMA+0x16c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e46:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001e4a:	6852      	ldr	r2, [r2, #4]
 8001e4c:	f012 0f10 	tst.w	r2, #16
 8001e50:	d0ef      	beq.n	8001e32 <HAL_ADC_Start_DMA+0x116>
  return HAL_OK;
 8001e52:	2000      	movs	r0, #0
 8001e54:	e018      	b.n	8001e88 <HAL_ADC_Start_DMA+0x16c>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e56:	6823      	ldr	r3, [r4, #0]
 8001e58:	4a15      	ldr	r2, [pc, #84]	@ (8001eb0 <HAL_ADC_Start_DMA+0x194>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d001      	beq.n	8001e62 <HAL_ADC_Start_DMA+0x146>
  return HAL_OK;
 8001e5e:	2000      	movs	r0, #0
 8001e60:	e012      	b.n	8001e88 <HAL_ADC_Start_DMA+0x16c>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001e68:	d114      	bne.n	8001e94 <HAL_ADC_Start_DMA+0x178>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001e72:	2000      	movs	r0, #0
 8001e74:	e008      	b.n	8001e88 <HAL_ADC_Start_DMA+0x16c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e78:	f043 0310 	orr.w	r3, r3, #16
 8001e7c:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
 8001e86:	2000      	movs	r0, #0
}
 8001e88:	b002      	add	sp, #8
 8001e8a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001e8c:	2002      	movs	r0, #2
 8001e8e:	e7fb      	b.n	8001e88 <HAL_ADC_Start_DMA+0x16c>
  return HAL_OK;
 8001e90:	2000      	movs	r0, #0
 8001e92:	e7f9      	b.n	8001e88 <HAL_ADC_Start_DMA+0x16c>
 8001e94:	2000      	movs	r0, #0
 8001e96:	e7f7      	b.n	8001e88 <HAL_ADC_Start_DMA+0x16c>
 8001e98:	20000008 	.word	0x20000008
 8001e9c:	431bde83 	.word	0x431bde83
 8001ea0:	08001edd 	.word	0x08001edd
 8001ea4:	08001ebb 	.word	0x08001ebb
 8001ea8:	08001ec7 	.word	0x08001ec7
 8001eac:	40012300 	.word	0x40012300
 8001eb0:	40012000 	.word	0x40012000
 8001eb4:	40012200 	.word	0x40012200

08001eb8 <HAL_ADC_ConvHalfCpltCallback>:
}
 8001eb8:	4770      	bx	lr

08001eba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001eba:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ebc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001ebe:	f7ff fffb 	bl	8001eb8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ec2:	bd08      	pop	{r3, pc}

08001ec4 <HAL_ADC_ErrorCallback>:
}
 8001ec4:	4770      	bx	lr

08001ec6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ec6:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ec8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001eca:	2340      	movs	r3, #64	@ 0x40
 8001ecc:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ece:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ed6:	f7ff fff5 	bl	8001ec4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001eda:	bd08      	pop	{r3, pc}

08001edc <ADC_DMAConvCplt>:
{
 8001edc:	b508      	push	{r3, lr}
 8001ede:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ee0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ee2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001ee4:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8001ee8:	d125      	bne.n	8001f36 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eea:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001eec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ef0:	6403      	str	r3, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ef2:	6803      	ldr	r3, [r0, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001efa:	d119      	bne.n	8001f30 <ADC_DMAConvCplt+0x54>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001efc:	7e02      	ldrb	r2, [r0, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001efe:	b9ba      	cbnz	r2, 8001f30 <ADC_DMAConvCplt+0x54>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f02:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8001f06:	d003      	beq.n	8001f10 <ADC_DMAConvCplt+0x34>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f08:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f0a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001f0e:	d10f      	bne.n	8001f30 <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	f022 0220 	bic.w	r2, r2, #32
 8001f16:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f18:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001f1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f1e:	6403      	str	r3, [r0, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f20:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001f22:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001f26:	d103      	bne.n	8001f30 <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f28:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001f30:	f7fe ff1e 	bl	8000d70 <HAL_ADC_ConvCpltCallback>
}
 8001f34:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f36:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001f38:	f012 0f10 	tst.w	r2, #16
 8001f3c:	d104      	bne.n	8001f48 <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f3e:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8001f40:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f42:	4618      	mov	r0, r3
 8001f44:	4790      	blx	r2
}
 8001f46:	e7f5      	b.n	8001f34 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 8001f48:	f7ff ffbc 	bl	8001ec4 <HAL_ADC_ErrorCallback>
 8001f4c:	e7f2      	b.n	8001f34 <ADC_DMAConvCplt+0x58>
	...

08001f50 <HAL_ADC_ConfigChannel>:
{
 8001f50:	b430      	push	{r4, r5}
 8001f52:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001f54:	2200      	movs	r2, #0
 8001f56:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001f58:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001f5c:	2a01      	cmp	r2, #1
 8001f5e:	f000 80b6 	beq.w	80020ce <HAL_ADC_ConfigChannel+0x17e>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2201      	movs	r2, #1
 8001f66:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f6a:	680a      	ldr	r2, [r1, #0]
 8001f6c:	2a09      	cmp	r2, #9
 8001f6e:	d940      	bls.n	8001ff2 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f70:	6804      	ldr	r4, [r0, #0]
 8001f72:	68e0      	ldr	r0, [r4, #12]
 8001f74:	b292      	uxth	r2, r2
 8001f76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001f7a:	3a1e      	subs	r2, #30
 8001f7c:	f04f 0c07 	mov.w	ip, #7
 8001f80:	fa0c f202 	lsl.w	r2, ip, r2
 8001f84:	ea20 0202 	bic.w	r2, r0, r2
 8001f88:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f8a:	681c      	ldr	r4, [r3, #0]
 8001f8c:	68e0      	ldr	r0, [r4, #12]
 8001f8e:	880a      	ldrh	r2, [r1, #0]
 8001f90:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001f94:	3a1e      	subs	r2, #30
 8001f96:	688d      	ldr	r5, [r1, #8]
 8001f98:	fa05 f202 	lsl.w	r2, r5, r2
 8001f9c:	4302      	orrs	r2, r0
 8001f9e:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8001fa0:	684a      	ldr	r2, [r1, #4]
 8001fa2:	2a06      	cmp	r2, #6
 8001fa4:	d83c      	bhi.n	8002020 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fa6:	681c      	ldr	r4, [r3, #0]
 8001fa8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001faa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001fae:	3a05      	subs	r2, #5
 8001fb0:	f04f 0c1f 	mov.w	ip, #31
 8001fb4:	fa0c f202 	lsl.w	r2, ip, r2
 8001fb8:	ea20 0202 	bic.w	r2, r0, r2
 8001fbc:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fbe:	681c      	ldr	r4, [r3, #0]
 8001fc0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001fc2:	684a      	ldr	r2, [r1, #4]
 8001fc4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001fc8:	3a05      	subs	r2, #5
 8001fca:	f8b1 c000 	ldrh.w	ip, [r1]
 8001fce:	fa0c f202 	lsl.w	r2, ip, r2
 8001fd2:	4302      	orrs	r2, r0
 8001fd4:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	4a3e      	ldr	r2, [pc, #248]	@ (80020d4 <HAL_ADC_ConfigChannel+0x184>)
 8001fda:	4290      	cmp	r0, r2
 8001fdc:	d050      	beq.n	8002080 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	4a3c      	ldr	r2, [pc, #240]	@ (80020d4 <HAL_ADC_ConfigChannel+0x184>)
 8001fe2:	4290      	cmp	r0, r2
 8001fe4:	d055      	beq.n	8002092 <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8001fec:	b002      	add	sp, #8
 8001fee:	bc30      	pop	{r4, r5}
 8001ff0:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ff2:	6804      	ldr	r4, [r0, #0]
 8001ff4:	6920      	ldr	r0, [r4, #16]
 8001ff6:	b292      	uxth	r2, r2
 8001ff8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001ffc:	f04f 0c07 	mov.w	ip, #7
 8002000:	fa0c f202 	lsl.w	r2, ip, r2
 8002004:	ea20 0202 	bic.w	r2, r0, r2
 8002008:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800200a:	681c      	ldr	r4, [r3, #0]
 800200c:	6920      	ldr	r0, [r4, #16]
 800200e:	880a      	ldrh	r2, [r1, #0]
 8002010:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002014:	688d      	ldr	r5, [r1, #8]
 8002016:	fa05 f202 	lsl.w	r2, r5, r2
 800201a:	4302      	orrs	r2, r0
 800201c:	6122      	str	r2, [r4, #16]
 800201e:	e7bf      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8002020:	2a0c      	cmp	r2, #12
 8002022:	d816      	bhi.n	8002052 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002024:	681d      	ldr	r5, [r3, #0]
 8002026:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8002028:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800202c:	3a23      	subs	r2, #35	@ 0x23
 800202e:	241f      	movs	r4, #31
 8002030:	fa04 f202 	lsl.w	r2, r4, r2
 8002034:	ea20 0202 	bic.w	r2, r0, r2
 8002038:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800203a:	681d      	ldr	r5, [r3, #0]
 800203c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800203e:	684a      	ldr	r2, [r1, #4]
 8002040:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002044:	3a23      	subs	r2, #35	@ 0x23
 8002046:	880c      	ldrh	r4, [r1, #0]
 8002048:	fa04 f202 	lsl.w	r2, r4, r2
 800204c:	4302      	orrs	r2, r0
 800204e:	632a      	str	r2, [r5, #48]	@ 0x30
 8002050:	e7c1      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002052:	681d      	ldr	r5, [r3, #0]
 8002054:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8002056:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800205a:	3a41      	subs	r2, #65	@ 0x41
 800205c:	241f      	movs	r4, #31
 800205e:	fa04 f202 	lsl.w	r2, r4, r2
 8002062:	ea20 0202 	bic.w	r2, r0, r2
 8002066:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002068:	681d      	ldr	r5, [r3, #0]
 800206a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800206c:	684a      	ldr	r2, [r1, #4]
 800206e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002072:	3a41      	subs	r2, #65	@ 0x41
 8002074:	880c      	ldrh	r4, [r1, #0]
 8002076:	fa04 f202 	lsl.w	r2, r4, r2
 800207a:	4302      	orrs	r2, r0
 800207c:	62ea      	str	r2, [r5, #44]	@ 0x2c
 800207e:	e7aa      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002080:	680a      	ldr	r2, [r1, #0]
 8002082:	2a12      	cmp	r2, #18
 8002084:	d1ab      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002086:	4814      	ldr	r0, [pc, #80]	@ (80020d8 <HAL_ADC_ConfigChannel+0x188>)
 8002088:	6842      	ldr	r2, [r0, #4]
 800208a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800208e:	6042      	str	r2, [r0, #4]
 8002090:	e7a5      	b.n	8001fde <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002092:	680a      	ldr	r2, [r1, #0]
 8002094:	3a10      	subs	r2, #16
 8002096:	2a01      	cmp	r2, #1
 8002098:	d8a5      	bhi.n	8001fe6 <HAL_ADC_ConfigChannel+0x96>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800209a:	480f      	ldr	r0, [pc, #60]	@ (80020d8 <HAL_ADC_ConfigChannel+0x188>)
 800209c:	6842      	ldr	r2, [r0, #4]
 800209e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80020a2:	6042      	str	r2, [r0, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020a4:	680a      	ldr	r2, [r1, #0]
 80020a6:	2a10      	cmp	r2, #16
 80020a8:	d19d      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020aa:	4a0c      	ldr	r2, [pc, #48]	@ (80020dc <HAL_ADC_ConfigChannel+0x18c>)
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	490c      	ldr	r1, [pc, #48]	@ (80020e0 <HAL_ADC_ConfigChannel+0x190>)
 80020b0:	fba1 1202 	umull	r1, r2, r1, r2
 80020b4:	0c92      	lsrs	r2, r2, #18
 80020b6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80020ba:	0052      	lsls	r2, r2, #1
 80020bc:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 80020be:	e002      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x176>
        counter--;
 80020c0:	9a01      	ldr	r2, [sp, #4]
 80020c2:	3a01      	subs	r2, #1
 80020c4:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 80020c6:	9a01      	ldr	r2, [sp, #4]
 80020c8:	2a00      	cmp	r2, #0
 80020ca:	d1f9      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x170>
 80020cc:	e78b      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 80020ce:	2002      	movs	r0, #2
 80020d0:	e78c      	b.n	8001fec <HAL_ADC_ConfigChannel+0x9c>
 80020d2:	bf00      	nop
 80020d4:	40012000 	.word	0x40012000
 80020d8:	40012300 	.word	0x40012300
 80020dc:	20000008 	.word	0x20000008
 80020e0:	431bde83 	.word	0x431bde83

080020e4 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80020e4:	2800      	cmp	r0, #0
 80020e6:	db07      	blt.n	80020f8 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e8:	f000 021f 	and.w	r2, r0, #31
 80020ec:	0940      	lsrs	r0, r0, #5
 80020ee:	2301      	movs	r3, #1
 80020f0:	4093      	lsls	r3, r2
 80020f2:	4a02      	ldr	r2, [pc, #8]	@ (80020fc <__NVIC_EnableIRQ+0x18>)
 80020f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000e100 	.word	0xe000e100

08002100 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002100:	2800      	cmp	r0, #0
 8002102:	db08      	blt.n	8002116 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002104:	0109      	lsls	r1, r1, #4
 8002106:	b2c9      	uxtb	r1, r1
 8002108:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800210c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002110:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8002114:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002116:	f000 000f 	and.w	r0, r0, #15
 800211a:	0109      	lsls	r1, r1, #4
 800211c:	b2c9      	uxtb	r1, r1
 800211e:	4b01      	ldr	r3, [pc, #4]	@ (8002124 <__NVIC_SetPriority+0x24>)
 8002120:	5419      	strb	r1, [r3, r0]
  }
}
 8002122:	4770      	bx	lr
 8002124:	e000ed14 	.word	0xe000ed14

08002128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002128:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800212a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212e:	f1c0 0c07 	rsb	ip, r0, #7
 8002132:	f1bc 0f04 	cmp.w	ip, #4
 8002136:	bf28      	it	cs
 8002138:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213c:	1d03      	adds	r3, r0, #4
 800213e:	2b06      	cmp	r3, #6
 8002140:	d90f      	bls.n	8002162 <NVIC_EncodePriority+0x3a>
 8002142:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	f04f 3eff 	mov.w	lr, #4294967295
 8002148:	fa0e f00c 	lsl.w	r0, lr, ip
 800214c:	ea21 0100 	bic.w	r1, r1, r0
 8002150:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002152:	fa0e fe03 	lsl.w	lr, lr, r3
 8002156:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800215a:	ea41 0002 	orr.w	r0, r1, r2
 800215e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002162:	2300      	movs	r3, #0
 8002164:	e7ee      	b.n	8002144 <NVIC_EncodePriority+0x1c>
	...

08002168 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002168:	4a07      	ldr	r2, [pc, #28]	@ (8002188 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800216a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002170:	041b      	lsls	r3, r3, #16
 8002172:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002174:	0200      	lsls	r0, r0, #8
 8002176:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800217a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800217c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002184:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800218c:	b510      	push	{r4, lr}
 800218e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b05      	ldr	r3, [pc, #20]	@ (80021a8 <HAL_NVIC_SetPriority+0x1c>)
 8002192:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002194:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8002198:	f7ff ffc6 	bl	8002128 <NVIC_EncodePriority>
 800219c:	4601      	mov	r1, r0
 800219e:	4620      	mov	r0, r4
 80021a0:	f7ff ffae 	bl	8002100 <__NVIC_SetPriority>
}
 80021a4:	bd10      	pop	{r4, pc}
 80021a6:	bf00      	nop
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ac:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ae:	f7ff ff99 	bl	80020e4 <__NVIC_EnableIRQ>
}
 80021b2:	bd08      	pop	{r3, pc}

080021b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b4:	3801      	subs	r0, #1
 80021b6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80021ba:	d20b      	bcs.n	80021d4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80021c0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c2:	4a05      	ldr	r2, [pc, #20]	@ (80021d8 <HAL_SYSTICK_Config+0x24>)
 80021c4:	21f0      	movs	r1, #240	@ 0xf0
 80021c6:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ca:	2000      	movs	r0, #0
 80021cc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ce:	2207      	movs	r2, #7
 80021d0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80021d4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80021dc:	b170      	cbz	r0, 80021fc <HAL_DAC_Init+0x20>
{
 80021de:	b510      	push	{r4, lr}
 80021e0:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80021e2:	7903      	ldrb	r3, [r0, #4]
 80021e4:	b133      	cbz	r3, 80021f4 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80021e6:	2302      	movs	r3, #2
 80021e8:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021ea:	2000      	movs	r0, #0
 80021ec:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80021ee:	2301      	movs	r3, #1
 80021f0:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 80021f2:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80021f4:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80021f6:	f7ff fb8d 	bl	8001914 <HAL_DAC_MspInit>
 80021fa:	e7f4      	b.n	80021e6 <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 80021fc:	2001      	movs	r0, #1
}
 80021fe:	4770      	bx	lr

08002200 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	460d      	mov	r5, r1
 8002204:	4611      	mov	r1, r2
 8002206:	9a04      	ldr	r2, [sp, #16]
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002208:	2800      	cmp	r0, #0
 800220a:	d061      	beq.n	80022d0 <HAL_DAC_Start_DMA+0xd0>
 800220c:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800220e:	7940      	ldrb	r0, [r0, #5]
 8002210:	2801      	cmp	r0, #1
 8002212:	d05f      	beq.n	80022d4 <HAL_DAC_Start_DMA+0xd4>
 8002214:	2001      	movs	r0, #1
 8002216:	7160      	strb	r0, [r4, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002218:	2002      	movs	r0, #2
 800221a:	7120      	strb	r0, [r4, #4]

  if (Channel == DAC_CHANNEL_1)
 800221c:	2d00      	cmp	r5, #0
 800221e:	d12f      	bne.n	8002280 <HAL_DAC_Start_DMA+0x80>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002220:	68a0      	ldr	r0, [r4, #8]
 8002222:	4e2d      	ldr	r6, [pc, #180]	@ (80022d8 <HAL_DAC_Start_DMA+0xd8>)
 8002224:	63c6      	str	r6, [r0, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002226:	68a0      	ldr	r0, [r4, #8]
 8002228:	4e2c      	ldr	r6, [pc, #176]	@ (80022dc <HAL_DAC_Start_DMA+0xdc>)
 800222a:	6406      	str	r6, [r0, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800222c:	68a0      	ldr	r0, [r4, #8]
 800222e:	4e2c      	ldr	r6, [pc, #176]	@ (80022e0 <HAL_DAC_Start_DMA+0xe0>)
 8002230:	64c6      	str	r6, [r0, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002232:	6826      	ldr	r6, [r4, #0]
 8002234:	6830      	ldr	r0, [r6, #0]
 8002236:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 800223a:	6030      	str	r0, [r6, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800223c:	b122      	cbz	r2, 8002248 <HAL_DAC_Start_DMA+0x48>
 800223e:	2a04      	cmp	r2, #4
 8002240:	d01b      	beq.n	800227a <HAL_DAC_Start_DMA+0x7a>
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
        break;
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002242:	6822      	ldr	r2, [r4, #0]
 8002244:	3210      	adds	r2, #16
        break;
 8002246:	e001      	b.n	800224c <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002248:	6822      	ldr	r2, [r4, #0]
 800224a:	3208      	adds	r2, #8
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 800224c:	2d00      	cmp	r5, #0
 800224e:	d131      	bne.n	80022b4 <HAL_DAC_Start_DMA+0xb4>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002250:	6826      	ldr	r6, [r4, #0]
 8002252:	6830      	ldr	r0, [r6, #0]
 8002254:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
 8002258:	6030      	str	r0, [r6, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800225a:	68a0      	ldr	r0, [r4, #8]
 800225c:	f000 f998 	bl	8002590 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002260:	2300      	movs	r3, #0
 8002262:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8002264:	2800      	cmp	r0, #0
 8002266:	d12e      	bne.n	80022c6 <HAL_DAC_Start_DMA+0xc6>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002268:	6821      	ldr	r1, [r4, #0]
 800226a:	680b      	ldr	r3, [r1, #0]
 800226c:	f005 0510 	and.w	r5, r5, #16
 8002270:	2201      	movs	r2, #1
 8002272:	40aa      	lsls	r2, r5
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8002278:	bd70      	pop	{r4, r5, r6, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800227a:	6822      	ldr	r2, [r4, #0]
 800227c:	320c      	adds	r2, #12
        break;
 800227e:	e7e5      	b.n	800224c <HAL_DAC_Start_DMA+0x4c>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002280:	68e0      	ldr	r0, [r4, #12]
 8002282:	4e18      	ldr	r6, [pc, #96]	@ (80022e4 <HAL_DAC_Start_DMA+0xe4>)
 8002284:	63c6      	str	r6, [r0, #60]	@ 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002286:	68e0      	ldr	r0, [r4, #12]
 8002288:	4e17      	ldr	r6, [pc, #92]	@ (80022e8 <HAL_DAC_Start_DMA+0xe8>)
 800228a:	6406      	str	r6, [r0, #64]	@ 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800228c:	68e0      	ldr	r0, [r4, #12]
 800228e:	4e17      	ldr	r6, [pc, #92]	@ (80022ec <HAL_DAC_Start_DMA+0xec>)
 8002290:	64c6      	str	r6, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002292:	6826      	ldr	r6, [r4, #0]
 8002294:	6830      	ldr	r0, [r6, #0]
 8002296:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 800229a:	6030      	str	r0, [r6, #0]
    switch (Alignment)
 800229c:	b122      	cbz	r2, 80022a8 <HAL_DAC_Start_DMA+0xa8>
 800229e:	2a04      	cmp	r2, #4
 80022a0:	d005      	beq.n	80022ae <HAL_DAC_Start_DMA+0xae>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80022a2:	6822      	ldr	r2, [r4, #0]
 80022a4:	321c      	adds	r2, #28
        break;
 80022a6:	e7d1      	b.n	800224c <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80022a8:	6822      	ldr	r2, [r4, #0]
 80022aa:	3214      	adds	r2, #20
        break;
 80022ac:	e7ce      	b.n	800224c <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80022ae:	6822      	ldr	r2, [r4, #0]
 80022b0:	3218      	adds	r2, #24
        break;
 80022b2:	e7cb      	b.n	800224c <HAL_DAC_Start_DMA+0x4c>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80022b4:	6826      	ldr	r6, [r4, #0]
 80022b6:	6830      	ldr	r0, [r6, #0]
 80022b8:	f040 5000 	orr.w	r0, r0, #536870912	@ 0x20000000
 80022bc:	6030      	str	r0, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80022be:	68e0      	ldr	r0, [r4, #12]
 80022c0:	f000 f966 	bl	8002590 <HAL_DMA_Start_IT>
 80022c4:	e7cc      	b.n	8002260 <HAL_DAC_Start_DMA+0x60>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80022c6:	6923      	ldr	r3, [r4, #16]
 80022c8:	f043 0304 	orr.w	r3, r3, #4
 80022cc:	6123      	str	r3, [r4, #16]
 80022ce:	e7d3      	b.n	8002278 <HAL_DAC_Start_DMA+0x78>
    return HAL_ERROR;
 80022d0:	2001      	movs	r0, #1
 80022d2:	e7d1      	b.n	8002278 <HAL_DAC_Start_DMA+0x78>
  __HAL_LOCK(hdac);
 80022d4:	2002      	movs	r0, #2
 80022d6:	e7cf      	b.n	8002278 <HAL_DAC_Start_DMA+0x78>
 80022d8:	080022f3 	.word	0x080022f3
 80022dc:	08002305 	.word	0x08002305
 80022e0:	08002311 	.word	0x08002311
 80022e4:	08002391 	.word	0x08002391
 80022e8:	080023a1 	.word	0x080023a1
 80022ec:	080023ab 	.word	0x080023ab

080022f0 <HAL_DAC_ConvCpltCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80022f0:	4770      	bx	lr

080022f2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80022f2:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022f4:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80022f6:	4620      	mov	r0, r4
 80022f8:	f7ff fffa 	bl	80022f0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80022fc:	2301      	movs	r3, #1
 80022fe:	7123      	strb	r3, [r4, #4]
}
 8002300:	bd10      	pop	{r4, pc}

08002302 <HAL_DAC_ConvHalfCpltCallbackCh1>:
}
 8002302:	4770      	bx	lr

08002304 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002304:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002306:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8002308:	f7ff fffb 	bl	8002302 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800230c:	bd08      	pop	{r3, pc}

0800230e <HAL_DAC_ErrorCallbackCh1>:
}
 800230e:	4770      	bx	lr

08002310 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002310:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002312:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002314:	6923      	ldr	r3, [r4, #16]
 8002316:	f043 0304 	orr.w	r3, r3, #4
 800231a:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800231c:	4620      	mov	r0, r4
 800231e:	f7ff fff6 	bl	800230e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002322:	2301      	movs	r3, #1
 8002324:	7123      	strb	r3, [r4, #4]
}
 8002326:	bd10      	pop	{r4, pc}

08002328 <HAL_DAC_ConfigChannel>:
  if ((hdac == NULL) || (sConfig == NULL))
 8002328:	b348      	cbz	r0, 800237e <HAL_DAC_ConfigChannel+0x56>
 800232a:	4684      	mov	ip, r0
 800232c:	b349      	cbz	r1, 8002382 <HAL_DAC_ConfigChannel+0x5a>
  __HAL_LOCK(hdac);
 800232e:	7943      	ldrb	r3, [r0, #5]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d028      	beq.n	8002386 <HAL_DAC_ConfigChannel+0x5e>
{
 8002334:	b510      	push	{r4, lr}
  __HAL_LOCK(hdac);
 8002336:	f04f 0e01 	mov.w	lr, #1
 800233a:	f880 e005 	strb.w	lr, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800233e:	2302      	movs	r3, #2
 8002340:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8002342:	6804      	ldr	r4, [r0, #0]
 8002344:	6820      	ldr	r0, [r4, #0]
               << (Channel & 0x10UL));
 8002346:	f002 0210 	and.w	r2, r2, #16
 800234a:	f640 73fe 	movw	r3, #4094	@ 0xffe
 800234e:	4093      	lsls	r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002350:	ea20 0003 	bic.w	r0, r0, r3
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002354:	680b      	ldr	r3, [r1, #0]
 8002356:	6849      	ldr	r1, [r1, #4]
 8002358:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800235a:	4093      	lsls	r3, r2
 800235c:	4303      	orrs	r3, r0
  hdac->Instance->CR = tmpreg1;
 800235e:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002360:	f8dc 0000 	ldr.w	r0, [ip]
 8002364:	6803      	ldr	r3, [r0, #0]
 8002366:	21c0      	movs	r1, #192	@ 0xc0
 8002368:	fa01 f202 	lsl.w	r2, r1, r2
 800236c:	ea23 0302 	bic.w	r3, r3, r2
 8002370:	6003      	str	r3, [r0, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8002372:	f88c e004 	strb.w	lr, [ip, #4]
  __HAL_UNLOCK(hdac);
 8002376:	2000      	movs	r0, #0
 8002378:	f88c 0005 	strb.w	r0, [ip, #5]
}
 800237c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800237e:	2001      	movs	r0, #1
 8002380:	4770      	bx	lr
 8002382:	2001      	movs	r0, #1
 8002384:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8002386:	2002      	movs	r0, #2
}
 8002388:	4770      	bx	lr

0800238a <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800238a:	4770      	bx	lr

0800238c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800238c:	4770      	bx	lr

0800238e <HAL_DACEx_ErrorCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800238e:	4770      	bx	lr

08002390 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002390:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002392:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002394:	4620      	mov	r0, r4
 8002396:	f7ff fff8 	bl	800238a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800239a:	2301      	movs	r3, #1
 800239c:	7123      	strb	r3, [r4, #4]
}
 800239e:	bd10      	pop	{r4, pc}

080023a0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80023a0:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80023a2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80023a4:	f7ff fff2 	bl	800238c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80023a8:	bd08      	pop	{r3, pc}

080023aa <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80023aa:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023ac:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80023ae:	6923      	ldr	r3, [r4, #16]
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80023b6:	4620      	mov	r0, r4
 80023b8:	f7ff ffe9 	bl	800238e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80023bc:	2301      	movs	r3, #1
 80023be:	7123      	strb	r3, [r4, #4]
}
 80023c0:	bd10      	pop	{r4, pc}

080023c2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023c2:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023c4:	6805      	ldr	r5, [r0, #0]
 80023c6:	682c      	ldr	r4, [r5, #0]
 80023c8:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 80023cc:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023ce:	6804      	ldr	r4, [r0, #0]
 80023d0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023d2:	6883      	ldr	r3, [r0, #8]
 80023d4:	2b40      	cmp	r3, #64	@ 0x40
 80023d6:	d005      	beq.n	80023e4 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80023d8:	6803      	ldr	r3, [r0, #0]
 80023da:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80023dc:	6803      	ldr	r3, [r0, #0]
 80023de:	60da      	str	r2, [r3, #12]
  }
}
 80023e0:	bc30      	pop	{r4, r5}
 80023e2:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80023e4:	6803      	ldr	r3, [r0, #0]
 80023e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80023e8:	6803      	ldr	r3, [r0, #0]
 80023ea:	60d9      	str	r1, [r3, #12]
 80023ec:	e7f8      	b.n	80023e0 <DMA_SetConfig+0x1e>
	...

080023f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023f0:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023f2:	6803      	ldr	r3, [r0, #0]
 80023f4:	b2d9      	uxtb	r1, r3
 80023f6:	3910      	subs	r1, #16
 80023f8:	4a0c      	ldr	r2, [pc, #48]	@ (800242c <DMA_CalcBaseAndBitshift+0x3c>)
 80023fa:	fba2 4201 	umull	r4, r2, r2, r1
 80023fe:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002400:	4c0b      	ldr	r4, [pc, #44]	@ (8002430 <DMA_CalcBaseAndBitshift+0x40>)
 8002402:	5ca2      	ldrb	r2, [r4, r2]
 8002404:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002406:	295f      	cmp	r1, #95	@ 0x5f
 8002408:	d909      	bls.n	800241e <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800240a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800240e:	f023 0303 	bic.w	r3, r3, #3
 8002412:	3304      	adds	r3, #4
 8002414:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002416:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8002418:	f85d 4b04 	ldr.w	r4, [sp], #4
 800241c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800241e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002422:	f023 0303 	bic.w	r3, r3, #3
 8002426:	6583      	str	r3, [r0, #88]	@ 0x58
 8002428:	e7f5      	b.n	8002416 <DMA_CalcBaseAndBitshift+0x26>
 800242a:	bf00      	nop
 800242c:	aaaaaaab 	.word	0xaaaaaaab
 8002430:	080062ec 	.word	0x080062ec

08002434 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002434:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002436:	6982      	ldr	r2, [r0, #24]
 8002438:	b992      	cbnz	r2, 8002460 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800243a:	2b01      	cmp	r3, #1
 800243c:	d00a      	beq.n	8002454 <DMA_CheckFifoParam+0x20>
 800243e:	2b02      	cmp	r3, #2
 8002440:	d002      	beq.n	8002448 <DMA_CheckFifoParam+0x14>
 8002442:	b10b      	cbz	r3, 8002448 <DMA_CheckFifoParam+0x14>
 8002444:	2000      	movs	r0, #0
 8002446:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002448:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800244a:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800244e:	d128      	bne.n	80024a2 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8002450:	2000      	movs	r0, #0
 8002452:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002454:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002456:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800245a:	d024      	beq.n	80024a6 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 800245c:	2000      	movs	r0, #0
 800245e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002460:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8002464:	d009      	beq.n	800247a <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002466:	2b02      	cmp	r3, #2
 8002468:	d925      	bls.n	80024b6 <DMA_CheckFifoParam+0x82>
 800246a:	2b03      	cmp	r3, #3
 800246c:	d125      	bne.n	80024ba <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800246e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002470:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002474:	d123      	bne.n	80024be <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8002476:	2000      	movs	r0, #0
 8002478:	4770      	bx	lr
    switch (tmp)
 800247a:	2b03      	cmp	r3, #3
 800247c:	d803      	bhi.n	8002486 <DMA_CheckFifoParam+0x52>
 800247e:	e8df f003 	tbb	[pc, r3]
 8002482:	0414      	.short	0x0414
 8002484:	0a14      	.short	0x0a14
 8002486:	2000      	movs	r0, #0
 8002488:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800248a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800248c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002490:	d10d      	bne.n	80024ae <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002492:	2000      	movs	r0, #0
 8002494:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002496:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002498:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800249c:	d009      	beq.n	80024b2 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800249e:	2000      	movs	r0, #0
 80024a0:	4770      	bx	lr
        status = HAL_ERROR;
 80024a2:	2001      	movs	r0, #1
 80024a4:	4770      	bx	lr
        status = HAL_ERROR;
 80024a6:	2001      	movs	r0, #1
 80024a8:	4770      	bx	lr
      status = HAL_ERROR;
 80024aa:	2001      	movs	r0, #1
 80024ac:	4770      	bx	lr
        status = HAL_ERROR;
 80024ae:	2001      	movs	r0, #1
 80024b0:	4770      	bx	lr
        status = HAL_ERROR;
 80024b2:	2001      	movs	r0, #1
 80024b4:	4770      	bx	lr
      status = HAL_ERROR;
 80024b6:	2001      	movs	r0, #1
 80024b8:	4770      	bx	lr
    switch (tmp)
 80024ba:	2000      	movs	r0, #0
 80024bc:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80024be:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80024c0:	4770      	bx	lr
	...

080024c4 <HAL_DMA_Init>:
{
 80024c4:	b570      	push	{r4, r5, r6, lr}
 80024c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80024c8:	f7ff fb5c 	bl	8001b84 <HAL_GetTick>
  if(hdma == NULL)
 80024cc:	2c00      	cmp	r4, #0
 80024ce:	d05b      	beq.n	8002588 <HAL_DMA_Init+0xc4>
 80024d0:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80024d2:	2302      	movs	r3, #2
 80024d4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 80024d8:	2300      	movs	r3, #0
 80024da:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 80024de:	6822      	ldr	r2, [r4, #0]
 80024e0:	6813      	ldr	r3, [r2, #0]
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e8:	6823      	ldr	r3, [r4, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	f012 0f01 	tst.w	r2, #1
 80024f0:	d00a      	beq.n	8002508 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024f2:	f7ff fb47 	bl	8001b84 <HAL_GetTick>
 80024f6:	1b43      	subs	r3, r0, r5
 80024f8:	2b05      	cmp	r3, #5
 80024fa:	d9f5      	bls.n	80024e8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024fc:	2320      	movs	r3, #32
 80024fe:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002500:	2003      	movs	r0, #3
 8002502:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8002506:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8002508:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800250a:	4920      	ldr	r1, [pc, #128]	@ (800258c <HAL_DMA_Init+0xc8>)
 800250c:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800250e:	6862      	ldr	r2, [r4, #4]
 8002510:	68a0      	ldr	r0, [r4, #8]
 8002512:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002514:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002516:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002518:	6920      	ldr	r0, [r4, #16]
 800251a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251c:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002520:	69a0      	ldr	r0, [r4, #24]
 8002522:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002524:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002526:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002528:	6a20      	ldr	r0, [r4, #32]
 800252a:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800252c:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800252e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002530:	2904      	cmp	r1, #4
 8002532:	d01e      	beq.n	8002572 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8002534:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002536:	6826      	ldr	r6, [r4, #0]
 8002538:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800253a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800253e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002540:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002542:	2b04      	cmp	r3, #4
 8002544:	d107      	bne.n	8002556 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8002546:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002548:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800254a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800254c:	b11b      	cbz	r3, 8002556 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800254e:	4620      	mov	r0, r4
 8002550:	f7ff ff70 	bl	8002434 <DMA_CheckFifoParam>
 8002554:	b990      	cbnz	r0, 800257c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8002556:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002558:	4620      	mov	r0, r4
 800255a:	f7ff ff49 	bl	80023f0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800255e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002560:	233f      	movs	r3, #63	@ 0x3f
 8002562:	4093      	lsls	r3, r2
 8002564:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002566:	2000      	movs	r0, #0
 8002568:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800256a:	2301      	movs	r3, #1
 800256c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8002570:	e7c9      	b.n	8002506 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002572:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002574:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002576:	4301      	orrs	r1, r0
 8002578:	430a      	orrs	r2, r1
 800257a:	e7db      	b.n	8002534 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800257c:	2340      	movs	r3, #64	@ 0x40
 800257e:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002580:	2001      	movs	r0, #1
 8002582:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8002586:	e7be      	b.n	8002506 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8002588:	2001      	movs	r0, #1
 800258a:	e7bc      	b.n	8002506 <HAL_DMA_Init+0x42>
 800258c:	f010803f 	.word	0xf010803f

08002590 <HAL_DMA_Start_IT>:
{
 8002590:	b538      	push	{r3, r4, r5, lr}
 8002592:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002594:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8002596:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 800259a:	2801      	cmp	r0, #1
 800259c:	d02b      	beq.n	80025f6 <HAL_DMA_Start_IT+0x66>
 800259e:	2001      	movs	r0, #1
 80025a0:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80025a4:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 80025a8:	b2c0      	uxtb	r0, r0
 80025aa:	2801      	cmp	r0, #1
 80025ac:	d004      	beq.n	80025b8 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80025ae:	2300      	movs	r3, #0
 80025b0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 80025b4:	2002      	movs	r0, #2
}
 80025b6:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80025b8:	2002      	movs	r0, #2
 80025ba:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025be:	2000      	movs	r0, #0
 80025c0:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025c2:	4620      	mov	r0, r4
 80025c4:	f7ff fefd 	bl	80023c2 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025c8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80025ca:	233f      	movs	r3, #63	@ 0x3f
 80025cc:	4093      	lsls	r3, r2
 80025ce:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025d0:	6822      	ldr	r2, [r4, #0]
 80025d2:	6813      	ldr	r3, [r2, #0]
 80025d4:	f043 0316 	orr.w	r3, r3, #22
 80025d8:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80025da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80025dc:	b123      	cbz	r3, 80025e8 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 80025de:	6822      	ldr	r2, [r4, #0]
 80025e0:	6813      	ldr	r3, [r2, #0]
 80025e2:	f043 0308 	orr.w	r3, r3, #8
 80025e6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80025e8:	6822      	ldr	r2, [r4, #0]
 80025ea:	6813      	ldr	r3, [r2, #0]
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025f2:	2000      	movs	r0, #0
 80025f4:	e7df      	b.n	80025b6 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 80025f6:	2002      	movs	r0, #2
 80025f8:	e7dd      	b.n	80025b6 <HAL_DMA_Start_IT+0x26>
	...

080025fc <HAL_DMA_IRQHandler>:
{
 80025fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025fe:	b083      	sub	sp, #12
 8002600:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002606:	4b72      	ldr	r3, [pc, #456]	@ (80027d0 <HAL_DMA_IRQHandler+0x1d4>)
 8002608:	681d      	ldr	r5, [r3, #0]
 800260a:	4b72      	ldr	r3, [pc, #456]	@ (80027d4 <HAL_DMA_IRQHandler+0x1d8>)
 800260c:	fba3 3505 	umull	r3, r5, r3, r5
 8002610:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002612:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8002614:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002616:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8002618:	2308      	movs	r3, #8
 800261a:	4093      	lsls	r3, r2
 800261c:	4233      	tst	r3, r6
 800261e:	d010      	beq.n	8002642 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002620:	6803      	ldr	r3, [r0, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	f012 0f04 	tst.w	r2, #4
 8002628:	d00b      	beq.n	8002642 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	f022 0204 	bic.w	r2, r2, #4
 8002630:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002632:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8002634:	2308      	movs	r3, #8
 8002636:	4093      	lsls	r3, r2
 8002638:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800263a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002642:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002644:	2301      	movs	r3, #1
 8002646:	4093      	lsls	r3, r2
 8002648:	4233      	tst	r3, r6
 800264a:	d009      	beq.n	8002660 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800264c:	6822      	ldr	r2, [r4, #0]
 800264e:	6952      	ldr	r2, [r2, #20]
 8002650:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8002654:	d004      	beq.n	8002660 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002656:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002658:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800265a:	f043 0302 	orr.w	r3, r3, #2
 800265e:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002660:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002662:	2304      	movs	r3, #4
 8002664:	4093      	lsls	r3, r2
 8002666:	4233      	tst	r3, r6
 8002668:	d009      	beq.n	800267e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800266a:	6822      	ldr	r2, [r4, #0]
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	f012 0f02 	tst.w	r2, #2
 8002672:	d004      	beq.n	800267e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002674:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002676:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002678:	f043 0304 	orr.w	r3, r3, #4
 800267c:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800267e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002680:	2310      	movs	r3, #16
 8002682:	4093      	lsls	r3, r2
 8002684:	4233      	tst	r3, r6
 8002686:	d024      	beq.n	80026d2 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002688:	6822      	ldr	r2, [r4, #0]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	f012 0f08 	tst.w	r2, #8
 8002690:	d01f      	beq.n	80026d2 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002692:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800269c:	d00d      	beq.n	80026ba <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80026a4:	d104      	bne.n	80026b0 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80026a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80026a8:	b19b      	cbz	r3, 80026d2 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80026aa:	4620      	mov	r0, r4
 80026ac:	4798      	blx	r3
 80026ae:	e010      	b.n	80026d2 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026b0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80026b2:	b173      	cbz	r3, 80026d2 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80026b4:	4620      	mov	r0, r4
 80026b6:	4798      	blx	r3
 80026b8:	e00b      	b.n	80026d2 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80026c0:	d103      	bne.n	80026ca <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	f022 0208 	bic.w	r2, r2, #8
 80026c8:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80026ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80026cc:	b10b      	cbz	r3, 80026d2 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80026ce:	4620      	mov	r0, r4
 80026d0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026d2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80026d4:	2320      	movs	r3, #32
 80026d6:	4093      	lsls	r3, r2
 80026d8:	4233      	tst	r3, r6
 80026da:	d055      	beq.n	8002788 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026dc:	6822      	ldr	r2, [r4, #0]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	f012 0f10 	tst.w	r2, #16
 80026e4:	d050      	beq.n	8002788 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026e6:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026e8:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d00e      	beq.n	8002710 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80026fa:	d033      	beq.n	8002764 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002702:	d12a      	bne.n	800275a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8002704:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002706:	2b00      	cmp	r3, #0
 8002708:	d03e      	beq.n	8002788 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800270a:	4620      	mov	r0, r4
 800270c:	4798      	blx	r3
 800270e:	e03b      	b.n	8002788 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002710:	6822      	ldr	r2, [r4, #0]
 8002712:	6813      	ldr	r3, [r2, #0]
 8002714:	f023 0316 	bic.w	r3, r3, #22
 8002718:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800271a:	6822      	ldr	r2, [r4, #0]
 800271c:	6953      	ldr	r3, [r2, #20]
 800271e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002722:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002724:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002726:	b1a3      	cbz	r3, 8002752 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002728:	6822      	ldr	r2, [r4, #0]
 800272a:	6813      	ldr	r3, [r2, #0]
 800272c:	f023 0308 	bic.w	r3, r3, #8
 8002730:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002732:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002734:	233f      	movs	r3, #63	@ 0x3f
 8002736:	4093      	lsls	r3, r2
 8002738:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800273a:	2301      	movs	r3, #1
 800273c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8002740:	2300      	movs	r3, #0
 8002742:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8002746:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002748:	2b00      	cmp	r3, #0
 800274a:	d03f      	beq.n	80027cc <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 800274c:	4620      	mov	r0, r4
 800274e:	4798      	blx	r3
        return;
 8002750:	e03c      	b.n	80027cc <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002752:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e7      	bne.n	8002728 <HAL_DMA_IRQHandler+0x12c>
 8002758:	e7eb      	b.n	8002732 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 800275a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800275c:	b1a3      	cbz	r3, 8002788 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 800275e:	4620      	mov	r0, r4
 8002760:	4798      	blx	r3
 8002762:	e011      	b.n	8002788 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800276a:	d109      	bne.n	8002780 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	f022 0210 	bic.w	r2, r2, #16
 8002772:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002774:	2301      	movs	r3, #1
 8002776:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 800277a:	2300      	movs	r3, #0
 800277c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8002780:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002782:	b10b      	cbz	r3, 8002788 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8002784:	4620      	mov	r0, r4
 8002786:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002788:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800278a:	b1fb      	cbz	r3, 80027cc <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800278c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800278e:	f013 0f01 	tst.w	r3, #1
 8002792:	d017      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002794:	2305      	movs	r3, #5
 8002796:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800279a:	6822      	ldr	r2, [r4, #0]
 800279c:	6813      	ldr	r3, [r2, #0]
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80027a4:	9b01      	ldr	r3, [sp, #4]
 80027a6:	3301      	adds	r3, #1
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	42ab      	cmp	r3, r5
 80027ac:	d804      	bhi.n	80027b8 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f013 0f01 	tst.w	r3, #1
 80027b6:	d1f5      	bne.n	80027a4 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 80027b8:	2301      	movs	r3, #1
 80027ba:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80027be:	2300      	movs	r3, #0
 80027c0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80027c4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80027c6:	b10b      	cbz	r3, 80027cc <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80027c8:	4620      	mov	r0, r4
 80027ca:	4798      	blx	r3
}
 80027cc:	b003      	add	sp, #12
 80027ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027d0:	20000008 	.word	0x20000008
 80027d4:	1b4e81b5 	.word	0x1b4e81b5

080027d8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d8:	2300      	movs	r3, #0
 80027da:	2b0f      	cmp	r3, #15
 80027dc:	f200 80e9 	bhi.w	80029b2 <HAL_GPIO_Init+0x1da>
{
 80027e0:	b570      	push	{r4, r5, r6, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	e065      	b.n	80028b2 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027e6:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80027ec:	2403      	movs	r4, #3
 80027ee:	fa04 f40e 	lsl.w	r4, r4, lr
 80027f2:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027f6:	68cc      	ldr	r4, [r1, #12]
 80027f8:	fa04 f40e 	lsl.w	r4, r4, lr
 80027fc:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80027fe:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002800:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002802:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002806:	684a      	ldr	r2, [r1, #4]
 8002808:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800280c:	409a      	lsls	r2, r3
 800280e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8002810:	6042      	str	r2, [r0, #4]
 8002812:	e05c      	b.n	80028ce <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002814:	08dc      	lsrs	r4, r3, #3
 8002816:	3408      	adds	r4, #8
 8002818:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800281c:	f003 0507 	and.w	r5, r3, #7
 8002820:	00ad      	lsls	r5, r5, #2
 8002822:	f04f 0e0f 	mov.w	lr, #15
 8002826:	fa0e fe05 	lsl.w	lr, lr, r5
 800282a:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800282e:	690a      	ldr	r2, [r1, #16]
 8002830:	40aa      	lsls	r2, r5
 8002832:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002836:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800283a:	e05c      	b.n	80028f6 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800283c:	2207      	movs	r2, #7
 800283e:	e000      	b.n	8002842 <HAL_GPIO_Init+0x6a>
 8002840:	2200      	movs	r2, #0
 8002842:	fa02 f20e 	lsl.w	r2, r2, lr
 8002846:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002848:	3402      	adds	r4, #2
 800284a:	4d5a      	ldr	r5, [pc, #360]	@ (80029b4 <HAL_GPIO_Init+0x1dc>)
 800284c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002850:	4a59      	ldr	r2, [pc, #356]	@ (80029b8 <HAL_GPIO_Init+0x1e0>)
 8002852:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002854:	ea6f 020c 	mvn.w	r2, ip
 8002858:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800285c:	684e      	ldr	r6, [r1, #4]
 800285e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8002862:	d001      	beq.n	8002868 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8002864:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8002868:	4c53      	ldr	r4, [pc, #332]	@ (80029b8 <HAL_GPIO_Init+0x1e0>)
 800286a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800286c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800286e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002872:	684e      	ldr	r6, [r1, #4]
 8002874:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8002878:	d001      	beq.n	800287e <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800287a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 800287e:	4c4e      	ldr	r4, [pc, #312]	@ (80029b8 <HAL_GPIO_Init+0x1e0>)
 8002880:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8002882:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002884:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002888:	684e      	ldr	r6, [r1, #4]
 800288a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800288e:	d001      	beq.n	8002894 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8002890:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8002894:	4c48      	ldr	r4, [pc, #288]	@ (80029b8 <HAL_GPIO_Init+0x1e0>)
 8002896:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002898:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800289a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800289c:	684d      	ldr	r5, [r1, #4]
 800289e:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80028a2:	d001      	beq.n	80028a8 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80028a4:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80028a8:	4c43      	ldr	r4, [pc, #268]	@ (80029b8 <HAL_GPIO_Init+0x1e0>)
 80028aa:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ac:	3301      	adds	r3, #1
 80028ae:	2b0f      	cmp	r3, #15
 80028b0:	d87d      	bhi.n	80029ae <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 80028b2:	2201      	movs	r2, #1
 80028b4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028b6:	680c      	ldr	r4, [r1, #0]
 80028b8:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80028bc:	ea32 0404 	bics.w	r4, r2, r4
 80028c0:	d1f4      	bne.n	80028ac <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c2:	684c      	ldr	r4, [r1, #4]
 80028c4:	f004 0403 	and.w	r4, r4, #3
 80028c8:	3c01      	subs	r4, #1
 80028ca:	2c01      	cmp	r4, #1
 80028cc:	d98b      	bls.n	80027e6 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ce:	684a      	ldr	r2, [r1, #4]
 80028d0:	f002 0203 	and.w	r2, r2, #3
 80028d4:	2a03      	cmp	r2, #3
 80028d6:	d009      	beq.n	80028ec <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80028d8:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028da:	005d      	lsls	r5, r3, #1
 80028dc:	2203      	movs	r2, #3
 80028de:	40aa      	lsls	r2, r5
 80028e0:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e4:	688a      	ldr	r2, [r1, #8]
 80028e6:	40aa      	lsls	r2, r5
 80028e8:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80028ea:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ec:	684a      	ldr	r2, [r1, #4]
 80028ee:	f002 0203 	and.w	r2, r2, #3
 80028f2:	2a02      	cmp	r2, #2
 80028f4:	d08e      	beq.n	8002814 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80028f6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028f8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80028fc:	2203      	movs	r2, #3
 80028fe:	fa02 f20e 	lsl.w	r2, r2, lr
 8002902:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002906:	684a      	ldr	r2, [r1, #4]
 8002908:	f002 0203 	and.w	r2, r2, #3
 800290c:	fa02 f20e 	lsl.w	r2, r2, lr
 8002910:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002912:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002914:	684a      	ldr	r2, [r1, #4]
 8002916:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 800291a:	d0c7      	beq.n	80028ac <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291c:	2200      	movs	r2, #0
 800291e:	9201      	str	r2, [sp, #4]
 8002920:	4a26      	ldr	r2, [pc, #152]	@ (80029bc <HAL_GPIO_Init+0x1e4>)
 8002922:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8002924:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8002928:	6454      	str	r4, [r2, #68]	@ 0x44
 800292a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800292c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002930:	9201      	str	r2, [sp, #4]
 8002932:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002934:	089c      	lsrs	r4, r3, #2
 8002936:	1ca5      	adds	r5, r4, #2
 8002938:	4a1e      	ldr	r2, [pc, #120]	@ (80029b4 <HAL_GPIO_Init+0x1dc>)
 800293a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800293e:	f003 0e03 	and.w	lr, r3, #3
 8002942:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002946:	220f      	movs	r2, #15
 8002948:	fa02 f20e 	lsl.w	r2, r2, lr
 800294c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002950:	4a1b      	ldr	r2, [pc, #108]	@ (80029c0 <HAL_GPIO_Init+0x1e8>)
 8002952:	4290      	cmp	r0, r2
 8002954:	f43f af74 	beq.w	8002840 <HAL_GPIO_Init+0x68>
 8002958:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800295c:	4290      	cmp	r0, r2
 800295e:	d01a      	beq.n	8002996 <HAL_GPIO_Init+0x1be>
 8002960:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002964:	4290      	cmp	r0, r2
 8002966:	d018      	beq.n	800299a <HAL_GPIO_Init+0x1c2>
 8002968:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800296c:	4290      	cmp	r0, r2
 800296e:	d016      	beq.n	800299e <HAL_GPIO_Init+0x1c6>
 8002970:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002974:	4290      	cmp	r0, r2
 8002976:	d014      	beq.n	80029a2 <HAL_GPIO_Init+0x1ca>
 8002978:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800297c:	4290      	cmp	r0, r2
 800297e:	d012      	beq.n	80029a6 <HAL_GPIO_Init+0x1ce>
 8002980:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002984:	4290      	cmp	r0, r2
 8002986:	d010      	beq.n	80029aa <HAL_GPIO_Init+0x1d2>
 8002988:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800298c:	4290      	cmp	r0, r2
 800298e:	f43f af55 	beq.w	800283c <HAL_GPIO_Init+0x64>
 8002992:	2208      	movs	r2, #8
 8002994:	e755      	b.n	8002842 <HAL_GPIO_Init+0x6a>
 8002996:	2201      	movs	r2, #1
 8002998:	e753      	b.n	8002842 <HAL_GPIO_Init+0x6a>
 800299a:	2202      	movs	r2, #2
 800299c:	e751      	b.n	8002842 <HAL_GPIO_Init+0x6a>
 800299e:	2203      	movs	r2, #3
 80029a0:	e74f      	b.n	8002842 <HAL_GPIO_Init+0x6a>
 80029a2:	2204      	movs	r2, #4
 80029a4:	e74d      	b.n	8002842 <HAL_GPIO_Init+0x6a>
 80029a6:	2205      	movs	r2, #5
 80029a8:	e74b      	b.n	8002842 <HAL_GPIO_Init+0x6a>
 80029aa:	2206      	movs	r2, #6
 80029ac:	e749      	b.n	8002842 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80029ae:	b002      	add	sp, #8
 80029b0:	bd70      	pop	{r4, r5, r6, pc}
 80029b2:	4770      	bx	lr
 80029b4:	40013800 	.word	0x40013800
 80029b8:	40013c00 	.word	0x40013c00
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40020000 	.word	0x40020000

080029c4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029c4:	6903      	ldr	r3, [r0, #16]
 80029c6:	4219      	tst	r1, r3
 80029c8:	d001      	beq.n	80029ce <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80029ca:	2001      	movs	r0, #1
 80029cc:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ce:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80029d0:	4770      	bx	lr

080029d2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d2:	b10a      	cbz	r2, 80029d8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029d4:	6181      	str	r1, [r0, #24]
 80029d6:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029d8:	0409      	lsls	r1, r1, #16
 80029da:	6181      	str	r1, [r0, #24]
  }
}
 80029dc:	4770      	bx	lr

080029de <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029de:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029e0:	ea01 0203 	and.w	r2, r1, r3
 80029e4:	ea21 0103 	bic.w	r1, r1, r3
 80029e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80029ec:	6181      	str	r1, [r0, #24]
}
 80029ee:	4770      	bx	lr

080029f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029f0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029f2:	4b05      	ldr	r3, [pc, #20]	@ (8002a08 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	4203      	tst	r3, r0
 80029f8:	d100      	bne.n	80029fc <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80029fa:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029fc:	4b02      	ldr	r3, [pc, #8]	@ (8002a08 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80029fe:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a00:	f7fe fb04 	bl	800100c <HAL_GPIO_EXTI_Callback>
}
 8002a04:	e7f9      	b.n	80029fa <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002a06:	bf00      	nop
 8002a08:	40013c00 	.word	0x40013c00

08002a0c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a0c:	2800      	cmp	r0, #0
 8002a0e:	f000 81e0 	beq.w	8002dd2 <HAL_RCC_OscConfig+0x3c6>
{
 8002a12:	b570      	push	{r4, r5, r6, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a18:	6803      	ldr	r3, [r0, #0]
 8002a1a:	f013 0f01 	tst.w	r3, #1
 8002a1e:	d03b      	beq.n	8002a98 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a20:	4b9f      	ldr	r3, [pc, #636]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 030c 	and.w	r3, r3, #12
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d02c      	beq.n	8002a86 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a2c:	4b9c      	ldr	r3, [pc, #624]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d021      	beq.n	8002a7c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a38:	6863      	ldr	r3, [r4, #4]
 8002a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a3e:	d04f      	beq.n	8002ae0 <HAL_RCC_OscConfig+0xd4>
 8002a40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a44:	d052      	beq.n	8002aec <HAL_RCC_OscConfig+0xe0>
 8002a46:	4b96      	ldr	r3, [pc, #600]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a56:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a58:	6863      	ldr	r3, [r4, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d050      	beq.n	8002b00 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7ff f891 	bl	8001b84 <HAL_GetTick>
 8002a62:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a64:	4b8e      	ldr	r3, [pc, #568]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002a6c:	d114      	bne.n	8002a98 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a6e:	f7ff f889 	bl	8001b84 <HAL_GetTick>
 8002a72:	1b40      	subs	r0, r0, r5
 8002a74:	2864      	cmp	r0, #100	@ 0x64
 8002a76:	d9f5      	bls.n	8002a64 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002a78:	2003      	movs	r0, #3
 8002a7a:	e1b1      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7c:	4b88      	ldr	r3, [pc, #544]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002a84:	d0d8      	beq.n	8002a38 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a86:	4b86      	ldr	r3, [pc, #536]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002a8e:	d003      	beq.n	8002a98 <HAL_RCC_OscConfig+0x8c>
 8002a90:	6863      	ldr	r3, [r4, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 819f 	beq.w	8002dd6 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	f013 0f02 	tst.w	r3, #2
 8002a9e:	d054      	beq.n	8002b4a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aa0:	4b7f      	ldr	r3, [pc, #508]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f013 0f0c 	tst.w	r3, #12
 8002aa8:	d03e      	beq.n	8002b28 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aaa:	4b7d      	ldr	r3, [pc, #500]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d033      	beq.n	8002b1e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ab6:	68e3      	ldr	r3, [r4, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d068      	beq.n	8002b8e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002abc:	4b79      	ldr	r3, [pc, #484]	@ (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac2:	f7ff f85f 	bl	8001b84 <HAL_GetTick>
 8002ac6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac8:	4b75      	ldr	r3, [pc, #468]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f013 0f02 	tst.w	r3, #2
 8002ad0:	d154      	bne.n	8002b7c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ad2:	f7ff f857 	bl	8001b84 <HAL_GetTick>
 8002ad6:	1b40      	subs	r0, r0, r5
 8002ad8:	2802      	cmp	r0, #2
 8002ada:	d9f5      	bls.n	8002ac8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002adc:	2003      	movs	r0, #3
 8002ade:	e17f      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae0:	4a6f      	ldr	r2, [pc, #444]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002ae2:	6813      	ldr	r3, [r2, #0]
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e7b5      	b.n	8002a58 <HAL_RCC_OscConfig+0x4c>
 8002aec:	4b6c      	ldr	r3, [pc, #432]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	e7ab      	b.n	8002a58 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002b00:	f7ff f840 	bl	8001b84 <HAL_GetTick>
 8002b04:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b06:	4b66      	ldr	r3, [pc, #408]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002b0e:	d0c3      	beq.n	8002a98 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b10:	f7ff f838 	bl	8001b84 <HAL_GetTick>
 8002b14:	1b40      	subs	r0, r0, r5
 8002b16:	2864      	cmp	r0, #100	@ 0x64
 8002b18:	d9f5      	bls.n	8002b06 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002b1a:	2003      	movs	r0, #3
 8002b1c:	e160      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b1e:	4b60      	ldr	r3, [pc, #384]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002b26:	d1c6      	bne.n	8002ab6 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b28:	4b5d      	ldr	r3, [pc, #372]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f013 0f02 	tst.w	r3, #2
 8002b30:	d003      	beq.n	8002b3a <HAL_RCC_OscConfig+0x12e>
 8002b32:	68e3      	ldr	r3, [r4, #12]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	f040 8150 	bne.w	8002dda <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3a:	4a59      	ldr	r2, [pc, #356]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002b3c:	6813      	ldr	r3, [r2, #0]
 8002b3e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002b42:	6921      	ldr	r1, [r4, #16]
 8002b44:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002b48:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	f013 0f08 	tst.w	r3, #8
 8002b50:	d042      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b52:	6963      	ldr	r3, [r4, #20]
 8002b54:	b36b      	cbz	r3, 8002bb2 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b56:	4b53      	ldr	r3, [pc, #332]	@ (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5e:	f7ff f811 	bl	8001b84 <HAL_GetTick>
 8002b62:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b64:	4b4e      	ldr	r3, [pc, #312]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002b66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b68:	f013 0f02 	tst.w	r3, #2
 8002b6c:	d134      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b6e:	f7ff f809 	bl	8001b84 <HAL_GetTick>
 8002b72:	1b40      	subs	r0, r0, r5
 8002b74:	2802      	cmp	r0, #2
 8002b76:	d9f5      	bls.n	8002b64 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002b78:	2003      	movs	r0, #3
 8002b7a:	e131      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7c:	4a48      	ldr	r2, [pc, #288]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002b7e:	6813      	ldr	r3, [r2, #0]
 8002b80:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002b84:	6921      	ldr	r1, [r4, #16]
 8002b86:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	e7dd      	b.n	8002b4a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8002b8e:	4b45      	ldr	r3, [pc, #276]	@ (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b94:	f7fe fff6 	bl	8001b84 <HAL_GetTick>
 8002b98:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f013 0f02 	tst.w	r3, #2
 8002ba2:	d0d2      	beq.n	8002b4a <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba4:	f7fe ffee 	bl	8001b84 <HAL_GetTick>
 8002ba8:	1b40      	subs	r0, r0, r5
 8002baa:	2802      	cmp	r0, #2
 8002bac:	d9f5      	bls.n	8002b9a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8002bae:	2003      	movs	r0, #3
 8002bb0:	e116      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bba:	f7fe ffe3 	bl	8001b84 <HAL_GetTick>
 8002bbe:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc0:	4b37      	ldr	r3, [pc, #220]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bc4:	f013 0f02 	tst.w	r3, #2
 8002bc8:	d006      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bca:	f7fe ffdb 	bl	8001b84 <HAL_GetTick>
 8002bce:	1b40      	subs	r0, r0, r5
 8002bd0:	2802      	cmp	r0, #2
 8002bd2:	d9f5      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002bd4:	2003      	movs	r0, #3
 8002bd6:	e103      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd8:	6823      	ldr	r3, [r4, #0]
 8002bda:	f013 0f04 	tst.w	r3, #4
 8002bde:	d077      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be0:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002be8:	d133      	bne.n	8002c52 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	9301      	str	r3, [sp, #4]
 8002bee:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002bf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bf2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002bf6:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfe:	9301      	str	r3, [sp, #4]
 8002c00:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c02:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c04:	4b28      	ldr	r3, [pc, #160]	@ (8002ca8 <HAL_RCC_OscConfig+0x29c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002c0c:	d023      	beq.n	8002c56 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c0e:	68a3      	ldr	r3, [r4, #8]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d034      	beq.n	8002c7e <HAL_RCC_OscConfig+0x272>
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	d038      	beq.n	8002c8a <HAL_RCC_OscConfig+0x27e>
 8002c18:	4b21      	ldr	r3, [pc, #132]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002c1a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c1c:	f022 0201 	bic.w	r2, r2, #1
 8002c20:	671a      	str	r2, [r3, #112]	@ 0x70
 8002c22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c24:	f022 0204 	bic.w	r2, r2, #4
 8002c28:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c2a:	68a3      	ldr	r3, [r4, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d03d      	beq.n	8002cac <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c30:	f7fe ffa8 	bl	8001b84 <HAL_GetTick>
 8002c34:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c36:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3a:	f013 0f02 	tst.w	r3, #2
 8002c3e:	d146      	bne.n	8002cce <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c40:	f7fe ffa0 	bl	8001b84 <HAL_GetTick>
 8002c44:	1b80      	subs	r0, r0, r6
 8002c46:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002c4a:	4298      	cmp	r0, r3
 8002c4c:	d9f3      	bls.n	8002c36 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002c4e:	2003      	movs	r0, #3
 8002c50:	e0c6      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8002c52:	2500      	movs	r5, #0
 8002c54:	e7d6      	b.n	8002c04 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c56:	4a14      	ldr	r2, [pc, #80]	@ (8002ca8 <HAL_RCC_OscConfig+0x29c>)
 8002c58:	6813      	ldr	r3, [r2, #0]
 8002c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c5e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002c60:	f7fe ff90 	bl	8001b84 <HAL_GetTick>
 8002c64:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c66:	4b10      	ldr	r3, [pc, #64]	@ (8002ca8 <HAL_RCC_OscConfig+0x29c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002c6e:	d1ce      	bne.n	8002c0e <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c70:	f7fe ff88 	bl	8001b84 <HAL_GetTick>
 8002c74:	1b80      	subs	r0, r0, r6
 8002c76:	2802      	cmp	r0, #2
 8002c78:	d9f5      	bls.n	8002c66 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002c7a:	2003      	movs	r0, #3
 8002c7c:	e0b0      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002c80:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c88:	e7cf      	b.n	8002c2a <HAL_RCC_OscConfig+0x21e>
 8002c8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <HAL_RCC_OscConfig+0x294>)
 8002c8c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c8e:	f042 0204 	orr.w	r2, r2, #4
 8002c92:	671a      	str	r2, [r3, #112]	@ 0x70
 8002c94:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	671a      	str	r2, [r3, #112]	@ 0x70
 8002c9c:	e7c5      	b.n	8002c2a <HAL_RCC_OscConfig+0x21e>
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	42470000 	.word	0x42470000
 8002ca8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cac:	f7fe ff6a 	bl	8001b84 <HAL_GetTick>
 8002cb0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb2:	4b52      	ldr	r3, [pc, #328]	@ (8002dfc <HAL_RCC_OscConfig+0x3f0>)
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb6:	f013 0f02 	tst.w	r3, #2
 8002cba:	d008      	beq.n	8002cce <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cbc:	f7fe ff62 	bl	8001b84 <HAL_GetTick>
 8002cc0:	1b80      	subs	r0, r0, r6
 8002cc2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002cc6:	4298      	cmp	r0, r3
 8002cc8:	d9f3      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002cca:	2003      	movs	r0, #3
 8002ccc:	e088      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cce:	b9ed      	cbnz	r5, 8002d0c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cd0:	69a3      	ldr	r3, [r4, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 8083 	beq.w	8002dde <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cd8:	4a48      	ldr	r2, [pc, #288]	@ (8002dfc <HAL_RCC_OscConfig+0x3f0>)
 8002cda:	6892      	ldr	r2, [r2, #8]
 8002cdc:	f002 020c 	and.w	r2, r2, #12
 8002ce0:	2a08      	cmp	r2, #8
 8002ce2:	d051      	beq.n	8002d88 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d017      	beq.n	8002d18 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce8:	4b45      	ldr	r3, [pc, #276]	@ (8002e00 <HAL_RCC_OscConfig+0x3f4>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cee:	f7fe ff49 	bl	8001b84 <HAL_GetTick>
 8002cf2:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf4:	4b41      	ldr	r3, [pc, #260]	@ (8002dfc <HAL_RCC_OscConfig+0x3f0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002cfc:	d042      	beq.n	8002d84 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cfe:	f7fe ff41 	bl	8001b84 <HAL_GetTick>
 8002d02:	1b00      	subs	r0, r0, r4
 8002d04:	2802      	cmp	r0, #2
 8002d06:	d9f5      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002d08:	2003      	movs	r0, #3
 8002d0a:	e069      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0c:	4a3b      	ldr	r2, [pc, #236]	@ (8002dfc <HAL_RCC_OscConfig+0x3f0>)
 8002d0e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002d10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d16:	e7db      	b.n	8002cd0 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002d18:	4b39      	ldr	r3, [pc, #228]	@ (8002e00 <HAL_RCC_OscConfig+0x3f4>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002d1e:	f7fe ff31 	bl	8001b84 <HAL_GetTick>
 8002d22:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d24:	4b35      	ldr	r3, [pc, #212]	@ (8002dfc <HAL_RCC_OscConfig+0x3f0>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002d2c:	d006      	beq.n	8002d3c <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2e:	f7fe ff29 	bl	8001b84 <HAL_GetTick>
 8002d32:	1b40      	subs	r0, r0, r5
 8002d34:	2802      	cmp	r0, #2
 8002d36:	d9f5      	bls.n	8002d24 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002d38:	2003      	movs	r0, #3
 8002d3a:	e051      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d3c:	69e3      	ldr	r3, [r4, #28]
 8002d3e:	6a22      	ldr	r2, [r4, #32]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002d44:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002d48:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002d4a:	0852      	lsrs	r2, r2, #1
 8002d4c:	3a01      	subs	r2, #1
 8002d4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d52:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002d54:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002d58:	4a28      	ldr	r2, [pc, #160]	@ (8002dfc <HAL_RCC_OscConfig+0x3f0>)
 8002d5a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002d5c:	4b28      	ldr	r3, [pc, #160]	@ (8002e00 <HAL_RCC_OscConfig+0x3f4>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002d62:	f7fe ff0f 	bl	8001b84 <HAL_GetTick>
 8002d66:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d68:	4b24      	ldr	r3, [pc, #144]	@ (8002dfc <HAL_RCC_OscConfig+0x3f0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002d70:	d106      	bne.n	8002d80 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d72:	f7fe ff07 	bl	8001b84 <HAL_GetTick>
 8002d76:	1b00      	subs	r0, r0, r4
 8002d78:	2802      	cmp	r0, #2
 8002d7a:	d9f5      	bls.n	8002d68 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002d7c:	2003      	movs	r0, #3
 8002d7e:	e02f      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002d80:	2000      	movs	r0, #0
 8002d82:	e02d      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
 8002d84:	2000      	movs	r0, #0
 8002d86:	e02b      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d02b      	beq.n	8002de4 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dfc <HAL_RCC_OscConfig+0x3f0>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d90:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002d94:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d96:	4291      	cmp	r1, r2
 8002d98:	d126      	bne.n	8002de8 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d9e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da0:	428a      	cmp	r2, r1
 8002da2:	d123      	bne.n	8002dec <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002da4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da6:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002daa:	401a      	ands	r2, r3
 8002dac:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002db0:	d11e      	bne.n	8002df0 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002db2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002db6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002db8:	0852      	lsrs	r2, r2, #1
 8002dba:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dbc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002dc0:	d118      	bne.n	8002df4 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dc2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002dc6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002dcc:	d114      	bne.n	8002df8 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002dce:	2000      	movs	r0, #0
 8002dd0:	e006      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002dd2:	2001      	movs	r0, #1
}
 8002dd4:	4770      	bx	lr
        return HAL_ERROR;
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	e002      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002dda:	2001      	movs	r0, #1
 8002ddc:	e000      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002dde:	2000      	movs	r0, #0
}
 8002de0:	b002      	add	sp, #8
 8002de2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002de4:	2001      	movs	r0, #1
 8002de6:	e7fb      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002de8:	2001      	movs	r0, #1
 8002dea:	e7f9      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
 8002dec:	2001      	movs	r0, #1
 8002dee:	e7f7      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
 8002df0:	2001      	movs	r0, #1
 8002df2:	e7f5      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
 8002df4:	2001      	movs	r0, #1
 8002df6:	e7f3      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
 8002df8:	2001      	movs	r0, #1
 8002dfa:	e7f1      	b.n	8002de0 <HAL_RCC_OscConfig+0x3d4>
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	42470000 	.word	0x42470000

08002e04 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002e04:	4b01      	ldr	r3, [pc, #4]	@ (8002e0c <HAL_RCC_EnableCSS+0x8>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002e0a:	4770      	bx	lr
 8002e0c:	42470000 	.word	0x42470000

08002e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e10:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e12:	4b26      	ldr	r3, [pc, #152]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d041      	beq.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x92>
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d141      	bne.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e22:	4b22      	ldr	r3, [pc, #136]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002e30:	d012      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e32:	4b1e      	ldr	r3, [pc, #120]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e34:	6859      	ldr	r1, [r3, #4]
 8002e36:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002e3a:	481d      	ldr	r0, [pc, #116]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	fba1 0100 	umull	r0, r1, r1, r0
 8002e42:	f7fd fdad 	bl	80009a0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e46:	4b19      	ldr	r3, [pc, #100]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002e4e:	3301      	adds	r3, #1
 8002e50:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002e52:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002e56:	e027      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e58:	4b14      	ldr	r3, [pc, #80]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e5a:	6858      	ldr	r0, [r3, #4]
 8002e5c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002e60:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002e64:	ebbc 0c00 	subs.w	ip, ip, r0
 8002e68:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002e6c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002e70:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002e74:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002e78:	ebb1 010c 	subs.w	r1, r1, ip
 8002e7c:	eb63 030e 	sbc.w	r3, r3, lr
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e86:	00c9      	lsls	r1, r1, #3
 8002e88:	eb11 0c00 	adds.w	ip, r1, r0
 8002e8c:	f143 0300 	adc.w	r3, r3, #0
 8002e90:	0299      	lsls	r1, r3, #10
 8002e92:	2300      	movs	r3, #0
 8002e94:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002e98:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002e9c:	f7fd fd80 	bl	80009a0 <__aeabi_uldivmod>
 8002ea0:	e7d1      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8002ea2:	4803      	ldr	r0, [pc, #12]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ea4:	e000      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x98>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ea6:	4803      	ldr	r0, [pc, #12]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002ea8:	bd08      	pop	{r3, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	017d7840 	.word	0x017d7840
 8002eb4:	00f42400 	.word	0x00f42400

08002eb8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002eb8:	2800      	cmp	r0, #0
 8002eba:	f000 809b 	beq.w	8002ff4 <HAL_RCC_ClockConfig+0x13c>
{
 8002ebe:	b570      	push	{r4, r5, r6, lr}
 8002ec0:	460d      	mov	r5, r1
 8002ec2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec4:	4b4f      	ldr	r3, [pc, #316]	@ (8003004 <HAL_RCC_ClockConfig+0x14c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	428b      	cmp	r3, r1
 8002ece:	d208      	bcs.n	8002ee2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed0:	b2cb      	uxtb	r3, r1
 8002ed2:	4a4c      	ldr	r2, [pc, #304]	@ (8003004 <HAL_RCC_ClockConfig+0x14c>)
 8002ed4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	6813      	ldr	r3, [r2, #0]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	428b      	cmp	r3, r1
 8002ede:	f040 808b 	bne.w	8002ff8 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	f013 0f02 	tst.w	r3, #2
 8002ee8:	d017      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eea:	f013 0f04 	tst.w	r3, #4
 8002eee:	d004      	beq.n	8002efa <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ef0:	4a45      	ldr	r2, [pc, #276]	@ (8003008 <HAL_RCC_ClockConfig+0x150>)
 8002ef2:	6893      	ldr	r3, [r2, #8]
 8002ef4:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ef8:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	f013 0f08 	tst.w	r3, #8
 8002f00:	d004      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f02:	4a41      	ldr	r2, [pc, #260]	@ (8003008 <HAL_RCC_ClockConfig+0x150>)
 8002f04:	6893      	ldr	r3, [r2, #8]
 8002f06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f0a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f0c:	4a3e      	ldr	r2, [pc, #248]	@ (8003008 <HAL_RCC_ClockConfig+0x150>)
 8002f0e:	6893      	ldr	r3, [r2, #8]
 8002f10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f14:	68a1      	ldr	r1, [r4, #8]
 8002f16:	430b      	orrs	r3, r1
 8002f18:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	f013 0f01 	tst.w	r3, #1
 8002f20:	d032      	beq.n	8002f88 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f22:	6863      	ldr	r3, [r4, #4]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d021      	beq.n	8002f6c <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f28:	1e9a      	subs	r2, r3, #2
 8002f2a:	2a01      	cmp	r2, #1
 8002f2c:	d925      	bls.n	8002f7a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2e:	4a36      	ldr	r2, [pc, #216]	@ (8003008 <HAL_RCC_ClockConfig+0x150>)
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	f012 0f02 	tst.w	r2, #2
 8002f36:	d061      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f38:	4933      	ldr	r1, [pc, #204]	@ (8003008 <HAL_RCC_ClockConfig+0x150>)
 8002f3a:	688a      	ldr	r2, [r1, #8]
 8002f3c:	f022 0203 	bic.w	r2, r2, #3
 8002f40:	4313      	orrs	r3, r2
 8002f42:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002f44:	f7fe fe1e 	bl	8001b84 <HAL_GetTick>
 8002f48:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8003008 <HAL_RCC_ClockConfig+0x150>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	6862      	ldr	r2, [r4, #4]
 8002f54:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002f58:	d016      	beq.n	8002f88 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5a:	f7fe fe13 	bl	8001b84 <HAL_GetTick>
 8002f5e:	1b80      	subs	r0, r0, r6
 8002f60:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002f64:	4298      	cmp	r0, r3
 8002f66:	d9f0      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002f68:	2003      	movs	r0, #3
 8002f6a:	e042      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6c:	4a26      	ldr	r2, [pc, #152]	@ (8003008 <HAL_RCC_ClockConfig+0x150>)
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002f74:	d1e0      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002f76:	2001      	movs	r0, #1
 8002f78:	e03b      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7a:	4a23      	ldr	r2, [pc, #140]	@ (8003008 <HAL_RCC_ClockConfig+0x150>)
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002f82:	d1d9      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002f84:	2001      	movs	r0, #1
 8002f86:	e034      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f88:	4b1e      	ldr	r3, [pc, #120]	@ (8003004 <HAL_RCC_ClockConfig+0x14c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	42ab      	cmp	r3, r5
 8002f92:	d907      	bls.n	8002fa4 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f94:	b2ea      	uxtb	r2, r5
 8002f96:	4b1b      	ldr	r3, [pc, #108]	@ (8003004 <HAL_RCC_ClockConfig+0x14c>)
 8002f98:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	42ab      	cmp	r3, r5
 8002fa2:	d12d      	bne.n	8003000 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	f013 0f04 	tst.w	r3, #4
 8002faa:	d006      	beq.n	8002fba <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fac:	4a16      	ldr	r2, [pc, #88]	@ (8003008 <HAL_RCC_ClockConfig+0x150>)
 8002fae:	6893      	ldr	r3, [r2, #8]
 8002fb0:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002fb4:	68e1      	ldr	r1, [r4, #12]
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	f013 0f08 	tst.w	r3, #8
 8002fc0:	d007      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fc2:	4a11      	ldr	r2, [pc, #68]	@ (8003008 <HAL_RCC_ClockConfig+0x150>)
 8002fc4:	6893      	ldr	r3, [r2, #8]
 8002fc6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002fca:	6921      	ldr	r1, [r4, #16]
 8002fcc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002fd0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fd2:	f7ff ff1d 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003008 <HAL_RCC_ClockConfig+0x150>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002fde:	4a0b      	ldr	r2, [pc, #44]	@ (800300c <HAL_RCC_ClockConfig+0x154>)
 8002fe0:	5cd3      	ldrb	r3, [r2, r3]
 8002fe2:	40d8      	lsrs	r0, r3
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8003010 <HAL_RCC_ClockConfig+0x158>)
 8002fe6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8003014 <HAL_RCC_ClockConfig+0x15c>)
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	f7fe fd8a 	bl	8001b04 <HAL_InitTick>
  return HAL_OK;
 8002ff0:	2000      	movs	r0, #0
}
 8002ff2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002ff4:	2001      	movs	r0, #1
}
 8002ff6:	4770      	bx	lr
      return HAL_ERROR;
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	e7fa      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	e7f8      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8003000:	2001      	movs	r0, #1
 8003002:	e7f6      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x13a>
 8003004:	40023c00 	.word	0x40023c00
 8003008:	40023800 	.word	0x40023800
 800300c:	080062f4 	.word	0x080062f4
 8003010:	20000008 	.word	0x20000008
 8003014:	20000004 	.word	0x20000004

08003018 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003018:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800301a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800301c:	6a02      	ldr	r2, [r0, #32]
 800301e:	f022 0201 	bic.w	r2, r2, #1
 8003022:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003024:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003026:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003028:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800302c:	680c      	ldr	r4, [r1, #0]
 800302e:	ea44 040c 	orr.w	r4, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003032:	f023 0c02 	bic.w	ip, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003036:	688b      	ldr	r3, [r1, #8]
 8003038:	ea43 030c 	orr.w	r3, r3, ip

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800303c:	4d11      	ldr	r5, [pc, #68]	@ (8003084 <TIM_OC1_SetConfig+0x6c>)
 800303e:	42a8      	cmp	r0, r5
 8003040:	d003      	beq.n	800304a <TIM_OC1_SetConfig+0x32>
 8003042:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003046:	42a8      	cmp	r0, r5
 8003048:	d105      	bne.n	8003056 <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800304a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800304e:	68cd      	ldr	r5, [r1, #12]
 8003050:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003052:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003056:	4d0b      	ldr	r5, [pc, #44]	@ (8003084 <TIM_OC1_SetConfig+0x6c>)
 8003058:	42a8      	cmp	r0, r5
 800305a:	d003      	beq.n	8003064 <TIM_OC1_SetConfig+0x4c>
 800305c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003060:	42a8      	cmp	r0, r5
 8003062:	d107      	bne.n	8003074 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003064:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003068:	694d      	ldr	r5, [r1, #20]
 800306a:	ea45 0c02 	orr.w	ip, r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800306e:	698a      	ldr	r2, [r1, #24]
 8003070:	ea42 020c 	orr.w	r2, r2, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003074:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003076:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003078:	684a      	ldr	r2, [r1, #4]
 800307a:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800307c:	6203      	str	r3, [r0, #32]
}
 800307e:	bc30      	pop	{r4, r5}
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40010000 	.word	0x40010000

08003088 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003088:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800308a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800308c:	6a02      	ldr	r2, [r0, #32]
 800308e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003092:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003094:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003096:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003098:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800309c:	680c      	ldr	r4, [r1, #0]
 800309e:	ea44 050c 	orr.w	r5, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030a2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030a6:	688c      	ldr	r4, [r1, #8]
 80030a8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030ac:	4c11      	ldr	r4, [pc, #68]	@ (80030f4 <TIM_OC3_SetConfig+0x6c>)
 80030ae:	42a0      	cmp	r0, r4
 80030b0:	d003      	beq.n	80030ba <TIM_OC3_SetConfig+0x32>
 80030b2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80030b6:	42a0      	cmp	r0, r4
 80030b8:	d106      	bne.n	80030c8 <TIM_OC3_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030be:	68cc      	ldr	r4, [r1, #12]
 80030c0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c8:	4c0a      	ldr	r4, [pc, #40]	@ (80030f4 <TIM_OC3_SetConfig+0x6c>)
 80030ca:	42a0      	cmp	r0, r4
 80030cc:	d003      	beq.n	80030d6 <TIM_OC3_SetConfig+0x4e>
 80030ce:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80030d2:	42a0      	cmp	r0, r4
 80030d4:	d107      	bne.n	80030e6 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030d6:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030da:	694c      	ldr	r4, [r1, #20]
 80030dc:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030e0:	698c      	ldr	r4, [r1, #24]
 80030e2:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030e8:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030ea:	684a      	ldr	r2, [r1, #4]
 80030ec:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ee:	6203      	str	r3, [r0, #32]
}
 80030f0:	bc30      	pop	{r4, r5}
 80030f2:	4770      	bx	lr
 80030f4:	40010000 	.word	0x40010000

080030f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030f8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030fa:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030fc:	6a02      	ldr	r2, [r0, #32]
 80030fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003102:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003104:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003106:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003108:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800310c:	680d      	ldr	r5, [r1, #0]
 800310e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003112:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003116:	688d      	ldr	r5, [r1, #8]
 8003118:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311c:	4d09      	ldr	r5, [pc, #36]	@ (8003144 <TIM_OC4_SetConfig+0x4c>)
 800311e:	42a8      	cmp	r0, r5
 8003120:	d003      	beq.n	800312a <TIM_OC4_SetConfig+0x32>
 8003122:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003126:	42a8      	cmp	r0, r5
 8003128:	d104      	bne.n	8003134 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800312a:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800312e:	694d      	ldr	r5, [r1, #20]
 8003130:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003134:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003136:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003138:	684a      	ldr	r2, [r1, #4]
 800313a:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800313c:	6203      	str	r3, [r0, #32]
}
 800313e:	bc30      	pop	{r4, r5}
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40010000 	.word	0x40010000

08003148 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003148:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800314a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800314c:	6a04      	ldr	r4, [r0, #32]
 800314e:	f024 0401 	bic.w	r4, r4, #1
 8003152:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003154:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003156:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800315a:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800315e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003162:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003164:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003166:	6203      	str	r3, [r0, #32]
}
 8003168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800316c:	4770      	bx	lr

0800316e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800316e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003170:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003172:	6a04      	ldr	r4, [r0, #32]
 8003174:	f024 0410 	bic.w	r4, r4, #16
 8003178:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800317a:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800317c:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003180:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003184:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003188:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800318c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800318e:	6203      	str	r3, [r0, #32]
}
 8003190:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003194:	4770      	bx	lr

08003196 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003196:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003198:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800319c:	430b      	orrs	r3, r1
 800319e:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031a2:	6083      	str	r3, [r0, #8]
}
 80031a4:	4770      	bx	lr
	...

080031a8 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80031a8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d132      	bne.n	8003218 <HAL_TIM_Base_Start+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 80031b2:	2302      	movs	r3, #2
 80031b4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b8:	6803      	ldr	r3, [r0, #0]
 80031ba:	4a19      	ldr	r2, [pc, #100]	@ (8003220 <HAL_TIM_Base_Start+0x78>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d020      	beq.n	8003202 <HAL_TIM_Base_Start+0x5a>
 80031c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031c4:	d01d      	beq.n	8003202 <HAL_TIM_Base_Start+0x5a>
 80031c6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d019      	beq.n	8003202 <HAL_TIM_Base_Start+0x5a>
 80031ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d015      	beq.n	8003202 <HAL_TIM_Base_Start+0x5a>
 80031d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031da:	4293      	cmp	r3, r2
 80031dc:	d011      	beq.n	8003202 <HAL_TIM_Base_Start+0x5a>
 80031de:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00d      	beq.n	8003202 <HAL_TIM_Base_Start+0x5a>
 80031e6:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d009      	beq.n	8003202 <HAL_TIM_Base_Start+0x5a>
 80031ee:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d005      	beq.n	8003202 <HAL_TIM_Base_Start+0x5a>
    __HAL_TIM_ENABLE(htim);
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	f042 0201 	orr.w	r2, r2, #1
 80031fc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80031fe:	2000      	movs	r0, #0
 8003200:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003208:	2a06      	cmp	r2, #6
 800320a:	d007      	beq.n	800321c <HAL_TIM_Base_Start+0x74>
      __HAL_TIM_ENABLE(htim);
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003214:	2000      	movs	r0, #0
 8003216:	4770      	bx	lr
    return HAL_ERROR;
 8003218:	2001      	movs	r0, #1
 800321a:	4770      	bx	lr
  return HAL_OK;
 800321c:	2000      	movs	r0, #0
}
 800321e:	4770      	bx	lr
 8003220:	40010000 	.word	0x40010000

08003224 <HAL_TIM_PWM_MspInit>:
}
 8003224:	4770      	bx	lr
	...

08003228 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003228:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800322a:	4a34      	ldr	r2, [pc, #208]	@ (80032fc <TIM_Base_SetConfig+0xd4>)
 800322c:	4290      	cmp	r0, r2
 800322e:	d012      	beq.n	8003256 <TIM_Base_SetConfig+0x2e>
 8003230:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003234:	d00f      	beq.n	8003256 <TIM_Base_SetConfig+0x2e>
 8003236:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800323a:	4290      	cmp	r0, r2
 800323c:	d00b      	beq.n	8003256 <TIM_Base_SetConfig+0x2e>
 800323e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003242:	4290      	cmp	r0, r2
 8003244:	d007      	beq.n	8003256 <TIM_Base_SetConfig+0x2e>
 8003246:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800324a:	4290      	cmp	r0, r2
 800324c:	d003      	beq.n	8003256 <TIM_Base_SetConfig+0x2e>
 800324e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003252:	4290      	cmp	r0, r2
 8003254:	d103      	bne.n	800325e <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800325a:	684a      	ldr	r2, [r1, #4]
 800325c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800325e:	4a27      	ldr	r2, [pc, #156]	@ (80032fc <TIM_Base_SetConfig+0xd4>)
 8003260:	4290      	cmp	r0, r2
 8003262:	d02a      	beq.n	80032ba <TIM_Base_SetConfig+0x92>
 8003264:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003268:	d027      	beq.n	80032ba <TIM_Base_SetConfig+0x92>
 800326a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800326e:	4290      	cmp	r0, r2
 8003270:	d023      	beq.n	80032ba <TIM_Base_SetConfig+0x92>
 8003272:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003276:	4290      	cmp	r0, r2
 8003278:	d01f      	beq.n	80032ba <TIM_Base_SetConfig+0x92>
 800327a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800327e:	4290      	cmp	r0, r2
 8003280:	d01b      	beq.n	80032ba <TIM_Base_SetConfig+0x92>
 8003282:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003286:	4290      	cmp	r0, r2
 8003288:	d017      	beq.n	80032ba <TIM_Base_SetConfig+0x92>
 800328a:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800328e:	4290      	cmp	r0, r2
 8003290:	d013      	beq.n	80032ba <TIM_Base_SetConfig+0x92>
 8003292:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003296:	4290      	cmp	r0, r2
 8003298:	d00f      	beq.n	80032ba <TIM_Base_SetConfig+0x92>
 800329a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800329e:	4290      	cmp	r0, r2
 80032a0:	d00b      	beq.n	80032ba <TIM_Base_SetConfig+0x92>
 80032a2:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80032a6:	4290      	cmp	r0, r2
 80032a8:	d007      	beq.n	80032ba <TIM_Base_SetConfig+0x92>
 80032aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80032ae:	4290      	cmp	r0, r2
 80032b0:	d003      	beq.n	80032ba <TIM_Base_SetConfig+0x92>
 80032b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80032b6:	4290      	cmp	r0, r2
 80032b8:	d103      	bne.n	80032c2 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032be:	68ca      	ldr	r2, [r1, #12]
 80032c0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032c6:	694a      	ldr	r2, [r1, #20]
 80032c8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80032ca:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032cc:	688b      	ldr	r3, [r1, #8]
 80032ce:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80032d0:	680b      	ldr	r3, [r1, #0]
 80032d2:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d4:	4b09      	ldr	r3, [pc, #36]	@ (80032fc <TIM_Base_SetConfig+0xd4>)
 80032d6:	4298      	cmp	r0, r3
 80032d8:	d003      	beq.n	80032e2 <TIM_Base_SetConfig+0xba>
 80032da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032de:	4298      	cmp	r0, r3
 80032e0:	d101      	bne.n	80032e6 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 80032e2:	690b      	ldr	r3, [r1, #16]
 80032e4:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80032e6:	2301      	movs	r3, #1
 80032e8:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032ea:	6903      	ldr	r3, [r0, #16]
 80032ec:	f013 0f01 	tst.w	r3, #1
 80032f0:	d003      	beq.n	80032fa <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032f2:	6903      	ldr	r3, [r0, #16]
 80032f4:	f023 0301 	bic.w	r3, r3, #1
 80032f8:	6103      	str	r3, [r0, #16]
}
 80032fa:	4770      	bx	lr
 80032fc:	40010000 	.word	0x40010000

08003300 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003300:	b340      	cbz	r0, 8003354 <HAL_TIM_Base_Init+0x54>
{
 8003302:	b510      	push	{r4, lr}
 8003304:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003306:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800330a:	b1f3      	cbz	r3, 800334a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	2302      	movs	r3, #2
 800330e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003312:	4621      	mov	r1, r4
 8003314:	f851 0b04 	ldr.w	r0, [r1], #4
 8003318:	f7ff ff86 	bl	8003228 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800331c:	2301      	movs	r3, #1
 800331e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003322:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003326:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800332a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800332e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003332:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003336:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800333a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800333e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003342:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003346:	2000      	movs	r0, #0
}
 8003348:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800334a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800334e:	f7fe fb5d 	bl	8001a0c <HAL_TIM_Base_MspInit>
 8003352:	e7db      	b.n	800330c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003354:	2001      	movs	r0, #1
}
 8003356:	4770      	bx	lr

08003358 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003358:	b340      	cbz	r0, 80033ac <HAL_TIM_PWM_Init+0x54>
{
 800335a:	b510      	push	{r4, lr}
 800335c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800335e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003362:	b1f3      	cbz	r3, 80033a2 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	2302      	movs	r3, #2
 8003366:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800336a:	4621      	mov	r1, r4
 800336c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003370:	f7ff ff5a 	bl	8003228 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003374:	2301      	movs	r3, #1
 8003376:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800337e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003382:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003386:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800338a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800338e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003392:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003396:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800339a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800339e:	2000      	movs	r0, #0
}
 80033a0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80033a2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80033a6:	f7ff ff3d 	bl	8003224 <HAL_TIM_PWM_MspInit>
 80033aa:	e7db      	b.n	8003364 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80033ac:	2001      	movs	r0, #1
}
 80033ae:	4770      	bx	lr

080033b0 <TIM_OC2_SetConfig>:
{
 80033b0:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 80033b2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033b4:	6a02      	ldr	r2, [r0, #32]
 80033b6:	f022 0210 	bic.w	r2, r2, #16
 80033ba:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80033bc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80033be:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033c0:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c4:	680d      	ldr	r5, [r1, #0]
 80033c6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80033ca:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033ce:	688d      	ldr	r5, [r1, #8]
 80033d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033d4:	4d11      	ldr	r5, [pc, #68]	@ (800341c <TIM_OC2_SetConfig+0x6c>)
 80033d6:	42a8      	cmp	r0, r5
 80033d8:	d003      	beq.n	80033e2 <TIM_OC2_SetConfig+0x32>
 80033da:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80033de:	42a8      	cmp	r0, r5
 80033e0:	d106      	bne.n	80033f0 <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 80033e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033e6:	68cd      	ldr	r5, [r1, #12]
 80033e8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80033ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f0:	4d0a      	ldr	r5, [pc, #40]	@ (800341c <TIM_OC2_SetConfig+0x6c>)
 80033f2:	42a8      	cmp	r0, r5
 80033f4:	d003      	beq.n	80033fe <TIM_OC2_SetConfig+0x4e>
 80033f6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80033fa:	42a8      	cmp	r0, r5
 80033fc:	d107      	bne.n	800340e <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033fe:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003402:	694d      	ldr	r5, [r1, #20]
 8003404:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003408:	698d      	ldr	r5, [r1, #24]
 800340a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800340e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003410:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003412:	684a      	ldr	r2, [r1, #4]
 8003414:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8003416:	6203      	str	r3, [r0, #32]
}
 8003418:	bc30      	pop	{r4, r5}
 800341a:	4770      	bx	lr
 800341c:	40010000 	.word	0x40010000

08003420 <HAL_TIM_PWM_ConfigChannel>:
{
 8003420:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003422:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003426:	2b01      	cmp	r3, #1
 8003428:	d066      	beq.n	80034f8 <HAL_TIM_PWM_ConfigChannel+0xd8>
 800342a:	4604      	mov	r4, r0
 800342c:	460d      	mov	r5, r1
 800342e:	2301      	movs	r3, #1
 8003430:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003434:	2a0c      	cmp	r2, #12
 8003436:	d85a      	bhi.n	80034ee <HAL_TIM_PWM_ConfigChannel+0xce>
 8003438:	e8df f002 	tbb	[pc, r2]
 800343c:	59595907 	.word	0x59595907
 8003440:	5959591b 	.word	0x5959591b
 8003444:	59595930 	.word	0x59595930
 8003448:	44          	.byte	0x44
 8003449:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800344a:	6800      	ldr	r0, [r0, #0]
 800344c:	f7ff fde4 	bl	8003018 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003450:	6822      	ldr	r2, [r4, #0]
 8003452:	6993      	ldr	r3, [r2, #24]
 8003454:	f043 0308 	orr.w	r3, r3, #8
 8003458:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800345a:	6822      	ldr	r2, [r4, #0]
 800345c:	6993      	ldr	r3, [r2, #24]
 800345e:	f023 0304 	bic.w	r3, r3, #4
 8003462:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003464:	6822      	ldr	r2, [r4, #0]
 8003466:	6993      	ldr	r3, [r2, #24]
 8003468:	6929      	ldr	r1, [r5, #16]
 800346a:	430b      	orrs	r3, r1
 800346c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800346e:	2000      	movs	r0, #0
      break;
 8003470:	e03e      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003472:	6800      	ldr	r0, [r0, #0]
 8003474:	f7ff ff9c 	bl	80033b0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003478:	6822      	ldr	r2, [r4, #0]
 800347a:	6993      	ldr	r3, [r2, #24]
 800347c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003480:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003482:	6822      	ldr	r2, [r4, #0]
 8003484:	6993      	ldr	r3, [r2, #24]
 8003486:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800348a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800348c:	6822      	ldr	r2, [r4, #0]
 800348e:	6993      	ldr	r3, [r2, #24]
 8003490:	6929      	ldr	r1, [r5, #16]
 8003492:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003496:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003498:	2000      	movs	r0, #0
      break;
 800349a:	e029      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800349c:	6800      	ldr	r0, [r0, #0]
 800349e:	f7ff fdf3 	bl	8003088 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034a2:	6822      	ldr	r2, [r4, #0]
 80034a4:	69d3      	ldr	r3, [r2, #28]
 80034a6:	f043 0308 	orr.w	r3, r3, #8
 80034aa:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034ac:	6822      	ldr	r2, [r4, #0]
 80034ae:	69d3      	ldr	r3, [r2, #28]
 80034b0:	f023 0304 	bic.w	r3, r3, #4
 80034b4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034b6:	6822      	ldr	r2, [r4, #0]
 80034b8:	69d3      	ldr	r3, [r2, #28]
 80034ba:	6929      	ldr	r1, [r5, #16]
 80034bc:	430b      	orrs	r3, r1
 80034be:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80034c0:	2000      	movs	r0, #0
      break;
 80034c2:	e015      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034c4:	6800      	ldr	r0, [r0, #0]
 80034c6:	f7ff fe17 	bl	80030f8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034ca:	6822      	ldr	r2, [r4, #0]
 80034cc:	69d3      	ldr	r3, [r2, #28]
 80034ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80034d2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034d4:	6822      	ldr	r2, [r4, #0]
 80034d6:	69d3      	ldr	r3, [r2, #28]
 80034d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034dc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034de:	6822      	ldr	r2, [r4, #0]
 80034e0:	69d3      	ldr	r3, [r2, #28]
 80034e2:	6929      	ldr	r1, [r5, #16]
 80034e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80034e8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80034ea:	2000      	movs	r0, #0
      break;
 80034ec:	e000      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 80034ee:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80034f0:	2300      	movs	r3, #0
 80034f2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80034f6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80034f8:	2002      	movs	r0, #2
 80034fa:	e7fc      	b.n	80034f6 <HAL_TIM_PWM_ConfigChannel+0xd6>

080034fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034fc:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034fe:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003500:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003504:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003508:	430a      	orrs	r2, r1
 800350a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800350e:	6082      	str	r2, [r0, #8]
}
 8003510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003516:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800351a:	2b01      	cmp	r3, #1
 800351c:	d078      	beq.n	8003610 <HAL_TIM_ConfigClockSource+0xfa>
{
 800351e:	b510      	push	{r4, lr}
 8003520:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003522:	2301      	movs	r3, #1
 8003524:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	2302      	movs	r3, #2
 800352a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800352e:	6802      	ldr	r2, [r0, #0]
 8003530:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003532:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003536:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800353a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800353c:	680b      	ldr	r3, [r1, #0]
 800353e:	2b60      	cmp	r3, #96	@ 0x60
 8003540:	d04c      	beq.n	80035dc <HAL_TIM_ConfigClockSource+0xc6>
 8003542:	d829      	bhi.n	8003598 <HAL_TIM_ConfigClockSource+0x82>
 8003544:	2b40      	cmp	r3, #64	@ 0x40
 8003546:	d054      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0xdc>
 8003548:	d90c      	bls.n	8003564 <HAL_TIM_ConfigClockSource+0x4e>
 800354a:	2b50      	cmp	r3, #80	@ 0x50
 800354c:	d122      	bne.n	8003594 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800354e:	68ca      	ldr	r2, [r1, #12]
 8003550:	6849      	ldr	r1, [r1, #4]
 8003552:	6800      	ldr	r0, [r0, #0]
 8003554:	f7ff fdf8 	bl	8003148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003558:	2150      	movs	r1, #80	@ 0x50
 800355a:	6820      	ldr	r0, [r4, #0]
 800355c:	f7ff fe1b 	bl	8003196 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003560:	2000      	movs	r0, #0
      break;
 8003562:	e005      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003564:	2b20      	cmp	r3, #32
 8003566:	d00d      	beq.n	8003584 <HAL_TIM_ConfigClockSource+0x6e>
 8003568:	d909      	bls.n	800357e <HAL_TIM_ConfigClockSource+0x68>
 800356a:	2b30      	cmp	r3, #48	@ 0x30
 800356c:	d00a      	beq.n	8003584 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 800356e:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8003570:	2301      	movs	r3, #1
 8003572:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003576:	2300      	movs	r3, #0
 8003578:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800357c:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800357e:	b10b      	cbz	r3, 8003584 <HAL_TIM_ConfigClockSource+0x6e>
 8003580:	2b10      	cmp	r3, #16
 8003582:	d105      	bne.n	8003590 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003584:	4619      	mov	r1, r3
 8003586:	6820      	ldr	r0, [r4, #0]
 8003588:	f7ff fe05 	bl	8003196 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800358c:	2000      	movs	r0, #0
      break;
 800358e:	e7ef      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8003590:	2001      	movs	r0, #1
 8003592:	e7ed      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x5a>
 8003594:	2001      	movs	r0, #1
 8003596:	e7eb      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003598:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800359c:	d034      	beq.n	8003608 <HAL_TIM_ConfigClockSource+0xf2>
 800359e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035a2:	d10c      	bne.n	80035be <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 80035a4:	68cb      	ldr	r3, [r1, #12]
 80035a6:	684a      	ldr	r2, [r1, #4]
 80035a8:	6889      	ldr	r1, [r1, #8]
 80035aa:	6800      	ldr	r0, [r0, #0]
 80035ac:	f7ff ffa6 	bl	80034fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035b0:	6822      	ldr	r2, [r4, #0]
 80035b2:	6893      	ldr	r3, [r2, #8]
 80035b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035b8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80035ba:	2000      	movs	r0, #0
      break;
 80035bc:	e7d8      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80035be:	2b70      	cmp	r3, #112	@ 0x70
 80035c0:	d124      	bne.n	800360c <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 80035c2:	68cb      	ldr	r3, [r1, #12]
 80035c4:	684a      	ldr	r2, [r1, #4]
 80035c6:	6889      	ldr	r1, [r1, #8]
 80035c8:	6800      	ldr	r0, [r0, #0]
 80035ca:	f7ff ff97 	bl	80034fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035ce:	6822      	ldr	r2, [r4, #0]
 80035d0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035d2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80035d6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80035d8:	2000      	movs	r0, #0
      break;
 80035da:	e7c9      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035dc:	68ca      	ldr	r2, [r1, #12]
 80035de:	6849      	ldr	r1, [r1, #4]
 80035e0:	6800      	ldr	r0, [r0, #0]
 80035e2:	f7ff fdc4 	bl	800316e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035e6:	2160      	movs	r1, #96	@ 0x60
 80035e8:	6820      	ldr	r0, [r4, #0]
 80035ea:	f7ff fdd4 	bl	8003196 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80035ee:	2000      	movs	r0, #0
      break;
 80035f0:	e7be      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035f2:	68ca      	ldr	r2, [r1, #12]
 80035f4:	6849      	ldr	r1, [r1, #4]
 80035f6:	6800      	ldr	r0, [r0, #0]
 80035f8:	f7ff fda6 	bl	8003148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035fc:	2140      	movs	r1, #64	@ 0x40
 80035fe:	6820      	ldr	r0, [r4, #0]
 8003600:	f7ff fdc9 	bl	8003196 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003604:	2000      	movs	r0, #0
      break;
 8003606:	e7b3      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003608:	2000      	movs	r0, #0
 800360a:	e7b1      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 800360c:	2001      	movs	r0, #1
 800360e:	e7af      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8003610:	2002      	movs	r0, #2
}
 8003612:	4770      	bx	lr

08003614 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003614:	f001 011f 	and.w	r1, r1, #31
 8003618:	f04f 0c01 	mov.w	ip, #1
 800361c:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003620:	6a03      	ldr	r3, [r0, #32]
 8003622:	ea23 030c 	bic.w	r3, r3, ip
 8003626:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003628:	6a03      	ldr	r3, [r0, #32]
 800362a:	408a      	lsls	r2, r1
 800362c:	4313      	orrs	r3, r2
 800362e:	6203      	str	r3, [r0, #32]
}
 8003630:	4770      	bx	lr
	...

08003634 <HAL_TIM_PWM_Start>:
{
 8003634:	b510      	push	{r4, lr}
 8003636:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003638:	4608      	mov	r0, r1
 800363a:	2900      	cmp	r1, #0
 800363c:	d142      	bne.n	80036c4 <HAL_TIM_PWM_Start+0x90>
 800363e:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003642:	b2db      	uxtb	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	bf18      	it	ne
 8003648:	2301      	movne	r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d16e      	bne.n	800372c <HAL_TIM_PWM_Start+0xf8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800364e:	2800      	cmp	r0, #0
 8003650:	d151      	bne.n	80036f6 <HAL_TIM_PWM_Start+0xc2>
 8003652:	2302      	movs	r3, #2
 8003654:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003658:	2201      	movs	r2, #1
 800365a:	4601      	mov	r1, r0
 800365c:	6820      	ldr	r0, [r4, #0]
 800365e:	f7ff ffd9 	bl	8003614 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	4a33      	ldr	r2, [pc, #204]	@ (8003734 <HAL_TIM_PWM_Start+0x100>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d003      	beq.n	8003672 <HAL_TIM_PWM_Start+0x3e>
 800366a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800366e:	4293      	cmp	r3, r2
 8003670:	d103      	bne.n	800367a <HAL_TIM_PWM_Start+0x46>
    __HAL_TIM_MOE_ENABLE(htim);
 8003672:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003674:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003678:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	4a2d      	ldr	r2, [pc, #180]	@ (8003734 <HAL_TIM_PWM_Start+0x100>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d049      	beq.n	8003716 <HAL_TIM_PWM_Start+0xe2>
 8003682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003686:	d046      	beq.n	8003716 <HAL_TIM_PWM_Start+0xe2>
 8003688:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800368c:	4293      	cmp	r3, r2
 800368e:	d042      	beq.n	8003716 <HAL_TIM_PWM_Start+0xe2>
 8003690:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003694:	4293      	cmp	r3, r2
 8003696:	d03e      	beq.n	8003716 <HAL_TIM_PWM_Start+0xe2>
 8003698:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800369c:	4293      	cmp	r3, r2
 800369e:	d03a      	beq.n	8003716 <HAL_TIM_PWM_Start+0xe2>
 80036a0:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d036      	beq.n	8003716 <HAL_TIM_PWM_Start+0xe2>
 80036a8:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d032      	beq.n	8003716 <HAL_TIM_PWM_Start+0xe2>
 80036b0:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d02e      	beq.n	8003716 <HAL_TIM_PWM_Start+0xe2>
    __HAL_TIM_ENABLE(htim);
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80036c0:	2000      	movs	r0, #0
 80036c2:	e032      	b.n	800372a <HAL_TIM_PWM_Start+0xf6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036c4:	2904      	cmp	r1, #4
 80036c6:	d008      	beq.n	80036da <HAL_TIM_PWM_Start+0xa6>
 80036c8:	2908      	cmp	r1, #8
 80036ca:	d00d      	beq.n	80036e8 <HAL_TIM_PWM_Start+0xb4>
 80036cc:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	3b01      	subs	r3, #1
 80036d4:	bf18      	it	ne
 80036d6:	2301      	movne	r3, #1
 80036d8:	e7b7      	b.n	800364a <HAL_TIM_PWM_Start+0x16>
 80036da:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	bf18      	it	ne
 80036e4:	2301      	movne	r3, #1
 80036e6:	e7b0      	b.n	800364a <HAL_TIM_PWM_Start+0x16>
 80036e8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	bf18      	it	ne
 80036f2:	2301      	movne	r3, #1
 80036f4:	e7a9      	b.n	800364a <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036f6:	2804      	cmp	r0, #4
 80036f8:	d005      	beq.n	8003706 <HAL_TIM_PWM_Start+0xd2>
 80036fa:	2808      	cmp	r0, #8
 80036fc:	d007      	beq.n	800370e <HAL_TIM_PWM_Start+0xda>
 80036fe:	2302      	movs	r3, #2
 8003700:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8003704:	e7a8      	b.n	8003658 <HAL_TIM_PWM_Start+0x24>
 8003706:	2302      	movs	r3, #2
 8003708:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800370c:	e7a4      	b.n	8003658 <HAL_TIM_PWM_Start+0x24>
 800370e:	2302      	movs	r3, #2
 8003710:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003714:	e7a0      	b.n	8003658 <HAL_TIM_PWM_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800371c:	2a06      	cmp	r2, #6
 800371e:	d007      	beq.n	8003730 <HAL_TIM_PWM_Start+0xfc>
      __HAL_TIM_ENABLE(htim);
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003728:	2000      	movs	r0, #0
}
 800372a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800372c:	2001      	movs	r0, #1
 800372e:	e7fc      	b.n	800372a <HAL_TIM_PWM_Start+0xf6>
  return HAL_OK;
 8003730:	2000      	movs	r0, #0
 8003732:	e7fa      	b.n	800372a <HAL_TIM_PWM_Start+0xf6>
 8003734:	40010000 	.word	0x40010000

08003738 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003738:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800373c:	2a01      	cmp	r2, #1
 800373e:	d03d      	beq.n	80037bc <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8003740:	b410      	push	{r4}
 8003742:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003744:	2201      	movs	r2, #1
 8003746:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374a:	2202      	movs	r2, #2
 800374c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003750:	6802      	ldr	r2, [r0, #0]
 8003752:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003754:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003756:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800375a:	6808      	ldr	r0, [r1, #0]
 800375c:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003760:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4816      	ldr	r0, [pc, #88]	@ (80037c0 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8003766:	4282      	cmp	r2, r0
 8003768:	d01a      	beq.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800376a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800376e:	d017      	beq.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003770:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8003774:	4282      	cmp	r2, r0
 8003776:	d013      	beq.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003778:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800377c:	4282      	cmp	r2, r0
 800377e:	d00f      	beq.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003780:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003784:	4282      	cmp	r2, r0
 8003786:	d00b      	beq.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003788:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 800378c:	4282      	cmp	r2, r0
 800378e:	d007      	beq.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003790:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8003794:	4282      	cmp	r2, r0
 8003796:	d003      	beq.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003798:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 800379c:	4282      	cmp	r2, r0
 800379e:	d104      	bne.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037a0:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037a4:	6849      	ldr	r1, [r1, #4]
 80037a6:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037a8:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037b0:	2000      	movs	r0, #0
 80037b2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80037b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037ba:	4770      	bx	lr
  __HAL_LOCK(htim);
 80037bc:	2002      	movs	r0, #2
}
 80037be:	4770      	bx	lr
 80037c0:	40010000 	.word	0x40010000

080037c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037c4:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80037c6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d021      	beq.n	8003812 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 80037ce:	2301      	movs	r3, #1
 80037d0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037d4:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037da:	6888      	ldr	r0, [r1, #8]
 80037dc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037e2:	6848      	ldr	r0, [r1, #4]
 80037e4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037ea:	6808      	ldr	r0, [r1, #0]
 80037ec:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037f2:	6908      	ldr	r0, [r1, #16]
 80037f4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037fa:	6948      	ldr	r0, [r1, #20]
 80037fc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003802:	69c9      	ldr	r1, [r1, #28]
 8003804:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003806:	6811      	ldr	r1, [r2, #0]
 8003808:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800380a:	2000      	movs	r0, #0
 800380c:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8003810:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003812:	2002      	movs	r0, #2
}
 8003814:	4770      	bx	lr
	...

08003818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003818:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003850 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800381c:	f000 f826 	bl	800386c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003820:	480c      	ldr	r0, [pc, #48]	@ (8003854 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003822:	490d      	ldr	r1, [pc, #52]	@ (8003858 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003824:	4a0d      	ldr	r2, [pc, #52]	@ (800385c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003828:	e002      	b.n	8003830 <LoopCopyDataInit>

0800382a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800382a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800382c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800382e:	3304      	adds	r3, #4

08003830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003834:	d3f9      	bcc.n	800382a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003836:	4a0a      	ldr	r2, [pc, #40]	@ (8003860 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003838:	4c0a      	ldr	r4, [pc, #40]	@ (8003864 <LoopFillZerobss+0x22>)
  movs r3, #0
 800383a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800383c:	e001      	b.n	8003842 <LoopFillZerobss>

0800383e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800383e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003840:	3204      	adds	r2, #4

08003842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003844:	d3fb      	bcc.n	800383e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003846:	f002 fcd9 	bl	80061fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800384a:	f7fd fcad 	bl	80011a8 <main>
  bx  lr    
 800384e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003850:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003858:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800385c:	0800652c 	.word	0x0800652c
  ldr r2, =_sbss
 8003860:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003864:	20001e5c 	.word	0x20001e5c

08003868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003868:	e7fe      	b.n	8003868 <ADC_IRQHandler>
	...

0800386c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800386c:	4a03      	ldr	r2, [pc, #12]	@ (800387c <SystemInit+0x10>)
 800386e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003872:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003876:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800387a:	4770      	bx	lr
 800387c:	e000ed00 	.word	0xe000ed00

08003880 <CPU_DCache_LineSizeGet>:
*********************************************************************************************************
*/

static  CPU_INT32U  CPU_DCache_LineSizeGet (void)
{
    return (1u << ((SCS_CCSIDR & 0x7u) + 2u));
 8003880:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003884:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	@ 0xd80
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	3302      	adds	r3, #2
}
 800388e:	2001      	movs	r0, #1
 8003890:	4098      	lsls	r0, r3
 8003892:	4770      	bx	lr

08003894 <CPU_Cache_Init>:
{
 8003894:	b508      	push	{r3, lr}
    CPU_Cache_Linesize = CPU_DCache_LineSizeGet();
 8003896:	f7ff fff3 	bl	8003880 <CPU_DCache_LineSizeGet>
 800389a:	4b01      	ldr	r3, [pc, #4]	@ (80038a0 <CPU_Cache_Init+0xc>)
 800389c:	6018      	str	r0, [r3, #0]
}
 800389e:	bd08      	pop	{r3, pc}
 80038a0:	20001158 	.word	0x20001158

080038a4 <CPU_NameClr>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
void  CPU_NameClr (void)
{
 80038a4:	b510      	push	{r4, lr}
    CPU_SR_ALLOC();


    CPU_CRITICAL_ENTER();
 80038a6:	2040      	movs	r0, #64	@ 0x40
 80038a8:	f7fc fc92 	bl	80001d0 <CPU_SR_Save>
 80038ac:	4604      	mov	r4, r0
    Mem_Clr((void     *)&CPU_Name[0],
 80038ae:	2110      	movs	r1, #16
 80038b0:	4803      	ldr	r0, [pc, #12]	@ (80038c0 <CPU_NameClr+0x1c>)
 80038b2:	f000 f836 	bl	8003922 <Mem_Clr>
            (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
    CPU_CRITICAL_EXIT();
 80038b6:	4620      	mov	r0, r4
 80038b8:	f7fc fc98 	bl	80001ec <CPU_SR_Restore>
}
 80038bc:	bd10      	pop	{r4, pc}
 80038be:	bf00      	nop
 80038c0:	2000115c 	.word	0x2000115c

080038c4 <CPU_NameInit>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
static  void  CPU_NameInit (void)
{
 80038c4:	b508      	push	{r3, lr}
    CPU_NameClr();
 80038c6:	f7ff ffed 	bl	80038a4 <CPU_NameClr>
}
 80038ca:	bd08      	pop	{r3, pc}

080038cc <CPU_Init>:
{
 80038cc:	b508      	push	{r3, lr}
     CPU_NameInit();
 80038ce:	f7ff fff9 	bl	80038c4 <CPU_NameInit>
     CPU_Cache_Init();
 80038d2:	f7ff ffdf 	bl	8003894 <CPU_Cache_Init>
}
 80038d6:	bd08      	pop	{r3, pc}

080038d8 <Mem_Set>:
    }
#endif


    data_align = 0u;
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 80038d8:	f04f 0c00 	mov.w	ip, #0
    data_align = 0u;
 80038dc:	4663      	mov	r3, ip
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 80038de:	f1bc 0f03 	cmp.w	ip, #3
 80038e2:	d804      	bhi.n	80038ee <Mem_Set+0x16>
        data_align <<=  DEF_OCTET_NBR_BITS;
        data_align  |= (CPU_ALIGN)data_val;
 80038e4:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 80038e8:	f10c 0c01 	add.w	ip, ip, #1
 80038ec:	e7f7      	b.n	80038de <Mem_Set+0x6>

    size_rem      =  size;
    mem_align_mod = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));   /* See Note #3.                                 */

    pmem_08 = (CPU_INT08U *)pmem;
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
 80038ee:	f010 0c03 	ands.w	ip, r0, #3
 80038f2:	d105      	bne.n	8003900 <Mem_Set+0x28>
 80038f4:	e00c      	b.n	8003910 <Mem_Set+0x38>
        i = mem_align_mod;
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
               (i        < sizeof(CPU_ALIGN ))) {               /* ... until next CPU_ALIGN word boundary.              */
           *pmem_08++ = data_val;
 80038f6:	f800 1b01 	strb.w	r1, [r0], #1
            size_rem -= sizeof(CPU_INT08U);
 80038fa:	3a01      	subs	r2, #1
            i++;
 80038fc:	f10c 0c01 	add.w	ip, ip, #1
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8003900:	b132      	cbz	r2, 8003910 <Mem_Set+0x38>
 8003902:	f1bc 0f03 	cmp.w	ip, #3
 8003906:	d9f6      	bls.n	80038f6 <Mem_Set+0x1e>
 8003908:	e002      	b.n	8003910 <Mem_Set+0x38>
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2.                                         */
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
 800390a:	f840 3b04 	str.w	r3, [r0], #4
        size_rem    -= sizeof(CPU_ALIGN);
 800390e:	3a04      	subs	r2, #4
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8003910:	2a03      	cmp	r2, #3
 8003912:	d8fa      	bhi.n	800390a <Mem_Set+0x32>
 8003914:	e002      	b.n	800391c <Mem_Set+0x44>
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
       *pmem_08++   = data_val;
 8003916:	f800 1b01 	strb.w	r1, [r0], #1
        size_rem   -= sizeof(CPU_INT08U);
 800391a:	3a01      	subs	r2, #1
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 800391c:	2a00      	cmp	r2, #0
 800391e:	d1fa      	bne.n	8003916 <Mem_Set+0x3e>
    }
}
 8003920:	4770      	bx	lr

08003922 <Mem_Clr>:
{
 8003922:	b508      	push	{r3, lr}
 8003924:	460a      	mov	r2, r1
    Mem_Set(pmem,
 8003926:	2100      	movs	r1, #0
 8003928:	f7ff ffd6 	bl	80038d8 <Mem_Set>
}
 800392c:	bd08      	pop	{r3, pc}
	...

08003930 <OSIdleTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSIdleTaskHook (void)
{
 8003930:	b508      	push	{r3, lr}
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppIdleTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 8003932:	4b02      	ldr	r3, [pc, #8]	@ (800393c <OSIdleTaskHook+0xc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	b103      	cbz	r3, 800393a <OSIdleTaskHook+0xa>
        (*OS_AppIdleTaskHookPtr)();
 8003938:	4798      	blx	r3
    }
#endif
}
 800393a:	bd08      	pop	{r3, pc}
 800393c:	20001e4c 	.word	0x20001e4c

08003940 <OSInitHook>:
{
#if (OS_CPU_ARM_FP_EN > 0u)
    CPU_INT32U   reg_val;
#endif
                                                                /* 8-byte align the ISR stack.                          */
    OS_CPU_ExceptStkBase = (CPU_STK *)(OSCfg_ISRStkBasePtr + OSCfg_ISRStkSize);
 8003940:	4b0c      	ldr	r3, [pc, #48]	@ (8003974 <OSInitHook+0x34>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	4b0c      	ldr	r3, [pc, #48]	@ (8003978 <OSInitHook+0x38>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800394c:	4a0b      	ldr	r2, [pc, #44]	@ (800397c <OSInitHook+0x3c>)
 800394e:	6013      	str	r3, [r2, #0]
    OS_CPU_ExceptStkBase = (CPU_STK *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 8003950:	f023 0307 	bic.w	r3, r3, #7
 8003954:	6013      	str	r3, [r2, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    reg_val = CPU_REG_FP_FPCCR;                                 /* Check the floating point mode.                       */
 8003956:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800395a:	f8d3 3f34 	ldr.w	r3, [r3, #3892]	@ 0xf34
    if ((reg_val & CPU_REG_FPCCR_LAZY_STK) != CPU_REG_FPCCR_LAZY_STK) {
 800395e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003962:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003966:	d000      	beq.n	800396a <OSInitHook+0x2a>
        while (1u) {                                            /* See Note (1).                                        */
 8003968:	e7fe      	b.n	8003968 <OSInitHook+0x28>
            ;
        }
    }
#endif
                                                                /* Set BASEPRI boundary from the configuration.         */
    OS_KA_BASEPRI_Boundary = (CPU_INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 800396a:	4b05      	ldr	r3, [pc, #20]	@ (8003980 <OSInitHook+0x40>)
 800396c:	2240      	movs	r2, #64	@ 0x40
 800396e:	601a      	str	r2, [r3, #0]
}
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	0800633c 	.word	0x0800633c
 8003978:	08006340 	.word	0x08006340
 800397c:	20001170 	.word	0x20001170
 8003980:	2000116c 	.word	0x2000116c

08003984 <OSStatTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSStatTaskHook (void)
{
 8003984:	b508      	push	{r3, lr}
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppStatTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 8003986:	4b02      	ldr	r3, [pc, #8]	@ (8003990 <OSStatTaskHook+0xc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	b103      	cbz	r3, 800398e <OSStatTaskHook+0xa>
        (*OS_AppStatTaskHookPtr)();
 800398c:	4798      	blx	r3
    }
#endif
}
 800398e:	bd08      	pop	{r3, pc}
 8003990:	20001e48 	.word	0x20001e48

08003994 <OSTaskCreateHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskCreateHook (OS_TCB  *p_tcb)
{
 8003994:	b508      	push	{r3, lr}
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskCreateHookPtr != (OS_APP_HOOK_TCB)0) {
 8003996:	4b02      	ldr	r3, [pc, #8]	@ (80039a0 <OSTaskCreateHook+0xc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	b103      	cbz	r3, 800399e <OSTaskCreateHook+0xa>
        (*OS_AppTaskCreateHookPtr)(p_tcb);
 800399c:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                                /* Prevent compiler warning                             */
#endif
}
 800399e:	bd08      	pop	{r3, pc}
 80039a0:	20001e58 	.word	0x20001e58

080039a4 <OSTaskDelHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskDelHook (OS_TCB  *p_tcb)
{
 80039a4:	b508      	push	{r3, lr}
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskDelHookPtr != (OS_APP_HOOK_TCB)0) {
 80039a6:	4b02      	ldr	r3, [pc, #8]	@ (80039b0 <OSTaskDelHook+0xc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	b103      	cbz	r3, 80039ae <OSTaskDelHook+0xa>
        (*OS_AppTaskDelHookPtr)(p_tcb);
 80039ac:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                                /* Prevent compiler warning                             */
#endif
}
 80039ae:	bd08      	pop	{r3, pc}
 80039b0:	20001e54 	.word	0x20001e54

080039b4 <OSTaskReturnHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskReturnHook (OS_TCB  *p_tcb)
{
 80039b4:	b508      	push	{r3, lr}
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskReturnHookPtr != (OS_APP_HOOK_TCB)0) {
 80039b6:	4b02      	ldr	r3, [pc, #8]	@ (80039c0 <OSTaskReturnHook+0xc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	b103      	cbz	r3, 80039be <OSTaskReturnHook+0xa>
        (*OS_AppTaskReturnHookPtr)(p_tcb);
 80039bc:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                                /* Prevent compiler warning                             */
#endif
}
 80039be:	bd08      	pop	{r3, pc}
 80039c0:	20001e50 	.word	0x20001e50

080039c4 <OSTaskStkInit>:
                         void          *p_arg,
                         CPU_STK       *p_stk_base,
                         CPU_STK       *p_stk_limit,
                         CPU_STK_SIZE   stk_size,
                         OS_OPT         opt)
{
 80039c4:	b410      	push	{r4}
    CPU_STK    *p_stk;


    (void)opt;                                                  /* 'opt' is not used, prevent warning                   */

    p_stk = &p_stk_base[stk_size];                              /* Load stack pointer                                   */
 80039c6:	9c01      	ldr	r4, [sp, #4]
 80039c8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
                                                                /* Align the stack to 8-bytes.                          */
    p_stk = (CPU_STK *)((CPU_STK)(p_stk) & 0xFFFFFFF8u);
 80039cc:	f022 0207 	bic.w	r2, r2, #7
                                                                /* Registers stacked as if auto-saved on exception      */
    *(--p_stk) = (CPU_STK)0x01000000u;                          /* xPSR                                                 */
 80039d0:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 80039d4:	f842 4c04 	str.w	r4, [r2, #-4]
    *(--p_stk) = (CPU_STK)p_task;                               /* Entry Point                                          */
 80039d8:	f842 0c08 	str.w	r0, [r2, #-8]
    *(--p_stk) = (CPU_STK)OS_TaskReturn;                        /* R14 (LR)                                             */
 80039dc:	481d      	ldr	r0, [pc, #116]	@ (8003a54 <OSTaskStkInit+0x90>)
 80039de:	f842 0c0c 	str.w	r0, [r2, #-12]
    *(--p_stk) = (CPU_STK)0x12121212u;                          /* R12                                                  */
 80039e2:	f04f 3012 	mov.w	r0, #303174162	@ 0x12121212
 80039e6:	f842 0c10 	str.w	r0, [r2, #-16]
    *(--p_stk) = (CPU_STK)0x03030303u;                          /* R3                                                   */
 80039ea:	f04f 3003 	mov.w	r0, #50529027	@ 0x3030303
 80039ee:	f842 0c14 	str.w	r0, [r2, #-20]
    *(--p_stk) = (CPU_STK)0x02020202u;                          /* R2                                                   */
 80039f2:	f04f 3002 	mov.w	r0, #33686018	@ 0x2020202
 80039f6:	f842 0c18 	str.w	r0, [r2, #-24]
    *(--p_stk) = (CPU_STK)p_stk_limit;                          /* R1                                                   */
 80039fa:	f842 3c1c 	str.w	r3, [r2, #-28]
    *(--p_stk) = (CPU_STK)p_arg;                                /* R0 : argument                                        */
 80039fe:	f842 1c20 	str.w	r1, [r2, #-32]
    *(--p_stk) = (CPU_STK)0xFFFFFFFDuL;                         /* R14: EXEC_RETURN; See Note 5                         */
 8003a02:	f06f 0302 	mvn.w	r3, #2
 8003a06:	f842 3c24 	str.w	r3, [r2, #-36]
                                                                /* Remaining registers saved on process stack           */
    *(--p_stk) = (CPU_STK)0x11111111uL;                         /* R11                                                  */
 8003a0a:	f04f 3311 	mov.w	r3, #286331153	@ 0x11111111
 8003a0e:	f842 3c28 	str.w	r3, [r2, #-40]
    *(--p_stk) = (CPU_STK)0x10101010uL;                         /* R10                                                  */
 8003a12:	f04f 3310 	mov.w	r3, #269488144	@ 0x10101010
 8003a16:	f842 3c2c 	str.w	r3, [r2, #-44]
    *(--p_stk) = (CPU_STK)0x09090909uL;                         /* R9                                                   */
 8003a1a:	f04f 3309 	mov.w	r3, #151587081	@ 0x9090909
 8003a1e:	f842 3c30 	str.w	r3, [r2, #-48]
    *(--p_stk) = (CPU_STK)0x08080808uL;                         /* R8                                                   */
 8003a22:	f04f 3308 	mov.w	r3, #134744072	@ 0x8080808
 8003a26:	f842 3c34 	str.w	r3, [r2, #-52]
    *(--p_stk) = (CPU_STK)0x07070707uL;                         /* R7                                                   */
 8003a2a:	f04f 3307 	mov.w	r3, #117901063	@ 0x7070707
 8003a2e:	f842 3c38 	str.w	r3, [r2, #-56]
    *(--p_stk) = (CPU_STK)0x06060606uL;                         /* R6                                                   */
 8003a32:	f04f 3306 	mov.w	r3, #101058054	@ 0x6060606
 8003a36:	f842 3c3c 	str.w	r3, [r2, #-60]
    *(--p_stk) = (CPU_STK)0x05050505uL;                         /* R5                                                   */
 8003a3a:	f04f 3305 	mov.w	r3, #84215045	@ 0x5050505
 8003a3e:	f842 3c40 	str.w	r3, [r2, #-64]
    *(--p_stk) = (CPU_STK)0x04040404uL;                         /* R4                                                   */
 8003a42:	f04f 3304 	mov.w	r3, #67372036	@ 0x4040404
 8003a46:	f842 3c44 	str.w	r3, [r2, #-68]

    return (p_stk);
}
 8003a4a:	f1a2 0044 	sub.w	r0, r2, #68	@ 0x44
 8003a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	080058c9 	.word	0x080058c9

08003a58 <OSTaskSwHook>:
*                 to the task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/

void  OSTaskSwHook (void)
{
 8003a58:	b508      	push	{r3, lr}
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
    CPU_BOOLEAN  stk_status;
#endif

#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskSwHookPtr != (OS_APP_HOOK_VOID)0) {
 8003a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a8c <OSTaskSwHook+0x34>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	b103      	cbz	r3, 8003a62 <OSTaskSwHook+0xa>
        (*OS_AppTaskSwHookPtr)();
 8003a60:	4798      	blx	r3

    OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdyPtr);

#if OS_CFG_TASK_PROFILE_EN > 0u
    ts = OS_TS_GET();
    if (OSTCBCurPtr != OSTCBHighRdyPtr) {
 8003a62:	4b0b      	ldr	r3, [pc, #44]	@ (8003a90 <OSTaskSwHook+0x38>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a0b      	ldr	r2, [pc, #44]	@ (8003a94 <OSTaskSwHook+0x3c>)
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d009      	beq.n	8003a82 <OSTaskSwHook+0x2a>
        OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
 8003a6e:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 8003a72:	4241      	negs	r1, r0
 8003a74:	f8c3 1098 	str.w	r1, [r3, #152]	@ 0x98
        OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
 8003a78:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8003a7c:	1a09      	subs	r1, r1, r0
 8003a7e:	f8c3 10a0 	str.w	r1, [r3, #160]	@ 0xa0
    }

    OSTCBHighRdyPtr->CyclesStart = ts;
 8003a82:	2300      	movs	r3, #0
 8003a84:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    stk_status = OSTaskStkRedzoneChk((OS_TCB *)0u);
    if (stk_status != OS_TRUE) {
        OSRedzoneHitHook(OSTCBCurPtr);
    }
#endif
}
 8003a88:	bd08      	pop	{r3, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20001e44 	.word	0x20001e44
 8003a90:	20001988 	.word	0x20001988
 8003a94:	20001984 	.word	0x20001984

08003a98 <OSTimeTickHook>:
* Note(s)    : 1) This function is assumed to be called from the Tick ISR.
*********************************************************************************************************
*/

void  OSTimeTickHook (void)
{
 8003a98:	b508      	push	{r3, lr}
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTimeTickHookPtr != (OS_APP_HOOK_VOID)0) {
 8003a9a:	4b02      	ldr	r3, [pc, #8]	@ (8003aa4 <OSTimeTickHook+0xc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	b103      	cbz	r3, 8003aa2 <OSTimeTickHook+0xa>
        (*OS_AppTimeTickHookPtr)();
 8003aa0:	4798      	blx	r3
    }
#endif
}
 8003aa2:	bd08      	pop	{r3, pc}
 8003aa4:	20001e40 	.word	0x20001e40

08003aa8 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler  (void)
{
 8003aa8:	b510      	push	{r4, lr}
    CPU_SR_ALLOC();


    CPU_CRITICAL_ENTER();
 8003aaa:	2040      	movs	r0, #64	@ 0x40
 8003aac:	f7fc fb90 	bl	80001d0 <CPU_SR_Save>
 8003ab0:	4604      	mov	r4, r0
    OSIntEnter();                                               /* Tell uC/OS-III that we are starting an ISR           */
 8003ab2:	f000 f81f 	bl	8003af4 <OSIntEnter>
    CPU_CRITICAL_EXIT();
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f7fc fb98 	bl	80001ec <CPU_SR_Restore>

    OSTimeTick();                                               /* Call uC/OS-III's OSTimeTick()                        */
 8003abc:	f002 f958 	bl	8005d70 <OSTimeTick>

    OSIntExit();                                                /* Tell uC/OS-III that we are leaving the ISR           */
 8003ac0:	f000 f828 	bl	8003b14 <OSIntExit>
}
 8003ac4:	bd10      	pop	{r4, pc}

08003ac6 <OSCfg_Init>:
    (void)OSCfg_TmrTaskStkBasePtr;
    (void)OSCfg_TmrTaskStkLimit;
    (void)OSCfg_TmrTaskStkSize;
    (void)OSCfg_TmrTaskStkSizeRAM;
#endif
}
 8003ac6:	4770      	bx	lr

08003ac8 <OS_IdleTask>:
*              3) This hook has been added to allow you to do such things as STOP the CPU to conserve power.
************************************************************************************************************************
*/
#if (OS_CFG_TASK_IDLE_EN > 0u)
void  OS_IdleTask (void  *p_arg)
{
 8003ac8:	b508      	push	{r3, lr}

    (void)p_arg;                                                /* Prevent compiler warning for not using 'p_arg'       */

    for (;;) {
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_EN > 0u))
        CPU_CRITICAL_ENTER();
 8003aca:	2040      	movs	r0, #64	@ 0x40
 8003acc:	f7fc fb80 	bl	80001d0 <CPU_SR_Save>
#if (OS_CFG_DBG_EN > 0u)
        OSIdleTaskCtr++;
 8003ad0:	4a06      	ldr	r2, [pc, #24]	@ (8003aec <OS_IdleTask+0x24>)
 8003ad2:	6813      	ldr	r3, [r2, #0]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	6013      	str	r3, [r2, #0]
#endif
#if (OS_CFG_STAT_TASK_EN > 0u)
        OSStatTaskCtr++;
 8003ad8:	4a05      	ldr	r2, [pc, #20]	@ (8003af0 <OS_IdleTask+0x28>)
 8003ada:	6813      	ldr	r3, [r2, #0]
 8003adc:	3301      	adds	r3, #1
 8003ade:	6013      	str	r3, [r2, #0]
#endif
        CPU_CRITICAL_EXIT();
 8003ae0:	f7fc fb84 	bl	80001ec <CPU_SR_Restore>
#endif

#if (OS_CFG_APP_HOOKS_EN > 0u)
        OSIdleTaskHook();                                       /* Call user definable HOOK                             */
 8003ae4:	f7ff ff24 	bl	8003930 <OSIdleTaskHook>
    for (;;) {
 8003ae8:	e7ef      	b.n	8003aca <OS_IdleTask+0x2>
 8003aea:	bf00      	nop
 8003aec:	20001e3c 	.word	0x20001e3c
 8003af0:	20001ba0 	.word	0x20001ba0

08003af4 <OSIntEnter>:
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is OS running?                                       */
 8003af4:	4b05      	ldr	r3, [pc, #20]	@ (8003b0c <OSIntEnter+0x18>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d106      	bne.n	8003b0a <OSIntEnter+0x16>
    if (OSIntNestingCtr >= 250u) {                              /* Have we nested past 250 levels?                      */
 8003afc:	4b04      	ldr	r3, [pc, #16]	@ (8003b10 <OSIntEnter+0x1c>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2bf9      	cmp	r3, #249	@ 0xf9
 8003b02:	d802      	bhi.n	8003b0a <OSIntEnter+0x16>
    OSIntNestingCtr++;                                          /* Increment ISR nesting level                          */
 8003b04:	3301      	adds	r3, #1
 8003b06:	4a02      	ldr	r2, [pc, #8]	@ (8003b10 <OSIntEnter+0x1c>)
 8003b08:	7013      	strb	r3, [r2, #0]
}
 8003b0a:	4770      	bx	lr
 8003b0c:	20001d75 	.word	0x20001d75
 8003b10:	20001d76 	.word	0x20001d76

08003b14 <OSIntExit>:
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Has the OS started?                                  */
 8003b14:	4b1f      	ldr	r3, [pc, #124]	@ (8003b94 <OSIntExit+0x80>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d000      	beq.n	8003b1e <OSIntExit+0xa>
 8003b1c:	4770      	bx	lr
{
 8003b1e:	b510      	push	{r4, lr}
    CPU_INT_DIS();
 8003b20:	2040      	movs	r0, #64	@ 0x40
 8003b22:	f7fc fb55 	bl	80001d0 <CPU_SR_Save>
 8003b26:	4604      	mov	r4, r0
    if (OSIntNestingCtr == 0u) {                                /* Prevent OSIntNestingCtr from wrapping                */
 8003b28:	4b1b      	ldr	r3, [pc, #108]	@ (8003b98 <OSIntExit+0x84>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	b32b      	cbz	r3, 8003b7a <OSIntExit+0x66>
    OSIntNestingCtr--;
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	4a19      	ldr	r2, [pc, #100]	@ (8003b98 <OSIntExit+0x84>)
 8003b34:	7013      	strb	r3, [r2, #0]
    if (OSIntNestingCtr > 0u) {                                 /* ISRs still nested?                                   */
 8003b36:	bb1b      	cbnz	r3, 8003b80 <OSIntExit+0x6c>
    if (OSSchedLockNestingCtr > 0u) {                           /* Scheduler still locked?                              */
 8003b38:	4b18      	ldr	r3, [pc, #96]	@ (8003b9c <OSIntExit+0x88>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	bb1b      	cbnz	r3, 8003b86 <OSIntExit+0x72>
    OSPrioHighRdy   = OS_PrioGetHighest();                      /* Find highest priority                                */
 8003b3e:	f001 f9e3 	bl	8004f08 <OS_PrioGetHighest>
 8003b42:	4a17      	ldr	r2, [pc, #92]	@ (8003ba0 <OSIntExit+0x8c>)
 8003b44:	7010      	strb	r0, [r2, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;         /* Get highest priority task ready-to-run               */
 8003b46:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8003b4a:	4a16      	ldr	r2, [pc, #88]	@ (8003ba4 <OSIntExit+0x90>)
 8003b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b50:	4a15      	ldr	r2, [pc, #84]	@ (8003ba8 <OSIntExit+0x94>)
 8003b52:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                       /* Current task still the highest priority?             */
 8003b54:	4a15      	ldr	r2, [pc, #84]	@ (8003bac <OSIntExit+0x98>)
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d017      	beq.n	8003b8c <OSIntExit+0x78>
    OSTCBHighRdyPtr->CtxSwCtr++;                                /* Inc. # of context switches for this new task         */
 8003b5c:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8003b60:	3201      	adds	r2, #1
 8003b62:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    OSTaskCtxSwCtr++;                                           /* Keep track of the total number of ctx switches       */
 8003b66:	4a12      	ldr	r2, [pc, #72]	@ (8003bb0 <OSIntExit+0x9c>)
 8003b68:	6813      	ldr	r3, [r2, #0]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	6013      	str	r3, [r2, #0]
    OSIntCtxSw();                                               /* Perform interrupt level ctx switch                   */
 8003b6e:	f7fc fb94 	bl	800029a <OSCtxSw>
    CPU_INT_EN();
 8003b72:	4620      	mov	r0, r4
 8003b74:	f7fc fb3a 	bl	80001ec <CPU_SR_Restore>
}
 8003b78:	bd10      	pop	{r4, pc}
        CPU_INT_EN();
 8003b7a:	f7fc fb37 	bl	80001ec <CPU_SR_Restore>
        return;
 8003b7e:	e7fb      	b.n	8003b78 <OSIntExit+0x64>
        CPU_INT_EN();                                           /* Yes                                                  */
 8003b80:	f7fc fb34 	bl	80001ec <CPU_SR_Restore>
        return;
 8003b84:	e7f8      	b.n	8003b78 <OSIntExit+0x64>
        CPU_INT_EN();                                           /* Yes                                                  */
 8003b86:	f7fc fb31 	bl	80001ec <CPU_SR_Restore>
        return;
 8003b8a:	e7f5      	b.n	8003b78 <OSIntExit+0x64>
        CPU_INT_EN();
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f7fc fb2d 	bl	80001ec <CPU_SR_Restore>
        return;
 8003b92:	e7f1      	b.n	8003b78 <OSIntExit+0x64>
 8003b94:	20001d75 	.word	0x20001d75
 8003b98:	20001d76 	.word	0x20001d76
 8003b9c:	20001bb8 	.word	0x20001bb8
 8003ba0:	20001d48 	.word	0x20001d48
 8003ba4:	20001bbc 	.word	0x20001bbc
 8003ba8:	20001984 	.word	0x20001984
 8003bac:	20001988 	.word	0x20001988
 8003bb0:	20001acc 	.word	0x20001acc

08003bb4 <OSSched>:
    if (OSRunning != OS_STATE_OS_RUNNING) {
 8003bb4:	4b19      	ldr	r3, [pc, #100]	@ (8003c1c <OSSched+0x68>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d105      	bne.n	8003bc8 <OSSched+0x14>
    if (OSIntNestingCtr > 0u) {                                 /* ISRs still nested?                                   */
 8003bbc:	4b18      	ldr	r3, [pc, #96]	@ (8003c20 <OSSched+0x6c>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	b913      	cbnz	r3, 8003bc8 <OSSched+0x14>
    if (OSSchedLockNestingCtr > 0u) {                           /* Scheduler locked?                                    */
 8003bc2:	4b18      	ldr	r3, [pc, #96]	@ (8003c24 <OSSched+0x70>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	b103      	cbz	r3, 8003bca <OSSched+0x16>
 8003bc8:	4770      	bx	lr
{
 8003bca:	b510      	push	{r4, lr}
    CPU_INT_DIS();
 8003bcc:	2040      	movs	r0, #64	@ 0x40
 8003bce:	f7fc faff 	bl	80001d0 <CPU_SR_Save>
 8003bd2:	4604      	mov	r4, r0
    OSPrioHighRdy   = OS_PrioGetHighest();                      /* Find the highest priority ready                      */
 8003bd4:	f001 f998 	bl	8004f08 <OS_PrioGetHighest>
 8003bd8:	4b13      	ldr	r3, [pc, #76]	@ (8003c28 <OSSched+0x74>)
 8003bda:	7018      	strb	r0, [r3, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;         /* Get highest priority task ready-to-run               */
 8003bdc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003be0:	4b12      	ldr	r3, [pc, #72]	@ (8003c2c <OSSched+0x78>)
 8003be2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003be6:	4a12      	ldr	r2, [pc, #72]	@ (8003c30 <OSSched+0x7c>)
 8003be8:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                       /* Current task still the highest priority?             */
 8003bea:	4a12      	ldr	r2, [pc, #72]	@ (8003c34 <OSSched+0x80>)
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d010      	beq.n	8003c14 <OSSched+0x60>
    OSTCBHighRdyPtr->CtxSwCtr++;                                /* Inc. # of context switches to this task              */
 8003bf2:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8003bf6:	3201      	adds	r2, #1
 8003bf8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    OSTaskCtxSwCtr++;                                           /* Increment context switch counter                     */
 8003bfc:	4a0e      	ldr	r2, [pc, #56]	@ (8003c38 <OSSched+0x84>)
 8003bfe:	6813      	ldr	r3, [r2, #0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	6013      	str	r3, [r2, #0]
    OS_TASK_SW();                                               /* Perform a task level context switch                  */
 8003c04:	f7fc fb49 	bl	800029a <OSCtxSw>
    CPU_INT_EN();
 8003c08:	4620      	mov	r0, r4
 8003c0a:	f7fc faef 	bl	80001ec <CPU_SR_Restore>
    OS_TASK_SW_SYNC();
 8003c0e:	f3bf 8f6f 	isb	sy
}
 8003c12:	bd10      	pop	{r4, pc}
        CPU_INT_EN();                                           /* Yes                                                  */
 8003c14:	4620      	mov	r0, r4
 8003c16:	f7fc fae9 	bl	80001ec <CPU_SR_Restore>
        return;
 8003c1a:	e7fa      	b.n	8003c12 <OSSched+0x5e>
 8003c1c:	20001d75 	.word	0x20001d75
 8003c20:	20001d76 	.word	0x20001d76
 8003c24:	20001bb8 	.word	0x20001bb8
 8003c28:	20001d48 	.word	0x20001d48
 8003c2c:	20001bbc 	.word	0x20001bbc
 8003c30:	20001984 	.word	0x20001984
 8003c34:	20001988 	.word	0x20001988
 8003c38:	20001acc 	.word	0x20001acc

08003c3c <OSStart>:
{
 8003c3c:	b510      	push	{r4, lr}
 8003c3e:	4604      	mov	r4, r0
    if (OSInitialized != OS_TRUE) {
 8003c40:	4b17      	ldr	r3, [pc, #92]	@ (8003ca0 <OSStart+0x64>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d003      	beq.n	8003c50 <OSStart+0x14>
       *p_err = OS_ERR_OS_NOT_INIT;
 8003c48:	f645 638b 	movw	r3, #24203	@ 0x5e8b
 8003c4c:	8003      	strh	r3, [r0, #0]
}
 8003c4e:	bd10      	pop	{r4, pc}
    if (OSTaskQty <= kernel_task_cnt) {                         /* No application task created                          */
 8003c50:	4b14      	ldr	r3, [pc, #80]	@ (8003ca4 <OSStart+0x68>)
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d906      	bls.n	8003c66 <OSStart+0x2a>
    if (OSRunning == OS_STATE_OS_STOPPED) {
 8003c58:	4b13      	ldr	r3, [pc, #76]	@ (8003ca8 <OSStart+0x6c>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b13b      	cbz	r3, 8003c6e <OSStart+0x32>
       *p_err           = OS_ERR_OS_RUNNING;                    /* OS is already running                                */
 8003c5e:	f645 638a 	movw	r3, #24202	@ 0x5e8a
 8003c62:	8003      	strh	r3, [r0, #0]
 8003c64:	e7f3      	b.n	8003c4e <OSStart+0x12>
        *p_err = OS_ERR_OS_NO_APP_TASK;
 8003c66:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003c6a:	8003      	strh	r3, [r0, #0]
         return;
 8003c6c:	e7ef      	b.n	8003c4e <OSStart+0x12>
        OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority                            */
 8003c6e:	f001 f94b 	bl	8004f08 <OS_PrioGetHighest>
 8003c72:	4b0e      	ldr	r3, [pc, #56]	@ (8003cac <OSStart+0x70>)
 8003c74:	7018      	strb	r0, [r3, #0]
        OSPrioCur       = OSPrioHighRdy;
 8003c76:	4b0e      	ldr	r3, [pc, #56]	@ (8003cb0 <OSStart+0x74>)
 8003c78:	7018      	strb	r0, [r3, #0]
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8003c7a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb4 <OSStart+0x78>)
 8003c80:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003c84:	4a0c      	ldr	r2, [pc, #48]	@ (8003cb8 <OSStart+0x7c>)
 8003c86:	6013      	str	r3, [r2, #0]
        OSTCBCurPtr     = OSTCBHighRdyPtr;
 8003c88:	4a0c      	ldr	r2, [pc, #48]	@ (8003cbc <OSStart+0x80>)
 8003c8a:	6013      	str	r3, [r2, #0]
        OSRunning       = OS_STATE_OS_RUNNING;
 8003c8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ca8 <OSStart+0x6c>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	701a      	strb	r2, [r3, #0]
        OSStartHighRdy();                                       /* Execute target specific code to start task           */
 8003c92:	f7fc fac3 	bl	800021c <OSStartHighRdy>
       *p_err           = OS_ERR_FATAL_RETURN;                  /* OSStart() is not supposed to return                  */
 8003c96:	f643 2399 	movw	r3, #15001	@ 0x3a99
 8003c9a:	8023      	strh	r3, [r4, #0]
 8003c9c:	e7d7      	b.n	8003c4e <OSStart+0x12>
 8003c9e:	bf00      	nop
 8003ca0:	20001d74 	.word	0x20001d74
 8003ca4:	20001ac6 	.word	0x20001ac6
 8003ca8:	20001d75 	.word	0x20001d75
 8003cac:	20001d48 	.word	0x20001d48
 8003cb0:	20001d49 	.word	0x20001d49
 8003cb4:	20001bbc 	.word	0x20001bbc
 8003cb8:	20001984 	.word	0x20001984
 8003cbc:	20001988 	.word	0x20001988

08003cc0 <OS_IdleTaskInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/
#if (OS_CFG_TASK_IDLE_EN > 0u)
void  OS_IdleTaskInit (OS_ERR  *p_err)
{
 8003cc0:	b500      	push	{lr}
 8003cc2:	b08b      	sub	sp, #44	@ 0x2c
#if (OS_CFG_DBG_EN > 0u)
    OSIdleTaskCtr = 0u;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	4a0d      	ldr	r2, [pc, #52]	@ (8003cfc <OS_IdleTaskInit+0x3c>)
 8003cc8:	6013      	str	r3, [r2, #0]
#endif
                                                                /* --------------- CREATE THE IDLE TASK --------------- */
    OSTaskCreate(&OSIdleTaskTCB,
 8003cca:	9008      	str	r0, [sp, #32]
 8003ccc:	220b      	movs	r2, #11
 8003cce:	9207      	str	r2, [sp, #28]
 8003cd0:	9306      	str	r3, [sp, #24]
 8003cd2:	9305      	str	r3, [sp, #20]
 8003cd4:	9304      	str	r3, [sp, #16]
 8003cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8003d00 <OS_IdleTaskInit+0x40>)
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	9203      	str	r2, [sp, #12]
 8003cdc:	4a09      	ldr	r2, [pc, #36]	@ (8003d04 <OS_IdleTaskInit+0x44>)
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	9202      	str	r2, [sp, #8]
 8003ce2:	4a09      	ldr	r2, [pc, #36]	@ (8003d08 <OS_IdleTaskInit+0x48>)
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	9201      	str	r2, [sp, #4]
 8003ce8:	221f      	movs	r2, #31
 8003cea:	9200      	str	r2, [sp, #0]
 8003cec:	4a07      	ldr	r2, [pc, #28]	@ (8003d0c <OS_IdleTaskInit+0x4c>)
 8003cee:	4908      	ldr	r1, [pc, #32]	@ (8003d10 <OS_IdleTaskInit+0x50>)
 8003cf0:	4808      	ldr	r0, [pc, #32]	@ (8003d14 <OS_IdleTaskInit+0x54>)
 8003cf2:	f001 fbf1 	bl	80054d8 <OSTaskCreate>
                  0u,
                  0u,
                 (void       *)0,
                 (OS_OPT_TASK_STK_CHK | (OS_OPT)(OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS)),
                  p_err);
}
 8003cf6:	b00b      	add	sp, #44	@ 0x2c
 8003cf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cfc:	20001e3c 	.word	0x20001e3c
 8003d00:	08006344 	.word	0x08006344
 8003d04:	08006348 	.word	0x08006348
 8003d08:	0800634c 	.word	0x0800634c
 8003d0c:	08003ac9 	.word	0x08003ac9
 8003d10:	08006350 	.word	0x08006350
 8003d14:	20001d78 	.word	0x20001d78

08003d18 <OS_PendDbgNameAdd>:
{
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb1;


    if (p_obj != (OS_PEND_OBJ *)0) {
 8003d18:	b130      	cbz	r0, 8003d28 <OS_PendDbgNameAdd+0x10>
        p_tcb->DbgNamePtr =  p_obj->NamePtr;                    /* Task pending on this object ... save name in TCB     */
 8003d1a:	6842      	ldr	r2, [r0, #4]
 8003d1c:	f8c1 20c0 	str.w	r2, [r1, #192]	@ 0xc0
        p_pend_list       = &p_obj->PendList;                   /* Find name of HP task pending on this object ...      */
        p_tcb1            =  p_pend_list->HeadPtr;
 8003d20:	6882      	ldr	r2, [r0, #8]
        p_obj->DbgNamePtr =  p_tcb1->NamePtr;                   /* ... Save in object                                   */
 8003d22:	68d2      	ldr	r2, [r2, #12]
 8003d24:	61c2      	str	r2, [r0, #28]
 8003d26:	4770      	bx	lr
    } else {
        switch (p_tcb->PendOn) {
 8003d28:	f891 3038 	ldrb.w	r3, [r1, #56]	@ 0x38
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d005      	beq.n	8003d3c <OS_PendDbgNameAdd+0x24>
 8003d30:	2b07      	cmp	r3, #7
 8003d32:	d007      	beq.n	8003d44 <OS_PendDbgNameAdd+0x2c>
            case OS_TASK_PEND_ON_TASK_SEM:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Sem");
                 break;

            default:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
 8003d34:	4b05      	ldr	r3, [pc, #20]	@ (8003d4c <OS_PendDbgNameAdd+0x34>)
 8003d36:	f8c1 30c0 	str.w	r3, [r1, #192]	@ 0xc0
                 break;
        }
    }
}
 8003d3a:	4770      	bx	lr
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Q");
 8003d3c:	4b04      	ldr	r3, [pc, #16]	@ (8003d50 <OS_PendDbgNameAdd+0x38>)
 8003d3e:	f8c1 30c0 	str.w	r3, [r1, #192]	@ 0xc0
                 break;
 8003d42:	4770      	bx	lr
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Sem");
 8003d44:	4b03      	ldr	r3, [pc, #12]	@ (8003d54 <OS_PendDbgNameAdd+0x3c>)
 8003d46:	f8c1 30c0 	str.w	r3, [r1, #192]	@ 0xc0
                 break;
 8003d4a:	4770      	bx	lr
 8003d4c:	08006378 	.word	0x08006378
 8003d50:	08006364 	.word	0x08006364
 8003d54:	0800636c 	.word	0x0800636c

08003d58 <OS_PendDbgNameRemove>:
{
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb1;


    p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");              /* Remove name of object pended on for readied task     */
 8003d58:	4b05      	ldr	r3, [pc, #20]	@ (8003d70 <OS_PendDbgNameRemove+0x18>)
 8003d5a:	f8c1 30c0 	str.w	r3, [r1, #192]	@ 0xc0

    if (p_obj != (OS_PEND_OBJ *)0) {
 8003d5e:	b130      	cbz	r0, 8003d6e <OS_PendDbgNameRemove+0x16>
        p_pend_list = &p_obj->PendList;
        p_tcb1      =  p_pend_list->HeadPtr;
 8003d60:	6882      	ldr	r2, [r0, #8]
        if (p_tcb1 != (OS_TCB *)0) {                            /* Find name of HP task pending on this object ...      */
 8003d62:	b112      	cbz	r2, 8003d6a <OS_PendDbgNameRemove+0x12>
            p_obj->DbgNamePtr = p_tcb1->NamePtr;                /* ... Save in object                                   */
 8003d64:	68d2      	ldr	r2, [r2, #12]
 8003d66:	61c2      	str	r2, [r0, #28]
 8003d68:	4770      	bx	lr
        } else {
            p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* Or no other task is pending on object                */
 8003d6a:	4a01      	ldr	r2, [pc, #4]	@ (8003d70 <OS_PendDbgNameRemove+0x18>)
 8003d6c:	61c2      	str	r2, [r0, #28]
        }
    }
}
 8003d6e:	4770      	bx	lr
 8003d70:	08006378 	.word	0x08006378

08003d74 <OS_PendListInit>:
************************************************************************************************************************
*/

void  OS_PendListInit (OS_PEND_LIST  *p_pend_list)
{
    p_pend_list->HeadPtr    = (OS_TCB *)0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	6003      	str	r3, [r0, #0]
    p_pend_list->TailPtr    = (OS_TCB *)0;
 8003d78:	6043      	str	r3, [r0, #4]
#if (OS_CFG_DBG_EN > 0u)
    p_pend_list->NbrEntries =           0u;
 8003d7a:	8103      	strh	r3, [r0, #8]
#endif
}
 8003d7c:	4770      	bx	lr

08003d7e <OS_PendListInsertPrio>:
{
    OS_PRIO   prio;
    OS_TCB   *p_tcb_next;


    prio  = p_tcb->Prio;                                        /* Obtain the priority of the task to insert            */
 8003d7e:	f891 c03b 	ldrb.w	ip, [r1, #59]	@ 0x3b

    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* CASE 0: Insert when there are no entries             */
 8003d82:	6803      	ldr	r3, [r0, #0]
 8003d84:	b14b      	cbz	r3, 8003d9a <OS_PendListInsertPrio+0x1c>
        p_tcb->PendPrevPtr   = (OS_TCB *)0;
        p_pend_list->HeadPtr =  p_tcb;
        p_pend_list->TailPtr =  p_tcb;
    } else {
#if (OS_CFG_DBG_EN > 0u)
        p_pend_list->NbrEntries++;                              /* CASE 1: One more OS_TCBs in the list                 */
 8003d86:	8902      	ldrh	r2, [r0, #8]
 8003d88:	3201      	adds	r2, #1
 8003d8a:	8102      	strh	r2, [r0, #8]
#endif
        p_tcb_next = p_pend_list->HeadPtr;
        while (p_tcb_next != (OS_TCB *)0) {                     /* Find the position where to insert                    */
 8003d8c:	b16b      	cbz	r3, 8003daa <OS_PendListInsertPrio+0x2c>
            if (prio < p_tcb_next->Prio) {
 8003d8e:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 8003d92:	4562      	cmp	r2, ip
 8003d94:	d809      	bhi.n	8003daa <OS_PendListInsertPrio+0x2c>
                break;                                          /* Found! ... insert BEFORE current                     */
            } else {
                p_tcb_next = p_tcb_next->PendNextPtr;           /* Not Found, follow the list                           */
 8003d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d98:	e7f8      	b.n	8003d8c <OS_PendListInsertPrio+0xe>
        p_pend_list->NbrEntries = 1u;                           /* This is the first entry                              */
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	8103      	strh	r3, [r0, #8]
        p_tcb->PendNextPtr   = (OS_TCB *)0;                     /* No other OS_TCBs in the list                         */
 8003d9e:	2300      	movs	r3, #0
 8003da0:	62cb      	str	r3, [r1, #44]	@ 0x2c
        p_tcb->PendPrevPtr   = (OS_TCB *)0;
 8003da2:	630b      	str	r3, [r1, #48]	@ 0x30
        p_pend_list->HeadPtr =  p_tcb;
 8003da4:	6001      	str	r1, [r0, #0]
        p_pend_list->TailPtr =  p_tcb;
 8003da6:	6041      	str	r1, [r0, #4]
 8003da8:	4770      	bx	lr
            }
        }
        if (p_tcb_next == (OS_TCB *)0) {                        /* TCB to insert is lowest in priority                  */
 8003daa:	b13b      	cbz	r3, 8003dbc <OS_PendListInsertPrio+0x3e>
            p_tcb->PendNextPtr              = (OS_TCB *)0;      /* ... insert at the tail.                              */
            p_tcb->PendPrevPtr              =  p_pend_list->TailPtr;
            p_tcb->PendPrevPtr->PendNextPtr =  p_tcb;
            p_pend_list->TailPtr            =  p_tcb;
        } else {
            if (p_tcb_next->PendPrevPtr == (OS_TCB *)0) {       /* Is new TCB highest priority?                         */
 8003dac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dae:	b15a      	cbz	r2, 8003dc8 <OS_PendListInsertPrio+0x4a>
                p_tcb->PendNextPtr      =  p_tcb_next;          /* Yes, insert as new Head of list                      */
                p_tcb->PendPrevPtr      = (OS_TCB *)0;
                p_tcb_next->PendPrevPtr =  p_tcb;
                p_pend_list->HeadPtr    =  p_tcb;
            } else {                                            /* No,  insert in between two entries                   */
                p_tcb->PendNextPtr              = p_tcb_next;
 8003db0:	62cb      	str	r3, [r1, #44]	@ 0x2c
                p_tcb->PendPrevPtr              = p_tcb_next->PendPrevPtr;
 8003db2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003db4:	630a      	str	r2, [r1, #48]	@ 0x30
                p_tcb->PendPrevPtr->PendNextPtr = p_tcb;
 8003db6:	62d1      	str	r1, [r2, #44]	@ 0x2c
                p_tcb_next->PendPrevPtr         = p_tcb;
 8003db8:	6319      	str	r1, [r3, #48]	@ 0x30
            }
        }
    }
}
 8003dba:	4770      	bx	lr
            p_tcb->PendNextPtr              = (OS_TCB *)0;      /* ... insert at the tail.                              */
 8003dbc:	62cb      	str	r3, [r1, #44]	@ 0x2c
            p_tcb->PendPrevPtr              =  p_pend_list->TailPtr;
 8003dbe:	6843      	ldr	r3, [r0, #4]
 8003dc0:	630b      	str	r3, [r1, #48]	@ 0x30
            p_tcb->PendPrevPtr->PendNextPtr =  p_tcb;
 8003dc2:	62d9      	str	r1, [r3, #44]	@ 0x2c
            p_pend_list->TailPtr            =  p_tcb;
 8003dc4:	6041      	str	r1, [r0, #4]
 8003dc6:	4770      	bx	lr
                p_tcb->PendNextPtr      =  p_tcb_next;          /* Yes, insert as new Head of list                      */
 8003dc8:	62cb      	str	r3, [r1, #44]	@ 0x2c
                p_tcb->PendPrevPtr      = (OS_TCB *)0;
 8003dca:	630a      	str	r2, [r1, #48]	@ 0x30
                p_tcb_next->PendPrevPtr =  p_tcb;
 8003dcc:	6319      	str	r1, [r3, #48]	@ 0x30
                p_pend_list->HeadPtr    =  p_tcb;
 8003dce:	6001      	str	r1, [r0, #0]
 8003dd0:	4770      	bx	lr

08003dd2 <OS_PendListRemove>:
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_next;
    OS_TCB        *p_prev;


    if (p_tcb->PendObjPtr != (OS_PEND_OBJ *)0) {                /* Only remove if object has a pend list.               */
 8003dd2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003dd4:	b17b      	cbz	r3, 8003df6 <OS_PendListRemove+0x24>
        p_pend_list = &p_tcb->PendObjPtr->PendList;             /* Get pointer to pend list                             */

                                                                /* Remove TCB from the pend list.                       */
        if (p_pend_list->HeadPtr->PendNextPtr == (OS_TCB *)0) {
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003dda:	b16a      	cbz	r2, 8003df8 <OS_PendListRemove+0x26>
            p_pend_list->HeadPtr = (OS_TCB *)0;                 /* Only one entry in the pend list                      */
            p_pend_list->TailPtr = (OS_TCB *)0;
        } else if (p_tcb->PendPrevPtr == (OS_TCB *)0) {         /* See if entry is at the head of the list              */
 8003ddc:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003dde:	b172      	cbz	r2, 8003dfe <OS_PendListRemove+0x2c>
            p_next               =  p_tcb->PendNextPtr;         /* Yes                                                  */
            p_next->PendPrevPtr  = (OS_TCB *)0;
            p_pend_list->HeadPtr =  p_next;

        } else if (p_tcb->PendNextPtr == (OS_TCB *)0) {         /* See if entry is at the tail of the list              */
 8003de0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003de2:	b189      	cbz	r1, 8003e08 <OS_PendListRemove+0x36>
            p_pend_list->TailPtr =  p_prev;

        } else {
            p_prev               = p_tcb->PendPrevPtr;          /* Remove from inside the list                          */
            p_next               = p_tcb->PendNextPtr;
            p_prev->PendNextPtr  = p_next;
 8003de4:	62d1      	str	r1, [r2, #44]	@ 0x2c
            p_next->PendPrevPtr  = p_prev;
 8003de6:	630a      	str	r2, [r1, #48]	@ 0x30
        }
#if (OS_CFG_DBG_EN > 0u)
        p_pend_list->NbrEntries--;                              /* One less entry in the list                           */
 8003de8:	8a1a      	ldrh	r2, [r3, #16]
 8003dea:	3a01      	subs	r2, #1
 8003dec:	821a      	strh	r2, [r3, #16]
#endif
        p_tcb->PendNextPtr = (OS_TCB      *)0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	62c3      	str	r3, [r0, #44]	@ 0x2c
        p_tcb->PendPrevPtr = (OS_TCB      *)0;
 8003df2:	6303      	str	r3, [r0, #48]	@ 0x30
        p_tcb->PendObjPtr  = (OS_PEND_OBJ *)0;
 8003df4:	6343      	str	r3, [r0, #52]	@ 0x34
    }
}
 8003df6:	4770      	bx	lr
            p_pend_list->HeadPtr = (OS_TCB *)0;                 /* Only one entry in the pend list                      */
 8003df8:	609a      	str	r2, [r3, #8]
            p_pend_list->TailPtr = (OS_TCB *)0;
 8003dfa:	60da      	str	r2, [r3, #12]
 8003dfc:	e7f4      	b.n	8003de8 <OS_PendListRemove+0x16>
            p_next               =  p_tcb->PendNextPtr;         /* Yes                                                  */
 8003dfe:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
            p_next->PendPrevPtr  = (OS_TCB *)0;
 8003e00:	2100      	movs	r1, #0
 8003e02:	6311      	str	r1, [r2, #48]	@ 0x30
            p_pend_list->HeadPtr =  p_next;
 8003e04:	609a      	str	r2, [r3, #8]
 8003e06:	e7ef      	b.n	8003de8 <OS_PendListRemove+0x16>
            p_prev->PendNextPtr  = (OS_TCB *)0;
 8003e08:	62d1      	str	r1, [r2, #44]	@ 0x2c
            p_pend_list->TailPtr =  p_prev;
 8003e0a:	60da      	str	r2, [r3, #12]
 8003e0c:	e7ec      	b.n	8003de8 <OS_PendListRemove+0x16>

08003e0e <OS_PendListChangePrio>:
{
 8003e0e:	b570      	push	{r4, r5, r6, lr}
    p_obj       =  p_tcb->PendObjPtr;                           /* Get pointer to pend list                             */
 8003e10:	6b45      	ldr	r5, [r0, #52]	@ 0x34
    if (p_pend_list->HeadPtr->PendNextPtr != (OS_TCB *)0) {     /* Only move if multiple entries in the list            */
 8003e12:	68ab      	ldr	r3, [r5, #8]
 8003e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e16:	b14b      	cbz	r3, 8003e2c <OS_PendListChangePrio+0x1e>
 8003e18:	4604      	mov	r4, r0
 8003e1a:	f105 0608 	add.w	r6, r5, #8
            OS_PendListRemove(p_tcb);                           /* Remove entry from current position                   */
 8003e1e:	f7ff ffd8 	bl	8003dd2 <OS_PendListRemove>
            p_tcb->PendObjPtr = p_obj;
 8003e22:	6365      	str	r5, [r4, #52]	@ 0x34
            OS_PendListInsertPrio(p_pend_list,                  /* INSERT it back in the list                           */
 8003e24:	4621      	mov	r1, r4
 8003e26:	4630      	mov	r0, r6
 8003e28:	f7ff ffa9 	bl	8003d7e <OS_PendListInsertPrio>
}
 8003e2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e30 <OS_RdyListInit>:
    CPU_INT32U    i;
    OS_RDY_LIST  *p_rdy_list;



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                    /* Initialize the array of OS_RDY_LIST at each priority */
 8003e30:	2300      	movs	r3, #0
 8003e32:	2b1f      	cmp	r3, #31
 8003e34:	d80f      	bhi.n	8003e56 <OS_RdyListInit+0x26>
{
 8003e36:	b410      	push	{r4}
        p_rdy_list = &OSRdyList[i];
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries =           0u;
 8003e38:	4c07      	ldr	r4, [pc, #28]	@ (8003e58 <OS_RdyListInit+0x28>)
 8003e3a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8003e3e:	0091      	lsls	r1, r2, #2
 8003e40:	1860      	adds	r0, r4, r1
 8003e42:	2200      	movs	r2, #0
 8003e44:	8102      	strh	r2, [r0, #8]
#endif
        p_rdy_list->HeadPtr    = (OS_TCB *)0;
 8003e46:	5062      	str	r2, [r4, r1]
        p_rdy_list->TailPtr    = (OS_TCB *)0;
 8003e48:	6042      	str	r2, [r0, #4]
    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                    /* Initialize the array of OS_RDY_LIST at each priority */
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	2b1f      	cmp	r3, #31
 8003e4e:	d9f3      	bls.n	8003e38 <OS_RdyListInit+0x8>
    }
}
 8003e50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	4770      	bx	lr
 8003e58:	20001bbc 	.word	0x20001bbc

08003e5c <OSInit>:
{
 8003e5c:	b538      	push	{r3, r4, r5, lr}
 8003e5e:	4605      	mov	r5, r0
    OSInitHook();                                               /* Call port specific initialization code               */
 8003e60:	f7ff fd6e 	bl	8003940 <OSInitHook>
    OSIntNestingCtr       =           0u;                       /* Clear the interrupt nesting counter                  */
 8003e64:	2300      	movs	r3, #0
 8003e66:	4a3d      	ldr	r2, [pc, #244]	@ (8003f5c <OSInit+0x100>)
 8003e68:	7013      	strb	r3, [r2, #0]
    OSRunning             =  OS_STATE_OS_STOPPED;               /* Indicate that multitasking has not started           */
 8003e6a:	4a3d      	ldr	r2, [pc, #244]	@ (8003f60 <OSInit+0x104>)
 8003e6c:	7013      	strb	r3, [r2, #0]
    OSSchedLockNestingCtr =           0u;                       /* Clear the scheduling lock counter                    */
 8003e6e:	4a3d      	ldr	r2, [pc, #244]	@ (8003f64 <OSInit+0x108>)
 8003e70:	7013      	strb	r3, [r2, #0]
    OSTCBCurPtr           = (OS_TCB *)0;                        /* Initialize OS_TCB pointers to a known state          */
 8003e72:	4a3d      	ldr	r2, [pc, #244]	@ (8003f68 <OSInit+0x10c>)
 8003e74:	6013      	str	r3, [r2, #0]
    OSTCBHighRdyPtr       = (OS_TCB *)0;
 8003e76:	4a3d      	ldr	r2, [pc, #244]	@ (8003f6c <OSInit+0x110>)
 8003e78:	6013      	str	r3, [r2, #0]
    OSPrioCur             =           0u;                       /* Initialize priority variables to a known state       */
 8003e7a:	4a3d      	ldr	r2, [pc, #244]	@ (8003f70 <OSInit+0x114>)
 8003e7c:	7013      	strb	r3, [r2, #0]
    OSPrioHighRdy         =           0u;
 8003e7e:	4a3d      	ldr	r2, [pc, #244]	@ (8003f74 <OSInit+0x118>)
 8003e80:	7013      	strb	r3, [r2, #0]
    OSSchedRoundRobinEn             = OS_FALSE;
 8003e82:	4a3d      	ldr	r2, [pc, #244]	@ (8003f78 <OSInit+0x11c>)
 8003e84:	7013      	strb	r3, [r2, #0]
    OSSchedRoundRobinDfltTimeQuanta = OSCfg_TickRate_Hz / 10u;
 8003e86:	4b3d      	ldr	r3, [pc, #244]	@ (8003f7c <OSInit+0x120>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a3d      	ldr	r2, [pc, #244]	@ (8003f80 <OSInit+0x124>)
 8003e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e90:	08db      	lsrs	r3, r3, #3
 8003e92:	4a3c      	ldr	r2, [pc, #240]	@ (8003f84 <OSInit+0x128>)
 8003e94:	6013      	str	r3, [r2, #0]
    p_stk = OSCfg_ISRStkBasePtr;                                /* Clear exception stack for stack checking.            */
 8003e96:	4b3c      	ldr	r3, [pc, #240]	@ (8003f88 <OSInit+0x12c>)
 8003e98:	681a      	ldr	r2, [r3, #0]
    if (p_stk != (CPU_STK *)0) {
 8003e9a:	b142      	cbz	r2, 8003eae <OSInit+0x52>
        size  = OSCfg_ISRStkSize;
 8003e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f8c <OSInit+0x130>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
        while (size > 0u) {
 8003ea0:	e003      	b.n	8003eaa <OSInit+0x4e>
            size--;
 8003ea2:	3b01      	subs	r3, #1
           *p_stk = 0u;
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	f842 1b04 	str.w	r1, [r2], #4
        while (size > 0u) {
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f9      	bne.n	8003ea2 <OSInit+0x46>
    OS_AppTaskCreateHookPtr = (OS_APP_HOOK_TCB )0;
 8003eae:	2400      	movs	r4, #0
 8003eb0:	4b37      	ldr	r3, [pc, #220]	@ (8003f90 <OSInit+0x134>)
 8003eb2:	601c      	str	r4, [r3, #0]
    OS_AppTaskDelHookPtr    = (OS_APP_HOOK_TCB )0;
 8003eb4:	4b37      	ldr	r3, [pc, #220]	@ (8003f94 <OSInit+0x138>)
 8003eb6:	601c      	str	r4, [r3, #0]
    OS_AppTaskReturnHookPtr = (OS_APP_HOOK_TCB )0;
 8003eb8:	4b37      	ldr	r3, [pc, #220]	@ (8003f98 <OSInit+0x13c>)
 8003eba:	601c      	str	r4, [r3, #0]
    OS_AppIdleTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8003ebc:	4b37      	ldr	r3, [pc, #220]	@ (8003f9c <OSInit+0x140>)
 8003ebe:	601c      	str	r4, [r3, #0]
    OS_AppStatTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8003ec0:	4b37      	ldr	r3, [pc, #220]	@ (8003fa0 <OSInit+0x144>)
 8003ec2:	601c      	str	r4, [r3, #0]
    OS_AppTaskSwHookPtr     = (OS_APP_HOOK_VOID)0;
 8003ec4:	4b37      	ldr	r3, [pc, #220]	@ (8003fa4 <OSInit+0x148>)
 8003ec6:	601c      	str	r4, [r3, #0]
    OS_AppTimeTickHookPtr   = (OS_APP_HOOK_VOID)0;
 8003ec8:	4b37      	ldr	r3, [pc, #220]	@ (8003fa8 <OSInit+0x14c>)
 8003eca:	601c      	str	r4, [r3, #0]
    OSTaskRegNextAvailID = 0u;
 8003ecc:	4b37      	ldr	r3, [pc, #220]	@ (8003fac <OSInit+0x150>)
 8003ece:	701c      	strb	r4, [r3, #0]
    OS_PrioInit();                                              /* Initialize the priority bitmap table                 */
 8003ed0:	f001 f80e 	bl	8004ef0 <OS_PrioInit>
    OS_RdyListInit();                                           /* Initialize the Ready List                            */
 8003ed4:	f7ff ffac 	bl	8003e30 <OS_RdyListInit>
    OSFlagDbgListPtr = (OS_FLAG_GRP *)0;
 8003ed8:	4b35      	ldr	r3, [pc, #212]	@ (8003fb0 <OSInit+0x154>)
 8003eda:	601c      	str	r4, [r3, #0]
    OSFlagQty        =                0u;
 8003edc:	4b35      	ldr	r3, [pc, #212]	@ (8003fb4 <OSInit+0x158>)
 8003ede:	801c      	strh	r4, [r3, #0]
    OS_MemInit(p_err);
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	f000 fe51 	bl	8004b88 <OS_MemInit>
    if (*p_err != OS_ERR_NONE) {
 8003ee6:	882b      	ldrh	r3, [r5, #0]
 8003ee8:	b103      	cbz	r3, 8003eec <OSInit+0x90>
}
 8003eea:	bd38      	pop	{r3, r4, r5, pc}
    OS_MsgPoolInit(p_err);
 8003eec:	4628      	mov	r0, r5
 8003eee:	f000 fe57 	bl	8004ba0 <OS_MsgPoolInit>
    if (*p_err != OS_ERR_NONE) {
 8003ef2:	882b      	ldrh	r3, [r5, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f8      	bne.n	8003eea <OSInit+0x8e>
    OSMutexDbgListPtr = (OS_MUTEX *)0;
 8003ef8:	4a2f      	ldr	r2, [pc, #188]	@ (8003fb8 <OSInit+0x15c>)
 8003efa:	6014      	str	r4, [r2, #0]
    OSMutexQty        =             0u;
 8003efc:	4a2f      	ldr	r2, [pc, #188]	@ (8003fbc <OSInit+0x160>)
 8003efe:	8014      	strh	r4, [r2, #0]
    OSQDbgListPtr = (OS_Q *)0;
 8003f00:	4a2f      	ldr	r2, [pc, #188]	@ (8003fc0 <OSInit+0x164>)
 8003f02:	6014      	str	r4, [r2, #0]
    OSQQty        =         0u;
 8003f04:	4a2f      	ldr	r2, [pc, #188]	@ (8003fc4 <OSInit+0x168>)
 8003f06:	8014      	strh	r4, [r2, #0]
    OSSemDbgListPtr = (OS_SEM *)0;
 8003f08:	4a2f      	ldr	r2, [pc, #188]	@ (8003fc8 <OSInit+0x16c>)
 8003f0a:	6014      	str	r4, [r2, #0]
    OSSemQty        =           0u;
 8003f0c:	4a2f      	ldr	r2, [pc, #188]	@ (8003fcc <OSInit+0x170>)
 8003f0e:	8014      	strh	r4, [r2, #0]
    OS_TaskInit(p_err);                                         /* Initialize the task manager                          */
 8003f10:	4628      	mov	r0, r5
 8003f12:	f001 fa6f 	bl	80053f4 <OS_TaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003f16:	882b      	ldrh	r3, [r5, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e6      	bne.n	8003eea <OSInit+0x8e>
    OS_IdleTaskInit(p_err);                                     /* Initialize the Idle Task                             */
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	f7ff fecf 	bl	8003cc0 <OS_IdleTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003f22:	882b      	ldrh	r3, [r5, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e0      	bne.n	8003eea <OSInit+0x8e>
    OS_TickInit(p_err);
 8003f28:	4628      	mov	r0, r5
 8003f2a:	f001 fd63 	bl	80059f4 <OS_TickInit>
    if (*p_err != OS_ERR_NONE) {
 8003f2e:	882b      	ldrh	r3, [r5, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1da      	bne.n	8003eea <OSInit+0x8e>
    OS_StatTaskInit(p_err);
 8003f34:	4628      	mov	r0, r5
 8003f36:	f001 f97b 	bl	8005230 <OS_StatTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003f3a:	882b      	ldrh	r3, [r5, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1d4      	bne.n	8003eea <OSInit+0x8e>
    OS_TmrInit(p_err);
 8003f40:	4628      	mov	r0, r5
 8003f42:	f001 ffe3 	bl	8005f0c <OS_TmrInit>
    if (*p_err != OS_ERR_NONE) {
 8003f46:	882b      	ldrh	r3, [r5, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1ce      	bne.n	8003eea <OSInit+0x8e>
    OS_Dbg_Init();
 8003f4c:	f000 f9d2 	bl	80042f4 <OS_Dbg_Init>
    OSCfg_Init();
 8003f50:	f7ff fdb9 	bl	8003ac6 <OSCfg_Init>
    OSInitialized = OS_TRUE;                                    /* Kernel is initialized                                */
 8003f54:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd0 <OSInit+0x174>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	e7c6      	b.n	8003eea <OSInit+0x8e>
 8003f5c:	20001d76 	.word	0x20001d76
 8003f60:	20001d75 	.word	0x20001d75
 8003f64:	20001bb8 	.word	0x20001bb8
 8003f68:	20001988 	.word	0x20001988
 8003f6c:	20001984 	.word	0x20001984
 8003f70:	20001d49 	.word	0x20001d49
 8003f74:	20001d48 	.word	0x20001d48
 8003f78:	20001bb0 	.word	0x20001bb0
 8003f7c:	08006318 	.word	0x08006318
 8003f80:	cccccccd 	.word	0xcccccccd
 8003f84:	20001bb4 	.word	0x20001bb4
 8003f88:	08006340 	.word	0x08006340
 8003f8c:	0800633c 	.word	0x0800633c
 8003f90:	20001e58 	.word	0x20001e58
 8003f94:	20001e54 	.word	0x20001e54
 8003f98:	20001e50 	.word	0x20001e50
 8003f9c:	20001e4c 	.word	0x20001e4c
 8003fa0:	20001e48 	.word	0x20001e48
 8003fa4:	20001e44 	.word	0x20001e44
 8003fa8:	20001e40 	.word	0x20001e40
 8003fac:	20001ac4 	.word	0x20001ac4
 8003fb0:	20001d68 	.word	0x20001d68
 8003fb4:	20001d64 	.word	0x20001d64
 8003fb8:	20001d4c 	.word	0x20001d4c
 8003fbc:	20001d4a 	.word	0x20001d4a
 8003fc0:	20001d40 	.word	0x20001d40
 8003fc4:	20001d3c 	.word	0x20001d3c
 8003fc8:	20001bac 	.word	0x20001bac
 8003fcc:	20001baa 	.word	0x20001baa
 8003fd0:	20001d74 	.word	0x20001d74

08003fd4 <OS_RdyListInsertHead>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertHead (OS_TCB  *p_tcb)
{
 8003fd4:	b510      	push	{r4, lr}
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8003fd6:	f890 303b 	ldrb.w	r3, [r0, #59]	@ 0x3b
    if (p_rdy_list->HeadPtr == (OS_TCB *)0) {                   /* CASE 0: Insert when there are no entries             */
 8003fda:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003fde:	4a13      	ldr	r2, [pc, #76]	@ (800402c <OS_RdyListInsertHead+0x58>)
 8003fe0:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 8003fe4:	b194      	cbz	r4, 800400c <OS_RdyListInsertHead+0x38>
        p_tcb->PrevPtr         = (OS_TCB *)0;
        p_rdy_list->HeadPtr    =  p_tcb;                        /* Both list pointers point to this OS_TCB              */
        p_rdy_list->TailPtr    =  p_tcb;
    } else {                                                    /* CASE 1: Insert BEFORE the current head of list       */
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries++;                               /* One more OS_TCB in the list                          */
 8003fe6:	4a11      	ldr	r2, [pc, #68]	@ (800402c <OS_RdyListInsertHead+0x58>)
 8003fe8:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8003fec:	eb02 0e8c 	add.w	lr, r2, ip, lsl #2
 8003ff0:	f8be 1008 	ldrh.w	r1, [lr, #8]
 8003ff4:	3101      	adds	r1, #1
 8003ff6:	f8ae 1008 	strh.w	r1, [lr, #8]
#endif
        p_tcb->NextPtr         =  p_rdy_list->HeadPtr;          /* Adjust new OS_TCBs links                             */
 8003ffa:	6104      	str	r4, [r0, #16]
        p_tcb->PrevPtr         = (OS_TCB *)0;
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	6141      	str	r1, [r0, #20]
        p_tcb2                 =  p_rdy_list->HeadPtr;          /* Adjust old head of list's links                      */
 8004000:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
        p_tcb2->PrevPtr        =  p_tcb;
 8004004:	6148      	str	r0, [r1, #20]
        p_rdy_list->HeadPtr    =  p_tcb;
 8004006:	f842 002c 	str.w	r0, [r2, ip, lsl #2]
    }
}
 800400a:	bd10      	pop	{r4, pc}
        p_rdy_list->NbrEntries =           1u;                  /* This is the first entry                              */
 800400c:	eb02 0481 	add.w	r4, r2, r1, lsl #2
 8004010:	f04f 0c01 	mov.w	ip, #1
 8004014:	f8a4 c008 	strh.w	ip, [r4, #8]
        p_tcb->NextPtr         = (OS_TCB *)0;                   /* No other OS_TCBs in the list                         */
 8004018:	2400      	movs	r4, #0
 800401a:	6104      	str	r4, [r0, #16]
        p_tcb->PrevPtr         = (OS_TCB *)0;
 800401c:	6144      	str	r4, [r0, #20]
        p_rdy_list->HeadPtr    =  p_tcb;                        /* Both list pointers point to this OS_TCB              */
 800401e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        p_rdy_list->TailPtr    =  p_tcb;
 8004022:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004026:	6050      	str	r0, [r2, #4]
 8004028:	e7ef      	b.n	800400a <OS_RdyListInsertHead+0x36>
 800402a:	bf00      	nop
 800402c:	20001bbc 	.word	0x20001bbc

08004030 <OS_RdyListInsertTail>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertTail (OS_TCB  *p_tcb)
{
 8004030:	b410      	push	{r4}
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8004032:	f890 303b 	ldrb.w	r3, [r0, #59]	@ 0x3b
    if (p_rdy_list->HeadPtr == (OS_TCB *)0) {                   /* CASE 0: Insert when there are no entries             */
 8004036:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800403a:	4a16      	ldr	r2, [pc, #88]	@ (8004094 <OS_RdyListInsertTail+0x64>)
 800403c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004040:	b1ba      	cbz	r2, 8004072 <OS_RdyListInsertTail+0x42>
        p_tcb->PrevPtr          = (OS_TCB *)0;
        p_rdy_list->HeadPtr     =  p_tcb;                       /* Both list pointers point to this OS_TCB              */
        p_rdy_list->TailPtr     =  p_tcb;
    } else {                                                    /* CASE 1: Insert AFTER the current tail of list        */
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries++;                               /* One more OS_TCB in the list                          */
 8004042:	4914      	ldr	r1, [pc, #80]	@ (8004094 <OS_RdyListInsertTail+0x64>)
 8004044:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8004048:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800404c:	f8b2 c008 	ldrh.w	ip, [r2, #8]
 8004050:	f10c 0c01 	add.w	ip, ip, #1
 8004054:	f8a2 c008 	strh.w	ip, [r2, #8]
#endif
        p_tcb->NextPtr          = (OS_TCB *)0;                  /* Adjust new OS_TCBs links                             */
 8004058:	2400      	movs	r4, #0
 800405a:	6104      	str	r4, [r0, #16]
        p_tcb2                  =  p_rdy_list->TailPtr;
 800405c:	6852      	ldr	r2, [r2, #4]
        p_tcb->PrevPtr          =  p_tcb2;
 800405e:	6142      	str	r2, [r0, #20]
        p_tcb2->NextPtr         =  p_tcb;                       /* Adjust old tail of list's links                      */
 8004060:	6110      	str	r0, [r2, #16]
        p_rdy_list->TailPtr     =  p_tcb;
 8004062:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004066:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800406a:	6048      	str	r0, [r1, #4]
    }
}
 800406c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004070:	4770      	bx	lr
        p_rdy_list->NbrEntries  =           1u;                 /* This is the first entry                              */
 8004072:	4a08      	ldr	r2, [pc, #32]	@ (8004094 <OS_RdyListInsertTail+0x64>)
 8004074:	eb02 0481 	add.w	r4, r2, r1, lsl #2
 8004078:	f04f 0c01 	mov.w	ip, #1
 800407c:	f8a4 c008 	strh.w	ip, [r4, #8]
        p_tcb->NextPtr          = (OS_TCB *)0;                  /* No other OS_TCBs in the list                         */
 8004080:	2400      	movs	r4, #0
 8004082:	6104      	str	r4, [r0, #16]
        p_tcb->PrevPtr          = (OS_TCB *)0;
 8004084:	6144      	str	r4, [r0, #20]
        p_rdy_list->HeadPtr     =  p_tcb;                       /* Both list pointers point to this OS_TCB              */
 8004086:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        p_rdy_list->TailPtr     =  p_tcb;
 800408a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800408e:	6050      	str	r0, [r2, #4]
 8004090:	e7ec      	b.n	800406c <OS_RdyListInsertTail+0x3c>
 8004092:	bf00      	nop
 8004094:	20001bbc 	.word	0x20001bbc

08004098 <OS_RdyListInsert>:
{
 8004098:	b510      	push	{r4, lr}
 800409a:	4604      	mov	r4, r0
    OS_PrioInsert(p_tcb->Prio);
 800409c:	f890 003b 	ldrb.w	r0, [r0, #59]	@ 0x3b
 80040a0:	f000 ff3c 	bl	8004f1c <OS_PrioInsert>
    if (p_tcb->Prio == OSPrioCur) {                             /* Are we readying a task at the same prio?             */
 80040a4:	f894 203b 	ldrb.w	r2, [r4, #59]	@ 0x3b
 80040a8:	4b05      	ldr	r3, [pc, #20]	@ (80040c0 <OS_RdyListInsert+0x28>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d003      	beq.n	80040b8 <OS_RdyListInsert+0x20>
        OS_RdyListInsertHead(p_tcb);                            /* No,  insert readied task at the beginning of the list*/
 80040b0:	4620      	mov	r0, r4
 80040b2:	f7ff ff8f 	bl	8003fd4 <OS_RdyListInsertHead>
}
 80040b6:	bd10      	pop	{r4, pc}
        OS_RdyListInsertTail(p_tcb);                            /* Yes, insert readied task at the end of the list      */
 80040b8:	4620      	mov	r0, r4
 80040ba:	f7ff ffb9 	bl	8004030 <OS_RdyListInsertTail>
 80040be:	e7fa      	b.n	80040b6 <OS_RdyListInsert+0x1e>
 80040c0:	20001d49 	.word	0x20001d49

080040c4 <OS_Post>:
{
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	4605      	mov	r5, r0
 80040c8:	460c      	mov	r4, r1
    switch (p_tcb->TaskState) {
 80040ca:	f891 103a 	ldrb.w	r1, [r1, #58]	@ 0x3a
 80040ce:	2903      	cmp	r1, #3
 80040d0:	d91b      	bls.n	800410a <OS_Post+0x46>
 80040d2:	3906      	subs	r1, #6
 80040d4:	b2c9      	uxtb	r1, r1
 80040d6:	2901      	cmp	r1, #1
 80040d8:	d819      	bhi.n	800410e <OS_Post+0x4a>
             p_tcb->MsgPtr  = p_void;                           /* Deposit message in OS_TCB of task waiting            */
 80040da:	6622      	str	r2, [r4, #96]	@ 0x60
             p_tcb->MsgSize = msg_size;                         /* ... assuming posting a message                       */
 80040dc:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
             if (p_obj != (OS_PEND_OBJ *)0) {
 80040e0:	b110      	cbz	r0, 80040e8 <OS_Post+0x24>
                 OS_PendListRemove(p_tcb);                      /* Remove from pend list                                */
 80040e2:	4620      	mov	r0, r4
 80040e4:	f7ff fe75 	bl	8003dd2 <OS_PendListRemove>
             OS_PendDbgNameRemove(p_obj,
 80040e8:	4621      	mov	r1, r4
 80040ea:	4628      	mov	r0, r5
 80040ec:	f7ff fe34 	bl	8003d58 <OS_PendDbgNameRemove>
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 80040f0:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 80040f4:	2b07      	cmp	r3, #7
 80040f6:	d029      	beq.n	800414c <OS_Post+0x88>
             p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 80040f8:	2304      	movs	r3, #4
 80040fa:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
             p_tcb->PendStatus = OS_STATUS_PEND_OK;             /* Clear pend status                                    */
 80040fe:	2300      	movs	r3, #0
 8004100:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;       /* Indicate no longer pending                           */
 8004104:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
}
 8004108:	e001      	b.n	800410e <OS_Post+0x4a>
    switch (p_tcb->TaskState) {
 800410a:	2902      	cmp	r1, #2
 800410c:	d200      	bcs.n	8004110 <OS_Post+0x4c>
}
 800410e:	bd38      	pop	{r3, r4, r5, pc}
             p_tcb->MsgPtr  = p_void;                           /* Deposit message in OS_TCB of task waiting            */
 8004110:	6622      	str	r2, [r4, #96]	@ 0x60
             p_tcb->MsgSize = msg_size;                         /* ... assuming posting a message                       */
 8004112:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
             if (p_obj != (OS_PEND_OBJ *)0) {
 8004116:	b110      	cbz	r0, 800411e <OS_Post+0x5a>
                 OS_PendListRemove(p_tcb);                      /* Remove task from pend list                           */
 8004118:	4620      	mov	r0, r4
 800411a:	f7ff fe5a 	bl	8003dd2 <OS_PendListRemove>
             OS_PendDbgNameRemove(p_obj,
 800411e:	4621      	mov	r1, r4
 8004120:	4628      	mov	r0, r5
 8004122:	f7ff fe19 	bl	8003d58 <OS_PendDbgNameRemove>
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 8004126:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 800412a:	2b03      	cmp	r3, #3
 800412c:	d00a      	beq.n	8004144 <OS_Post+0x80>
             OS_RdyListInsert(p_tcb);                           /* Insert the task in the ready list                    */
 800412e:	4620      	mov	r0, r4
 8004130:	f7ff ffb2 	bl	8004098 <OS_RdyListInsert>
             p_tcb->TaskState  = OS_TASK_STATE_RDY;
 8004134:	2300      	movs	r3, #0
 8004136:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
             p_tcb->PendStatus = OS_STATUS_PEND_OK;             /* Clear pend status                                    */
 800413a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;       /* Indicate no longer pending                           */
 800413e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
             break;
 8004142:	e7e4      	b.n	800410e <OS_Post+0x4a>
                 OS_TickListRemove(p_tcb);                      /* Remove from tick list                                */
 8004144:	4620      	mov	r0, r4
 8004146:	f001 fd03 	bl	8005b50 <OS_TickListRemove>
 800414a:	e7f0      	b.n	800412e <OS_Post+0x6a>
                 OS_TickListRemove(p_tcb);                      /* Cancel any timeout                                   */
 800414c:	4620      	mov	r0, r4
 800414e:	f001 fcff 	bl	8005b50 <OS_TickListRemove>
 8004152:	e7d1      	b.n	80040f8 <OS_Post+0x34>

08004154 <OS_RdyListMoveHeadToTail>:
    OS_TCB  *p_tcb1;
    OS_TCB  *p_tcb2;
    OS_TCB  *p_tcb3;


     if (p_rdy_list->HeadPtr != p_rdy_list->TailPtr) {
 8004154:	6803      	ldr	r3, [r0, #0]
 8004156:	6842      	ldr	r2, [r0, #4]
 8004158:	4293      	cmp	r3, r2
 800415a:	d015      	beq.n	8004188 <OS_RdyListMoveHeadToTail+0x34>
         if (p_rdy_list->HeadPtr->NextPtr == p_rdy_list->TailPtr) { /* SWAP the TCBs                                    */
 800415c:	6919      	ldr	r1, [r3, #16]
 800415e:	428a      	cmp	r2, r1
 8004160:	d00a      	beq.n	8004178 <OS_RdyListMoveHeadToTail+0x24>
{
 8004162:	b410      	push	{r4}
             p_rdy_list->TailPtr =  p_tcb1;
         } else {
             p_tcb1              =  p_rdy_list->HeadPtr;        /* Point to current head                                */
             p_tcb2              =  p_rdy_list->TailPtr;        /* Point to current tail                                */
             p_tcb3              =  p_tcb1->NextPtr;            /* Point to new list head                               */
             p_tcb3->PrevPtr     = (OS_TCB *)0;                 /* Adjust back    link of new list head                 */
 8004164:	2400      	movs	r4, #0
 8004166:	614c      	str	r4, [r1, #20]
             p_tcb1->NextPtr     = (OS_TCB *)0;                 /* Adjust forward link of new list tail                 */
 8004168:	611c      	str	r4, [r3, #16]
             p_tcb1->PrevPtr     =  p_tcb2;                     /* Adjust back    link of new list tail                 */
 800416a:	615a      	str	r2, [r3, #20]
             p_tcb2->NextPtr     =  p_tcb1;                     /* Adjust forward link of old list tail                 */
 800416c:	6113      	str	r3, [r2, #16]
             p_rdy_list->HeadPtr =  p_tcb3;                     /* Adjust new list head and tail pointers               */
 800416e:	6001      	str	r1, [r0, #0]
             p_rdy_list->TailPtr =  p_tcb1;
 8004170:	6043      	str	r3, [r0, #4]
         }
     }
}
 8004172:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004176:	4770      	bx	lr
             p_tcb1->PrevPtr     =  p_tcb2;
 8004178:	615a      	str	r2, [r3, #20]
             p_tcb1->NextPtr     = (OS_TCB *)0;
 800417a:	2100      	movs	r1, #0
 800417c:	6119      	str	r1, [r3, #16]
             p_tcb2->PrevPtr     = (OS_TCB *)0;
 800417e:	6151      	str	r1, [r2, #20]
             p_tcb2->NextPtr     =  p_tcb1;
 8004180:	6113      	str	r3, [r2, #16]
             p_rdy_list->HeadPtr =  p_tcb2;
 8004182:	6002      	str	r2, [r0, #0]
             p_rdy_list->TailPtr =  p_tcb1;
 8004184:	6043      	str	r3, [r0, #4]
 8004186:	4770      	bx	lr
 8004188:	4770      	bx	lr
	...

0800418c <OS_RdyListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListRemove (OS_TCB  *p_tcb)
{
 800418c:	b538      	push	{r3, r4, r5, lr}
 800418e:	4604      	mov	r4, r0
    OS_TCB       *p_tcb1;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8004190:	f890 303b 	ldrb.w	r3, [r0, #59]	@ 0x3b
    p_tcb1     = p_tcb->PrevPtr;                                /* Point to next and previous OS_TCB in the list        */
 8004194:	6940      	ldr	r0, [r0, #20]
    p_tcb2     = p_tcb->NextPtr;
 8004196:	6922      	ldr	r2, [r4, #16]
    if (p_tcb1 == (OS_TCB *)0) {                                /* Was the OS_TCB to remove at the head?                */
 8004198:	b188      	cbz	r0, 80041be <OS_RdyListRemove+0x32>
            p_tcb2->PrevPtr     = (OS_TCB *)0;                  /* adjust back link of new list head                    */
            p_rdy_list->HeadPtr =  p_tcb2;                      /* adjust OS_RDY_LIST's new head                        */
        }
    } else {
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries--;                               /* No,  one less entry                                  */
 800419a:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800419e:	4918      	ldr	r1, [pc, #96]	@ (8004200 <OS_RdyListRemove+0x74>)
 80041a0:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 80041a4:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80041a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80041ac:	f8a1 c008 	strh.w	ip, [r1, #8]
#endif
        p_tcb1->NextPtr = p_tcb2;
 80041b0:	6102      	str	r2, [r0, #16]
        if (p_tcb2 == (OS_TCB *)0) {
 80041b2:	b312      	cbz	r2, 80041fa <OS_RdyListRemove+0x6e>
            p_rdy_list->TailPtr = p_tcb1;                       /* Removing the TCB at the tail, adj the tail ptr       */
        } else {
            p_tcb2->PrevPtr     = p_tcb1;
 80041b4:	6150      	str	r0, [r2, #20]
        }
    }
    p_tcb->PrevPtr = (OS_TCB *)0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	6163      	str	r3, [r4, #20]
    p_tcb->NextPtr = (OS_TCB *)0;
 80041ba:	6123      	str	r3, [r4, #16]

    OS_TRACE_TASK_SUSPENDED(p_tcb);
}
 80041bc:	bd38      	pop	{r3, r4, r5, pc}
        if (p_tcb2 == (OS_TCB *)0) {                            /* Yes, was it the only OS_TCB?                         */
 80041be:	b172      	cbz	r2, 80041de <OS_RdyListRemove+0x52>
            p_rdy_list->NbrEntries--;                           /* No,  one less entry                                  */
 80041c0:	4d0f      	ldr	r5, [pc, #60]	@ (8004200 <OS_RdyListRemove+0x74>)
 80041c2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80041c6:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80041ca:	8908      	ldrh	r0, [r1, #8]
 80041cc:	3801      	subs	r0, #1
 80041ce:	8108      	strh	r0, [r1, #8]
            p_tcb2->PrevPtr     = (OS_TCB *)0;                  /* adjust back link of new list head                    */
 80041d0:	2100      	movs	r1, #0
 80041d2:	6151      	str	r1, [r2, #20]
            p_rdy_list->HeadPtr =  p_tcb2;                      /* adjust OS_RDY_LIST's new head                        */
 80041d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80041d8:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
 80041dc:	e7eb      	b.n	80041b6 <OS_RdyListRemove+0x2a>
            p_rdy_list->NbrEntries =           0u;              /* Yes, no more entries                                 */
 80041de:	4a08      	ldr	r2, [pc, #32]	@ (8004200 <OS_RdyListRemove+0x74>)
 80041e0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80041e4:	008d      	lsls	r5, r1, #2
 80041e6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80041ea:	8108      	strh	r0, [r1, #8]
            p_rdy_list->HeadPtr    = (OS_TCB *)0;
 80041ec:	5150      	str	r0, [r2, r5]
            p_rdy_list->TailPtr    = (OS_TCB *)0;
 80041ee:	6048      	str	r0, [r1, #4]
            OS_PrioRemove(p_tcb->Prio);
 80041f0:	f894 003b 	ldrb.w	r0, [r4, #59]	@ 0x3b
 80041f4:	f000 fe9c 	bl	8004f30 <OS_PrioRemove>
 80041f8:	e7dd      	b.n	80041b6 <OS_RdyListRemove+0x2a>
            p_rdy_list->TailPtr = p_tcb1;                       /* Removing the TCB at the tail, adj the tail ptr       */
 80041fa:	6048      	str	r0, [r1, #4]
 80041fc:	e7db      	b.n	80041b6 <OS_RdyListRemove+0x2a>
 80041fe:	bf00      	nop
 8004200:	20001bbc 	.word	0x20001bbc

08004204 <OS_SchedRoundRobin>:
************************************************************************************************************************
*/

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
void  OS_SchedRoundRobin (OS_RDY_LIST  *p_rdy_list)
{
 8004204:	b538      	push	{r3, r4, r5, lr}
    OS_TCB  *p_tcb;
    CPU_SR_ALLOC();


    if (OSSchedRoundRobinEn != OS_TRUE) {                       /* Make sure round-robin has been enabled               */
 8004206:	4b1e      	ldr	r3, [pc, #120]	@ (8004280 <OS_SchedRoundRobin+0x7c>)
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d000      	beq.n	8004210 <OS_SchedRoundRobin+0xc>
        p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta;
    } else {
        p_tcb->TimeQuantaCtr = p_tcb->TimeQuanta;               /* Load time slice counter with new time                */
    }
    CPU_CRITICAL_EXIT();
}
 800420e:	bd38      	pop	{r3, r4, r5, pc}
 8004210:	4604      	mov	r4, r0
    CPU_CRITICAL_ENTER();
 8004212:	2040      	movs	r0, #64	@ 0x40
 8004214:	f7fb ffdc 	bl	80001d0 <CPU_SR_Save>
 8004218:	4605      	mov	r5, r0
    p_tcb = p_rdy_list->HeadPtr;                                /* Decrement time quanta counter                        */
 800421a:	6823      	ldr	r3, [r4, #0]
    if (p_tcb == (OS_TCB *)0) {
 800421c:	b1e3      	cbz	r3, 8004258 <OS_SchedRoundRobin+0x54>
    if (p_tcb == &OSIdleTaskTCB) {
 800421e:	4a19      	ldr	r2, [pc, #100]	@ (8004284 <OS_SchedRoundRobin+0x80>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d01c      	beq.n	800425e <OS_SchedRoundRobin+0x5a>
    if (p_tcb->TimeQuantaCtr > 0u) {
 8004224:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004226:	b10a      	cbz	r2, 800422c <OS_SchedRoundRobin+0x28>
        p_tcb->TimeQuantaCtr--;
 8004228:	3a01      	subs	r2, #1
 800422a:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (p_tcb->TimeQuantaCtr > 0u) {                            /* Task not done with its time quanta                   */
 800422c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800422e:	b9cb      	cbnz	r3, 8004264 <OS_SchedRoundRobin+0x60>
    if (p_rdy_list->HeadPtr == p_rdy_list->TailPtr) {           /* See if it's time to time slice current task          */
 8004230:	6822      	ldr	r2, [r4, #0]
 8004232:	6863      	ldr	r3, [r4, #4]
 8004234:	429a      	cmp	r2, r3
 8004236:	d019      	beq.n	800426c <OS_SchedRoundRobin+0x68>
    if (OSSchedLockNestingCtr > 0u) {                           /* Can't round-robin if the scheduler is locked         */
 8004238:	4b13      	ldr	r3, [pc, #76]	@ (8004288 <OS_SchedRoundRobin+0x84>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	b9d3      	cbnz	r3, 8004274 <OS_SchedRoundRobin+0x70>
    OS_RdyListMoveHeadToTail(p_rdy_list);                       /* Move current OS_TCB to the end of the list           */
 800423e:	4620      	mov	r0, r4
 8004240:	f7ff ff88 	bl	8004154 <OS_RdyListMoveHeadToTail>
    p_tcb = p_rdy_list->HeadPtr;                                /* Point to new OS_TCB at head of the list              */
 8004244:	6823      	ldr	r3, [r4, #0]
    if (p_tcb->TimeQuanta == 0u) {                              /* See if we need to use the default time slice         */
 8004246:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004248:	b9c2      	cbnz	r2, 800427c <OS_SchedRoundRobin+0x78>
        p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta;
 800424a:	4a10      	ldr	r2, [pc, #64]	@ (800428c <OS_SchedRoundRobin+0x88>)
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	65da      	str	r2, [r3, #92]	@ 0x5c
    CPU_CRITICAL_EXIT();
 8004250:	4628      	mov	r0, r5
 8004252:	f7fb ffcb 	bl	80001ec <CPU_SR_Restore>
 8004256:	e7da      	b.n	800420e <OS_SchedRoundRobin+0xa>
        CPU_CRITICAL_EXIT();
 8004258:	f7fb ffc8 	bl	80001ec <CPU_SR_Restore>
        return;
 800425c:	e7d7      	b.n	800420e <OS_SchedRoundRobin+0xa>
        CPU_CRITICAL_EXIT();
 800425e:	f7fb ffc5 	bl	80001ec <CPU_SR_Restore>
        return;
 8004262:	e7d4      	b.n	800420e <OS_SchedRoundRobin+0xa>
        CPU_CRITICAL_EXIT();
 8004264:	4628      	mov	r0, r5
 8004266:	f7fb ffc1 	bl	80001ec <CPU_SR_Restore>
        return;
 800426a:	e7d0      	b.n	800420e <OS_SchedRoundRobin+0xa>
        CPU_CRITICAL_EXIT();                                    /* ... only if multiple tasks at same priority          */
 800426c:	4628      	mov	r0, r5
 800426e:	f7fb ffbd 	bl	80001ec <CPU_SR_Restore>
        return;
 8004272:	e7cc      	b.n	800420e <OS_SchedRoundRobin+0xa>
        CPU_CRITICAL_EXIT();
 8004274:	4628      	mov	r0, r5
 8004276:	f7fb ffb9 	bl	80001ec <CPU_SR_Restore>
        return;
 800427a:	e7c8      	b.n	800420e <OS_SchedRoundRobin+0xa>
        p_tcb->TimeQuantaCtr = p_tcb->TimeQuanta;               /* Load time slice counter with new time                */
 800427c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800427e:	e7e7      	b.n	8004250 <OS_SchedRoundRobin+0x4c>
 8004280:	20001bb0 	.word	0x20001bb0
 8004284:	20001d78 	.word	0x20001d78
 8004288:	20001bb8 	.word	0x20001bb8
 800428c:	20001bb4 	.word	0x20001bb4

08004290 <OS_TaskBlock>:
************************************************************************************************************************
*/

void  OS_TaskBlock (OS_TCB   *p_tcb,
                    OS_TICK   timeout)
{
 8004290:	b510      	push	{r4, lr}
 8004292:	4604      	mov	r4, r0

    elapsed = OS_DynTickGet();
#endif

#if (OS_CFG_TICK_EN > 0u)
    if (timeout > 0u) {                                         /* Add task to tick list if timeout non zero            */
 8004294:	b931      	cbnz	r1, 80042a4 <OS_TaskBlock+0x14>
#else
        (void)OS_TickListInsert(p_tcb,      0u,             OSTickCtr, timeout);
#endif
        p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
    } else {
        p_tcb->TaskState = OS_TASK_STATE_PEND;
 8004296:	2302      	movs	r3, #2
 8004298:	f880 303a 	strb.w	r3, [r0, #58]	@ 0x3a
    }
#else
    (void)timeout;
    p_tcb->TaskState = OS_TASK_STATE_PEND;
#endif
    OS_RdyListRemove(p_tcb);
 800429c:	4620      	mov	r0, r4
 800429e:	f7ff ff75 	bl	800418c <OS_RdyListRemove>
}
 80042a2:	bd10      	pop	{r4, pc}
 80042a4:	460b      	mov	r3, r1
        (void)OS_TickListInsert(p_tcb,      0u,             OSTickCtr, timeout);
 80042a6:	4a04      	ldr	r2, [pc, #16]	@ (80042b8 <OS_TaskBlock+0x28>)
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	2100      	movs	r1, #0
 80042ac:	f001 fbc4 	bl	8005a38 <OS_TickListInsert>
        p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
 80042b6:	e7f1      	b.n	800429c <OS_TaskBlock+0xc>
 80042b8:	20001ac0 	.word	0x20001ac0

080042bc <OS_Pend>:
{
 80042bc:	b538      	push	{r3, r4, r5, lr}
 80042be:	4605      	mov	r5, r0
 80042c0:	460c      	mov	r4, r1
    p_tcb->PendOn     = pending_on;                             /* Resource not available, wait until it is             */
 80042c2:	f881 2038 	strb.w	r2, [r1, #56]	@ 0x38
    p_tcb->PendStatus = OS_STATUS_PEND_OK;
 80042c6:	2200      	movs	r2, #0
 80042c8:	f881 2039 	strb.w	r2, [r1, #57]	@ 0x39
    OS_TaskBlock(p_tcb,                                         /* Block the task and add it to the tick list if needed */
 80042cc:	4619      	mov	r1, r3
 80042ce:	4620      	mov	r0, r4
 80042d0:	f7ff ffde 	bl	8004290 <OS_TaskBlock>
    if (p_obj != (OS_PEND_OBJ *)0) {                            /* Add the current task to the pend list ...            */
 80042d4:	b155      	cbz	r5, 80042ec <OS_Pend+0x30>
        p_tcb->PendObjPtr =  p_obj;                             /* Save the pointer to the object pending on            */
 80042d6:	6365      	str	r5, [r4, #52]	@ 0x34
        OS_PendListInsertPrio(p_pend_list,                      /* Insert in the pend list in priority order            */
 80042d8:	4621      	mov	r1, r4
 80042da:	f105 0008 	add.w	r0, r5, #8
 80042de:	f7ff fd4e 	bl	8003d7e <OS_PendListInsertPrio>
    OS_PendDbgNameAdd(p_obj,
 80042e2:	4621      	mov	r1, r4
 80042e4:	4628      	mov	r0, r5
 80042e6:	f7ff fd17 	bl	8003d18 <OS_PendDbgNameAdd>
}
 80042ea:	bd38      	pop	{r3, r4, r5, pc}
        p_tcb->PendObjPtr = (OS_PEND_OBJ *)0;                   /* If no object being pended on, clear the pend object  */
 80042ec:	2300      	movs	r3, #0
 80042ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80042f0:	e7f7      	b.n	80042e2 <OS_Pend+0x26>
	...

080042f4 <OS_Dbg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OS_Dbg_Init (void)
{
 80042f4:	b084      	sub	sp, #16
    CPU_INT08U const * volatile  p_temp08;
    CPU_INT16U const * volatile  p_temp16;
    CPU_INT32U const * volatile  p_temp32;


    p_temp08 = (CPU_INT08U const *)&OSDbg_DbgEn;
 80042f6:	4b48      	ldr	r3, [pc, #288]	@ (8004418 <OS_Dbg_Init+0x124>)
 80042f8:	9303      	str	r3, [sp, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_DataSize;
 80042fa:	4b48      	ldr	r3, [pc, #288]	@ (800441c <OS_Dbg_Init+0x128>)
 80042fc:	9301      	str	r3, [sp, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_ArgChkEn;
 80042fe:	4b48      	ldr	r3, [pc, #288]	@ (8004420 <OS_Dbg_Init+0x12c>)
 8004300:	9303      	str	r3, [sp, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_AppHooksEn;
 8004302:	4b48      	ldr	r3, [pc, #288]	@ (8004424 <OS_Dbg_Init+0x130>)
 8004304:	9303      	str	r3, [sp, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_EndiannessTest;
 8004306:	4b48      	ldr	r3, [pc, #288]	@ (8004428 <OS_Dbg_Init+0x134>)
 8004308:	9301      	str	r3, [sp, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_CalledFromISRChkEn;
 800430a:	4b48      	ldr	r3, [pc, #288]	@ (800442c <OS_Dbg_Init+0x138>)
 800430c:	9303      	str	r3, [sp, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrp;
 800430e:	4b48      	ldr	r3, [pc, #288]	@ (8004430 <OS_Dbg_Init+0x13c>)
 8004310:	9302      	str	r3, [sp, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagEn;
 8004312:	4b48      	ldr	r3, [pc, #288]	@ (8004434 <OS_Dbg_Init+0x140>)
 8004314:	9303      	str	r3, [sp, #12]
#if (OS_CFG_FLAG_EN > 0u)
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagDelEn;
 8004316:	4b48      	ldr	r3, [pc, #288]	@ (8004438 <OS_Dbg_Init+0x144>)
 8004318:	9303      	str	r3, [sp, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagModeClrEn;
 800431a:	4b48      	ldr	r3, [pc, #288]	@ (800443c <OS_Dbg_Init+0x148>)
 800431c:	9303      	str	r3, [sp, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagPendAbortEn;
 800431e:	4b48      	ldr	r3, [pc, #288]	@ (8004440 <OS_Dbg_Init+0x14c>)
 8004320:	9303      	str	r3, [sp, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrpSize;
 8004322:	4b48      	ldr	r3, [pc, #288]	@ (8004444 <OS_Dbg_Init+0x150>)
 8004324:	9302      	str	r3, [sp, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagWidth;
 8004326:	4b48      	ldr	r3, [pc, #288]	@ (8004448 <OS_Dbg_Init+0x154>)
 8004328:	9302      	str	r3, [sp, #8]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mem;
 800432a:	4b48      	ldr	r3, [pc, #288]	@ (800444c <OS_Dbg_Init+0x158>)
 800432c:	9302      	str	r3, [sp, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MemEn;
 800432e:	4b48      	ldr	r3, [pc, #288]	@ (8004450 <OS_Dbg_Init+0x15c>)
 8004330:	9303      	str	r3, [sp, #12]
#if (OS_CFG_MEM_EN > 0u)
    p_temp16 = (CPU_INT16U const *)&OSDbg_MemSize;
 8004332:	4b48      	ldr	r3, [pc, #288]	@ (8004454 <OS_Dbg_Init+0x160>)
 8004334:	9302      	str	r3, [sp, #8]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_MsgEn;
 8004336:	4b48      	ldr	r3, [pc, #288]	@ (8004458 <OS_Dbg_Init+0x164>)
 8004338:	9303      	str	r3, [sp, #12]
#if (OS_MSG_EN > 0u)
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgSize;
 800433a:	4b48      	ldr	r3, [pc, #288]	@ (800445c <OS_Dbg_Init+0x168>)
 800433c:	9302      	str	r3, [sp, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgPoolSize;
 800433e:	4b48      	ldr	r3, [pc, #288]	@ (8004460 <OS_Dbg_Init+0x16c>)
 8004340:	9302      	str	r3, [sp, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgQSize;
 8004342:	4b48      	ldr	r3, [pc, #288]	@ (8004464 <OS_Dbg_Init+0x170>)
 8004344:	9302      	str	r3, [sp, #8]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mutex;
 8004346:	4b48      	ldr	r3, [pc, #288]	@ (8004468 <OS_Dbg_Init+0x174>)
 8004348:	9302      	str	r3, [sp, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexEn;
 800434a:	4b48      	ldr	r3, [pc, #288]	@ (800446c <OS_Dbg_Init+0x178>)
 800434c:	9303      	str	r3, [sp, #12]
#if (OS_CFG_MUTEX_EN > 0u)
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexDelEn;
 800434e:	4b48      	ldr	r3, [pc, #288]	@ (8004470 <OS_Dbg_Init+0x17c>)
 8004350:	9303      	str	r3, [sp, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexPendAbortEn;
 8004352:	4b48      	ldr	r3, [pc, #288]	@ (8004474 <OS_Dbg_Init+0x180>)
 8004354:	9303      	str	r3, [sp, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MutexSize;
 8004356:	4b48      	ldr	r3, [pc, #288]	@ (8004478 <OS_Dbg_Init+0x184>)
 8004358:	9302      	str	r3, [sp, #8]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_ObjTypeChkEn;
 800435a:	4b48      	ldr	r3, [pc, #288]	@ (800447c <OS_Dbg_Init+0x188>)
 800435c:	9303      	str	r3, [sp, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_ObjCreatedChkEn;
 800435e:	4b48      	ldr	r3, [pc, #288]	@ (8004480 <OS_Dbg_Init+0x18c>)
 8004360:	9303      	str	r3, [sp, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PendListSize;
 8004362:	4b48      	ldr	r3, [pc, #288]	@ (8004484 <OS_Dbg_Init+0x190>)
 8004364:	9302      	str	r3, [sp, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendObjSize;
 8004366:	4b48      	ldr	r3, [pc, #288]	@ (8004488 <OS_Dbg_Init+0x194>)
 8004368:	9302      	str	r3, [sp, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioMax;
 800436a:	4b48      	ldr	r3, [pc, #288]	@ (800448c <OS_Dbg_Init+0x198>)
 800436c:	9302      	str	r3, [sp, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioTblSize;
 800436e:	4b48      	ldr	r3, [pc, #288]	@ (8004490 <OS_Dbg_Init+0x19c>)
 8004370:	9302      	str	r3, [sp, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PtrSize;
 8004372:	4b48      	ldr	r3, [pc, #288]	@ (8004494 <OS_Dbg_Init+0x1a0>)
 8004374:	9302      	str	r3, [sp, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Q;
 8004376:	4b48      	ldr	r3, [pc, #288]	@ (8004498 <OS_Dbg_Init+0x1a4>)
 8004378:	9302      	str	r3, [sp, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QEn;
 800437a:	4b48      	ldr	r3, [pc, #288]	@ (800449c <OS_Dbg_Init+0x1a8>)
 800437c:	9303      	str	r3, [sp, #12]
#if (OS_CFG_Q_EN > 0u)
    p_temp08 = (CPU_INT08U const *)&OSDbg_QDelEn;
 800437e:	4b48      	ldr	r3, [pc, #288]	@ (80044a0 <OS_Dbg_Init+0x1ac>)
 8004380:	9303      	str	r3, [sp, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QFlushEn;
 8004382:	4b48      	ldr	r3, [pc, #288]	@ (80044a4 <OS_Dbg_Init+0x1b0>)
 8004384:	9303      	str	r3, [sp, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QPendAbortEn;
 8004386:	4b48      	ldr	r3, [pc, #288]	@ (80044a8 <OS_Dbg_Init+0x1b4>)
 8004388:	9303      	str	r3, [sp, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_QSize;
 800438a:	4b48      	ldr	r3, [pc, #288]	@ (80044ac <OS_Dbg_Init+0x1b8>)
 800438c:	9302      	str	r3, [sp, #8]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_SchedRoundRobinEn;
 800438e:	4b48      	ldr	r3, [pc, #288]	@ (80044b0 <OS_Dbg_Init+0x1bc>)
 8004390:	9302      	str	r3, [sp, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Sem;
 8004392:	4b48      	ldr	r3, [pc, #288]	@ (80044b4 <OS_Dbg_Init+0x1c0>)
 8004394:	9302      	str	r3, [sp, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemEn;
 8004396:	4b48      	ldr	r3, [pc, #288]	@ (80044b8 <OS_Dbg_Init+0x1c4>)
 8004398:	9303      	str	r3, [sp, #12]
#if (OS_CFG_SEM_EN > 0u)
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemDelEn;
 800439a:	4b48      	ldr	r3, [pc, #288]	@ (80044bc <OS_Dbg_Init+0x1c8>)
 800439c:	9303      	str	r3, [sp, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemPendAbortEn;
 800439e:	4b48      	ldr	r3, [pc, #288]	@ (80044c0 <OS_Dbg_Init+0x1cc>)
 80043a0:	9303      	str	r3, [sp, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSetEn;
 80043a2:	4b48      	ldr	r3, [pc, #288]	@ (80044c4 <OS_Dbg_Init+0x1d0>)
 80043a4:	9302      	str	r3, [sp, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSize;
 80043a6:	4b48      	ldr	r3, [pc, #288]	@ (80044c8 <OS_Dbg_Init+0x1d4>)
 80043a8:	9302      	str	r3, [sp, #8]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_RdyList;
 80043aa:	4b48      	ldr	r3, [pc, #288]	@ (80044cc <OS_Dbg_Init+0x1d8>)
 80043ac:	9302      	str	r3, [sp, #8]
    p_temp32 = (CPU_INT32U const *)&OSDbg_RdyListSize;
 80043ae:	4b48      	ldr	r3, [pc, #288]	@ (80044d0 <OS_Dbg_Init+0x1dc>)
 80043b0:	9301      	str	r3, [sp, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_StkWidth;
 80043b2:	4b48      	ldr	r3, [pc, #288]	@ (80044d4 <OS_Dbg_Init+0x1e0>)
 80043b4:	9302      	str	r3, [sp, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskEn;
 80043b6:	4b48      	ldr	r3, [pc, #288]	@ (80044d8 <OS_Dbg_Init+0x1e4>)
 80043b8:	9303      	str	r3, [sp, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskStkChkEn;
 80043ba:	4b48      	ldr	r3, [pc, #288]	@ (80044dc <OS_Dbg_Init+0x1e8>)
 80043bc:	9303      	str	r3, [sp, #12]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskChangePrioEn;
 80043be:	4b48      	ldr	r3, [pc, #288]	@ (80044e0 <OS_Dbg_Init+0x1ec>)
 80043c0:	9303      	str	r3, [sp, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskDelEn;
 80043c2:	4b48      	ldr	r3, [pc, #288]	@ (80044e4 <OS_Dbg_Init+0x1f0>)
 80043c4:	9303      	str	r3, [sp, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQEn;
 80043c6:	4b48      	ldr	r3, [pc, #288]	@ (80044e8 <OS_Dbg_Init+0x1f4>)
 80043c8:	9303      	str	r3, [sp, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQPendAbortEn;
 80043ca:	4b48      	ldr	r3, [pc, #288]	@ (80044ec <OS_Dbg_Init+0x1f8>)
 80043cc:	9303      	str	r3, [sp, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskProfileEn;
 80043ce:	4b48      	ldr	r3, [pc, #288]	@ (80044f0 <OS_Dbg_Init+0x1fc>)
 80043d0:	9303      	str	r3, [sp, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TaskRegTblSize;
 80043d2:	4b48      	ldr	r3, [pc, #288]	@ (80044f4 <OS_Dbg_Init+0x200>)
 80043d4:	9302      	str	r3, [sp, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSemPendAbortEn;
 80043d6:	4b48      	ldr	r3, [pc, #288]	@ (80044f8 <OS_Dbg_Init+0x204>)
 80043d8:	9303      	str	r3, [sp, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSuspendEn;
 80043da:	4b48      	ldr	r3, [pc, #288]	@ (80044fc <OS_Dbg_Init+0x208>)
 80043dc:	9303      	str	r3, [sp, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TCBSize;
 80043de:	4b48      	ldr	r3, [pc, #288]	@ (8004500 <OS_Dbg_Init+0x20c>)
 80043e0:	9302      	str	r3, [sp, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TickListSize;
 80043e2:	4b48      	ldr	r3, [pc, #288]	@ (8004504 <OS_Dbg_Init+0x210>)
 80043e4:	9302      	str	r3, [sp, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyHMSMEn;
 80043e6:	4b48      	ldr	r3, [pc, #288]	@ (8004508 <OS_Dbg_Init+0x214>)
 80043e8:	9303      	str	r3, [sp, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyResumeEn;
 80043ea:	4b48      	ldr	r3, [pc, #288]	@ (800450c <OS_Dbg_Init+0x218>)
 80043ec:	9303      	str	r3, [sp, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TLS_TblSize;
 80043ee:	4b48      	ldr	r3, [pc, #288]	@ (8004510 <OS_Dbg_Init+0x21c>)
 80043f0:	9302      	str	r3, [sp, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Tmr;
 80043f2:	4b48      	ldr	r3, [pc, #288]	@ (8004514 <OS_Dbg_Init+0x220>)
 80043f4:	9302      	str	r3, [sp, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrEn;
 80043f6:	4b48      	ldr	r3, [pc, #288]	@ (8004518 <OS_Dbg_Init+0x224>)
 80043f8:	9303      	str	r3, [sp, #12]
#if (OS_CFG_TMR_EN > 0u)
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrDelEn;
 80043fa:	4b48      	ldr	r3, [pc, #288]	@ (800451c <OS_Dbg_Init+0x228>)
 80043fc:	9303      	str	r3, [sp, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TmrSize;
 80043fe:	4b48      	ldr	r3, [pc, #288]	@ (8004520 <OS_Dbg_Init+0x22c>)
 8004400:	9302      	str	r3, [sp, #8]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_VersionNbr;
 8004402:	4b48      	ldr	r3, [pc, #288]	@ (8004524 <OS_Dbg_Init+0x230>)
 8004404:	9302      	str	r3, [sp, #8]

    p_temp08 = p_temp08;                                     /* Prevent compiler warning for not using 'p_temp'        */
 8004406:	9b03      	ldr	r3, [sp, #12]
 8004408:	9303      	str	r3, [sp, #12]
    p_temp16 = p_temp16;
 800440a:	9b02      	ldr	r3, [sp, #8]
 800440c:	9302      	str	r3, [sp, #8]
    p_temp32 = p_temp32;
 800440e:	9b01      	ldr	r3, [sp, #4]
 8004410:	9301      	str	r3, [sp, #4]
}
 8004412:	b004      	add	sp, #16
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	080064d6 	.word	0x080064d6
 800441c:	0800637c 	.word	0x0800637c
 8004420:	080064d5 	.word	0x080064d5
 8004424:	080064d4 	.word	0x080064d4
 8004428:	080064d0 	.word	0x080064d0
 800442c:	080064cd 	.word	0x080064cd
 8004430:	080064a8 	.word	0x080064a8
 8004434:	080064cc 	.word	0x080064cc
 8004438:	080064a6 	.word	0x080064a6
 800443c:	080064a5 	.word	0x080064a5
 8004440:	080064a4 	.word	0x080064a4
 8004444:	080064a2 	.word	0x080064a2
 8004448:	080064a0 	.word	0x080064a0
 800444c:	08006480 	.word	0x08006480
 8004450:	0800647e 	.word	0x0800647e
 8004454:	0800647c 	.word	0x0800647c
 8004458:	0800647a 	.word	0x0800647a
 800445c:	08006478 	.word	0x08006478
 8004460:	08006476 	.word	0x08006476
 8004464:	08006474 	.word	0x08006474
 8004468:	08006448 	.word	0x08006448
 800446c:	08006444 	.word	0x08006444
 8004470:	08006443 	.word	0x08006443
 8004474:	08006442 	.word	0x08006442
 8004478:	08006440 	.word	0x08006440
 800447c:	0800643f 	.word	0x0800643f
 8004480:	0800643e 	.word	0x0800643e
 8004484:	0800643c 	.word	0x0800643c
 8004488:	0800643a 	.word	0x0800643a
 800448c:	08006438 	.word	0x08006438
 8004490:	08006436 	.word	0x08006436
 8004494:	08006434 	.word	0x08006434
 8004498:	08006404 	.word	0x08006404
 800449c:	08006403 	.word	0x08006403
 80044a0:	08006402 	.word	0x08006402
 80044a4:	08006401 	.word	0x08006401
 80044a8:	08006400 	.word	0x08006400
 80044ac:	080063fe 	.word	0x080063fe
 80044b0:	080063fc 	.word	0x080063fc
 80044b4:	080063d8 	.word	0x080063d8
 80044b8:	080063d7 	.word	0x080063d7
 80044bc:	080063d6 	.word	0x080063d6
 80044c0:	080063d5 	.word	0x080063d5
 80044c4:	080063d4 	.word	0x080063d4
 80044c8:	080063d2 	.word	0x080063d2
 80044cc:	080063d0 	.word	0x080063d0
 80044d0:	080063cc 	.word	0x080063cc
 80044d4:	080063cb 	.word	0x080063cb
 80044d8:	080063ca 	.word	0x080063ca
 80044dc:	080063c9 	.word	0x080063c9
 80044e0:	080063c8 	.word	0x080063c8
 80044e4:	080063c7 	.word	0x080063c7
 80044e8:	080063c6 	.word	0x080063c6
 80044ec:	080063c5 	.word	0x080063c5
 80044f0:	080063c4 	.word	0x080063c4
 80044f4:	080063c2 	.word	0x080063c2
 80044f8:	080063c1 	.word	0x080063c1
 80044fc:	080063c0 	.word	0x080063c0
 8004500:	080063be 	.word	0x080063be
 8004504:	080063bc 	.word	0x080063bc
 8004508:	080063bb 	.word	0x080063bb
 800450c:	080063ba 	.word	0x080063ba
 8004510:	080063b8 	.word	0x080063b8
 8004514:	08006388 	.word	0x08006388
 8004518:	08006385 	.word	0x08006385
 800451c:	08006384 	.word	0x08006384
 8004520:	08006382 	.word	0x08006382
 8004524:	08006380 	.word	0x08006380

08004528 <OS_FlagBlock>:

void  OS_FlagBlock (OS_FLAG_GRP  *p_grp,
                    OS_FLAGS      flags,
                    OS_OPT        opt,
                    OS_TICK       timeout)
{
 8004528:	b510      	push	{r4, lr}
 800452a:	460c      	mov	r4, r1
    OSTCBCurPtr->FlagsPend = flags;                             /* Save the flags that we need to wait for              */
 800452c:	4906      	ldr	r1, [pc, #24]	@ (8004548 <OS_FlagBlock+0x20>)
 800452e:	6809      	ldr	r1, [r1, #0]
 8004530:	f8c1 4084 	str.w	r4, [r1, #132]	@ 0x84
    OSTCBCurPtr->FlagsOpt  = opt;                               /* Save the type of wait we are doing                   */
 8004534:	f8a1 208c 	strh.w	r2, [r1, #140]	@ 0x8c
    OSTCBCurPtr->FlagsRdy  = 0u;
 8004538:	2200      	movs	r2, #0
 800453a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

    OS_Pend((OS_PEND_OBJ *)((void *)p_grp),
 800453e:	2201      	movs	r2, #1
 8004540:	f7ff febc 	bl	80042bc <OS_Pend>
             OSTCBCurPtr,
             OS_TASK_PEND_ON_FLAG,
             timeout);
}
 8004544:	bd10      	pop	{r4, pc}
 8004546:	bf00      	nop
 8004548:	20001988 	.word	0x20001988

0800454c <OSFlagPend>:
{
 800454c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004550:	4605      	mov	r5, r0
 8004552:	460e      	mov	r6, r1
 8004554:	4617      	mov	r7, r2
 8004556:	461c      	mov	r4, r3
    if (OSIntNestingCtr > 0u) {                                 /* See if called from ISR ...                           */
 8004558:	4ba5      	ldr	r3, [pc, #660]	@ (80047f0 <OSFlagPend+0x2a4>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	b113      	cbz	r3, 8004564 <OSFlagPend+0x18>
        if ((opt & OS_OPT_PEND_NON_BLOCKING) != OS_OPT_PEND_NON_BLOCKING) {
 800455e:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8004562:	d00e      	beq.n	8004582 <OSFlagPend+0x36>
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 8004564:	4ba3      	ldr	r3, [pc, #652]	@ (80047f4 <OSFlagPend+0x2a8>)
 8004566:	f893 9000 	ldrb.w	r9, [r3]
 800456a:	f1b9 0f01 	cmp.w	r9, #1
 800456e:	d00f      	beq.n	8004590 <OSFlagPend+0x44>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8004570:	f645 6389 	movw	r3, #24201	@ 0x5e89
 8004574:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004576:	8013      	strh	r3, [r2, #0]
        return (0u);
 8004578:	f04f 0800 	mov.w	r8, #0
}
 800457c:	4640      	mov	r0, r8
 800457e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
           *p_err = OS_ERR_PEND_ISR;                            /* ... can't PEND from an ISR                           */
 8004582:	f246 13ae 	movw	r3, #25006	@ 0x61ae
 8004586:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004588:	8013      	strh	r3, [r2, #0]
            return ((OS_FLAGS)0);
 800458a:	f04f 0800 	mov.w	r8, #0
 800458e:	e7f5      	b.n	800457c <OSFlagPend+0x30>
    if (p_grp == (OS_FLAG_GRP *)0) {                            /* Validate 'p_grp'                                     */
 8004590:	b18d      	cbz	r5, 80045b6 <OSFlagPend+0x6a>
    switch (opt) {                                              /* Validate 'opt'                                       */
 8004592:	f248 0308 	movw	r3, #32776	@ 0x8008
 8004596:	429c      	cmp	r4, r3
 8004598:	d835      	bhi.n	8004606 <OSFlagPend+0xba>
 800459a:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 800459e:	d811      	bhi.n	80045c4 <OSFlagPend+0x78>
 80045a0:	2c08      	cmp	r4, #8
 80045a2:	d821      	bhi.n	80045e8 <OSFlagPend+0x9c>
 80045a4:	b223      	sxth	r3, r4
 80045a6:	b9c3      	cbnz	r3, 80045da <OSFlagPend+0x8e>
            *p_err = OS_ERR_OPT_INVALID;
 80045a8:	f645 6325 	movw	r3, #24101	@ 0x5e25
 80045ac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80045ae:	8013      	strh	r3, [r2, #0]
             return (0u);
 80045b0:	f04f 0800 	mov.w	r8, #0
 80045b4:	e7e2      	b.n	800457c <OSFlagPend+0x30>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 80045b6:	f645 53c3 	movw	r3, #24003	@ 0x5dc3
 80045ba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80045bc:	8013      	strh	r3, [r2, #0]
        return (0u);
 80045be:	f04f 0800 	mov.w	r8, #0
 80045c2:	e7db      	b.n	800457c <OSFlagPend+0x30>
    switch (opt) {                                              /* Validate 'opt'                                       */
 80045c4:	f504 43ff 	add.w	r3, r4, #32640	@ 0x7f80
 80045c8:	337f      	adds	r3, #127	@ 0x7f
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	228b      	movs	r2, #139	@ 0x8b
 80045ce:	fa22 f303 	lsr.w	r3, r2, r3
 80045d2:	f013 0f01 	tst.w	r3, #1
 80045d6:	d127      	bne.n	8004628 <OSFlagPend+0xdc>
 80045d8:	e7e6      	b.n	80045a8 <OSFlagPend+0x5c>
 80045da:	f44f 738b 	mov.w	r3, #278	@ 0x116
 80045de:	40e3      	lsrs	r3, r4
 80045e0:	f013 0f01 	tst.w	r3, #1
 80045e4:	d120      	bne.n	8004628 <OSFlagPend+0xdc>
 80045e6:	e7df      	b.n	80045a8 <OSFlagPend+0x5c>
 80045e8:	f5b4 7f84 	cmp.w	r4, #264	@ 0x108
 80045ec:	d8dc      	bhi.n	80045a8 <OSFlagPend+0x5c>
 80045ee:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 80045f2:	d9d9      	bls.n	80045a8 <OSFlagPend+0x5c>
 80045f4:	f2a4 1201 	subw	r2, r4, #257	@ 0x101
 80045f8:	b292      	uxth	r2, r2
 80045fa:	238b      	movs	r3, #139	@ 0x8b
 80045fc:	40d3      	lsrs	r3, r2
 80045fe:	f013 0f01 	tst.w	r3, #1
 8004602:	d111      	bne.n	8004628 <OSFlagPend+0xdc>
 8004604:	e7d0      	b.n	80045a8 <OSFlagPend+0x5c>
 8004606:	f248 1308 	movw	r3, #33032	@ 0x8108
 800460a:	429c      	cmp	r4, r3
 800460c:	d8cc      	bhi.n	80045a8 <OSFlagPend+0x5c>
 800460e:	f5b4 4f01 	cmp.w	r4, #33024	@ 0x8100
 8004612:	d9c9      	bls.n	80045a8 <OSFlagPend+0x5c>
 8004614:	f504 43fd 	add.w	r3, r4, #32384	@ 0x7e80
 8004618:	337f      	adds	r3, #127	@ 0x7f
 800461a:	b29b      	uxth	r3, r3
 800461c:	228b      	movs	r2, #139	@ 0x8b
 800461e:	fa22 f303 	lsr.w	r3, r2, r3
 8004622:	f013 0f01 	tst.w	r3, #1
 8004626:	d0bf      	beq.n	80045a8 <OSFlagPend+0x5c>
    if (p_grp->Type != OS_OBJ_TYPE_FLAG) {                      /* Validate that we are pointing at an event flag       */
 8004628:	682a      	ldr	r2, [r5, #0]
 800462a:	4b73      	ldr	r3, [pc, #460]	@ (80047f8 <OSFlagPend+0x2ac>)
 800462c:	429a      	cmp	r2, r3
 800462e:	d006      	beq.n	800463e <OSFlagPend+0xf2>
       *p_err = OS_ERR_OBJ_TYPE;
 8004630:	f645 53c4 	movw	r3, #24004	@ 0x5dc4
 8004634:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004636:	8013      	strh	r3, [r2, #0]
        return (0u);
 8004638:	f04f 0800 	mov.w	r8, #0
 800463c:	e79e      	b.n	800457c <OSFlagPend+0x30>
    if ((opt & OS_OPT_PEND_FLAG_CONSUME) != 0u) {               /* See if we need to consume the flags                  */
 800463e:	f414 7f80 	tst.w	r4, #256	@ 0x100
 8004642:	d101      	bne.n	8004648 <OSFlagPend+0xfc>
        consume = OS_FALSE;
 8004644:	f04f 0900 	mov.w	r9, #0
    if (p_ts != (CPU_TS *)0) {
 8004648:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800464a:	b113      	cbz	r3, 8004652 <OSFlagPend+0x106>
       *p_ts = 0u;                                              /* Initialize the returned timestamp                    */
 800464c:	2300      	movs	r3, #0
 800464e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004650:	6013      	str	r3, [r2, #0]
    mode = opt & OS_OPT_PEND_FLAG_MASK;
 8004652:	f004 0b0f 	and.w	fp, r4, #15
    CPU_CRITICAL_ENTER();
 8004656:	2040      	movs	r0, #64	@ 0x40
 8004658:	f7fb fdba 	bl	80001d0 <CPU_SR_Save>
 800465c:	4682      	mov	sl, r0
    switch (mode) {
 800465e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004662:	2b07      	cmp	r3, #7
 8004664:	f200 8101 	bhi.w	800486a <OSFlagPend+0x31e>
 8004668:	e8df f013 	tbh	[pc, r3, lsl #1]
 800466c:	00cc0089 	.word	0x00cc0089
 8004670:	000800ff 	.word	0x000800ff
 8004674:	00ff00ff 	.word	0x00ff00ff
 8004678:	005500ff 	.word	0x005500ff
             flags_rdy = (p_grp->Flags & flags);                /* Extract only the bits we want                        */
 800467c:	6a2b      	ldr	r3, [r5, #32]
 800467e:	ea03 0806 	and.w	r8, r3, r6
             if (flags_rdy == flags) {                          /* Must match ALL the bits that we want                 */
 8004682:	ea36 0203 	bics.w	r2, r6, r3
 8004686:	d022      	beq.n	80046ce <OSFlagPend+0x182>
                 if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {
 8004688:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 800468c:	d131      	bne.n	80046f2 <OSFlagPend+0x1a6>
                     if (OSSchedLockNestingCtr > 0u) {          /* See if called with scheduler locked ...        */
 800468e:	4b5b      	ldr	r3, [pc, #364]	@ (80047fc <OSFlagPend+0x2b0>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d136      	bne.n	8004704 <OSFlagPend+0x1b8>
                 OS_FlagBlock(p_grp,
 8004696:	463b      	mov	r3, r7
 8004698:	4622      	mov	r2, r4
 800469a:	4631      	mov	r1, r6
 800469c:	4628      	mov	r0, r5
 800469e:	f7ff ff43 	bl	8004528 <OS_FlagBlock>
                 CPU_CRITICAL_EXIT();
 80046a2:	4650      	mov	r0, sl
 80046a4:	f7fb fda2 	bl	80001ec <CPU_SR_Restore>
    OSSched();                                                  /* Find next HPT ready to run                           */
 80046a8:	f7ff fa84 	bl	8003bb4 <OSSched>
    CPU_CRITICAL_ENTER();
 80046ac:	2040      	movs	r0, #64	@ 0x40
 80046ae:	f7fb fd8f 	bl	80001d0 <CPU_SR_Save>
 80046b2:	4604      	mov	r4, r0
    switch (OSTCBCurPtr->PendStatus) {
 80046b4:	4b52      	ldr	r3, [pc, #328]	@ (8004800 <OSFlagPend+0x2b4>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80046bc:	2b03      	cmp	r3, #3
 80046be:	f200 8114 	bhi.w	80048ea <OSFlagPend+0x39e>
 80046c2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80046c6:	00db      	.short	0x00db
 80046c8:	010b00f7 	.word	0x010b00f7
 80046cc:	00fe      	.short	0x00fe
                 if (consume == OS_TRUE) {                      /* See if we need to consume the flags                  */
 80046ce:	f1b9 0f01 	cmp.w	r9, #1
 80046d2:	d00a      	beq.n	80046ea <OSFlagPend+0x19e>
                 OSTCBCurPtr->FlagsRdy = flags_rdy;             /* Save flags that were ready                           */
 80046d4:	4b4a      	ldr	r3, [pc, #296]	@ (8004800 <OSFlagPend+0x2b4>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f8c3 8088 	str.w	r8, [r3, #136]	@ 0x88
                 CPU_CRITICAL_EXIT();                           /* Yes, condition met, return to caller                 */
 80046dc:	4650      	mov	r0, sl
 80046de:	f7fb fd85 	bl	80001ec <CPU_SR_Restore>
                *p_err = OS_ERR_NONE;
 80046e2:	2300      	movs	r3, #0
 80046e4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80046e6:	8013      	strh	r3, [r2, #0]
                 return (flags_rdy);
 80046e8:	e748      	b.n	800457c <OSFlagPend+0x30>
                     p_grp->Flags &= ~flags_rdy;                /* Clear ONLY the flags that we wanted                  */
 80046ea:	ea23 0308 	bic.w	r3, r3, r8
 80046ee:	622b      	str	r3, [r5, #32]
 80046f0:	e7f0      	b.n	80046d4 <OSFlagPend+0x188>
                     CPU_CRITICAL_EXIT();
 80046f2:	f7fb fd7b 	bl	80001ec <CPU_SR_Restore>
                    *p_err = OS_ERR_PEND_WOULD_BLOCK;           /* Specified non-blocking so task would block           */
 80046f6:	f246 13b0 	movw	r3, #25008	@ 0x61b0
 80046fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80046fc:	8013      	strh	r3, [r2, #0]
                     return ((OS_FLAGS)0);
 80046fe:	f04f 0800 	mov.w	r8, #0
 8004702:	e73b      	b.n	800457c <OSFlagPend+0x30>
                         CPU_CRITICAL_EXIT();
 8004704:	f7fb fd72 	bl	80001ec <CPU_SR_Restore>
                        *p_err = OS_ERR_SCHED_LOCKED;           /* ... can't PEND when locked                           */
 8004708:	f646 5363 	movw	r3, #28003	@ 0x6d63
 800470c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800470e:	8013      	strh	r3, [r2, #0]
                         return (0u);
 8004710:	f04f 0800 	mov.w	r8, #0
 8004714:	e732      	b.n	800457c <OSFlagPend+0x30>
             flags_rdy = (p_grp->Flags & flags);                /* Extract only the bits we want                        */
 8004716:	6a2b      	ldr	r3, [r5, #32]
             if (flags_rdy != 0u) {                             /* See if any flag set                                  */
 8004718:	ea13 0806 	ands.w	r8, r3, r6
 800471c:	d10f      	bne.n	800473e <OSFlagPend+0x1f2>
                 if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {
 800471e:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8004722:	d11e      	bne.n	8004762 <OSFlagPend+0x216>
                     if (OSSchedLockNestingCtr > 0u) {          /* See if called with scheduler locked ...        */
 8004724:	4b35      	ldr	r3, [pc, #212]	@ (80047fc <OSFlagPend+0x2b0>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	bb13      	cbnz	r3, 8004770 <OSFlagPend+0x224>
                 OS_FlagBlock(p_grp,
 800472a:	463b      	mov	r3, r7
 800472c:	4622      	mov	r2, r4
 800472e:	4631      	mov	r1, r6
 8004730:	4628      	mov	r0, r5
 8004732:	f7ff fef9 	bl	8004528 <OS_FlagBlock>
                 CPU_CRITICAL_EXIT();
 8004736:	4650      	mov	r0, sl
 8004738:	f7fb fd58 	bl	80001ec <CPU_SR_Restore>
             break;
 800473c:	e7b4      	b.n	80046a8 <OSFlagPend+0x15c>
                 if (consume == OS_TRUE) {                      /* See if we need to consume the flags                  */
 800473e:	f1b9 0f01 	cmp.w	r9, #1
 8004742:	d00a      	beq.n	800475a <OSFlagPend+0x20e>
                 OSTCBCurPtr->FlagsRdy = flags_rdy;             /* Save flags that were ready                           */
 8004744:	4b2e      	ldr	r3, [pc, #184]	@ (8004800 <OSFlagPend+0x2b4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f8c3 8088 	str.w	r8, [r3, #136]	@ 0x88
                 CPU_CRITICAL_EXIT();                           /* Yes, condition met, return to caller                 */
 800474c:	4650      	mov	r0, sl
 800474e:	f7fb fd4d 	bl	80001ec <CPU_SR_Restore>
                *p_err = OS_ERR_NONE;
 8004752:	2300      	movs	r3, #0
 8004754:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004756:	8013      	strh	r3, [r2, #0]
                 return (flags_rdy);
 8004758:	e710      	b.n	800457c <OSFlagPend+0x30>
                     p_grp->Flags &= ~flags_rdy;                /* Clear ONLY the flags that we got                     */
 800475a:	ea23 0308 	bic.w	r3, r3, r8
 800475e:	622b      	str	r3, [r5, #32]
 8004760:	e7f0      	b.n	8004744 <OSFlagPend+0x1f8>
                     CPU_CRITICAL_EXIT();
 8004762:	f7fb fd43 	bl	80001ec <CPU_SR_Restore>
                    *p_err = OS_ERR_PEND_WOULD_BLOCK;           /* Specified non-blocking so task would block           */
 8004766:	f246 13b0 	movw	r3, #25008	@ 0x61b0
 800476a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800476c:	8013      	strh	r3, [r2, #0]
                     return ((OS_FLAGS)0);
 800476e:	e705      	b.n	800457c <OSFlagPend+0x30>
                         CPU_CRITICAL_EXIT();
 8004770:	f7fb fd3c 	bl	80001ec <CPU_SR_Restore>
                        *p_err = OS_ERR_SCHED_LOCKED;           /* ... can't PEND when locked                           */
 8004774:	f646 5363 	movw	r3, #28003	@ 0x6d63
 8004778:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800477a:	8013      	strh	r3, [r2, #0]
                         return ((OS_FLAGS)0);
 800477c:	e6fe      	b.n	800457c <OSFlagPend+0x30>
             flags_rdy = (OS_FLAGS)(~p_grp->Flags & flags);     /* Extract only the bits we want                        */
 800477e:	6a2b      	ldr	r3, [r5, #32]
 8004780:	ea26 0803 	bic.w	r8, r6, r3
             if (flags_rdy == flags) {                          /* Must match ALL the bits that we want                 */
 8004784:	4233      	tst	r3, r6
 8004786:	d00f      	beq.n	80047a8 <OSFlagPend+0x25c>
                 if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {
 8004788:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 800478c:	d11d      	bne.n	80047ca <OSFlagPend+0x27e>
                     if (OSSchedLockNestingCtr > 0u) {          /* See if called with scheduler locked ...        */
 800478e:	4b1b      	ldr	r3, [pc, #108]	@ (80047fc <OSFlagPend+0x2b0>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	bb1b      	cbnz	r3, 80047dc <OSFlagPend+0x290>
                 OS_FlagBlock(p_grp,
 8004794:	463b      	mov	r3, r7
 8004796:	4622      	mov	r2, r4
 8004798:	4631      	mov	r1, r6
 800479a:	4628      	mov	r0, r5
 800479c:	f7ff fec4 	bl	8004528 <OS_FlagBlock>
                 CPU_CRITICAL_EXIT();
 80047a0:	4650      	mov	r0, sl
 80047a2:	f7fb fd23 	bl	80001ec <CPU_SR_Restore>
             break;
 80047a6:	e77f      	b.n	80046a8 <OSFlagPend+0x15c>
                 if (consume == OS_TRUE) {                      /* See if we need to consume the flags                  */
 80047a8:	f1b9 0f01 	cmp.w	r9, #1
 80047ac:	d00a      	beq.n	80047c4 <OSFlagPend+0x278>
                 OSTCBCurPtr->FlagsRdy = flags_rdy;             /* Save flags that were ready                           */
 80047ae:	4b14      	ldr	r3, [pc, #80]	@ (8004800 <OSFlagPend+0x2b4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8c3 8088 	str.w	r8, [r3, #136]	@ 0x88
                 CPU_CRITICAL_EXIT();                           /* Yes, condition met, return to caller                 */
 80047b6:	4650      	mov	r0, sl
 80047b8:	f7fb fd18 	bl	80001ec <CPU_SR_Restore>
                *p_err = OS_ERR_NONE;
 80047bc:	2300      	movs	r3, #0
 80047be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80047c0:	8013      	strh	r3, [r2, #0]
                 return (flags_rdy);
 80047c2:	e6db      	b.n	800457c <OSFlagPend+0x30>
                     p_grp->Flags |= flags_rdy;                 /* Set ONLY the flags that we wanted                    */
 80047c4:	4333      	orrs	r3, r6
 80047c6:	622b      	str	r3, [r5, #32]
 80047c8:	e7f1      	b.n	80047ae <OSFlagPend+0x262>
                     CPU_CRITICAL_EXIT();
 80047ca:	f7fb fd0f 	bl	80001ec <CPU_SR_Restore>
                    *p_err = OS_ERR_PEND_WOULD_BLOCK;           /* Specified non-blocking so task would block           */
 80047ce:	f246 13b0 	movw	r3, #25008	@ 0x61b0
 80047d2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80047d4:	8013      	strh	r3, [r2, #0]
                     return ((OS_FLAGS)0);
 80047d6:	f04f 0800 	mov.w	r8, #0
 80047da:	e6cf      	b.n	800457c <OSFlagPend+0x30>
                         CPU_CRITICAL_EXIT();
 80047dc:	f7fb fd06 	bl	80001ec <CPU_SR_Restore>
                        *p_err = OS_ERR_SCHED_LOCKED;           /* ... can't PEND when locked                           */
 80047e0:	f646 5363 	movw	r3, #28003	@ 0x6d63
 80047e4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80047e6:	8013      	strh	r3, [r2, #0]
                         return (0);
 80047e8:	f04f 0800 	mov.w	r8, #0
 80047ec:	e6c6      	b.n	800457c <OSFlagPend+0x30>
 80047ee:	bf00      	nop
 80047f0:	20001d76 	.word	0x20001d76
 80047f4:	20001d75 	.word	0x20001d75
 80047f8:	47414c46 	.word	0x47414c46
 80047fc:	20001bb8 	.word	0x20001bb8
 8004800:	20001988 	.word	0x20001988
             flags_rdy = (~p_grp->Flags & flags);               /* Extract only the bits we want                        */
 8004804:	6a2b      	ldr	r3, [r5, #32]
             if (flags_rdy != 0u) {                             /* See if any flag cleared                              */
 8004806:	ea36 0803 	bics.w	r8, r6, r3
 800480a:	d10f      	bne.n	800482c <OSFlagPend+0x2e0>
                 if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {
 800480c:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8004810:	d11d      	bne.n	800484e <OSFlagPend+0x302>
                     if (OSSchedLockNestingCtr > 0u) {          /* See if called with scheduler locked ...        */
 8004812:	4b47      	ldr	r3, [pc, #284]	@ (8004930 <OSFlagPend+0x3e4>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	bb0b      	cbnz	r3, 800485c <OSFlagPend+0x310>
                 OS_FlagBlock(p_grp,
 8004818:	463b      	mov	r3, r7
 800481a:	4622      	mov	r2, r4
 800481c:	4631      	mov	r1, r6
 800481e:	4628      	mov	r0, r5
 8004820:	f7ff fe82 	bl	8004528 <OS_FlagBlock>
                 CPU_CRITICAL_EXIT();
 8004824:	4650      	mov	r0, sl
 8004826:	f7fb fce1 	bl	80001ec <CPU_SR_Restore>
             break;
 800482a:	e73d      	b.n	80046a8 <OSFlagPend+0x15c>
                 if (consume == OS_TRUE) {                      /* See if we need to consume the flags                  */
 800482c:	f1b9 0f01 	cmp.w	r9, #1
 8004830:	d00a      	beq.n	8004848 <OSFlagPend+0x2fc>
                 OSTCBCurPtr->FlagsRdy = flags_rdy;             /* Save flags that were ready                           */
 8004832:	4b40      	ldr	r3, [pc, #256]	@ (8004934 <OSFlagPend+0x3e8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f8c3 8088 	str.w	r8, [r3, #136]	@ 0x88
                 CPU_CRITICAL_EXIT();                           /* Yes, condition met, return to caller                 */
 800483a:	4650      	mov	r0, sl
 800483c:	f7fb fcd6 	bl	80001ec <CPU_SR_Restore>
                *p_err = OS_ERR_NONE;
 8004840:	2300      	movs	r3, #0
 8004842:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004844:	8013      	strh	r3, [r2, #0]
                 return (flags_rdy);
 8004846:	e699      	b.n	800457c <OSFlagPend+0x30>
                     p_grp->Flags |= flags_rdy;                 /* Set ONLY the flags that we got                       */
 8004848:	4333      	orrs	r3, r6
 800484a:	622b      	str	r3, [r5, #32]
 800484c:	e7f1      	b.n	8004832 <OSFlagPend+0x2e6>
                     CPU_CRITICAL_EXIT();
 800484e:	f7fb fccd 	bl	80001ec <CPU_SR_Restore>
                    *p_err = OS_ERR_PEND_WOULD_BLOCK;           /* Specified non-blocking so task would block           */
 8004852:	f246 13b0 	movw	r3, #25008	@ 0x61b0
 8004856:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004858:	8013      	strh	r3, [r2, #0]
                     return ((OS_FLAGS)0);
 800485a:	e68f      	b.n	800457c <OSFlagPend+0x30>
                         CPU_CRITICAL_EXIT();
 800485c:	f7fb fcc6 	bl	80001ec <CPU_SR_Restore>
                        *p_err = OS_ERR_SCHED_LOCKED;           /* ... can't PEND when locked                           */
 8004860:	f646 5363 	movw	r3, #28003	@ 0x6d63
 8004864:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004866:	8013      	strh	r3, [r2, #0]
                         return (0u);
 8004868:	e688      	b.n	800457c <OSFlagPend+0x30>
             CPU_CRITICAL_EXIT();
 800486a:	f7fb fcbf 	bl	80001ec <CPU_SR_Restore>
            *p_err = OS_ERR_OPT_INVALID;
 800486e:	f645 6325 	movw	r3, #24101	@ 0x5e25
 8004872:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004874:	8013      	strh	r3, [r2, #0]
             return (0u);
 8004876:	f04f 0800 	mov.w	r8, #0
 800487a:	e67f      	b.n	800457c <OSFlagPend+0x30>
            *p_err = OS_ERR_NONE;
 800487c:	2300      	movs	r3, #0
 800487e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004880:	8013      	strh	r3, [r2, #0]
    if (*p_err != OS_ERR_NONE) {
 8004882:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d14e      	bne.n	8004928 <OSFlagPend+0x3dc>
    flags_rdy = OSTCBCurPtr->FlagsRdy;
 800488a:	4b2a      	ldr	r3, [pc, #168]	@ (8004934 <OSFlagPend+0x3e8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8d3 8088 	ldr.w	r8, [r3, #136]	@ 0x88
    if (consume == OS_TRUE) {                                   /* See if we need to consume the flags                  */
 8004892:	f1b9 0f01 	cmp.w	r9, #1
 8004896:	d136      	bne.n	8004906 <OSFlagPend+0x3ba>
        switch (mode) {
 8004898:	f1bb 0f04 	cmp.w	fp, #4
 800489c:	d02f      	beq.n	80048fe <OSFlagPend+0x3b2>
 800489e:	d82b      	bhi.n	80048f8 <OSFlagPend+0x3ac>
 80048a0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d834      	bhi.n	8004914 <OSFlagPend+0x3c8>
                 p_grp->Flags |=  flags_rdy;
 80048aa:	6a2b      	ldr	r3, [r5, #32]
 80048ac:	ea43 0308 	orr.w	r3, r3, r8
 80048b0:	622b      	str	r3, [r5, #32]
                 break;
 80048b2:	e028      	b.n	8004906 <OSFlagPend+0x3ba>
             CPU_CRITICAL_EXIT();
 80048b4:	f7fb fc9a 	bl	80001ec <CPU_SR_Restore>
            *p_err = OS_ERR_PEND_ABORT;
 80048b8:	f246 13a9 	movw	r3, #25001	@ 0x61a9
 80048bc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80048be:	8013      	strh	r3, [r2, #0]
             break;
 80048c0:	e7df      	b.n	8004882 <OSFlagPend+0x336>
             if (p_ts != (CPU_TS *)0) {
 80048c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048c4:	b113      	cbz	r3, 80048cc <OSFlagPend+0x380>
                *p_ts = 0u;
 80048c6:	2300      	movs	r3, #0
 80048c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80048ca:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 80048cc:	4620      	mov	r0, r4
 80048ce:	f7fb fc8d 	bl	80001ec <CPU_SR_Restore>
            *p_err = OS_ERR_TIMEOUT;
 80048d2:	f247 23d9 	movw	r3, #29401	@ 0x72d9
 80048d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80048d8:	8013      	strh	r3, [r2, #0]
             break;
 80048da:	e7d2      	b.n	8004882 <OSFlagPend+0x336>
             CPU_CRITICAL_EXIT();
 80048dc:	f7fb fc86 	bl	80001ec <CPU_SR_Restore>
            *p_err = OS_ERR_OBJ_DEL;
 80048e0:	f645 53c2 	movw	r3, #24002	@ 0x5dc2
 80048e4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80048e6:	8013      	strh	r3, [r2, #0]
             break;
 80048e8:	e7cb      	b.n	8004882 <OSFlagPend+0x336>
             CPU_CRITICAL_EXIT();
 80048ea:	f7fb fc7f 	bl	80001ec <CPU_SR_Restore>
            *p_err = OS_ERR_STATUS_INVALID;
 80048ee:	f646 632e 	movw	r3, #28206	@ 0x6e2e
 80048f2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80048f4:	8013      	strh	r3, [r2, #0]
             break;
 80048f6:	e7c4      	b.n	8004882 <OSFlagPend+0x336>
        switch (mode) {
 80048f8:	f1bb 0f08 	cmp.w	fp, #8
 80048fc:	d10a      	bne.n	8004914 <OSFlagPend+0x3c8>
                 p_grp->Flags &= ~flags_rdy;
 80048fe:	6a2b      	ldr	r3, [r5, #32]
 8004900:	ea23 0308 	bic.w	r3, r3, r8
 8004904:	622b      	str	r3, [r5, #32]
    CPU_CRITICAL_EXIT();
 8004906:	4620      	mov	r0, r4
 8004908:	f7fb fc70 	bl	80001ec <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;                                        /* Event(s) must have occurred                          */
 800490c:	2300      	movs	r3, #0
 800490e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004910:	8013      	strh	r3, [r2, #0]
    return (flags_rdy);
 8004912:	e633      	b.n	800457c <OSFlagPend+0x30>
                 CPU_CRITICAL_EXIT();
 8004914:	4620      	mov	r0, r4
 8004916:	f7fb fc69 	bl	80001ec <CPU_SR_Restore>
                *p_err = OS_ERR_OPT_INVALID;
 800491a:	f645 6325 	movw	r3, #24101	@ 0x5e25
 800491e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004920:	8013      	strh	r3, [r2, #0]
                 return (0u);
 8004922:	f04f 0800 	mov.w	r8, #0
 8004926:	e629      	b.n	800457c <OSFlagPend+0x30>
        return (0u);
 8004928:	f04f 0800 	mov.w	r8, #0
 800492c:	e626      	b.n	800457c <OSFlagPend+0x30>
 800492e:	bf00      	nop
 8004930:	20001bb8 	.word	0x20001bb8
 8004934:	20001988 	.word	0x20001988

08004938 <OS_FlagDbgListAdd>:
*/

#if (OS_CFG_DBG_EN > 0u)
void  OS_FlagDbgListAdd (OS_FLAG_GRP  *p_grp)
{
    p_grp->DbgNamePtr                = (CPU_CHAR *)((void *)" ");
 8004938:	4b06      	ldr	r3, [pc, #24]	@ (8004954 <OS_FlagDbgListAdd+0x1c>)
 800493a:	61c3      	str	r3, [r0, #28]
    p_grp->DbgPrevPtr                = (OS_FLAG_GRP *)0;
 800493c:	2300      	movs	r3, #0
 800493e:	6143      	str	r3, [r0, #20]
    if (OSFlagDbgListPtr == (OS_FLAG_GRP *)0) {
 8004940:	4b05      	ldr	r3, [pc, #20]	@ (8004958 <OS_FlagDbgListAdd+0x20>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	b123      	cbz	r3, 8004950 <OS_FlagDbgListAdd+0x18>
        p_grp->DbgNextPtr            = (OS_FLAG_GRP *)0;
    } else {
        p_grp->DbgNextPtr            = OSFlagDbgListPtr;
 8004946:	6183      	str	r3, [r0, #24]
        OSFlagDbgListPtr->DbgPrevPtr = p_grp;
 8004948:	6158      	str	r0, [r3, #20]
    }
    OSFlagDbgListPtr                 = p_grp;
 800494a:	4b03      	ldr	r3, [pc, #12]	@ (8004958 <OS_FlagDbgListAdd+0x20>)
 800494c:	6018      	str	r0, [r3, #0]
}
 800494e:	4770      	bx	lr
        p_grp->DbgNextPtr            = (OS_FLAG_GRP *)0;
 8004950:	6183      	str	r3, [r0, #24]
 8004952:	e7fa      	b.n	800494a <OS_FlagDbgListAdd+0x12>
 8004954:	08006378 	.word	0x08006378
 8004958:	20001d68 	.word	0x20001d68

0800495c <OSFlagCreate>:
{
 800495c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004960:	4604      	mov	r4, r0
 8004962:	461d      	mov	r5, r3
    if (OSIntNestingCtr > 0u) {                                 /* See if called from ISR ...                           */
 8004964:	4818      	ldr	r0, [pc, #96]	@ (80049c8 <OSFlagCreate+0x6c>)
 8004966:	7800      	ldrb	r0, [r0, #0]
 8004968:	bb00      	cbnz	r0, 80049ac <OSFlagCreate+0x50>
 800496a:	460f      	mov	r7, r1
 800496c:	4616      	mov	r6, r2
    if (p_grp == (OS_FLAG_GRP *)0) {                            /* Validate 'p_grp'                                     */
 800496e:	b30c      	cbz	r4, 80049b4 <OSFlagCreate+0x58>
    CPU_CRITICAL_ENTER();
 8004970:	2040      	movs	r0, #64	@ 0x40
 8004972:	f7fb fc2d 	bl	80001d0 <CPU_SR_Save>
 8004976:	4680      	mov	r8, r0
    if (p_grp->Type == OS_OBJ_TYPE_FLAG) {
 8004978:	6822      	ldr	r2, [r4, #0]
 800497a:	4b14      	ldr	r3, [pc, #80]	@ (80049cc <OSFlagCreate+0x70>)
 800497c:	429a      	cmp	r2, r3
 800497e:	d01d      	beq.n	80049bc <OSFlagCreate+0x60>
    p_grp->Type    = OS_OBJ_TYPE_FLAG;                          /* Set to event flag group type                         */
 8004980:	4b12      	ldr	r3, [pc, #72]	@ (80049cc <OSFlagCreate+0x70>)
 8004982:	6023      	str	r3, [r4, #0]
    p_grp->NamePtr = p_name;
 8004984:	6067      	str	r7, [r4, #4]
    p_grp->Flags   = flags;                                     /* Set to desired initial value                         */
 8004986:	6226      	str	r6, [r4, #32]
    OS_PendListInit(&p_grp->PendList);
 8004988:	f104 0008 	add.w	r0, r4, #8
 800498c:	f7ff f9f2 	bl	8003d74 <OS_PendListInit>
    OS_FlagDbgListAdd(p_grp);
 8004990:	4620      	mov	r0, r4
 8004992:	f7ff ffd1 	bl	8004938 <OS_FlagDbgListAdd>
    OSFlagQty++;
 8004996:	4a0e      	ldr	r2, [pc, #56]	@ (80049d0 <OSFlagCreate+0x74>)
 8004998:	8813      	ldrh	r3, [r2, #0]
 800499a:	3301      	adds	r3, #1
 800499c:	8013      	strh	r3, [r2, #0]
    CPU_CRITICAL_EXIT();
 800499e:	4640      	mov	r0, r8
 80049a0:	f7fb fc24 	bl	80001ec <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 80049a4:	2300      	movs	r3, #0
 80049a6:	802b      	strh	r3, [r5, #0]
}
 80049a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       *p_err = OS_ERR_CREATE_ISR;                              /* ... can't CREATE from an ISR                         */
 80049ac:	f642 63e1 	movw	r3, #12001	@ 0x2ee1
 80049b0:	802b      	strh	r3, [r5, #0]
        return;
 80049b2:	e7f9      	b.n	80049a8 <OSFlagCreate+0x4c>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 80049b4:	f645 53c3 	movw	r3, #24003	@ 0x5dc3
 80049b8:	802b      	strh	r3, [r5, #0]
        return;
 80049ba:	e7f5      	b.n	80049a8 <OSFlagCreate+0x4c>
        CPU_CRITICAL_EXIT();
 80049bc:	f7fb fc16 	bl	80001ec <CPU_SR_Restore>
        *p_err = OS_ERR_OBJ_CREATED;
 80049c0:	f645 53c1 	movw	r3, #24001	@ 0x5dc1
 80049c4:	802b      	strh	r3, [r5, #0]
        return;
 80049c6:	e7ef      	b.n	80049a8 <OSFlagCreate+0x4c>
 80049c8:	20001d76 	.word	0x20001d76
 80049cc:	47414c46 	.word	0x47414c46
 80049d0:	20001d64 	.word	0x20001d64

080049d4 <OS_FlagTaskRdy>:
*/

void   OS_FlagTaskRdy (OS_TCB    *p_tcb,
                       OS_FLAGS   flags_rdy,
                       CPU_TS     ts)
{
 80049d4:	b510      	push	{r4, lr}
 80049d6:	4604      	mov	r4, r0
#if (OS_CFG_TS_EN == 0u)
    (void)ts;                                                   /* Prevent compiler warning for not using 'ts'          */
#endif

    p_tcb->FlagsRdy   = flags_rdy;
 80049d8:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
    p_tcb->PendStatus = OS_STATUS_PEND_OK;                      /* Clear pend status                                    */
 80049dc:	2300      	movs	r3, #0
 80049de:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
    p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;                /* Indicate no longer pending                           */
 80049e2:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
#if (OS_CFG_TS_EN > 0u)
    p_tcb->TS         = ts;
#endif
    switch (p_tcb->TaskState) {
 80049e6:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d909      	bls.n	8004a02 <OS_FlagTaskRdy+0x2e>
 80049ee:	1f9a      	subs	r2, r3, #6
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	2a01      	cmp	r2, #1
 80049f4:	d807      	bhi.n	8004a06 <OS_FlagTaskRdy+0x32>
             break;

        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
#if (OS_CFG_TICK_EN > 0u)
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 80049f6:	2b07      	cmp	r3, #7
 80049f8:	d015      	beq.n	8004a26 <OS_FlagTaskRdy+0x52>
                 OS_TickListRemove(p_tcb);                      /* Remove from tick list                                */
             }
#endif
             p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
 80049fa:	2304      	movs	r3, #4
 80049fc:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
             break;
 8004a00:	e001      	b.n	8004a06 <OS_FlagTaskRdy+0x32>
    switch (p_tcb->TaskState) {
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d203      	bcs.n	8004a0e <OS_FlagTaskRdy+0x3a>
        case OS_TASK_STATE_SUSPENDED:
        default:
                                                                /* Default case.                                        */
             break;
    }
    OS_PendListRemove(p_tcb);
 8004a06:	4620      	mov	r0, r4
 8004a08:	f7ff f9e3 	bl	8003dd2 <OS_PendListRemove>
}
 8004a0c:	bd10      	pop	{r4, pc}
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d006      	beq.n	8004a20 <OS_FlagTaskRdy+0x4c>
             OS_RdyListInsert(p_tcb);                           /* Insert the task in the ready list                    */
 8004a12:	4620      	mov	r0, r4
 8004a14:	f7ff fb40 	bl	8004098 <OS_RdyListInsert>
             p_tcb->TaskState = OS_TASK_STATE_RDY;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
             break;
 8004a1e:	e7f2      	b.n	8004a06 <OS_FlagTaskRdy+0x32>
                 OS_TickListRemove(p_tcb);                      /* Remove from tick list                                */
 8004a20:	f001 f896 	bl	8005b50 <OS_TickListRemove>
 8004a24:	e7f5      	b.n	8004a12 <OS_FlagTaskRdy+0x3e>
                 OS_TickListRemove(p_tcb);                      /* Remove from tick list                                */
 8004a26:	f001 f893 	bl	8005b50 <OS_TickListRemove>
 8004a2a:	e7e6      	b.n	80049fa <OS_FlagTaskRdy+0x26>

08004a2c <OSFlagPost>:
{
 8004a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a30:	461e      	mov	r6, r3
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 8004a32:	4b53      	ldr	r3, [pc, #332]	@ (8004b80 <OSFlagPost+0x154>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d006      	beq.n	8004a48 <OSFlagPost+0x1c>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8004a3a:	f645 6389 	movw	r3, #24201	@ 0x5e89
 8004a3e:	8033      	strh	r3, [r6, #0]
        return (0u);
 8004a40:	2400      	movs	r4, #0
}
 8004a42:	4620      	mov	r0, r4
 8004a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a48:	4604      	mov	r4, r0
 8004a4a:	460f      	mov	r7, r1
 8004a4c:	4615      	mov	r5, r2
    if (p_grp == (OS_FLAG_GRP *)0) {                            /* Validate 'p_grp'                                     */
 8004a4e:	b140      	cbz	r0, 8004a62 <OSFlagPost+0x36>
    if (p_grp->Type != OS_OBJ_TYPE_FLAG) {                      /* Make sure we are pointing to an event flag grp       */
 8004a50:	6802      	ldr	r2, [r0, #0]
 8004a52:	4b4c      	ldr	r3, [pc, #304]	@ (8004b84 <OSFlagPost+0x158>)
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d008      	beq.n	8004a6a <OSFlagPost+0x3e>
       *p_err = OS_ERR_OBJ_TYPE;
 8004a58:	f645 53c4 	movw	r3, #24004	@ 0x5dc4
 8004a5c:	8033      	strh	r3, [r6, #0]
        return (0u);
 8004a5e:	2400      	movs	r4, #0
 8004a60:	e7ef      	b.n	8004a42 <OSFlagPost+0x16>
       *p_err  = OS_ERR_OBJ_PTR_NULL;
 8004a62:	f645 53c3 	movw	r3, #24003	@ 0x5dc3
 8004a66:	8033      	strh	r3, [r6, #0]
        return (0u);
 8004a68:	e7eb      	b.n	8004a42 <OSFlagPost+0x16>
    switch (opt) {
 8004a6a:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
 8004a6e:	d015      	beq.n	8004a9c <OSFlagPost+0x70>
 8004a70:	d80b      	bhi.n	8004a8a <OSFlagPost+0x5e>
 8004a72:	b19d      	cbz	r5, 8004a9c <OSFlagPost+0x70>
 8004a74:	2d01      	cmp	r5, #1
 8004a76:	d10c      	bne.n	8004a92 <OSFlagPost+0x66>
             CPU_CRITICAL_ENTER();
 8004a78:	2040      	movs	r0, #64	@ 0x40
 8004a7a:	f7fb fba9 	bl	80001d0 <CPU_SR_Save>
 8004a7e:	4680      	mov	r8, r0
             p_grp->Flags &= ~flags;                            /* Clear the flags specified in the group               */
 8004a80:	6a23      	ldr	r3, [r4, #32]
 8004a82:	ea23 0307 	bic.w	r3, r3, r7
 8004a86:	6223      	str	r3, [r4, #32]
             break;
 8004a88:	e00f      	b.n	8004aaa <OSFlagPost+0x7e>
    switch (opt) {
 8004a8a:	f248 0301 	movw	r3, #32769	@ 0x8001
 8004a8e:	429d      	cmp	r5, r3
 8004a90:	d0f2      	beq.n	8004a78 <OSFlagPost+0x4c>
            *p_err = OS_ERR_OPT_INVALID;                        /* INVALID option                                       */
 8004a92:	f645 6325 	movw	r3, #24101	@ 0x5e25
 8004a96:	8033      	strh	r3, [r6, #0]
             return (0u);
 8004a98:	2400      	movs	r4, #0
 8004a9a:	e7d2      	b.n	8004a42 <OSFlagPost+0x16>
             CPU_CRITICAL_ENTER();
 8004a9c:	2040      	movs	r0, #64	@ 0x40
 8004a9e:	f7fb fb97 	bl	80001d0 <CPU_SR_Save>
 8004aa2:	4680      	mov	r8, r0
             p_grp->Flags |=  flags;                            /* Set   the flags specified in the group               */
 8004aa4:	6a23      	ldr	r3, [r4, #32]
 8004aa6:	433b      	orrs	r3, r7
 8004aa8:	6223      	str	r3, [r4, #32]
    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* Any task waiting on event flag group?                */
 8004aaa:	68a0      	ldr	r0, [r4, #8]
 8004aac:	b970      	cbnz	r0, 8004acc <OSFlagPost+0xa0>
        CPU_CRITICAL_EXIT();                                    /* No                                                   */
 8004aae:	4640      	mov	r0, r8
 8004ab0:	f7fb fb9c 	bl	80001ec <CPU_SR_Restore>
       *p_err = OS_ERR_NONE;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	8033      	strh	r3, [r6, #0]
        return (p_grp->Flags);
 8004ab8:	6a24      	ldr	r4, [r4, #32]
 8004aba:	e7c2      	b.n	8004a42 <OSFlagPost+0x16>
                 flags_rdy = (p_grp->Flags & p_tcb->FlagsPend);
 8004abc:	6a22      	ldr	r2, [r4, #32]
 8004abe:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8004ac2:	ea02 0103 	and.w	r1, r2, r3
                 if (flags_rdy == p_tcb->FlagsPend) {
 8004ac6:	4393      	bics	r3, r2
 8004ac8:	d01e      	beq.n	8004b08 <OSFlagPost+0xdc>
{
 8004aca:	4638      	mov	r0, r7
    while (p_tcb != (OS_TCB *)0) {                              /* Go through all tasks waiting on event flag(s)        */
 8004acc:	2800      	cmp	r0, #0
 8004ace:	d044      	beq.n	8004b5a <OSFlagPost+0x12e>
        p_tcb_next = p_tcb->PendNextPtr;
 8004ad0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
        mode       = p_tcb->FlagsOpt & OS_OPT_PEND_FLAG_MASK;
 8004ad2:	f8b0 308c 	ldrh.w	r3, [r0, #140]	@ 0x8c
 8004ad6:	f003 030f 	and.w	r3, r3, #15
        switch (mode) {
 8004ada:	3b01      	subs	r3, #1
 8004adc:	2b07      	cmp	r3, #7
 8004ade:	d834      	bhi.n	8004b4a <OSFlagPost+0x11e>
 8004ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae8 <OSFlagPost+0xbc>)
 8004ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae6:	bf00      	nop
 8004ae8:	08004b23 	.word	0x08004b23
 8004aec:	08004b39 	.word	0x08004b39
 8004af0:	08004b4b 	.word	0x08004b4b
 8004af4:	08004abd 	.word	0x08004abd
 8004af8:	08004b4b 	.word	0x08004b4b
 8004afc:	08004b4b 	.word	0x08004b4b
 8004b00:	08004b4b 	.word	0x08004b4b
 8004b04:	08004b11 	.word	0x08004b11
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                         */
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f7ff ff63 	bl	80049d4 <OS_FlagTaskRdy>
 8004b0e:	e7dc      	b.n	8004aca <OSFlagPost+0x9e>
                 flags_rdy = (p_grp->Flags & p_tcb->FlagsPend);
 8004b10:	6a21      	ldr	r1, [r4, #32]
 8004b12:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
                 if (flags_rdy != 0u) {
 8004b16:	4019      	ands	r1, r3
 8004b18:	d0d7      	beq.n	8004aca <OSFlagPost+0x9e>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                         */
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f7ff ff5a 	bl	80049d4 <OS_FlagTaskRdy>
 8004b20:	e7d3      	b.n	8004aca <OSFlagPost+0x9e>
                 flags_rdy = (OS_FLAGS)(~p_grp->Flags & p_tcb->FlagsPend);
 8004b22:	6a22      	ldr	r2, [r4, #32]
 8004b24:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8004b28:	ea23 0102 	bic.w	r1, r3, r2
                 if (flags_rdy == p_tcb->FlagsPend) {
 8004b2c:	421a      	tst	r2, r3
 8004b2e:	d1cc      	bne.n	8004aca <OSFlagPost+0x9e>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                         */
 8004b30:	2200      	movs	r2, #0
 8004b32:	f7ff ff4f 	bl	80049d4 <OS_FlagTaskRdy>
 8004b36:	e7c8      	b.n	8004aca <OSFlagPost+0x9e>
                 flags_rdy = (OS_FLAGS)(~p_grp->Flags & p_tcb->FlagsPend);
 8004b38:	6a23      	ldr	r3, [r4, #32]
 8004b3a:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
                 if (flags_rdy != 0u) {
 8004b3e:	4399      	bics	r1, r3
 8004b40:	d0c3      	beq.n	8004aca <OSFlagPost+0x9e>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                         */
 8004b42:	2200      	movs	r2, #0
 8004b44:	f7ff ff46 	bl	80049d4 <OS_FlagTaskRdy>
 8004b48:	e7bf      	b.n	8004aca <OSFlagPost+0x9e>
                 CPU_CRITICAL_EXIT();
 8004b4a:	4640      	mov	r0, r8
 8004b4c:	f7fb fb4e 	bl	80001ec <CPU_SR_Restore>
                *p_err = OS_ERR_FLAG_PEND_OPT;
 8004b50:	f643 23ff 	movw	r3, #15103	@ 0x3aff
 8004b54:	8033      	strh	r3, [r6, #0]
                 return (0u);
 8004b56:	2400      	movs	r4, #0
 8004b58:	e773      	b.n	8004a42 <OSFlagPost+0x16>
    CPU_CRITICAL_EXIT();
 8004b5a:	4640      	mov	r0, r8
 8004b5c:	f7fb fb46 	bl	80001ec <CPU_SR_Restore>
    if ((opt & OS_OPT_POST_NO_SCHED) == 0u) {
 8004b60:	f415 4f00 	tst.w	r5, #32768	@ 0x8000
 8004b64:	d008      	beq.n	8004b78 <OSFlagPost+0x14c>
    CPU_CRITICAL_ENTER();
 8004b66:	2040      	movs	r0, #64	@ 0x40
 8004b68:	f7fb fb32 	bl	80001d0 <CPU_SR_Save>
    flags_cur = p_grp->Flags;
 8004b6c:	6a24      	ldr	r4, [r4, #32]
    CPU_CRITICAL_EXIT();
 8004b6e:	f7fb fb3d 	bl	80001ec <CPU_SR_Restore>
   *p_err     = OS_ERR_NONE;
 8004b72:	2300      	movs	r3, #0
 8004b74:	8033      	strh	r3, [r6, #0]
    return (flags_cur);
 8004b76:	e764      	b.n	8004a42 <OSFlagPost+0x16>
        OSSched();
 8004b78:	f7ff f81c 	bl	8003bb4 <OSSched>
 8004b7c:	e7f3      	b.n	8004b66 <OSFlagPost+0x13a>
 8004b7e:	bf00      	nop
 8004b80:	20001d75 	.word	0x20001d75
 8004b84:	47414c46 	.word	0x47414c46

08004b88 <OS_MemInit>:
*/

void  OS_MemInit (OS_ERR  *p_err)
{
#if (OS_CFG_DBG_EN > 0u)
    OSMemDbgListPtr = (OS_MEM *)0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	4a03      	ldr	r2, [pc, #12]	@ (8004b98 <OS_MemInit+0x10>)
 8004b8c:	6013      	str	r3, [r2, #0]
    OSMemQty        = 0u;
 8004b8e:	4a03      	ldr	r2, [pc, #12]	@ (8004b9c <OS_MemInit+0x14>)
 8004b90:	8013      	strh	r3, [r2, #0]
#endif
   *p_err           = OS_ERR_NONE;
 8004b92:	8003      	strh	r3, [r0, #0]
}
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20001d60 	.word	0x20001d60
 8004b9c:	20001d5c 	.word	0x20001d5c

08004ba0 <OS_MsgPoolInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MsgPoolInit (OS_ERR  *p_err)
{
 8004ba0:	b470      	push	{r4, r5, r6}
    OS_MSG_QTY   i;
    OS_MSG_QTY   loops;


#if (OS_CFG_ARG_CHK_EN > 0u)
    if (OSCfg_MsgPoolBasePtr == (OS_MSG *)0) {
 8004ba2:	4b16      	ldr	r3, [pc, #88]	@ (8004bfc <OS_MsgPoolInit+0x5c>)
 8004ba4:	681d      	ldr	r5, [r3, #0]
 8004ba6:	b15d      	cbz	r5, 8004bc0 <OS_MsgPoolInit+0x20>
       *p_err = OS_ERR_MSG_POOL_NULL_PTR;
        return;
    }
    if (OSCfg_MsgPoolSize == 0u) {
 8004ba8:	4b15      	ldr	r3, [pc, #84]	@ (8004c00 <OS_MsgPoolInit+0x60>)
 8004baa:	881e      	ldrh	r6, [r3, #0]
 8004bac:	b166      	cbz	r6, 8004bc8 <OS_MsgPoolInit+0x28>
    }
#endif

    p_msg1 = OSCfg_MsgPoolBasePtr;
    p_msg2 = OSCfg_MsgPoolBasePtr;
    p_msg2++;
 8004bae:	f105 010c 	add.w	r1, r5, #12
    loops  = OSCfg_MsgPoolSize - 1u;
 8004bb2:	f106 3cff 	add.w	ip, r6, #4294967295
 8004bb6:	fa1f fc8c 	uxth.w	ip, ip
    p_msg1 = OSCfg_MsgPoolBasePtr;
 8004bba:	462b      	mov	r3, r5
    for (i = 0u; i < loops; i++) {                              /* Init. list of free OS_MSGs                           */
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	e00f      	b.n	8004be0 <OS_MsgPoolInit+0x40>
       *p_err = OS_ERR_MSG_POOL_NULL_PTR;
 8004bc0:	f245 731e 	movw	r3, #22302	@ 0x571e
 8004bc4:	8003      	strh	r3, [r0, #0]
        return;
 8004bc6:	e017      	b.n	8004bf8 <OS_MsgPoolInit+0x58>
       *p_err = OS_ERR_MSG_POOL_EMPTY;
 8004bc8:	f245 731d 	movw	r3, #22301	@ 0x571d
 8004bcc:	8003      	strh	r3, [r0, #0]
        return;
 8004bce:	e013      	b.n	8004bf8 <OS_MsgPoolInit+0x58>
        p_msg1->NextPtr = p_msg2;
 8004bd0:	6019      	str	r1, [r3, #0]
        p_msg1->MsgPtr  = (void *)0;
 8004bd2:	2400      	movs	r4, #0
 8004bd4:	605c      	str	r4, [r3, #4]
        p_msg1->MsgSize =         0u;
 8004bd6:	811c      	strh	r4, [r3, #8]
#if (OS_CFG_TS_EN > 0u)
        p_msg1->MsgTS   =         0u;
#endif
        p_msg1++;
 8004bd8:	330c      	adds	r3, #12
        p_msg2++;
 8004bda:	310c      	adds	r1, #12
    for (i = 0u; i < loops; i++) {                              /* Init. list of free OS_MSGs                           */
 8004bdc:	3201      	adds	r2, #1
 8004bde:	b292      	uxth	r2, r2
 8004be0:	4562      	cmp	r2, ip
 8004be2:	d3f5      	bcc.n	8004bd0 <OS_MsgPoolInit+0x30>
    }
    p_msg1->NextPtr = (OS_MSG *)0;                              /* Last OS_MSG                                          */
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
    p_msg1->MsgPtr  = (void   *)0;
 8004be8:	605a      	str	r2, [r3, #4]
    p_msg1->MsgSize =           0u;
 8004bea:	811a      	strh	r2, [r3, #8]
#if (OS_CFG_TS_EN > 0u)
    p_msg1->MsgTS   =           0u;
#endif

    OSMsgPool.NextPtr    = OSCfg_MsgPoolBasePtr;
 8004bec:	4b05      	ldr	r3, [pc, #20]	@ (8004c04 <OS_MsgPoolInit+0x64>)
 8004bee:	601d      	str	r5, [r3, #0]
    OSMsgPool.NbrFree    = OSCfg_MsgPoolSize;
 8004bf0:	809e      	strh	r6, [r3, #4]
    OSMsgPool.NbrUsed    = 0u;
 8004bf2:	80da      	strh	r2, [r3, #6]
#if (OS_CFG_DBG_EN > 0u)
    OSMsgPool.NbrUsedMax = 0u;
 8004bf4:	811a      	strh	r2, [r3, #8]
#endif
   *p_err                = OS_ERR_NONE;
 8004bf6:	8002      	strh	r2, [r0, #0]
}
 8004bf8:	bc70      	pop	{r4, r5, r6}
 8004bfa:	4770      	bx	lr
 8004bfc:	08006334 	.word	0x08006334
 8004c00:	08006338 	.word	0x08006338
 8004c04:	20001d50 	.word	0x20001d50

08004c08 <OS_MsgQFreeAll>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_MSG_QTY  OS_MsgQFreeAll (OS_MSG_Q  *p_msg_q)
{
 8004c08:	4603      	mov	r3, r0
    OS_MSG      *p_msg;
    OS_MSG_QTY   qty;



    qty = p_msg_q->NbrEntries;                                  /* Get the number of OS_MSGs being freed                */
 8004c0a:	8940      	ldrh	r0, [r0, #10]
    if (p_msg_q->NbrEntries > 0u) {
 8004c0c:	b1c8      	cbz	r0, 8004c42 <OS_MsgQFreeAll+0x3a>
{
 8004c0e:	b410      	push	{r4}
        p_msg                   = p_msg_q->InPtr;               /* Point to end of message chain                        */
 8004c10:	6819      	ldr	r1, [r3, #0]
        p_msg->NextPtr          = OSMsgPool.NextPtr;
 8004c12:	4a0c      	ldr	r2, [pc, #48]	@ (8004c44 <OS_MsgQFreeAll+0x3c>)
 8004c14:	6814      	ldr	r4, [r2, #0]
 8004c16:	600c      	str	r4, [r1, #0]
        OSMsgPool.NextPtr       = p_msg_q->OutPtr;              /* Point to beginning of message chain                  */
 8004c18:	6859      	ldr	r1, [r3, #4]
 8004c1a:	6011      	str	r1, [r2, #0]
        OSMsgPool.NbrUsed      -= p_msg_q->NbrEntries;          /* Update statistics for free list of messages          */
 8004c1c:	f8b2 c006 	ldrh.w	ip, [r2, #6]
 8004c20:	8959      	ldrh	r1, [r3, #10]
 8004c22:	ebac 0c01 	sub.w	ip, ip, r1
 8004c26:	f8a2 c006 	strh.w	ip, [r2, #6]
        OSMsgPool.NbrFree      += p_msg_q->NbrEntries;
 8004c2a:	f8b2 c004 	ldrh.w	ip, [r2, #4]
 8004c2e:	4461      	add	r1, ip
 8004c30:	8091      	strh	r1, [r2, #4]
        p_msg_q->NbrEntries     =           0u;                 /* Flush the message queue                              */
 8004c32:	2200      	movs	r2, #0
 8004c34:	815a      	strh	r2, [r3, #10]
#if (OS_CFG_DBG_EN > 0u)
        p_msg_q->NbrEntriesMax  =           0u;
 8004c36:	819a      	strh	r2, [r3, #12]
#endif
        p_msg_q->InPtr          = (OS_MSG *)0;
 8004c38:	601a      	str	r2, [r3, #0]
        p_msg_q->OutPtr         = (OS_MSG *)0;
 8004c3a:	605a      	str	r2, [r3, #4]
    }
    return (qty);
}
 8004c3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	4770      	bx	lr
 8004c44:	20001d50 	.word	0x20001d50

08004c48 <OS_MsgQInit>:
*/

void  OS_MsgQInit (OS_MSG_Q    *p_msg_q,
                   OS_MSG_QTY   size)
{
    p_msg_q->NbrEntriesSize = size;
 8004c48:	8101      	strh	r1, [r0, #8]
    p_msg_q->NbrEntries     =           0u;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	8143      	strh	r3, [r0, #10]
#if (OS_CFG_DBG_EN > 0u)
    p_msg_q->NbrEntriesMax  =           0u;
 8004c4e:	8183      	strh	r3, [r0, #12]
#endif
    p_msg_q->InPtr          = (OS_MSG *)0;
 8004c50:	6003      	str	r3, [r0, #0]
    p_msg_q->OutPtr         = (OS_MSG *)0;
 8004c52:	6043      	str	r3, [r0, #4]
}
 8004c54:	4770      	bx	lr
	...

08004c58 <OS_MutexDbgListAdd>:
*/

#if (OS_CFG_DBG_EN > 0u)
void  OS_MutexDbgListAdd (OS_MUTEX  *p_mutex)
{
    p_mutex->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
 8004c58:	4b06      	ldr	r3, [pc, #24]	@ (8004c74 <OS_MutexDbgListAdd+0x1c>)
 8004c5a:	61c3      	str	r3, [r0, #28]
    p_mutex->DbgPrevPtr               = (OS_MUTEX *)0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	6143      	str	r3, [r0, #20]
    if (OSMutexDbgListPtr == (OS_MUTEX *)0) {
 8004c60:	4b05      	ldr	r3, [pc, #20]	@ (8004c78 <OS_MutexDbgListAdd+0x20>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	b123      	cbz	r3, 8004c70 <OS_MutexDbgListAdd+0x18>
        p_mutex->DbgNextPtr           = (OS_MUTEX *)0;
    } else {
        p_mutex->DbgNextPtr           =  OSMutexDbgListPtr;
 8004c66:	6183      	str	r3, [r0, #24]
        OSMutexDbgListPtr->DbgPrevPtr =  p_mutex;
 8004c68:	6158      	str	r0, [r3, #20]
    }
    OSMutexDbgListPtr                 =  p_mutex;
 8004c6a:	4b03      	ldr	r3, [pc, #12]	@ (8004c78 <OS_MutexDbgListAdd+0x20>)
 8004c6c:	6018      	str	r0, [r3, #0]
}
 8004c6e:	4770      	bx	lr
        p_mutex->DbgNextPtr           = (OS_MUTEX *)0;
 8004c70:	6183      	str	r3, [r0, #24]
 8004c72:	e7fa      	b.n	8004c6a <OS_MutexDbgListAdd+0x12>
 8004c74:	08006378 	.word	0x08006378
 8004c78:	20001d4c 	.word	0x20001d4c

08004c7c <OSMutexCreate>:
{
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	4615      	mov	r5, r2
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to be called from an ISR                 */
 8004c80:	4b19      	ldr	r3, [pc, #100]	@ (8004ce8 <OSMutexCreate+0x6c>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	bb13      	cbnz	r3, 8004ccc <OSMutexCreate+0x50>
 8004c86:	4604      	mov	r4, r0
 8004c88:	460e      	mov	r6, r1
    if (p_mutex == (OS_MUTEX *)0) {                             /* Validate 'p_mutex'                                   */
 8004c8a:	b318      	cbz	r0, 8004cd4 <OSMutexCreate+0x58>
    CPU_CRITICAL_ENTER();
 8004c8c:	2040      	movs	r0, #64	@ 0x40
 8004c8e:	f7fb fa9f 	bl	80001d0 <CPU_SR_Save>
 8004c92:	4607      	mov	r7, r0
    if (p_mutex->Type == OS_OBJ_TYPE_MUTEX) {
 8004c94:	6822      	ldr	r2, [r4, #0]
 8004c96:	4b15      	ldr	r3, [pc, #84]	@ (8004cec <OSMutexCreate+0x70>)
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d01f      	beq.n	8004cdc <OSMutexCreate+0x60>
    p_mutex->Type              =  OS_OBJ_TYPE_MUTEX;            /* Mark the data structure as a mutex                   */
 8004c9c:	4b13      	ldr	r3, [pc, #76]	@ (8004cec <OSMutexCreate+0x70>)
 8004c9e:	6023      	str	r3, [r4, #0]
    p_mutex->NamePtr           =  p_name;
 8004ca0:	6066      	str	r6, [r4, #4]
    p_mutex->MutexGrpNextPtr   = (OS_MUTEX *)0;
 8004ca2:	2600      	movs	r6, #0
 8004ca4:	6226      	str	r6, [r4, #32]
    p_mutex->OwnerTCBPtr       = (OS_TCB   *)0;
 8004ca6:	6266      	str	r6, [r4, #36]	@ 0x24
    p_mutex->OwnerNestingCtr   =             0u;                /* Mutex is available                                   */
 8004ca8:	f884 6028 	strb.w	r6, [r4, #40]	@ 0x28
    OS_PendListInit(&p_mutex->PendList);                        /* Initialize the waiting list                          */
 8004cac:	f104 0008 	add.w	r0, r4, #8
 8004cb0:	f7ff f860 	bl	8003d74 <OS_PendListInit>
    OS_MutexDbgListAdd(p_mutex);
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f7ff ffcf 	bl	8004c58 <OS_MutexDbgListAdd>
    OSMutexQty++;
 8004cba:	4a0d      	ldr	r2, [pc, #52]	@ (8004cf0 <OSMutexCreate+0x74>)
 8004cbc:	8813      	ldrh	r3, [r2, #0]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	8013      	strh	r3, [r2, #0]
    CPU_CRITICAL_EXIT();
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	f7fb fa92 	bl	80001ec <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8004cc8:	802e      	strh	r6, [r5, #0]
}
 8004cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       *p_err = OS_ERR_CREATE_ISR;
 8004ccc:	f642 63e1 	movw	r3, #12001	@ 0x2ee1
 8004cd0:	8013      	strh	r3, [r2, #0]
        return;
 8004cd2:	e7fa      	b.n	8004cca <OSMutexCreate+0x4e>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8004cd4:	f645 53c3 	movw	r3, #24003	@ 0x5dc3
 8004cd8:	8013      	strh	r3, [r2, #0]
        return;
 8004cda:	e7f6      	b.n	8004cca <OSMutexCreate+0x4e>
        CPU_CRITICAL_EXIT();
 8004cdc:	f7fb fa86 	bl	80001ec <CPU_SR_Restore>
        *p_err = OS_ERR_OBJ_CREATED;
 8004ce0:	f645 53c1 	movw	r3, #24001	@ 0x5dc1
 8004ce4:	802b      	strh	r3, [r5, #0]
        return;
 8004ce6:	e7f0      	b.n	8004cca <OSMutexCreate+0x4e>
 8004ce8:	20001d76 	.word	0x20001d76
 8004cec:	5854554d 	.word	0x5854554d
 8004cf0:	20001d4a 	.word	0x20001d4a

08004cf4 <OS_MutexGrpAdd>:
************************************************************************************************************************
*/

void  OS_MutexGrpAdd (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
    p_mutex->MutexGrpNextPtr = p_tcb->MutexGrpHeadPtr;      /* The mutex grp is not sorted add to head of list.       */
 8004cf4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004cf6:	620b      	str	r3, [r1, #32]
    p_tcb->MutexGrpHeadPtr   = p_mutex;
 8004cf8:	6401      	str	r1, [r0, #64]	@ 0x40
}
 8004cfa:	4770      	bx	lr

08004cfc <OSMutexPend>:
{
 8004cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
 8004cfe:	4b57      	ldr	r3, [pc, #348]	@ (8004e5c <OSMutexPend+0x160>)
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	b95b      	cbnz	r3, 8004d1c <OSMutexPend+0x20>
 8004d04:	4606      	mov	r6, r0
 8004d06:	460d      	mov	r5, r1
 8004d08:	4614      	mov	r4, r2
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 8004d0a:	4b55      	ldr	r3, [pc, #340]	@ (8004e60 <OSMutexPend+0x164>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d009      	beq.n	8004d26 <OSMutexPend+0x2a>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8004d12:	f645 6389 	movw	r3, #24201	@ 0x5e89
 8004d16:	9a06      	ldr	r2, [sp, #24]
 8004d18:	8013      	strh	r3, [r2, #0]
        return;
 8004d1a:	e003      	b.n	8004d24 <OSMutexPend+0x28>
       *p_err = OS_ERR_PEND_ISR;
 8004d1c:	f246 13ae 	movw	r3, #25006	@ 0x61ae
 8004d20:	9a06      	ldr	r2, [sp, #24]
 8004d22:	8013      	strh	r3, [r2, #0]
}
 8004d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (p_mutex == (OS_MUTEX *)0) {                             /* Validate arguments                                   */
 8004d26:	b140      	cbz	r0, 8004d3a <OSMutexPend+0x3e>
    switch (opt) {                                              /* Validate 'opt'                                       */
 8004d28:	b162      	cbz	r2, 8004d44 <OSMutexPend+0x48>
 8004d2a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8004d2e:	d009      	beq.n	8004d44 <OSMutexPend+0x48>
            *p_err = OS_ERR_OPT_INVALID;
 8004d30:	f645 6325 	movw	r3, #24101	@ 0x5e25
 8004d34:	9a06      	ldr	r2, [sp, #24]
 8004d36:	8013      	strh	r3, [r2, #0]
             return;
 8004d38:	e7f4      	b.n	8004d24 <OSMutexPend+0x28>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8004d3a:	f645 53c3 	movw	r3, #24003	@ 0x5dc3
 8004d3e:	9a06      	ldr	r2, [sp, #24]
 8004d40:	8013      	strh	r3, [r2, #0]
        return;
 8004d42:	e7ef      	b.n	8004d24 <OSMutexPend+0x28>
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {                   /* Make sure mutex was created                          */
 8004d44:	6832      	ldr	r2, [r6, #0]
 8004d46:	4b47      	ldr	r3, [pc, #284]	@ (8004e64 <OSMutexPend+0x168>)
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d004      	beq.n	8004d56 <OSMutexPend+0x5a>
       *p_err = OS_ERR_OBJ_TYPE;
 8004d4c:	f645 53c4 	movw	r3, #24004	@ 0x5dc4
 8004d50:	9a06      	ldr	r2, [sp, #24]
 8004d52:	8013      	strh	r3, [r2, #0]
        return;
 8004d54:	e7e6      	b.n	8004d24 <OSMutexPend+0x28>
    CPU_CRITICAL_ENTER();
 8004d56:	2040      	movs	r0, #64	@ 0x40
 8004d58:	f7fb fa3a 	bl	80001d0 <CPU_SR_Save>
 8004d5c:	4607      	mov	r7, r0
    if (p_mutex->OwnerNestingCtr == 0u) {                       /* Resource available?                                  */
 8004d5e:	f896 3028 	ldrb.w	r3, [r6, #40]	@ 0x28
 8004d62:	b34b      	cbz	r3, 8004db8 <OSMutexPend+0xbc>
    if (OSTCBCurPtr == p_mutex->OwnerTCBPtr) {                  /* See if current task is already the owner of the mutex*/
 8004d64:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004d66:	4940      	ldr	r1, [pc, #256]	@ (8004e68 <OSMutexPend+0x16c>)
 8004d68:	6809      	ldr	r1, [r1, #0]
 8004d6a:	4288      	cmp	r0, r1
 8004d6c:	d034      	beq.n	8004dd8 <OSMutexPend+0xdc>
    if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {               /* Caller wants to block if not available?              */
 8004d6e:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8004d72:	d146      	bne.n	8004e02 <OSMutexPend+0x106>
        if (OSSchedLockNestingCtr > 0u) {                       /* Can't pend when the scheduler is locked              */
 8004d74:	4b3d      	ldr	r3, [pc, #244]	@ (8004e6c <OSMutexPend+0x170>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d14a      	bne.n	8004e12 <OSMutexPend+0x116>
    if (p_tcb->Prio > OSTCBCurPtr->Prio) {                      /* See if mutex owner has a lower priority than current */
 8004d7c:	f890 303b 	ldrb.w	r3, [r0, #59]	@ 0x3b
 8004d80:	f891 103b 	ldrb.w	r1, [r1, #59]	@ 0x3b
 8004d84:	428b      	cmp	r3, r1
 8004d86:	d84c      	bhi.n	8004e22 <OSMutexPend+0x126>
    OS_Pend((OS_PEND_OBJ *)((void *)p_mutex),                   /* Block task pending on Mutex                          */
 8004d88:	4c37      	ldr	r4, [pc, #220]	@ (8004e68 <OSMutexPend+0x16c>)
 8004d8a:	462b      	mov	r3, r5
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	6821      	ldr	r1, [r4, #0]
 8004d90:	4630      	mov	r0, r6
 8004d92:	f7ff fa93 	bl	80042bc <OS_Pend>
    CPU_CRITICAL_EXIT();
 8004d96:	4638      	mov	r0, r7
 8004d98:	f7fb fa28 	bl	80001ec <CPU_SR_Restore>
    OSSched();                                                  /* Find the next highest priority task ready to run     */
 8004d9c:	f7fe ff0a 	bl	8003bb4 <OSSched>
    CPU_CRITICAL_ENTER();
 8004da0:	2040      	movs	r0, #64	@ 0x40
 8004da2:	f7fb fa15 	bl	80001d0 <CPU_SR_Save>
    switch (OSTCBCurPtr->PendStatus) {
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d850      	bhi.n	8004e52 <OSMutexPend+0x156>
 8004db0:	e8df f003 	tbb	[pc, r3]
 8004db4:	454a403a 	.word	0x454a403a
        p_mutex->OwnerTCBPtr     = OSTCBCurPtr;                 /* Yes, caller may proceed                              */
 8004db8:	4b2b      	ldr	r3, [pc, #172]	@ (8004e68 <OSMutexPend+0x16c>)
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	6270      	str	r0, [r6, #36]	@ 0x24
        p_mutex->OwnerNestingCtr = 1u;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f886 3028 	strb.w	r3, [r6, #40]	@ 0x28
        OS_MutexGrpAdd(OSTCBCurPtr, p_mutex);                   /* Add mutex to owner's group                           */
 8004dc4:	4631      	mov	r1, r6
 8004dc6:	f7ff ff95 	bl	8004cf4 <OS_MutexGrpAdd>
        CPU_CRITICAL_EXIT();
 8004dca:	4638      	mov	r0, r7
 8004dcc:	f7fb fa0e 	bl	80001ec <CPU_SR_Restore>
       *p_err = OS_ERR_NONE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	9a06      	ldr	r2, [sp, #24]
 8004dd4:	8013      	strh	r3, [r2, #0]
        return;
 8004dd6:	e7a5      	b.n	8004d24 <OSMutexPend+0x28>
        if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)-1) {
 8004dd8:	2bff      	cmp	r3, #255	@ 0xff
 8004dda:	d00a      	beq.n	8004df2 <OSMutexPend+0xf6>
        p_mutex->OwnerNestingCtr++;
 8004ddc:	3301      	adds	r3, #1
 8004dde:	f886 3028 	strb.w	r3, [r6, #40]	@ 0x28
        CPU_CRITICAL_EXIT();
 8004de2:	4638      	mov	r0, r7
 8004de4:	f7fb fa02 	bl	80001ec <CPU_SR_Restore>
       *p_err = OS_ERR_MUTEX_OWNER;                             /* Indicate that current task already owns the mutex    */
 8004de8:	f245 7382 	movw	r3, #22402	@ 0x5782
 8004dec:	9a06      	ldr	r2, [sp, #24]
 8004dee:	8013      	strh	r3, [r2, #0]
        return;
 8004df0:	e798      	b.n	8004d24 <OSMutexPend+0x28>
            CPU_CRITICAL_EXIT();
 8004df2:	4638      	mov	r0, r7
 8004df4:	f7fb f9fa 	bl	80001ec <CPU_SR_Restore>
           *p_err = OS_ERR_MUTEX_OVF;
 8004df8:	f245 7384 	movw	r3, #22404	@ 0x5784
 8004dfc:	9a06      	ldr	r2, [sp, #24]
 8004dfe:	8013      	strh	r3, [r2, #0]
            return;
 8004e00:	e790      	b.n	8004d24 <OSMutexPend+0x28>
        CPU_CRITICAL_EXIT();
 8004e02:	4638      	mov	r0, r7
 8004e04:	f7fb f9f2 	bl	80001ec <CPU_SR_Restore>
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                        /* No                                                   */
 8004e08:	f246 13b0 	movw	r3, #25008	@ 0x61b0
 8004e0c:	9a06      	ldr	r2, [sp, #24]
 8004e0e:	8013      	strh	r3, [r2, #0]
        return;
 8004e10:	e788      	b.n	8004d24 <OSMutexPend+0x28>
            CPU_CRITICAL_EXIT();
 8004e12:	4638      	mov	r0, r7
 8004e14:	f7fb f9ea 	bl	80001ec <CPU_SR_Restore>
           *p_err = OS_ERR_SCHED_LOCKED;
 8004e18:	f646 5363 	movw	r3, #28003	@ 0x6d63
 8004e1c:	9a06      	ldr	r2, [sp, #24]
 8004e1e:	8013      	strh	r3, [r2, #0]
            return;
 8004e20:	e780      	b.n	8004d24 <OSMutexPend+0x28>
        OS_TaskChangePrio(p_tcb, OSTCBCurPtr->Prio);
 8004e22:	f000 fc31 	bl	8005688 <OS_TaskChangePrio>
 8004e26:	e7af      	b.n	8004d88 <OSMutexPend+0x8c>
            *p_err = OS_ERR_NONE;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	9a06      	ldr	r2, [sp, #24]
 8004e2c:	8013      	strh	r3, [r2, #0]
    CPU_CRITICAL_EXIT();
 8004e2e:	f7fb f9dd 	bl	80001ec <CPU_SR_Restore>
    OS_TRACE_MUTEX_PEND_EXIT(*p_err);
 8004e32:	e777      	b.n	8004d24 <OSMutexPend+0x28>
            *p_err = OS_ERR_PEND_ABORT;
 8004e34:	f246 13a9 	movw	r3, #25001	@ 0x61a9
 8004e38:	9a06      	ldr	r2, [sp, #24]
 8004e3a:	8013      	strh	r3, [r2, #0]
             break;
 8004e3c:	e7f7      	b.n	8004e2e <OSMutexPend+0x132>
            *p_err = OS_ERR_TIMEOUT;
 8004e3e:	f247 23d9 	movw	r3, #29401	@ 0x72d9
 8004e42:	9a06      	ldr	r2, [sp, #24]
 8004e44:	8013      	strh	r3, [r2, #0]
             break;
 8004e46:	e7f2      	b.n	8004e2e <OSMutexPend+0x132>
            *p_err = OS_ERR_OBJ_DEL;
 8004e48:	f645 53c2 	movw	r3, #24002	@ 0x5dc2
 8004e4c:	9a06      	ldr	r2, [sp, #24]
 8004e4e:	8013      	strh	r3, [r2, #0]
             break;
 8004e50:	e7ed      	b.n	8004e2e <OSMutexPend+0x132>
            *p_err = OS_ERR_STATUS_INVALID;
 8004e52:	f646 632e 	movw	r3, #28206	@ 0x6e2e
 8004e56:	9a06      	ldr	r2, [sp, #24]
 8004e58:	8013      	strh	r3, [r2, #0]
             break;
 8004e5a:	e7e8      	b.n	8004e2e <OSMutexPend+0x132>
 8004e5c:	20001d76 	.word	0x20001d76
 8004e60:	20001d75 	.word	0x20001d75
 8004e64:	5854554d 	.word	0x5854554d
 8004e68:	20001988 	.word	0x20001988
 8004e6c:	20001bb8 	.word	0x20001bb8

08004e70 <OS_MutexGrpRemove>:

void  OS_MutexGrpRemove (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
    OS_MUTEX  **pp_mutex;

    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8004e70:	3040      	adds	r0, #64	@ 0x40

    while(*pp_mutex != p_mutex) {
 8004e72:	e001      	b.n	8004e78 <OS_MutexGrpRemove+0x8>
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8004e74:	f103 0020 	add.w	r0, r3, #32
    while(*pp_mutex != p_mutex) {
 8004e78:	6803      	ldr	r3, [r0, #0]
 8004e7a:	428b      	cmp	r3, r1
 8004e7c:	d1fa      	bne.n	8004e74 <OS_MutexGrpRemove+0x4>
    }

    *pp_mutex = (*pp_mutex)->MutexGrpNextPtr;
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	6003      	str	r3, [r0, #0]
}
 8004e82:	4770      	bx	lr

08004e84 <OS_MutexGrpPrioFindHighest>:
    OS_PRIO     prio;
    OS_TCB     *p_head;


    highest_prio = (OS_PRIO)(OS_CFG_PRIO_MAX - 1u);
    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8004e84:	f100 0340 	add.w	r3, r0, #64	@ 0x40
    highest_prio = (OS_PRIO)(OS_CFG_PRIO_MAX - 1u);
 8004e88:	201f      	movs	r0, #31

    while(*pp_mutex != (OS_MUTEX *)0) {
 8004e8a:	e000      	b.n	8004e8e <OS_MutexGrpPrioFindHighest+0xa>
            prio = p_head->Prio;
            if(prio < highest_prio) {
                highest_prio = prio;
            }
        }
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8004e8c:	3320      	adds	r3, #32
    while(*pp_mutex != (OS_MUTEX *)0) {
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	b143      	cbz	r3, 8004ea4 <OS_MutexGrpPrioFindHighest+0x20>
        p_head = (*pp_mutex)->PendList.HeadPtr;
 8004e92:	689a      	ldr	r2, [r3, #8]
        if (p_head != (OS_TCB *)0) {
 8004e94:	2a00      	cmp	r2, #0
 8004e96:	d0f9      	beq.n	8004e8c <OS_MutexGrpPrioFindHighest+0x8>
            prio = p_head->Prio;
 8004e98:	f892 203b 	ldrb.w	r2, [r2, #59]	@ 0x3b
            if(prio < highest_prio) {
 8004e9c:	4290      	cmp	r0, r2
 8004e9e:	d9f5      	bls.n	8004e8c <OS_MutexGrpPrioFindHighest+0x8>
                highest_prio = prio;
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	e7f3      	b.n	8004e8c <OS_MutexGrpPrioFindHighest+0x8>
    }

    return (highest_prio);
}
 8004ea4:	4770      	bx	lr

08004ea6 <OS_MutexGrpPostAll>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpPostAll (OS_TCB  *p_tcb)
{
 8004ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	4606      	mov	r6, r0
    CPU_TS         ts;
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb_new;


    p_mutex = p_tcb->MutexGrpHeadPtr;
 8004eac:	6c04      	ldr	r4, [r0, #64]	@ 0x40

    while(p_mutex != (OS_MUTEX *)0) {
 8004eae:	e004      	b.n	8004eba <OS_MutexGrpPostAll+0x14>
#endif
        OS_MutexGrpRemove(p_tcb,  p_mutex);                     /* Remove mutex from owner's group                      */

        p_pend_list = &p_mutex->PendList;
        if (p_pend_list->HeadPtr == (OS_TCB *)0) {              /* Any task waiting on mutex?                           */
            p_mutex->OwnerNestingCtr =           0u;            /* Decrement owner's nesting counter                    */
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
            p_mutex->OwnerTCBPtr     = (OS_TCB *)0;             /* No                                                   */
 8004eb6:	6263      	str	r3, [r4, #36]	@ 0x24
{
 8004eb8:	463c      	mov	r4, r7
    while(p_mutex != (OS_MUTEX *)0) {
 8004eba:	b1bc      	cbz	r4, 8004eec <OS_MutexGrpPostAll+0x46>
        p_mutex_next = p_mutex->MutexGrpNextPtr;
 8004ebc:	6a27      	ldr	r7, [r4, #32]
        OS_MutexGrpRemove(p_tcb,  p_mutex);                     /* Remove mutex from owner's group                      */
 8004ebe:	4621      	mov	r1, r4
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	f7ff ffd5 	bl	8004e70 <OS_MutexGrpRemove>
        if (p_pend_list->HeadPtr == (OS_TCB *)0) {              /* Any task waiting on mutex?                           */
 8004ec6:	68a5      	ldr	r5, [r4, #8]
 8004ec8:	2d00      	cmp	r5, #0
 8004eca:	d0f1      	beq.n	8004eb0 <OS_MutexGrpPostAll+0xa>
        } else {
                                                                /* Get TCB from head of pend list                       */
            p_tcb_new                = p_pend_list->HeadPtr;
            p_mutex->OwnerTCBPtr     = p_tcb;                   /* Give mutex to new owner                              */
 8004ecc:	6266      	str	r6, [r4, #36]	@ 0x24
            p_mutex->OwnerNestingCtr = 1u;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
            OS_MutexGrpAdd(p_tcb_new, p_mutex);
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	f7ff ff0c 	bl	8004cf4 <OS_MutexGrpAdd>
                                                                /* Post to mutex                                        */
            OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
 8004edc:	2200      	movs	r2, #0
 8004ede:	9200      	str	r2, [sp, #0]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	4629      	mov	r1, r5
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f7ff f8ed 	bl	80040c4 <OS_Post>
 8004eea:	e7e5      	b.n	8004eb8 <OS_MutexGrpPostAll+0x12>
        }

        p_mutex = p_mutex_next;
    }

}
 8004eec:	b003      	add	sp, #12
 8004eee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ef0 <OS_PrioInit>:
{
    CPU_DATA  i;


                                                                /* Clear the bitmap table ... no task is ready          */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	b103      	cbz	r3, 8004ef6 <OS_PrioInit+0x6>
    }

#if (OS_CFG_TASK_IDLE_EN == 0u)
    OS_PrioInsert ((OS_PRIO)(OS_CFG_PRIO_MAX - 1u));            /* Insert what would be the idle task                   */
#endif
}
 8004ef4:	4770      	bx	lr
         OSPrioTbl[i] = 0u;
 8004ef6:	4a03      	ldr	r2, [pc, #12]	@ (8004f04 <OS_PrioInit+0x14>)
 8004ef8:	2100      	movs	r1, #0
 8004efa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 8004efe:	3301      	adds	r3, #1
 8004f00:	e7f7      	b.n	8004ef2 <OS_PrioInit+0x2>
 8004f02:	bf00      	nop
 8004f04:	20001d44 	.word	0x20001d44

08004f08 <OS_PrioGetHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_PrioGetHighest (void)
{
 8004f08:	b508      	push	{r3, lr}
#if   (OS_CFG_PRIO_MAX <= (CPU_CFG_DATA_SIZE * 8u))             /* Optimize for less than word size nbr of priorities   */
    return ((OS_PRIO)CPU_CntLeadZeros(OSPrioTbl[0]));
 8004f0a:	4b03      	ldr	r3, [pc, #12]	@ (8004f18 <OS_PrioGetHighest+0x10>)
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	f7fb f97a 	bl	8000206 <CPU_CntLeadZeros>
    }
    prio += (OS_PRIO)CPU_CntLeadZeros(*p_tbl);                  /* Find the position of the first bit set at the entry  */

    return (prio);
#endif
}
 8004f12:	b2c0      	uxtb	r0, r0
 8004f14:	bd08      	pop	{r3, pc}
 8004f16:	bf00      	nop
 8004f18:	20001d44 	.word	0x20001d44

08004f1c <OS_PrioInsert>:
*/

void  OS_PrioInsert (OS_PRIO  prio)
{
#if   (OS_CFG_PRIO_MAX <= (CPU_CFG_DATA_SIZE * 8u))             /* Optimize for less than word size nbr of priorities   */
    OSPrioTbl[0] |= (CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - prio);
 8004f1c:	4903      	ldr	r1, [pc, #12]	@ (8004f2c <OS_PrioInsert+0x10>)
 8004f1e:	680b      	ldr	r3, [r1, #0]
 8004f20:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004f24:	40c2      	lsrs	r2, r0
 8004f26:	4313      	orrs	r3, r2
 8004f28:	600b      	str	r3, [r1, #0]

    ix             = (OS_PRIO)(prio /  (CPU_CFG_DATA_SIZE * 8u));
    bit_nbr        = (CPU_DATA)prio & ((CPU_CFG_DATA_SIZE * 8u) - 1u);
    OSPrioTbl[ix] |= (CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - bit_nbr);
#endif
}
 8004f2a:	4770      	bx	lr
 8004f2c:	20001d44 	.word	0x20001d44

08004f30 <OS_PrioRemove>:
*/

void  OS_PrioRemove (OS_PRIO  prio)
{
#if   (OS_CFG_PRIO_MAX <= (CPU_CFG_DATA_SIZE * 8u))             /* Optimize for less than word size nbr of priorities   */
    OSPrioTbl[0] &= ~((CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - prio));
 8004f30:	4904      	ldr	r1, [pc, #16]	@ (8004f44 <OS_PrioRemove+0x14>)
 8004f32:	680b      	ldr	r3, [r1, #0]
 8004f34:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004f38:	40c2      	lsrs	r2, r0
 8004f3a:	ea23 0302 	bic.w	r3, r3, r2
 8004f3e:	600b      	str	r3, [r1, #0]

    ix             =   (OS_PRIO)(prio  /   (CPU_CFG_DATA_SIZE * 8u));
    bit_nbr        =   (CPU_DATA)prio  &  ((CPU_CFG_DATA_SIZE * 8u) - 1u);
    OSPrioTbl[ix] &= ~((CPU_DATA)  1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - bit_nbr));
#endif
}
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	20001d44 	.word	0x20001d44

08004f48 <OSStatReset>:
* Note(s)    : none
************************************************************************************************************************
*/

void  OSStatReset (OS_ERR  *p_err)
{
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	4605      	mov	r5, r0
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 8004f4c:	2040      	movs	r0, #64	@ 0x40
 8004f4e:	f7fb f93f 	bl	80001d0 <CPU_SR_Save>
#if (OS_CFG_STAT_TASK_EN > 0u)
    OSStatTaskCPUUsageMax = 0u;
 8004f52:	2300      	movs	r3, #0
 8004f54:	4a1d      	ldr	r2, [pc, #116]	@ (8004fcc <OSStatReset+0x84>)
 8004f56:	8013      	strh	r3, [r2, #0]
#if (OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u)
    OSSchedLockTimeMax    = 0u;                                 /* Reset the maximum scheduler lock time                */
#endif

#if ((OS_MSG_EN > 0u) && (OS_CFG_DBG_EN > 0u))
    OSMsgPool.NbrUsedMax  = 0u;
 8004f58:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd0 <OSStatReset+0x88>)
 8004f5a:	8113      	strh	r3, [r2, #8]
#endif
    CPU_CRITICAL_EXIT();
 8004f5c:	f7fb f946 	bl	80001ec <CPU_SR_Restore>

#if (OS_CFG_DBG_EN > 0u)
    CPU_CRITICAL_ENTER();
 8004f60:	2040      	movs	r0, #64	@ 0x40
 8004f62:	f7fb f935 	bl	80001d0 <CPU_SR_Save>
    p_tcb = OSTaskDbgListPtr;
 8004f66:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd4 <OSStatReset+0x8c>)
 8004f68:	681c      	ldr	r4, [r3, #0]
    CPU_CRITICAL_EXIT();
 8004f6a:	f7fb f93f 	bl	80001ec <CPU_SR_Restore>
    while (p_tcb != (OS_TCB *)0) {                              /* Reset per-Task statistics                            */
 8004f6e:	e016      	b.n	8004f9e <OSStatReset+0x56>
        CPU_CRITICAL_ENTER();
 8004f70:	2040      	movs	r0, #64	@ 0x40
 8004f72:	f7fb f92d 	bl	80001d0 <CPU_SR_Save>
        p_tcb->SchedLockTimeMax = 0u;
#endif

#if (OS_CFG_TASK_PROFILE_EN > 0u)
#if (OS_CFG_TASK_Q_EN > 0u)
        p_tcb->MsgQPendTimeMax  = 0u;
 8004f76:	2300      	movs	r3, #0
 8004f78:	67e3      	str	r3, [r4, #124]	@ 0x7c
#endif
        p_tcb->SemPendTimeMax   = 0u;
 8004f7a:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
        p_tcb->CtxSwCtr         = 0u;
 8004f7e:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
        p_tcb->CPUUsage         = 0u;
 8004f82:	f8a4 3090 	strh.w	r3, [r4, #144]	@ 0x90
        p_tcb->CPUUsageMax      = 0u;
 8004f86:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
        p_tcb->CyclesTotal      = 0u;
 8004f8a:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
        p_tcb->CyclesTotalPrev  = 0u;
 8004f8e:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
#endif
#endif

#if (OS_CFG_TASK_Q_EN > 0u)
        p_msg_q                 = &p_tcb->MsgQ;
        p_msg_q->NbrEntriesMax  = 0u;
 8004f92:	f8a4 3074 	strh.w	r3, [r4, #116]	@ 0x74
#endif
        p_tcb                   = p_tcb->DbgNextPtr;
 8004f96:	f8d4 40bc 	ldr.w	r4, [r4, #188]	@ 0xbc
        CPU_CRITICAL_EXIT();
 8004f9a:	f7fb f927 	bl	80001ec <CPU_SR_Restore>
    while (p_tcb != (OS_TCB *)0) {                              /* Reset per-Task statistics                            */
 8004f9e:	2c00      	cmp	r4, #0
 8004fa0:	d1e6      	bne.n	8004f70 <OSStatReset+0x28>
    }
#endif

#if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
    CPU_CRITICAL_ENTER();
 8004fa2:	2040      	movs	r0, #64	@ 0x40
 8004fa4:	f7fb f914 	bl	80001d0 <CPU_SR_Save>
    p_q = OSQDbgListPtr;
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd8 <OSStatReset+0x90>)
 8004faa:	681c      	ldr	r4, [r3, #0]
    CPU_CRITICAL_EXIT();
 8004fac:	f7fb f91e 	bl	80001ec <CPU_SR_Restore>
    while (p_q != (OS_Q *)0) {                                  /* Reset message queues statistics                      */
 8004fb0:	e007      	b.n	8004fc2 <OSStatReset+0x7a>
        CPU_CRITICAL_ENTER();
 8004fb2:	2040      	movs	r0, #64	@ 0x40
 8004fb4:	f7fb f90c 	bl	80001d0 <CPU_SR_Save>
        p_msg_q                = &p_q->MsgQ;
        p_msg_q->NbrEntriesMax = 0u;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	85a3      	strh	r3, [r4, #44]	@ 0x2c
        p_q                    = p_q->DbgNextPtr;
 8004fbc:	69a4      	ldr	r4, [r4, #24]
        CPU_CRITICAL_EXIT();
 8004fbe:	f7fb f915 	bl	80001ec <CPU_SR_Restore>
    while (p_q != (OS_Q *)0) {                                  /* Reset message queues statistics                      */
 8004fc2:	2c00      	cmp	r4, #0
 8004fc4:	d1f5      	bne.n	8004fb2 <OSStatReset+0x6a>
    }
#endif


   *p_err = OS_ERR_NONE;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	802b      	strh	r3, [r5, #0]
}
 8004fca:	bd38      	pop	{r3, r4, r5, pc}
 8004fcc:	20001ba4 	.word	0x20001ba4
 8004fd0:	20001d50 	.word	0x20001d50
 8004fd4:	20001ac8 	.word	0x20001ac8
 8004fd8:	20001d40 	.word	0x20001d40

08004fdc <OS_StatTask>:
*              4) This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTask (void  *p_arg)
{
 8004fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fde:	b083      	sub	sp, #12
    CPU_SR_ALLOC();


    (void)p_arg;                                                /* Prevent compiler warning for not using 'p_arg'       */

    while (OSStatTaskRdy != OS_TRUE) {
 8004fe0:	e007      	b.n	8004ff2 <OS_StatTask+0x16>
        OSTimeDly(2u * OSCfg_StatTaskRate_Hz,                   /* Wait until statistic task is ready                   */
 8004fe2:	4b80      	ldr	r3, [pc, #512]	@ (80051e4 <OS_StatTask+0x208>)
 8004fe4:	6818      	ldr	r0, [r3, #0]
 8004fe6:	f10d 0206 	add.w	r2, sp, #6
 8004fea:	2100      	movs	r1, #0
 8004fec:	0040      	lsls	r0, r0, #1
 8004fee:	f000 fddb 	bl	8005ba8 <OSTimeDly>
    while (OSStatTaskRdy != OS_TRUE) {
 8004ff2:	4b7d      	ldr	r3, [pc, #500]	@ (80051e8 <OS_StatTask+0x20c>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d1f3      	bne.n	8004fe2 <OS_StatTask+0x6>
                  OS_OPT_TIME_DLY,
                  &err);
    }
    OSStatReset(&err);                                          /* Reset statistics                                     */
 8004ffa:	f10d 0006 	add.w	r0, sp, #6
 8004ffe:	f7ff ffa3 	bl	8004f48 <OSStatReset>

    dly = (OS_TICK)0;                                           /* Compute statistic task sleep delay                   */
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 8005002:	4b7a      	ldr	r3, [pc, #488]	@ (80051ec <OS_StatTask+0x210>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a77      	ldr	r2, [pc, #476]	@ (80051e4 <OS_StatTask+0x208>)
 8005008:	6815      	ldr	r5, [r2, #0]
 800500a:	42ab      	cmp	r3, r5
 800500c:	d904      	bls.n	8005018 <OS_StatTask+0x3c>
        dly = (OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 800500e:	fbb3 f5f5 	udiv	r5, r3, r5
    }
    if (dly == 0u) {
 8005012:	2d00      	cmp	r5, #0
 8005014:	f040 80c0 	bne.w	8005198 <OS_StatTask+0x1bc>
        dly =  (OSCfg_TickRate_Hz / 10u);
 8005018:	4a75      	ldr	r2, [pc, #468]	@ (80051f0 <OS_StatTask+0x214>)
 800501a:	fba2 2303 	umull	r2, r3, r2, r3
 800501e:	08dd      	lsrs	r5, r3, #3
 8005020:	e0ba      	b.n	8005198 <OS_StatTask+0x1bc>
        CPU_CRITICAL_EXIT();

        if (OSStatTaskCtrMax > OSStatTaskCtrRun) {              /* Compute CPU Usage with best resolution               */
            if (OSStatTaskCtrMax < 400000u) {                   /* 1 to       400,000                                   */
                ctr_mult = 10000u;
                ctr_div  =     1u;
 8005022:	2101      	movs	r1, #1
                ctr_mult = 10000u;
 8005024:	f242 7010 	movw	r0, #10000	@ 0x2710
                ctr_div  =  1000u;
            } else {                                            /* 400,000,000 and up                                   */
                ctr_mult =     1u;
                ctr_div  = 10000u;
            }
            ctr_max            = OSStatTaskCtrMax / ctr_div;
 8005028:	fbb2 f2f1 	udiv	r2, r2, r1
            OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ((ctr_mult * OSStatTaskCtrRun) / ctr_max));
 800502c:	fb00 f303 	mul.w	r3, r0, r3
 8005030:	fbb3 f3f2 	udiv	r3, r3, r2
 8005034:	f5c3 531c 	rsb	r3, r3, #9984	@ 0x2700
 8005038:	3310      	adds	r3, #16
 800503a:	b29b      	uxth	r3, r3
 800503c:	4a6d      	ldr	r2, [pc, #436]	@ (80051f4 <OS_StatTask+0x218>)
 800503e:	8013      	strh	r3, [r2, #0]
            if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
 8005040:	4a6d      	ldr	r2, [pc, #436]	@ (80051f8 <OS_StatTask+0x21c>)
 8005042:	8812      	ldrh	r2, [r2, #0]
 8005044:	4293      	cmp	r3, r2
 8005046:	d910      	bls.n	800506a <OS_StatTask+0x8e>
                OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
 8005048:	4a6b      	ldr	r2, [pc, #428]	@ (80051f8 <OS_StatTask+0x21c>)
 800504a:	8013      	strh	r3, [r2, #0]
 800504c:	e00d      	b.n	800506a <OS_StatTask+0x8e>
                ctr_div  =    10u;
 800504e:	210a      	movs	r1, #10
                ctr_mult =  1000u;
 8005050:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005054:	e7e8      	b.n	8005028 <OS_StatTask+0x4c>
                ctr_div  =   100u;
 8005056:	2164      	movs	r1, #100	@ 0x64
                ctr_mult =   100u;
 8005058:	4608      	mov	r0, r1
 800505a:	e7e5      	b.n	8005028 <OS_StatTask+0x4c>
                ctr_div  = 10000u;
 800505c:	f242 7110 	movw	r1, #10000	@ 0x2710
                ctr_mult =     1u;
 8005060:	2001      	movs	r0, #1
 8005062:	e7e1      	b.n	8005028 <OS_StatTask+0x4c>
            }
        } else {
            OSStatTaskCPUUsage = 0u;
 8005064:	4b63      	ldr	r3, [pc, #396]	@ (80051f4 <OS_StatTask+0x218>)
 8005066:	2200      	movs	r2, #0
 8005068:	801a      	strh	r2, [r3, #0]
        }

        OSStatTaskHook();                                       /* Invoke user definable hook                           */
 800506a:	f7fe fc8b 	bl	8003984 <OSStatTaskHook>

#if (OS_CFG_DBG_EN > 0u)
#if (OS_CFG_TASK_PROFILE_EN > 0u)
        cycles_total = 0u;

        CPU_CRITICAL_ENTER();
 800506e:	2040      	movs	r0, #64	@ 0x40
 8005070:	f7fb f8ae 	bl	80001d0 <CPU_SR_Save>
        p_tcb = OSTaskDbgListPtr;
 8005074:	4b61      	ldr	r3, [pc, #388]	@ (80051fc <OS_StatTask+0x220>)
 8005076:	681c      	ldr	r4, [r3, #0]
        CPU_CRITICAL_EXIT();
 8005078:	f7fb f8b8 	bl	80001ec <CPU_SR_Restore>
        cycles_total = 0u;
 800507c:	2600      	movs	r6, #0
        while (p_tcb != (OS_TCB *)0) {                          /* ---------------- TOTAL CYCLES COUNT ---------------- */
 800507e:	e015      	b.n	80050ac <OS_StatTask+0xd0>
            CPU_CRITICAL_ENTER();
 8005080:	2040      	movs	r0, #64	@ 0x40
 8005082:	f7fb f8a5 	bl	80001d0 <CPU_SR_Save>
            p_tcb->CyclesTotalPrev = p_tcb->CyclesTotal;        /* Save accumulated # cycles into a temp variable       */
 8005086:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800508a:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
            p_tcb->CyclesTotal     = 0u;                        /* Reset total cycles for task for next run             */
 800508e:	2300      	movs	r3, #0
 8005090:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
            CPU_CRITICAL_EXIT();
 8005094:	f7fb f8aa 	bl	80001ec <CPU_SR_Restore>

            cycles_total          += p_tcb->CyclesTotalPrev;    /* Perform sum of all task # cycles                     */
 8005098:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800509c:	441e      	add	r6, r3

            CPU_CRITICAL_ENTER();
 800509e:	2040      	movs	r0, #64	@ 0x40
 80050a0:	f7fb f896 	bl	80001d0 <CPU_SR_Save>
            p_tcb                  = p_tcb->DbgNextPtr;
 80050a4:	f8d4 40bc 	ldr.w	r4, [r4, #188]	@ 0xbc
            CPU_CRITICAL_EXIT();
 80050a8:	f7fb f8a0 	bl	80001ec <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {                          /* ---------------- TOTAL CYCLES COUNT ---------------- */
 80050ac:	2c00      	cmp	r4, #0
 80050ae:	d1e7      	bne.n	8005080 <OS_StatTask+0xa4>
#endif


#if (OS_CFG_TASK_PROFILE_EN > 0u)
                                                                /* ------------ INDIVIDUAL TASK CPU USAGE ------------- */
        if (cycles_total > 0u) {                                /* 'cycles_total' scaling ...                           */
 80050b0:	b346      	cbz	r6, 8005104 <OS_StatTask+0x128>
            if (cycles_total < 400000u) {                       /* 1 to       400,000                                   */
 80050b2:	4b53      	ldr	r3, [pc, #332]	@ (8005200 <OS_StatTask+0x224>)
 80050b4:	429e      	cmp	r6, r3
 80050b6:	d90c      	bls.n	80050d2 <OS_StatTask+0xf6>
                cycles_mult = 10000u;
                cycles_div  =     1u;
            } else if (cycles_total <   4000000u) {             /* 400,000 to     4,000,000                             */
 80050b8:	4b52      	ldr	r3, [pc, #328]	@ (8005204 <OS_StatTask+0x228>)
 80050ba:	429e      	cmp	r6, r3
 80050bc:	d917      	bls.n	80050ee <OS_StatTask+0x112>
                cycles_mult =  1000u;
                cycles_div  =    10u;
            } else if (cycles_total <  40000000u) {             /* 4,000,000 to    40,000,000                           */
 80050be:	4b52      	ldr	r3, [pc, #328]	@ (8005208 <OS_StatTask+0x22c>)
 80050c0:	429e      	cmp	r6, r3
 80050c2:	d318      	bcc.n	80050f6 <OS_StatTask+0x11a>
                cycles_mult =   100u;
                cycles_div  =   100u;
            } else if (cycles_total < 400000000u) {             /* 40,000,000 to   400,000,000                          */
 80050c4:	4b51      	ldr	r3, [pc, #324]	@ (800520c <OS_StatTask+0x230>)
 80050c6:	429e      	cmp	r6, r3
 80050c8:	d818      	bhi.n	80050fc <OS_StatTask+0x120>
                cycles_mult =    10u;
 80050ca:	230a      	movs	r3, #10
                cycles_div  =  1000u;
 80050cc:	f44f 777a 	mov.w	r7, #1000	@ 0x3e8
 80050d0:	e002      	b.n	80050d8 <OS_StatTask+0xfc>
                cycles_mult = 10000u;
 80050d2:	f242 7310 	movw	r3, #10000	@ 0x2710
                cycles_div  =     1u;
 80050d6:	2701      	movs	r7, #1
            } else {                                            /* 400,000,000 and up                                   */
                cycles_mult =     1u;
                cycles_div  = 10000u;
            }
            cycles_max  = cycles_total / cycles_div;
 80050d8:	fbb6 f7f7 	udiv	r7, r6, r7
 80050dc:	461e      	mov	r6, r3
        } else {
            cycles_mult = 0u;
            cycles_max  = 1u;
        }
#endif
        CPU_CRITICAL_ENTER();
 80050de:	2040      	movs	r0, #64	@ 0x40
 80050e0:	f7fb f876 	bl	80001d0 <CPU_SR_Save>
        p_tcb = OSTaskDbgListPtr;
 80050e4:	4b45      	ldr	r3, [pc, #276]	@ (80051fc <OS_StatTask+0x220>)
 80050e6:	681c      	ldr	r4, [r3, #0]
        CPU_CRITICAL_EXIT();
 80050e8:	f7fb f880 	bl	80001ec <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {
 80050ec:	e01c      	b.n	8005128 <OS_StatTask+0x14c>
                cycles_mult =  1000u;
 80050ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
                cycles_div  =    10u;
 80050f2:	270a      	movs	r7, #10
 80050f4:	e7f0      	b.n	80050d8 <OS_StatTask+0xfc>
                cycles_mult =   100u;
 80050f6:	2364      	movs	r3, #100	@ 0x64
                cycles_div  =   100u;
 80050f8:	461f      	mov	r7, r3
 80050fa:	e7ed      	b.n	80050d8 <OS_StatTask+0xfc>
                cycles_mult =     1u;
 80050fc:	2301      	movs	r3, #1
                cycles_div  = 10000u;
 80050fe:	f242 7710 	movw	r7, #10000	@ 0x2710
 8005102:	e7e9      	b.n	80050d8 <OS_StatTask+0xfc>
            cycles_max  = 1u;
 8005104:	2701      	movs	r7, #1
 8005106:	e7ea      	b.n	80050de <OS_StatTask+0x102>
                p_tcb->CPUUsageMax = usage;
            }
#endif

#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u)
            OSTaskStkChk( p_tcb,                                /* Compute stack usage of active tasks only             */
 8005108:	f10d 0306 	add.w	r3, sp, #6
 800510c:	f104 02b0 	add.w	r2, r4, #176	@ 0xb0
 8005110:	f104 01b4 	add.w	r1, r4, #180	@ 0xb4
 8005114:	4620      	mov	r0, r4
 8005116:	f000 f8e7 	bl	80052e8 <OSTaskStkChk>
                         &p_tcb->StkFree,
                         &p_tcb->StkUsed,
                         &err);
#endif

            CPU_CRITICAL_ENTER();
 800511a:	2040      	movs	r0, #64	@ 0x40
 800511c:	f7fb f858 	bl	80001d0 <CPU_SR_Save>
            p_tcb = p_tcb->DbgNextPtr;
 8005120:	f8d4 40bc 	ldr.w	r4, [r4, #188]	@ 0xbc
            CPU_CRITICAL_EXIT();
 8005124:	f7fb f862 	bl	80001ec <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {
 8005128:	b1a4      	cbz	r4, 8005154 <OS_StatTask+0x178>
            usage = (OS_CPU_USAGE)(cycles_mult * p_tcb->CyclesTotalPrev / cycles_max);
 800512a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800512e:	fb06 f303 	mul.w	r3, r6, r3
 8005132:	fbb3 f3f7 	udiv	r3, r3, r7
 8005136:	b29b      	uxth	r3, r3
            if (usage > 10000u) {
 8005138:	f242 7210 	movw	r2, #10000	@ 0x2710
 800513c:	4293      	cmp	r3, r2
 800513e:	d900      	bls.n	8005142 <OS_StatTask+0x166>
                usage = 10000u;
 8005140:	4613      	mov	r3, r2
            p_tcb->CPUUsage = usage;
 8005142:	f8a4 3090 	strh.w	r3, [r4, #144]	@ 0x90
            if (p_tcb->CPUUsageMax < usage) {                   /* Detect peak CPU usage                                */
 8005146:	f8b4 2092 	ldrh.w	r2, [r4, #146]	@ 0x92
 800514a:	429a      	cmp	r2, r3
 800514c:	d2dc      	bcs.n	8005108 <OS_StatTask+0x12c>
                p_tcb->CPUUsageMax = usage;
 800514e:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
 8005152:	e7d9      	b.n	8005108 <OS_StatTask+0x12c>

                                                                /*------------------ Check ISR Stack -------------------*/
#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) && (OS_CFG_ISR_STK_SIZE > 0u)
        free_stk  = 0u;
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
        p_stk     = OSCfg_ISRStkBasePtr;                        /*   Start at the lowest memory and go up               */
 8005154:	4b2e      	ldr	r3, [pc, #184]	@ (8005210 <OS_StatTask+0x234>)
 8005156:	681a      	ldr	r2, [r3, #0]
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
        p_stk    += OS_CFG_TASK_STK_REDZONE_DEPTH;
        size_stk  = OSCfg_ISRStkSize - OS_CFG_TASK_STK_REDZONE_DEPTH;
#else
        size_stk  = OSCfg_ISRStkSize;
 8005158:	4b2e      	ldr	r3, [pc, #184]	@ (8005214 <OS_StatTask+0x238>)
 800515a:	6818      	ldr	r0, [r3, #0]
        free_stk  = 0u;
 800515c:	2300      	movs	r3, #0
#endif
        while ((*p_stk == 0u) && (free_stk < size_stk)) {       /*   Compute the number of zero entries on the stk      */
 800515e:	e001      	b.n	8005164 <OS_StatTask+0x188>
            p_stk++;
 8005160:	3204      	adds	r2, #4
            free_stk++;
 8005162:	3301      	adds	r3, #1
        while ((*p_stk == 0u) && (free_stk < size_stk)) {       /*   Compute the number of zero entries on the stk      */
 8005164:	6811      	ldr	r1, [r2, #0]
 8005166:	b909      	cbnz	r1, 800516c <OS_StatTask+0x190>
 8005168:	4283      	cmp	r3, r0
 800516a:	d3f9      	bcc.n	8005160 <OS_StatTask+0x184>
        while ((*p_stk == 0u) && (free_stk < size_stk)) {       /*   Compute the number of zero entries on the stk      */
            free_stk++;
            p_stk--;
        }
#endif
        OSISRStkFree = free_stk;
 800516c:	4a2a      	ldr	r2, [pc, #168]	@ (8005218 <OS_StatTask+0x23c>)
 800516e:	6013      	str	r3, [r2, #0]
        OSISRStkUsed = OSCfg_ISRStkSize - free_stk;
 8005170:	1ac0      	subs	r0, r0, r3
 8005172:	4b2a      	ldr	r3, [pc, #168]	@ (800521c <OS_StatTask+0x240>)
 8005174:	6018      	str	r0, [r3, #0]
#endif

        if (OSStatResetFlag == OS_TRUE) {                       /* Check if need to reset statistics                    */
 8005176:	4b2a      	ldr	r3, [pc, #168]	@ (8005220 <OS_StatTask+0x244>)
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d106      	bne.n	800518c <OS_StatTask+0x1b0>
            OSStatResetFlag  = OS_FALSE;
 800517e:	4b28      	ldr	r3, [pc, #160]	@ (8005220 <OS_StatTask+0x244>)
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
            OSStatReset(&err);
 8005184:	f10d 0006 	add.w	r0, sp, #6
 8005188:	f7ff fede 	bl	8004f48 <OSStatReset>
        if (OSStatTaskTimeMax < OSStatTaskTime) {
            OSStatTaskTimeMax = OSStatTaskTime;
        }
#endif

        OSTimeDly(dly,
 800518c:	f10d 0206 	add.w	r2, sp, #6
 8005190:	2100      	movs	r1, #0
 8005192:	4628      	mov	r0, r5
 8005194:	f000 fd08 	bl	8005ba8 <OSTimeDly>
        CPU_CRITICAL_ENTER();                                   /* ---------------- OVERALL CPU USAGE ----------------- */
 8005198:	2040      	movs	r0, #64	@ 0x40
 800519a:	f7fb f819 	bl	80001d0 <CPU_SR_Save>
        OSStatTaskCtrRun   = OSStatTaskCtr;                     /* Obtain the of the stat counter for the past .1 second*/
 800519e:	4c21      	ldr	r4, [pc, #132]	@ (8005224 <OS_StatTask+0x248>)
 80051a0:	4b21      	ldr	r3, [pc, #132]	@ (8005228 <OS_StatTask+0x24c>)
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	6022      	str	r2, [r4, #0]
        OSStatTaskCtr      = 0u;                                /* Reset the stat counter for the next .1 second        */
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
        CPU_CRITICAL_EXIT();
 80051aa:	f7fb f81f 	bl	80001ec <CPU_SR_Restore>
        if (OSStatTaskCtrMax > OSStatTaskCtrRun) {              /* Compute CPU Usage with best resolution               */
 80051ae:	4b1f      	ldr	r3, [pc, #124]	@ (800522c <OS_StatTask+0x250>)
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	f67f af55 	bls.w	8005064 <OS_StatTask+0x88>
            if (OSStatTaskCtrMax < 400000u) {                   /* 1 to       400,000                                   */
 80051ba:	4911      	ldr	r1, [pc, #68]	@ (8005200 <OS_StatTask+0x224>)
 80051bc:	428a      	cmp	r2, r1
 80051be:	f67f af30 	bls.w	8005022 <OS_StatTask+0x46>
            } else if (OSStatTaskCtrMax <   4000000u) {         /* 400,000 to     4,000,000                             */
 80051c2:	4910      	ldr	r1, [pc, #64]	@ (8005204 <OS_StatTask+0x228>)
 80051c4:	428a      	cmp	r2, r1
 80051c6:	f67f af42 	bls.w	800504e <OS_StatTask+0x72>
            } else if (OSStatTaskCtrMax <  40000000u) {         /* 4,000,000 to    40,000,000                           */
 80051ca:	490f      	ldr	r1, [pc, #60]	@ (8005208 <OS_StatTask+0x22c>)
 80051cc:	428a      	cmp	r2, r1
 80051ce:	f4ff af42 	bcc.w	8005056 <OS_StatTask+0x7a>
            } else if (OSStatTaskCtrMax < 400000000u) {         /* 40,000,000 to   400,000,000                          */
 80051d2:	490e      	ldr	r1, [pc, #56]	@ (800520c <OS_StatTask+0x230>)
 80051d4:	428a      	cmp	r2, r1
 80051d6:	f63f af41 	bhi.w	800505c <OS_StatTask+0x80>
                ctr_div  =  1000u;
 80051da:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
                ctr_mult =    10u;
 80051de:	200a      	movs	r0, #10
 80051e0:	e722      	b.n	8005028 <OS_StatTask+0x4c>
 80051e2:	bf00      	nop
 80051e4:	0800632c 	.word	0x0800632c
 80051e8:	20001b94 	.word	0x20001b94
 80051ec:	08006318 	.word	0x08006318
 80051f0:	cccccccd 	.word	0xcccccccd
 80051f4:	20001ba6 	.word	0x20001ba6
 80051f8:	20001ba4 	.word	0x20001ba4
 80051fc:	20001ac8 	.word	0x20001ac8
 8005200:	00061a7f 	.word	0x00061a7f
 8005204:	003d08ff 	.word	0x003d08ff
 8005208:	02625a00 	.word	0x02625a00
 800520c:	17d783ff 	.word	0x17d783ff
 8005210:	08006340 	.word	0x08006340
 8005214:	0800633c 	.word	0x0800633c
 8005218:	20001d70 	.word	0x20001d70
 800521c:	20001d6c 	.word	0x20001d6c
 8005220:	20001ba8 	.word	0x20001ba8
 8005224:	20001b98 	.word	0x20001b98
 8005228:	20001ba0 	.word	0x20001ba0
 800522c:	20001b9c 	.word	0x20001b9c

08005230 <OS_StatTaskInit>:
************************************************************************************************************************
*/

void  OS_StatTaskInit (OS_ERR  *p_err)
{
    OSStatTaskCtr    = 0u;
 8005230:	2300      	movs	r3, #0
 8005232:	4a1e      	ldr	r2, [pc, #120]	@ (80052ac <OS_StatTaskInit+0x7c>)
 8005234:	6013      	str	r3, [r2, #0]
    OSStatTaskCtrRun = 0u;
 8005236:	4a1e      	ldr	r2, [pc, #120]	@ (80052b0 <OS_StatTaskInit+0x80>)
 8005238:	6013      	str	r3, [r2, #0]
    OSStatTaskCtrMax = 0u;
 800523a:	4a1e      	ldr	r2, [pc, #120]	@ (80052b4 <OS_StatTaskInit+0x84>)
 800523c:	6013      	str	r3, [r2, #0]
    OSStatTaskRdy    = OS_STATE_NOT_RDY;                        /* Statistic task is not ready                          */
 800523e:	4a1e      	ldr	r2, [pc, #120]	@ (80052b8 <OS_StatTaskInit+0x88>)
 8005240:	7013      	strb	r3, [r2, #0]
    OSStatResetFlag  = OS_FALSE;
 8005242:	4a1e      	ldr	r2, [pc, #120]	@ (80052bc <OS_StatTaskInit+0x8c>)
 8005244:	7013      	strb	r3, [r2, #0]

#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) && (OS_CFG_ISR_STK_SIZE > 0u)
    OSISRStkFree     = 0u;
 8005246:	4a1e      	ldr	r2, [pc, #120]	@ (80052c0 <OS_StatTaskInit+0x90>)
 8005248:	6013      	str	r3, [r2, #0]
    OSISRStkUsed     = 0u;
 800524a:	4a1e      	ldr	r2, [pc, #120]	@ (80052c4 <OS_StatTaskInit+0x94>)
 800524c:	6013      	str	r3, [r2, #0]
#endif
                                                                /* --------------- CREATE THE STAT TASK --------------- */
    if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
 800524e:	4b1e      	ldr	r3, [pc, #120]	@ (80052c8 <OS_StatTaskInit+0x98>)
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	b182      	cbz	r2, 8005276 <OS_StatTaskInit+0x46>
       *p_err = OS_ERR_STAT_STK_INVALID;
        return;
    }

    if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
 8005254:	4b1d      	ldr	r3, [pc, #116]	@ (80052cc <OS_StatTaskInit+0x9c>)
 8005256:	6819      	ldr	r1, [r3, #0]
 8005258:	4b1d      	ldr	r3, [pc, #116]	@ (80052d0 <OS_StatTaskInit+0xa0>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4299      	cmp	r1, r3
 800525e:	d30e      	bcc.n	800527e <OS_StatTaskInit+0x4e>
{
 8005260:	b510      	push	{r4, lr}
 8005262:	b08a      	sub	sp, #40	@ 0x28
       *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
        return;
    }

    if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 8005264:	4b1b      	ldr	r3, [pc, #108]	@ (80052d4 <OS_StatTaskInit+0xa4>)
 8005266:	781c      	ldrb	r4, [r3, #0]
 8005268:	2c1e      	cmp	r4, #30
 800526a:	d90c      	bls.n	8005286 <OS_StatTaskInit+0x56>
       *p_err = OS_ERR_STAT_PRIO_INVALID;
 800526c:	f646 632a 	movw	r3, #28202	@ 0x6e2a
 8005270:	8003      	strh	r3, [r0, #0]
                  0u,
                  0u,
                 (void       *)0,
                 (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                  p_err);
}
 8005272:	b00a      	add	sp, #40	@ 0x28
 8005274:	bd10      	pop	{r4, pc}
       *p_err = OS_ERR_STAT_STK_INVALID;
 8005276:	f646 632b 	movw	r3, #28203	@ 0x6e2b
 800527a:	8003      	strh	r3, [r0, #0]
        return;
 800527c:	4770      	bx	lr
       *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
 800527e:	f646 632c 	movw	r3, #28204	@ 0x6e2c
 8005282:	8003      	strh	r3, [r0, #0]
        return;
 8005284:	4770      	bx	lr
    OSTaskCreate(&OSStatTaskTCB,
 8005286:	9008      	str	r0, [sp, #32]
 8005288:	2303      	movs	r3, #3
 800528a:	9307      	str	r3, [sp, #28]
 800528c:	2300      	movs	r3, #0
 800528e:	9306      	str	r3, [sp, #24]
 8005290:	9305      	str	r3, [sp, #20]
 8005292:	9304      	str	r3, [sp, #16]
 8005294:	9103      	str	r1, [sp, #12]
 8005296:	4910      	ldr	r1, [pc, #64]	@ (80052d8 <OS_StatTaskInit+0xa8>)
 8005298:	6809      	ldr	r1, [r1, #0]
 800529a:	9102      	str	r1, [sp, #8]
 800529c:	9201      	str	r2, [sp, #4]
 800529e:	9400      	str	r4, [sp, #0]
 80052a0:	4a0e      	ldr	r2, [pc, #56]	@ (80052dc <OS_StatTaskInit+0xac>)
 80052a2:	490f      	ldr	r1, [pc, #60]	@ (80052e0 <OS_StatTaskInit+0xb0>)
 80052a4:	480f      	ldr	r0, [pc, #60]	@ (80052e4 <OS_StatTaskInit+0xb4>)
 80052a6:	f000 f917 	bl	80054d8 <OSTaskCreate>
 80052aa:	e7e2      	b.n	8005272 <OS_StatTaskInit+0x42>
 80052ac:	20001ba0 	.word	0x20001ba0
 80052b0:	20001b98 	.word	0x20001b98
 80052b4:	20001b9c 	.word	0x20001b9c
 80052b8:	20001b94 	.word	0x20001b94
 80052bc:	20001ba8 	.word	0x20001ba8
 80052c0:	20001d70 	.word	0x20001d70
 80052c4:	20001d6c 	.word	0x20001d6c
 80052c8:	08006328 	.word	0x08006328
 80052cc:	08006320 	.word	0x08006320
 80052d0:	0800631c 	.word	0x0800631c
 80052d4:	08006330 	.word	0x08006330
 80052d8:	08006324 	.word	0x08006324
 80052dc:	08004fdd 	.word	0x08004fdd
 80052e0:	080064d8 	.word	0x080064d8
 80052e4:	20001ad0 	.word	0x20001ad0

080052e8 <OSTaskStkChk>:
#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u)
void  OSTaskStkChk (OS_TCB        *p_tcb,
                    CPU_STK_SIZE  *p_free,
                    CPU_STK_SIZE  *p_used,
                    OS_ERR        *p_err)
{
 80052e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ec:	461f      	mov	r7, r3
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* See if trying to check stack from ISR                */
 80052ee:	4b25      	ldr	r3, [pc, #148]	@ (8005384 <OSTaskStkChk+0x9c>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	b9ab      	cbnz	r3, 8005320 <OSTaskStkChk+0x38>
 80052f4:	4605      	mov	r5, r0
 80052f6:	460e      	mov	r6, r1
 80052f8:	4690      	mov	r8, r2
        return;
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_free == (CPU_STK_SIZE *)0) {                          /* User must specify valid destinations for the sizes   */
 80052fa:	b1b1      	cbz	r1, 800532a <OSTaskStkChk+0x42>
       *p_err = OS_ERR_PTR_INVALID;
        return;
    }

    if (p_used == (CPU_STK_SIZE *)0) {
 80052fc:	b1ca      	cbz	r2, 8005332 <OSTaskStkChk+0x4a>
       *p_err = OS_ERR_PTR_INVALID;
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 80052fe:	2040      	movs	r0, #64	@ 0x40
 8005300:	f7fa ff66 	bl	80001d0 <CPU_SR_Save>
    if (p_tcb == (OS_TCB *)0) {                                 /* Check the stack of the current task?                 */
 8005304:	b1cd      	cbz	r5, 800533a <OSTaskStkChk+0x52>
        p_tcb = OSTCBCurPtr;                                    /* Yes                                                  */
    }

    if (p_tcb->StkPtr == (CPU_STK *)0) {                        /* Make sure task exist                                 */
 8005306:	682b      	ldr	r3, [r5, #0]
 8005308:	b1d3      	cbz	r3, 8005340 <OSTaskStkChk+0x58>
       *p_used = 0u;
       *p_err  = OS_ERR_TASK_NOT_EXIST;
        return;
    }

    if ((p_tcb->Opt & OS_OPT_TASK_STK_CHK) == 0u) {             /* Make sure stack checking option is set               */
 800530a:	f8b5 3048 	ldrh.w	r3, [r5, #72]	@ 0x48
 800530e:	f013 0f01 	tst.w	r3, #1
 8005312:	d01f      	beq.n	8005354 <OSTaskStkChk+0x6c>
       *p_err  = OS_ERR_TASK_OPT;
        return;
    }

#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    p_stk = p_tcb->StkBasePtr;                                  /* Start at the lowest memory and go up                 */
 8005314:	6a2c      	ldr	r4, [r5, #32]
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
    p_stk -= OS_CFG_TASK_STK_REDZONE_DEPTH;
#endif
#endif

    stk_size = p_tcb->StkSize;
 8005316:	6c6d      	ldr	r5, [r5, #68]	@ 0x44
    CPU_CRITICAL_EXIT();
 8005318:	f7fa ff68 	bl	80001ec <CPU_SR_Restore>

    free_stk = 0u;
 800531c:	2000      	movs	r0, #0
                                                                /* Compute the number of zero entries on the stk        */
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    while ((free_stk  < stk_size) &&
 800531e:	e025      	b.n	800536c <OSTaskStkChk+0x84>
       *p_err = OS_ERR_TASK_STK_CHK_ISR;
 8005320:	f247 1359 	movw	r3, #29017	@ 0x7159
 8005324:	803b      	strh	r3, [r7, #0]
    }
#endif
   *p_free = free_stk;
   *p_used = (stk_size - free_stk);                             /* Compute number of entries used on the stack          */
   *p_err  = OS_ERR_NONE;
}
 8005326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       *p_err = OS_ERR_PTR_INVALID;
 800532a:	f246 23d5 	movw	r3, #25301	@ 0x62d5
 800532e:	803b      	strh	r3, [r7, #0]
        return;
 8005330:	e7f9      	b.n	8005326 <OSTaskStkChk+0x3e>
       *p_err = OS_ERR_PTR_INVALID;
 8005332:	f246 23d5 	movw	r3, #25301	@ 0x62d5
 8005336:	803b      	strh	r3, [r7, #0]
        return;
 8005338:	e7f5      	b.n	8005326 <OSTaskStkChk+0x3e>
        p_tcb = OSTCBCurPtr;                                    /* Yes                                                  */
 800533a:	4b13      	ldr	r3, [pc, #76]	@ (8005388 <OSTaskStkChk+0xa0>)
 800533c:	681d      	ldr	r5, [r3, #0]
 800533e:	e7e2      	b.n	8005306 <OSTaskStkChk+0x1e>
        CPU_CRITICAL_EXIT();
 8005340:	f7fa ff54 	bl	80001ec <CPU_SR_Restore>
       *p_free = 0u;
 8005344:	2300      	movs	r3, #0
 8005346:	6033      	str	r3, [r6, #0]
       *p_used = 0u;
 8005348:	f8c8 3000 	str.w	r3, [r8]
       *p_err  = OS_ERR_TASK_NOT_EXIST;
 800534c:	f247 1352 	movw	r3, #29010	@ 0x7152
 8005350:	803b      	strh	r3, [r7, #0]
        return;
 8005352:	e7e8      	b.n	8005326 <OSTaskStkChk+0x3e>
        CPU_CRITICAL_EXIT();
 8005354:	f7fa ff4a 	bl	80001ec <CPU_SR_Restore>
       *p_free = 0u;
 8005358:	2300      	movs	r3, #0
 800535a:	6033      	str	r3, [r6, #0]
       *p_used = 0u;
 800535c:	f8c8 3000 	str.w	r3, [r8]
       *p_err  = OS_ERR_TASK_OPT;
 8005360:	f247 1354 	movw	r3, #29012	@ 0x7154
 8005364:	803b      	strh	r3, [r7, #0]
        return;
 8005366:	e7de      	b.n	8005326 <OSTaskStkChk+0x3e>
        p_stk++;
 8005368:	3404      	adds	r4, #4
        free_stk++;
 800536a:	3001      	adds	r0, #1
    while ((free_stk  < stk_size) &&
 800536c:	42a8      	cmp	r0, r5
 800536e:	d202      	bcs.n	8005376 <OSTaskStkChk+0x8e>
           (*p_stk   ==       0u)) {
 8005370:	6823      	ldr	r3, [r4, #0]
    while ((free_stk  < stk_size) &&
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0f8      	beq.n	8005368 <OSTaskStkChk+0x80>
   *p_free = free_stk;
 8005376:	6030      	str	r0, [r6, #0]
   *p_used = (stk_size - free_stk);                             /* Compute number of entries used on the stack          */
 8005378:	1a2d      	subs	r5, r5, r0
 800537a:	f8c8 5000 	str.w	r5, [r8]
   *p_err  = OS_ERR_NONE;
 800537e:	2300      	movs	r3, #0
 8005380:	803b      	strh	r3, [r7, #0]
 8005382:	e7d0      	b.n	8005326 <OSTaskStkChk+0x3e>
 8005384:	20001d76 	.word	0x20001d76
 8005388:	20001988 	.word	0x20001988

0800538c <OS_TaskDbgListAdd>:
*/

#if (OS_CFG_DBG_EN > 0u)
void  OS_TaskDbgListAdd (OS_TCB  *p_tcb)
{
    p_tcb->DbgPrevPtr                = (OS_TCB *)0;
 800538c:	2300      	movs	r3, #0
 800538e:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
    if (OSTaskDbgListPtr == (OS_TCB *)0) {
 8005392:	4b06      	ldr	r3, [pc, #24]	@ (80053ac <OS_TaskDbgListAdd+0x20>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	b133      	cbz	r3, 80053a6 <OS_TaskDbgListAdd+0x1a>
        p_tcb->DbgNextPtr            = (OS_TCB *)0;
    } else {
        p_tcb->DbgNextPtr            =  OSTaskDbgListPtr;
 8005398:	f8c0 30bc 	str.w	r3, [r0, #188]	@ 0xbc
        OSTaskDbgListPtr->DbgPrevPtr =  p_tcb;
 800539c:	f8c3 00b8 	str.w	r0, [r3, #184]	@ 0xb8
    }
    OSTaskDbgListPtr                 =  p_tcb;
 80053a0:	4b02      	ldr	r3, [pc, #8]	@ (80053ac <OS_TaskDbgListAdd+0x20>)
 80053a2:	6018      	str	r0, [r3, #0]
}
 80053a4:	4770      	bx	lr
        p_tcb->DbgNextPtr            = (OS_TCB *)0;
 80053a6:	f8c0 30bc 	str.w	r3, [r0, #188]	@ 0xbc
 80053aa:	e7f9      	b.n	80053a0 <OS_TaskDbgListAdd+0x14>
 80053ac:	20001ac8 	.word	0x20001ac8

080053b0 <OS_TaskDbgListRemove>:
{
    OS_TCB  *p_tcb_next;
    OS_TCB  *p_tcb_prev;


    p_tcb_prev = p_tcb->DbgPrevPtr;
 80053b0:	f8d0 20b8 	ldr.w	r2, [r0, #184]	@ 0xb8
    p_tcb_next = p_tcb->DbgNextPtr;
 80053b4:	f8d0 30bc 	ldr.w	r3, [r0, #188]	@ 0xbc

    if (p_tcb_prev == (OS_TCB *)0) {
 80053b8:	b152      	cbz	r2, 80053d0 <OS_TaskDbgListRemove+0x20>
        if (p_tcb_next != (OS_TCB *)0) {
            p_tcb_next->DbgPrevPtr = (OS_TCB *)0;
        }
        p_tcb->DbgNextPtr = (OS_TCB *)0;

    } else if (p_tcb_next == (OS_TCB *)0) {
 80053ba:	b19b      	cbz	r3, 80053e4 <OS_TaskDbgListRemove+0x34>
        p_tcb_prev->DbgNextPtr = (OS_TCB *)0;
        p_tcb->DbgPrevPtr      = (OS_TCB *)0;

    } else {
        p_tcb_prev->DbgNextPtr =  p_tcb_next;
 80053bc:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
        p_tcb_next->DbgPrevPtr =  p_tcb_prev;
 80053c0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        p_tcb->DbgNextPtr      = (OS_TCB *)0;
 80053c4:	2300      	movs	r3, #0
 80053c6:	f8c0 30bc 	str.w	r3, [r0, #188]	@ 0xbc
        p_tcb->DbgPrevPtr      = (OS_TCB *)0;
 80053ca:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
    }
}
 80053ce:	4770      	bx	lr
        OSTaskDbgListPtr = p_tcb_next;
 80053d0:	4a07      	ldr	r2, [pc, #28]	@ (80053f0 <OS_TaskDbgListRemove+0x40>)
 80053d2:	6013      	str	r3, [r2, #0]
        if (p_tcb_next != (OS_TCB *)0) {
 80053d4:	b113      	cbz	r3, 80053dc <OS_TaskDbgListRemove+0x2c>
            p_tcb_next->DbgPrevPtr = (OS_TCB *)0;
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        p_tcb->DbgNextPtr = (OS_TCB *)0;
 80053dc:	2300      	movs	r3, #0
 80053de:	f8c0 30bc 	str.w	r3, [r0, #188]	@ 0xbc
 80053e2:	4770      	bx	lr
        p_tcb_prev->DbgNextPtr = (OS_TCB *)0;
 80053e4:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
        p_tcb->DbgPrevPtr      = (OS_TCB *)0;
 80053e8:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	20001ac8 	.word	0x20001ac8

080053f4 <OS_TaskInit>:
*/

void  OS_TaskInit (OS_ERR  *p_err)
{
#if (OS_CFG_DBG_EN > 0u)
    OSTaskDbgListPtr = (OS_TCB *)0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	4a04      	ldr	r2, [pc, #16]	@ (8005408 <OS_TaskInit+0x14>)
 80053f8:	6013      	str	r3, [r2, #0]
#endif

    OSTaskQty        = 0u;                                      /* Clear the number of tasks                            */
 80053fa:	4a04      	ldr	r2, [pc, #16]	@ (800540c <OS_TaskInit+0x18>)
 80053fc:	8013      	strh	r3, [r2, #0]

#if ((OS_CFG_TASK_PROFILE_EN > 0u) || (OS_CFG_DBG_EN > 0u))
    OSTaskCtxSwCtr   = 0u;                                      /* Clear the context switch counter                     */
 80053fe:	4a04      	ldr	r2, [pc, #16]	@ (8005410 <OS_TaskInit+0x1c>)
 8005400:	6013      	str	r3, [r2, #0]
#endif

   *p_err            = OS_ERR_NONE;
 8005402:	8003      	strh	r3, [r0, #0]
}
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	20001ac8 	.word	0x20001ac8
 800540c:	20001ac6 	.word	0x20001ac6
 8005410:	20001acc 	.word	0x20001acc

08005414 <OS_TaskInitTCB>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInitTCB (OS_TCB  *p_tcb)
{
 8005414:	b538      	push	{r3, r4, r5, lr}
 8005416:	4604      	mov	r4, r0
#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_ID   id;
#endif


    p_tcb->StkPtr               = (CPU_STK          *)0;
 8005418:	2500      	movs	r5, #0
 800541a:	6005      	str	r5, [r0, #0]
    p_tcb->StkLimitPtr          = (CPU_STK          *)0;
 800541c:	6085      	str	r5, [r0, #8]

    p_tcb->ExtPtr               = (void             *)0;
 800541e:	6045      	str	r5, [r0, #4]

    p_tcb->NextPtr              = (OS_TCB           *)0;
 8005420:	6105      	str	r5, [r0, #16]
    p_tcb->PrevPtr              = (OS_TCB           *)0;
 8005422:	6145      	str	r5, [r0, #20]

#if (OS_CFG_TICK_EN > 0u)
    p_tcb->TickNextPtr          = (OS_TCB           *)0;
 8005424:	6185      	str	r5, [r0, #24]
    p_tcb->TickPrevPtr          = (OS_TCB           *)0;
 8005426:	61c5      	str	r5, [r0, #28]
#endif

#if (OS_CFG_DBG_EN > 0u)
    p_tcb->NamePtr              = (CPU_CHAR *)((void *)"?Task");
 8005428:	4b29      	ldr	r3, [pc, #164]	@ (80054d0 <OS_TaskInitTCB+0xbc>)
 800542a:	60c3      	str	r3, [r0, #12]
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkBasePtr           = (CPU_STK          *)0;
 800542c:	6205      	str	r5, [r0, #32]
#endif

#if (OS_CFG_DBG_EN > 0u)
    p_tcb->TaskEntryAddr        = (OS_TASK_PTR       )0;
 800542e:	6245      	str	r5, [r0, #36]	@ 0x24
    p_tcb->TaskEntryArg         = (void             *)0;
 8005430:	6285      	str	r5, [r0, #40]	@ 0x28
#if (OS_CFG_TS_EN > 0u)
    p_tcb->TS                   =                     0u;
#endif

#if (OS_MSG_EN > 0u)
    p_tcb->MsgPtr               = (void             *)0;
 8005432:	6605      	str	r5, [r0, #96]	@ 0x60
    p_tcb->MsgSize              =                     0u;
 8005434:	f8a0 5064 	strh.w	r5, [r0, #100]	@ 0x64
#endif

#if (OS_CFG_TASK_Q_EN > 0u)
    OS_MsgQInit(&p_tcb->MsgQ,
 8005438:	4629      	mov	r1, r5
 800543a:	3068      	adds	r0, #104	@ 0x68
 800543c:	f7ff fc04 	bl	8004c48 <OS_MsgQInit>
                 0u);
#if (OS_CFG_TASK_PROFILE_EN > 0u)
    p_tcb->MsgQPendTime         =                     0u;
 8005440:	67a5      	str	r5, [r4, #120]	@ 0x78
    p_tcb->MsgQPendTimeMax      =                     0u;
 8005442:	67e5      	str	r5, [r4, #124]	@ 0x7c
#endif
#endif

#if (OS_CFG_FLAG_EN > 0u)
    p_tcb->FlagsPend            =                     0u;
 8005444:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
    p_tcb->FlagsOpt             =                     0u;
 8005448:	f8a4 508c 	strh.w	r5, [r4, #140]	@ 0x8c
    p_tcb->FlagsRdy             =                     0u;
 800544c:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
#endif

#if (OS_CFG_TASK_REG_TBL_SIZE > 0u)
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 8005450:	2d00      	cmp	r5, #0
 8005452:	d035      	beq.n	80054c0 <OS_TaskInitTCB+0xac>
    for (id = 0u; id < OS_CFG_TLS_TBL_SIZE; id++) {
        p_tcb->TLS_Tbl[id]      =                     0u;
    }
#endif

    p_tcb->SemCtr               =                     0u;
 8005454:	2300      	movs	r3, #0
 8005456:	64e3      	str	r3, [r4, #76]	@ 0x4c
#if (OS_CFG_TASK_PROFILE_EN > 0u)
    p_tcb->SemPendTime          =                     0u;
 8005458:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
    p_tcb->SemPendTimeMax       =                     0u;
 800545c:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkSize              =                     0u;
 8005460:	6463      	str	r3, [r4, #68]	@ 0x44
#endif


#if (OS_CFG_TASK_SUSPEND_EN > 0u)
    p_tcb->SuspendCtr           =                     0u;
 8005462:	f884 308e 	strb.w	r3, [r4, #142]	@ 0x8e
#endif

#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u)
    p_tcb->StkFree              =                     0u;
 8005466:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
    p_tcb->StkUsed              =                     0u;
 800546a:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
#endif

    p_tcb->Opt                  =                     0u;
 800546e:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48

#if (OS_CFG_TICK_EN > 0u)
    p_tcb->TickRemain           =                     0u;
 8005472:	6523      	str	r3, [r4, #80]	@ 0x50
    p_tcb->TickCtrPrev          =                     0u;
 8005474:	6563      	str	r3, [r4, #84]	@ 0x54
#endif

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
    p_tcb->TimeQuanta           =                     0u;
 8005476:	65a3      	str	r3, [r4, #88]	@ 0x58
    p_tcb->TimeQuantaCtr        =                     0u;
 8005478:	65e3      	str	r3, [r4, #92]	@ 0x5c
#endif

#if (OS_CFG_TASK_PROFILE_EN > 0u)
    p_tcb->CPUUsage             =                     0u;
 800547a:	f8a4 3090 	strh.w	r3, [r4, #144]	@ 0x90
    p_tcb->CPUUsageMax          =                     0u;
 800547e:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
    p_tcb->CtxSwCtr             =                     0u;
 8005482:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    p_tcb->CyclesDelta          =                     0u;
 8005486:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
#if (OS_CFG_TS_EN > 0u)
    p_tcb->CyclesStart          =  OS_TS_GET();                 /* Read the current timestamp and save                  */
#else
    p_tcb->CyclesStart          =                     0u;
 800548a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
#endif
    p_tcb->CyclesTotal          =                     0u;
 800548e:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
#endif
#if (OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u)
    p_tcb->SchedLockTimeMax     =                     0u;
#endif

    p_tcb->PendNextPtr          = (OS_TCB           *)0;
 8005492:	62e3      	str	r3, [r4, #44]	@ 0x2c
    p_tcb->PendPrevPtr          = (OS_TCB           *)0;
 8005494:	6323      	str	r3, [r4, #48]	@ 0x30
    p_tcb->PendObjPtr           = (OS_PEND_OBJ      *)0;
 8005496:	6363      	str	r3, [r4, #52]	@ 0x34
    p_tcb->PendOn               =  OS_TASK_PEND_ON_NOTHING;
 8005498:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
    p_tcb->PendStatus           =  OS_STATUS_PEND_OK;
 800549c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
    p_tcb->TaskState            =  OS_TASK_STATE_RDY;
 80054a0:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a

    p_tcb->Prio                 =  OS_PRIO_INIT;
 80054a4:	2220      	movs	r2, #32
 80054a6:	f884 203b 	strb.w	r2, [r4, #59]	@ 0x3b
#if (OS_CFG_MUTEX_EN > 0u)
    p_tcb->BasePrio             =  OS_PRIO_INIT;
 80054aa:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    p_tcb->MutexGrpHeadPtr      = (OS_MUTEX         *)0;
 80054ae:	6423      	str	r3, [r4, #64]	@ 0x40
#endif

#if (OS_CFG_DBG_EN > 0u)
    p_tcb->DbgPrevPtr           = (OS_TCB           *)0;
 80054b0:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
    p_tcb->DbgNextPtr           = (OS_TCB           *)0;
 80054b4:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
    p_tcb->DbgNamePtr           = (CPU_CHAR *)((void *)" ");
 80054b8:	4b06      	ldr	r3, [pc, #24]	@ (80054d4 <OS_TaskInitTCB+0xc0>)
 80054ba:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
#endif
}
 80054be:	bd38      	pop	{r3, r4, r5, pc}
        p_tcb->RegTbl[reg_id]   =                     0u;
 80054c0:	f105 0320 	add.w	r3, r5, #32
 80054c4:	2200      	movs	r2, #0
 80054c6:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 80054ca:	3501      	adds	r5, #1
 80054cc:	b2ed      	uxtb	r5, r5
 80054ce:	e7bf      	b.n	8005450 <OS_TaskInitTCB+0x3c>
 80054d0:	080064ec 	.word	0x080064ec
 80054d4:	08006378 	.word	0x08006378

080054d8 <OSTaskCreate>:
{
 80054d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054dc:	b083      	sub	sp, #12
 80054de:	461e      	mov	r6, r3
 80054e0:	f89d a030 	ldrb.w	sl, [sp, #48]	@ 0x30
 80054e4:	f8bd b04c 	ldrh.w	fp, [sp, #76]	@ 0x4c
    if (OSIntNestingCtr > 0u) {                                 /* --------- CANNOT CREATE A TASK FROM AN ISR --------- */
 80054e8:	4b61      	ldr	r3, [pc, #388]	@ (8005670 <OSTaskCreate+0x198>)
 80054ea:	781f      	ldrb	r7, [r3, #0]
 80054ec:	b9ef      	cbnz	r7, 800552a <OSTaskCreate+0x52>
 80054ee:	4604      	mov	r4, r0
 80054f0:	4688      	mov	r8, r1
 80054f2:	4615      	mov	r5, r2
    if (p_tcb == (OS_TCB *)0) {                                 /* User must supply a valid OS_TCB                      */
 80054f4:	b300      	cbz	r0, 8005538 <OSTaskCreate+0x60>
    if (p_task == (OS_TASK_PTR)0u) {                            /* User must supply a valid task                        */
 80054f6:	b322      	cbz	r2, 8005542 <OSTaskCreate+0x6a>
    if (p_stk_base == (CPU_STK *)0) {                           /* User must supply a valid stack base address          */
 80054f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054fa:	b33b      	cbz	r3, 800554c <OSTaskCreate+0x74>
    if (stk_size < OSCfg_StkSizeMin) {                          /* User must supply a valid minimum stack size          */
 80054fc:	4b5d      	ldr	r3, [pc, #372]	@ (8005674 <OSTaskCreate+0x19c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005502:	4293      	cmp	r3, r2
 8005504:	d827      	bhi.n	8005556 <OSTaskCreate+0x7e>
    if (stk_limit >= stk_size) {                                /* User must supply a valid stack limit                 */
 8005506:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005508:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800550a:	4293      	cmp	r3, r2
 800550c:	d928      	bls.n	8005560 <OSTaskCreate+0x88>
    if ((prio  > (OS_CFG_PRIO_MAX - 2u)) &&                     /* Priority must be within 0 and OS_CFG_PRIO_MAX-1      */
 800550e:	f1ba 0f1f 	cmp.w	sl, #31
 8005512:	d82a      	bhi.n	800556a <OSTaskCreate+0x92>
    if (prio == (OS_CFG_PRIO_MAX - 1u)) {
 8005514:	f1ba 0f1f 	cmp.w	sl, #31
 8005518:	d12c      	bne.n	8005574 <OSTaskCreate+0x9c>
        if (p_tcb != &OSIdleTaskTCB) {
 800551a:	4b57      	ldr	r3, [pc, #348]	@ (8005678 <OSTaskCreate+0x1a0>)
 800551c:	4298      	cmp	r0, r3
 800551e:	d029      	beq.n	8005574 <OSTaskCreate+0x9c>
           *p_err = OS_ERR_PRIO_INVALID;                        /* Not allowed to use same priority as idle task        */
 8005520:	f246 2373 	movw	r3, #25203	@ 0x6273
 8005524:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005526:	8013      	strh	r3, [r2, #0]
            return;
 8005528:	e003      	b.n	8005532 <OSTaskCreate+0x5a>
       *p_err = OS_ERR_TASK_CREATE_ISR;
 800552a:	f247 134a 	movw	r3, #29002	@ 0x714a
 800552e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005530:	8013      	strh	r3, [r2, #0]
}
 8005532:	b003      	add	sp, #12
 8005534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       *p_err = OS_ERR_TCB_INVALID;
 8005538:	f247 13ad 	movw	r3, #29101	@ 0x71ad
 800553c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800553e:	8013      	strh	r3, [r2, #0]
        return;
 8005540:	e7f7      	b.n	8005532 <OSTaskCreate+0x5a>
       *p_err = OS_ERR_TASK_INVALID;
 8005542:	f247 134f 	movw	r3, #29007	@ 0x714f
 8005546:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005548:	8013      	strh	r3, [r2, #0]
        return;
 800554a:	e7f2      	b.n	8005532 <OSTaskCreate+0x5a>
       *p_err = OS_ERR_STK_INVALID;
 800554c:	f646 632f 	movw	r3, #28207	@ 0x6e2f
 8005550:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005552:	8013      	strh	r3, [r2, #0]
        return;
 8005554:	e7ed      	b.n	8005532 <OSTaskCreate+0x5a>
       *p_err = OS_ERR_STK_SIZE_INVALID;
 8005556:	f646 6330 	movw	r3, #28208	@ 0x6e30
 800555a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800555c:	8013      	strh	r3, [r2, #0]
        return;
 800555e:	e7e8      	b.n	8005532 <OSTaskCreate+0x5a>
       *p_err = OS_ERR_STK_LIMIT_INVALID;
 8005560:	f646 6331 	movw	r3, #28209	@ 0x6e31
 8005564:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005566:	8013      	strh	r3, [r2, #0]
        return;
 8005568:	e7e3      	b.n	8005532 <OSTaskCreate+0x5a>
       *p_err = OS_ERR_PRIO_INVALID;
 800556a:	f246 2373 	movw	r3, #25203	@ 0x6273
 800556e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005570:	8013      	strh	r3, [r2, #0]
        return;
 8005572:	e7de      	b.n	8005532 <OSTaskCreate+0x5a>
    OS_TaskInitTCB(p_tcb);                                      /* Initialize the TCB to default values                 */
 8005574:	4620      	mov	r0, r4
 8005576:	f7ff ff4d 	bl	8005414 <OS_TaskInitTCB>
   *p_err = OS_ERR_NONE;
 800557a:	2300      	movs	r3, #0
 800557c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800557e:	8013      	strh	r3, [r2, #0]
    if (((opt & OS_OPT_TASK_STK_CHK) != 0u) ||                  /* See if stack checking has been enabled               */
 8005580:	f01b 0f03 	tst.w	fp, #3
 8005584:	d002      	beq.n	800558c <OSTaskCreate+0xb4>
        if ((opt & OS_OPT_TASK_STK_CLR) != 0u) {
 8005586:	f01b 0f02 	tst.w	fp, #2
 800558a:	d157      	bne.n	800563c <OSTaskCreate+0x164>
    p_stk_limit = p_stk_base + stk_limit;
 800558c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800558e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005590:	eb03 0982 	add.w	r9, r3, r2, lsl #2
    p_sp = OSTaskStkInit(p_task,
 8005594:	f8cd b004 	str.w	fp, [sp, #4]
 8005598:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	464b      	mov	r3, r9
 800559e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80055a0:	4631      	mov	r1, r6
 80055a2:	4628      	mov	r0, r5
 80055a4:	f7fe fa0e 	bl	80039c4 <OSTaskStkInit>
    if (p_sp < p_stk_base) {
 80055a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055aa:	4283      	cmp	r3, r0
 80055ac:	d849      	bhi.n	8005642 <OSTaskCreate+0x16a>
    p_tcb->TaskEntryAddr = p_task;                              /* Save task entry point address                        */
 80055ae:	6265      	str	r5, [r4, #36]	@ 0x24
    p_tcb->TaskEntryArg  = p_arg;                               /* Save task entry argument                             */
 80055b0:	62a6      	str	r6, [r4, #40]	@ 0x28
    p_tcb->NamePtr       = p_name;                              /* Save task name                                       */
 80055b2:	f8c4 800c 	str.w	r8, [r4, #12]
    p_tcb->Prio          = prio;                                /* Save the task's priority                             */
 80055b6:	f884 a03b 	strb.w	sl, [r4, #59]	@ 0x3b
    p_tcb->BasePrio      = prio;                                /* Set the base priority                                */
 80055ba:	f884 a03c 	strb.w	sl, [r4, #60]	@ 0x3c
    p_tcb->StkPtr        = p_sp;                                /* Save the new top-of-stack pointer                    */
 80055be:	6020      	str	r0, [r4, #0]
    p_tcb->StkLimitPtr   = p_stk_limit;                         /* Save the stack limit pointer                         */
 80055c0:	f8c4 9008 	str.w	r9, [r4, #8]
    p_tcb->TimeQuanta    = time_quanta;                         /* Save the #ticks for time slice (0 means not sliced)  */
 80055c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80055c6:	65a3      	str	r3, [r4, #88]	@ 0x58
    if (time_quanta == 0u) {
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d13f      	bne.n	800564c <OSTaskCreate+0x174>
        p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta;
 80055cc:	4b2b      	ldr	r3, [pc, #172]	@ (800567c <OSTaskCreate+0x1a4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	65e3      	str	r3, [r4, #92]	@ 0x5c
    p_tcb->ExtPtr        = p_ext;                               /* Save pointer to TCB extension                        */
 80055d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80055d4:	6063      	str	r3, [r4, #4]
    p_tcb->StkBasePtr    = p_stk_base;                          /* Save pointer to the base address of the stack        */
 80055d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055d8:	6223      	str	r3, [r4, #32]
    p_tcb->StkSize       = stk_size;                            /* Save the stack size (in number of CPU_STK elements)  */
 80055da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055dc:	6463      	str	r3, [r4, #68]	@ 0x44
    p_tcb->Opt           = opt;                                 /* Save task options                                    */
 80055de:	f8a4 b048 	strh.w	fp, [r4, #72]	@ 0x48
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 80055e2:	2f00      	cmp	r7, #0
 80055e4:	d035      	beq.n	8005652 <OSTaskCreate+0x17a>
    OS_MsgQInit(&p_tcb->MsgQ,                                   /* Initialize the task's message queue                  */
 80055e6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80055ea:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80055ee:	f7ff fb2b 	bl	8004c48 <OS_MsgQInit>
    OSTaskCreateHook(p_tcb);                                    /* Call user defined hook                               */
 80055f2:	4620      	mov	r0, r4
 80055f4:	f7fe f9ce 	bl	8003994 <OSTaskCreateHook>
    CPU_CRITICAL_ENTER();
 80055f8:	2040      	movs	r0, #64	@ 0x40
 80055fa:	f7fa fde9 	bl	80001d0 <CPU_SR_Save>
 80055fe:	4605      	mov	r5, r0
    OS_PrioInsert(p_tcb->Prio);
 8005600:	f894 003b 	ldrb.w	r0, [r4, #59]	@ 0x3b
 8005604:	f7ff fc8a 	bl	8004f1c <OS_PrioInsert>
    OS_RdyListInsertTail(p_tcb);
 8005608:	4620      	mov	r0, r4
 800560a:	f7fe fd11 	bl	8004030 <OS_RdyListInsertTail>
    OS_TaskDbgListAdd(p_tcb);
 800560e:	4620      	mov	r0, r4
 8005610:	f7ff febc 	bl	800538c <OS_TaskDbgListAdd>
    OSTaskQty++;                                                /* Increment the #tasks counter                         */
 8005614:	4a1a      	ldr	r2, [pc, #104]	@ (8005680 <OSTaskCreate+0x1a8>)
 8005616:	8813      	ldrh	r3, [r2, #0]
 8005618:	3301      	adds	r3, #1
 800561a:	8013      	strh	r3, [r2, #0]
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Return if multitasking has not started               */
 800561c:	4b19      	ldr	r3, [pc, #100]	@ (8005684 <OSTaskCreate+0x1ac>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d01e      	beq.n	8005662 <OSTaskCreate+0x18a>
        CPU_CRITICAL_EXIT();
 8005624:	4628      	mov	r0, r5
 8005626:	f7fa fde1 	bl	80001ec <CPU_SR_Restore>
        return;
 800562a:	e782      	b.n	8005532 <OSTaskCreate+0x5a>
               *p_sp = 0u;                                      /* Clear from bottom of stack and up!                   */
 800562c:	2100      	movs	r1, #0
 800562e:	f842 1b04 	str.w	r1, [r2], #4
            for (i = 0u; i < stk_size; i++) {                   /* Stack grows from HIGH to LOW memory                  */
 8005632:	3301      	adds	r3, #1
 8005634:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005636:	428b      	cmp	r3, r1
 8005638:	d3f8      	bcc.n	800562c <OSTaskCreate+0x154>
 800563a:	e7a7      	b.n	800558c <OSTaskCreate+0xb4>
            p_sp = p_stk_base;
 800563c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
            for (i = 0u; i < stk_size; i++) {                   /* Stack grows from HIGH to LOW memory                  */
 800563e:	2300      	movs	r3, #0
 8005640:	e7f8      	b.n	8005634 <OSTaskCreate+0x15c>
       *p_err = OS_ERR_STK_OVF;
 8005642:	f646 6332 	movw	r3, #28210	@ 0x6e32
 8005646:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005648:	8013      	strh	r3, [r2, #0]
        return;
 800564a:	e772      	b.n	8005532 <OSTaskCreate+0x5a>
        p_tcb->TimeQuantaCtr = time_quanta;
 800564c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800564e:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8005650:	e7bf      	b.n	80055d2 <OSTaskCreate+0xfa>
        p_tcb->RegTbl[reg_nbr] = 0u;
 8005652:	f107 0320 	add.w	r3, r7, #32
 8005656:	2200      	movs	r2, #0
 8005658:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 800565c:	3701      	adds	r7, #1
 800565e:	b2ff      	uxtb	r7, r7
 8005660:	e7bf      	b.n	80055e2 <OSTaskCreate+0x10a>
    CPU_CRITICAL_EXIT();
 8005662:	4628      	mov	r0, r5
 8005664:	f7fa fdc2 	bl	80001ec <CPU_SR_Restore>
    OSSched();
 8005668:	f7fe faa4 	bl	8003bb4 <OSSched>
 800566c:	e761      	b.n	8005532 <OSTaskCreate+0x5a>
 800566e:	bf00      	nop
 8005670:	20001d76 	.word	0x20001d76
 8005674:	0800631c 	.word	0x0800631c
 8005678:	20001d78 	.word	0x20001d78
 800567c:	20001bb4 	.word	0x20001bb4
 8005680:	20001ac6 	.word	0x20001ac6
 8005684:	20001d75 	.word	0x20001d75

08005688 <OS_TaskChangePrio>:
************************************************************************************************************************
*/

void  OS_TaskChangePrio(OS_TCB  *p_tcb,
                        OS_PRIO  prio_new)
{
 8005688:	b570      	push	{r4, r5, r6, lr}
 800568a:	4604      	mov	r4, r0
 800568c:	460d      	mov	r5, r1
 800568e:	e01a      	b.n	80056c6 <OS_TaskChangePrio+0x3e>
#if (OS_CFG_MUTEX_EN > 0u)
        prio_cur    =  p_tcb->Prio;
#endif
        switch (p_tcb->TaskState) {
            case OS_TASK_STATE_RDY:
                 OS_RdyListRemove(p_tcb);                       /* Remove from current priority                         */
 8005690:	4620      	mov	r0, r4
 8005692:	f7fe fd7b 	bl	800418c <OS_RdyListRemove>
                 p_tcb->Prio = prio_new;                        /* Set new task priority                                */
 8005696:	f884 503b 	strb.w	r5, [r4, #59]	@ 0x3b
                 OS_PrioInsert(p_tcb->Prio);
 800569a:	4628      	mov	r0, r5
 800569c:	f7ff fc3e 	bl	8004f1c <OS_PrioInsert>
                 if (p_tcb == OSTCBCurPtr) {
 80056a0:	4b32      	ldr	r3, [pc, #200]	@ (800576c <OS_TaskChangePrio+0xe4>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	42a3      	cmp	r3, r4
 80056a6:	d004      	beq.n	80056b2 <OS_TaskChangePrio+0x2a>
                     OS_RdyListInsertHead(p_tcb);
                 } else {
                     OS_RdyListInsertTail(p_tcb);
 80056a8:	4620      	mov	r0, r4
 80056aa:	f7fe fcc1 	bl	8004030 <OS_RdyListInsertTail>
        p_tcb_owner = (OS_TCB *)0;
 80056ae:	2400      	movs	r4, #0
 80056b0:	e007      	b.n	80056c2 <OS_TaskChangePrio+0x3a>
                     OS_RdyListInsertHead(p_tcb);
 80056b2:	4620      	mov	r0, r4
 80056b4:	f7fe fc8e 	bl	8003fd4 <OS_RdyListInsertHead>
        p_tcb_owner = (OS_TCB *)0;
 80056b8:	2400      	movs	r4, #0
 80056ba:	e002      	b.n	80056c2 <OS_TaskChangePrio+0x3a>
                 break;

            case OS_TASK_STATE_DLY:                             /* Nothing to do except change the priority in the OS_TCB*/
            case OS_TASK_STATE_SUSPENDED:
            case OS_TASK_STATE_DLY_SUSPENDED:
                 p_tcb->Prio = prio_new;                        /* Set new task priority                                */
 80056bc:	f884 503b 	strb.w	r5, [r4, #59]	@ 0x3b
        p_tcb_owner = (OS_TCB *)0;
 80056c0:	2400      	movs	r4, #0

            default:
                 return;
        }
        p_tcb = p_tcb_owner;
    } while (p_tcb != (OS_TCB *)0);
 80056c2:	2c00      	cmp	r4, #0
 80056c4:	d050      	beq.n	8005768 <OS_TaskChangePrio+0xe0>
        prio_cur    =  p_tcb->Prio;
 80056c6:	f894 603b 	ldrb.w	r6, [r4, #59]	@ 0x3b
        switch (p_tcb->TaskState) {
 80056ca:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 80056ce:	2b07      	cmp	r3, #7
 80056d0:	d84a      	bhi.n	8005768 <OS_TaskChangePrio+0xe0>
 80056d2:	a201      	add	r2, pc, #4	@ (adr r2, 80056d8 <OS_TaskChangePrio+0x50>)
 80056d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d8:	08005691 	.word	0x08005691
 80056dc:	080056bd 	.word	0x080056bd
 80056e0:	080056f9 	.word	0x080056f9
 80056e4:	080056f9 	.word	0x080056f9
 80056e8:	080056bd 	.word	0x080056bd
 80056ec:	080056bd 	.word	0x080056bd
 80056f0:	080056f9 	.word	0x080056f9
 80056f4:	080056f9 	.word	0x080056f9
                 p_tcb->Prio = prio_new;                        /* Set new task priority                                */
 80056f8:	f884 503b 	strb.w	r5, [r4, #59]	@ 0x3b
                 switch (p_tcb->PendOn) {                       /* What to do depends on what we are pending on         */
 80056fc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8005700:	2b04      	cmp	r3, #4
 8005702:	d00d      	beq.n	8005720 <OS_TaskChangePrio+0x98>
 8005704:	d908      	bls.n	8005718 <OS_TaskChangePrio+0x90>
 8005706:	3b05      	subs	r3, #5
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b01      	cmp	r3, #1
 800570c:	d82a      	bhi.n	8005764 <OS_TaskChangePrio+0xdc>
                          OS_PendListChangePrio(p_tcb);
 800570e:	4620      	mov	r0, r4
 8005710:	f7fe fb7d 	bl	8003e0e <OS_PendListChangePrio>
        p_tcb_owner = (OS_TCB *)0;
 8005714:	2400      	movs	r4, #0
                          break;
 8005716:	e7d4      	b.n	80056c2 <OS_TaskChangePrio+0x3a>
 8005718:	2b01      	cmp	r3, #1
 800571a:	d0f8      	beq.n	800570e <OS_TaskChangePrio+0x86>
 800571c:	2400      	movs	r4, #0
 800571e:	e7d0      	b.n	80056c2 <OS_TaskChangePrio+0x3a>
                          OS_PendListChangePrio(p_tcb);
 8005720:	4620      	mov	r0, r4
 8005722:	f7fe fb74 	bl	8003e0e <OS_PendListChangePrio>
                          p_tcb_owner = ((OS_MUTEX *)((void *)p_tcb->PendObjPtr))->OwnerTCBPtr;
 8005726:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005728:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                          if (prio_cur > prio_new) {            /* Are we increasing the priority?                      */
 800572a:	42b5      	cmp	r5, r6
 800572c:	d305      	bcc.n	800573a <OS_TaskChangePrio+0xb2>
                              if (p_tcb_owner->Prio == prio_cur) { /* No, is it required to check for a lower prio?     */
 800572e:	f894 303b 	ldrb.w	r3, [r4, #59]	@ 0x3b
 8005732:	42b3      	cmp	r3, r6
 8005734:	d007      	beq.n	8005746 <OS_TaskChangePrio+0xbe>
                                  p_tcb_owner = (OS_TCB *)0;
 8005736:	2400      	movs	r4, #0
 8005738:	e7c3      	b.n	80056c2 <OS_TaskChangePrio+0x3a>
                              if (p_tcb_owner->Prio <= prio_new) { /* Yes, do we need to give this prio to the owner?   */
 800573a:	f894 303b 	ldrb.w	r3, [r4, #59]	@ 0x3b
 800573e:	42ab      	cmp	r3, r5
 8005740:	d8bf      	bhi.n	80056c2 <OS_TaskChangePrio+0x3a>
                                  p_tcb_owner = (OS_TCB *)0;
 8005742:	2400      	movs	r4, #0
 8005744:	e7bd      	b.n	80056c2 <OS_TaskChangePrio+0x3a>
                                  prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 8005746:	4620      	mov	r0, r4
 8005748:	f7ff fb9c 	bl	8004e84 <OS_MutexGrpPrioFindHighest>
                                  prio_new = (prio_new > p_tcb_owner->BasePrio) ? p_tcb_owner->BasePrio : prio_new;
 800574c:	f894 503c 	ldrb.w	r5, [r4, #60]	@ 0x3c
 8005750:	4285      	cmp	r5, r0
 8005752:	bf28      	it	cs
 8005754:	4605      	movcs	r5, r0
 8005756:	b2ed      	uxtb	r5, r5
                                  if (prio_new == p_tcb_owner->Prio) {
 8005758:	f894 303b 	ldrb.w	r3, [r4, #59]	@ 0x3b
 800575c:	42ab      	cmp	r3, r5
 800575e:	d1b0      	bne.n	80056c2 <OS_TaskChangePrio+0x3a>
                                      p_tcb_owner = (OS_TCB *)0;
 8005760:	2400      	movs	r4, #0
 8005762:	e7ae      	b.n	80056c2 <OS_TaskChangePrio+0x3a>
 8005764:	2400      	movs	r4, #0
 8005766:	e7ac      	b.n	80056c2 <OS_TaskChangePrio+0x3a>
}
 8005768:	bd70      	pop	{r4, r5, r6, pc}
 800576a:	bf00      	nop
 800576c:	20001988 	.word	0x20001988

08005770 <OSTaskDel>:
{
 8005770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005774:	460d      	mov	r5, r1
    if (OSIntNestingCtr > 0u) {                                 /* See if trying to delete from ISR                     */
 8005776:	4b4f      	ldr	r3, [pc, #316]	@ (80058b4 <OSTaskDel+0x144>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	b943      	cbnz	r3, 800578e <OSTaskDel+0x1e>
 800577c:	4604      	mov	r4, r0
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 800577e:	4b4e      	ldr	r3, [pc, #312]	@ (80058b8 <OSTaskDel+0x148>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d008      	beq.n	8005798 <OSTaskDel+0x28>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8005786:	f645 6389 	movw	r3, #24201	@ 0x5e89
 800578a:	800b      	strh	r3, [r1, #0]
        return;
 800578c:	e002      	b.n	8005794 <OSTaskDel+0x24>
       *p_err = OS_ERR_TASK_DEL_ISR;
 800578e:	f247 134e 	movw	r3, #29006	@ 0x714e
 8005792:	800b      	strh	r3, [r1, #0]
}
 8005794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (p_tcb == &OSIdleTaskTCB) {                              /* Not allowed to delete the idle task                  */
 8005798:	4b48      	ldr	r3, [pc, #288]	@ (80058bc <OSTaskDel+0x14c>)
 800579a:	4298      	cmp	r0, r3
 800579c:	d00e      	beq.n	80057bc <OSTaskDel+0x4c>
    if (p_tcb == (OS_TCB *)0) {                                 /* Delete 'Self'?                                       */
 800579e:	b188      	cbz	r0, 80057c4 <OSTaskDel+0x54>
    CPU_CRITICAL_ENTER();
 80057a0:	2040      	movs	r0, #64	@ 0x40
 80057a2:	f7fa fd15 	bl	80001d0 <CPU_SR_Save>
 80057a6:	4606      	mov	r6, r0
    switch (p_tcb->TaskState) {
 80057a8:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 80057ac:	2b07      	cmp	r3, #7
 80057ae:	d87a      	bhi.n	80058a6 <OSTaskDel+0x136>
 80057b0:	e8df f003 	tbb	[pc, r3]
 80057b4:	38383410 	.word	0x38383410
 80057b8:	38383413 	.word	0x38383413
       *p_err = OS_ERR_TASK_DEL_IDLE;
 80057bc:	f247 134c 	movw	r3, #29004	@ 0x714c
 80057c0:	800b      	strh	r3, [r1, #0]
        return;
 80057c2:	e7e7      	b.n	8005794 <OSTaskDel+0x24>
        CPU_CRITICAL_ENTER();
 80057c4:	2040      	movs	r0, #64	@ 0x40
 80057c6:	f7fa fd03 	bl	80001d0 <CPU_SR_Save>
        p_tcb  = OSTCBCurPtr;                                   /* Yes.                                                 */
 80057ca:	4b3d      	ldr	r3, [pc, #244]	@ (80058c0 <OSTaskDel+0x150>)
 80057cc:	681c      	ldr	r4, [r3, #0]
        CPU_CRITICAL_EXIT();
 80057ce:	f7fa fd0d 	bl	80001ec <CPU_SR_Restore>
 80057d2:	e7e5      	b.n	80057a0 <OSTaskDel+0x30>
             OS_RdyListRemove(p_tcb);
 80057d4:	4620      	mov	r0, r4
 80057d6:	f7fe fcd9 	bl	800418c <OS_RdyListRemove>
    if(p_tcb->MutexGrpHeadPtr != (OS_MUTEX *)0) {
 80057da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80057dc:	b113      	cbz	r3, 80057e4 <OSTaskDel+0x74>
        OS_MutexGrpPostAll(p_tcb);
 80057de:	4620      	mov	r0, r4
 80057e0:	f7ff fb61 	bl	8004ea6 <OS_MutexGrpPostAll>
    (void)OS_MsgQFreeAll(&p_tcb->MsgQ);                         /* Free task's message queue messages                   */
 80057e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80057e8:	f7ff fa0e 	bl	8004c08 <OS_MsgQFreeAll>
    OSTaskDelHook(p_tcb);                                       /* Call user defined hook                               */
 80057ec:	4620      	mov	r0, r4
 80057ee:	f7fe f8d9 	bl	80039a4 <OSTaskDelHook>
    OS_TaskDbgListRemove(p_tcb);
 80057f2:	4620      	mov	r0, r4
 80057f4:	f7ff fddc 	bl	80053b0 <OS_TaskDbgListRemove>
    OSTaskQty--;                                                /* One less task being managed                          */
 80057f8:	4a32      	ldr	r2, [pc, #200]	@ (80058c4 <OSTaskDel+0x154>)
 80057fa:	8813      	ldrh	r3, [r2, #0]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	8013      	strh	r3, [r2, #0]
    OS_TaskInitTCB(p_tcb);                                      /* Initialize the TCB to default values                 */
 8005800:	4620      	mov	r0, r4
 8005802:	f7ff fe07 	bl	8005414 <OS_TaskInitTCB>
    p_tcb->TaskState = (OS_STATE)OS_TASK_STATE_DEL;             /* Indicate that the task was deleted                   */
 8005806:	23ff      	movs	r3, #255	@ 0xff
 8005808:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
   *p_err = OS_ERR_NONE;                                        /* See Note #1.                                         */
 800580c:	2300      	movs	r3, #0
 800580e:	802b      	strh	r3, [r5, #0]
    CPU_CRITICAL_EXIT();
 8005810:	4630      	mov	r0, r6
 8005812:	f7fa fceb 	bl	80001ec <CPU_SR_Restore>
    OSSched();                                                  /* Find new highest priority task                       */
 8005816:	f7fe f9cd 	bl	8003bb4 <OSSched>
 800581a:	e7bb      	b.n	8005794 <OSTaskDel+0x24>
             OS_TickListRemove(p_tcb);
 800581c:	4620      	mov	r0, r4
 800581e:	f000 f997 	bl	8005b50 <OS_TickListRemove>
             break;
 8005822:	e7da      	b.n	80057da <OSTaskDel+0x6a>
             switch (p_tcb->PendOn) {                           /* See what we are pending on                           */
 8005824:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8005828:	2b04      	cmp	r3, #4
 800582a:	d014      	beq.n	8005856 <OSTaskDel+0xe6>
 800582c:	d80b      	bhi.n	8005846 <OSTaskDel+0xd6>
 800582e:	2b01      	cmp	r3, #1
 8005830:	d00d      	beq.n	800584e <OSTaskDel+0xde>
             if ((p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) ||
 8005832:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 8005836:	2b03      	cmp	r3, #3
 8005838:	d001      	beq.n	800583e <OSTaskDel+0xce>
 800583a:	2b07      	cmp	r3, #7
 800583c:	d1cd      	bne.n	80057da <OSTaskDel+0x6a>
                 OS_TickListRemove(p_tcb);
 800583e:	4620      	mov	r0, r4
 8005840:	f000 f986 	bl	8005b50 <OS_TickListRemove>
 8005844:	e7c9      	b.n	80057da <OSTaskDel+0x6a>
 8005846:	3b05      	subs	r3, #5
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b01      	cmp	r3, #1
 800584c:	d8f1      	bhi.n	8005832 <OSTaskDel+0xc2>
                      OS_PendListRemove(p_tcb);
 800584e:	4620      	mov	r0, r4
 8005850:	f7fe fabf 	bl	8003dd2 <OS_PendListRemove>
                      break;
 8005854:	e7ed      	b.n	8005832 <OSTaskDel+0xc2>
                      p_tcb_owner = ((OS_MUTEX *)((void *)p_tcb->PendObjPtr))->OwnerTCBPtr;
 8005856:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005858:	6a5f      	ldr	r7, [r3, #36]	@ 0x24
                      prio_new = p_tcb_owner->Prio;
 800585a:	f897 803b 	ldrb.w	r8, [r7, #59]	@ 0x3b
                      OS_PendListRemove(p_tcb);
 800585e:	4620      	mov	r0, r4
 8005860:	f7fe fab7 	bl	8003dd2 <OS_PendListRemove>
                      if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8005864:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005868:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <OSTaskDel+0x108>
                          (p_tcb_owner->Prio == p_tcb->Prio)) { /* Has the owner inherited a priority?                  */
 8005870:	f894 203b 	ldrb.w	r2, [r4, #59]	@ 0x3b
                      if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8005874:	4293      	cmp	r3, r2
 8005876:	d00b      	beq.n	8005890 <OSTaskDel+0x120>
                      p_tcb->PendOn = OS_TASK_PEND_ON_NOTHING;
 8005878:	2300      	movs	r3, #0
 800587a:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
                      if (prio_new != p_tcb_owner->Prio) {
 800587e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005882:	4543      	cmp	r3, r8
 8005884:	d0d5      	beq.n	8005832 <OSTaskDel+0xc2>
                          OS_TaskChangePrio(p_tcb_owner, prio_new);
 8005886:	4641      	mov	r1, r8
 8005888:	4638      	mov	r0, r7
 800588a:	f7ff fefd 	bl	8005688 <OS_TaskChangePrio>
 800588e:	e7d0      	b.n	8005832 <OSTaskDel+0xc2>
                          prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 8005890:	4638      	mov	r0, r7
 8005892:	f7ff faf7 	bl	8004e84 <OS_MutexGrpPrioFindHighest>
                          prio_new = (prio_new > p_tcb_owner->BasePrio) ? p_tcb_owner->BasePrio : prio_new;
 8005896:	f897 803c 	ldrb.w	r8, [r7, #60]	@ 0x3c
 800589a:	4580      	cmp	r8, r0
 800589c:	bf28      	it	cs
 800589e:	4680      	movcs	r8, r0
 80058a0:	fa5f f888 	uxtb.w	r8, r8
 80058a4:	e7e8      	b.n	8005878 <OSTaskDel+0x108>
            CPU_CRITICAL_EXIT();
 80058a6:	f7fa fca1 	bl	80001ec <CPU_SR_Restore>
           *p_err = OS_ERR_STATE_INVALID;
 80058aa:	f646 632d 	movw	r3, #28205	@ 0x6e2d
 80058ae:	802b      	strh	r3, [r5, #0]
            return;
 80058b0:	e770      	b.n	8005794 <OSTaskDel+0x24>
 80058b2:	bf00      	nop
 80058b4:	20001d76 	.word	0x20001d76
 80058b8:	20001d75 	.word	0x20001d75
 80058bc:	20001d78 	.word	0x20001d78
 80058c0:	20001988 	.word	0x20001988
 80058c4:	20001ac6 	.word	0x20001ac6

080058c8 <OS_TaskReturn>:
{
 80058c8:	b500      	push	{lr}
 80058ca:	b083      	sub	sp, #12
    OSTaskReturnHook(OSTCBCurPtr);                              /* Call hook to let user decide on what to do           */
 80058cc:	4b05      	ldr	r3, [pc, #20]	@ (80058e4 <OS_TaskReturn+0x1c>)
 80058ce:	6818      	ldr	r0, [r3, #0]
 80058d0:	f7fe f870 	bl	80039b4 <OSTaskReturnHook>
    OSTaskDel((OS_TCB *)0,                                      /* Delete task if it accidentally returns!              */
 80058d4:	f10d 0106 	add.w	r1, sp, #6
 80058d8:	2000      	movs	r0, #0
 80058da:	f7ff ff49 	bl	8005770 <OSTaskDel>
}
 80058de:	b003      	add	sp, #12
 80058e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80058e4:	20001988 	.word	0x20001988

080058e8 <OS_TickListUpdate>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TickListUpdate (OS_TICK  ticks)
{
 80058e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#if (OS_CFG_DBG_EN > 0u)
    nbr_updated = 0u;
#endif
    p_list      = &OSTickList;
    p_tcb       = p_list->TCB_Ptr;
 80058ea:	4b41      	ldr	r3, [pc, #260]	@ (80059f0 <OS_TickListUpdate+0x108>)
 80058ec:	681c      	ldr	r4, [r3, #0]
    if (p_tcb != (OS_TCB *)0) {
 80058ee:	2c00      	cmp	r4, #0
 80058f0:	d07c      	beq.n	80059ec <OS_TickListUpdate+0x104>
 80058f2:	4606      	mov	r6, r0
        if (p_tcb->TickRemain <= ticks) {
 80058f4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80058f6:	4283      	cmp	r3, r0
 80058f8:	d804      	bhi.n	8005904 <OS_TickListUpdate+0x1c>
            ticks              = ticks - p_tcb->TickRemain;
 80058fa:	1ac6      	subs	r6, r0, r3
            p_tcb->TickRemain  = 0u;
 80058fc:	2300      	movs	r3, #0
 80058fe:	6523      	str	r3, [r4, #80]	@ 0x50
                     p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
                     break;

                default:
#if (OS_CFG_MUTEX_EN > 0u)
                     p_tcb_owner = (OS_TCB *)0;
 8005900:	2500      	movs	r5, #0
 8005902:	e019      	b.n	8005938 <OS_TickListUpdate+0x50>
            p_tcb->TickRemain -= ticks;
 8005904:	1a1b      	subs	r3, r3, r0
 8005906:	6523      	str	r3, [r4, #80]	@ 0x50
 8005908:	e7fa      	b.n	8005900 <OS_TickListUpdate+0x18>
                     p_tcb->TaskState = OS_TASK_STATE_RDY;
 800590a:	2300      	movs	r3, #0
 800590c:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
                     OS_RdyListInsert(p_tcb);                            /* Insert the task in the ready list                    */
 8005910:	4620      	mov	r0, r4
 8005912:	f7fe fbc1 	bl	8004098 <OS_RdyListInsert>
                     }
#endif
                     break;
            }

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 8005916:	69a4      	ldr	r4, [r4, #24]
 8005918:	4b35      	ldr	r3, [pc, #212]	@ (80059f0 <OS_TickListUpdate+0x108>)
 800591a:	601c      	str	r4, [r3, #0]
            p_tcb           = p_list->TCB_Ptr;                           /* Get 'p_tcb' again for loop                           */
            if (p_tcb == (OS_TCB *)0) {
 800591c:	2c00      	cmp	r4, #0
 800591e:	d05d      	beq.n	80059dc <OS_TickListUpdate+0xf4>
                p_list->NbrEntries = 0u;
#endif
                break;
            } else {
#if (OS_CFG_DBG_EN > 0u)
                p_list->NbrEntries--;
 8005920:	4a33      	ldr	r2, [pc, #204]	@ (80059f0 <OS_TickListUpdate+0x108>)
 8005922:	8893      	ldrh	r3, [r2, #4]
 8005924:	3b01      	subs	r3, #1
 8005926:	8093      	strh	r3, [r2, #4]
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 8005928:	2300      	movs	r3, #0
 800592a:	61e3      	str	r3, [r4, #28]
                if (p_tcb->TickRemain <= ticks) {
 800592c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800592e:	42b3      	cmp	r3, r6
 8005930:	d859      	bhi.n	80059e6 <OS_TickListUpdate+0xfe>
                    ticks              = ticks - p_tcb->TickRemain;
 8005932:	1af6      	subs	r6, r6, r3
                    p_tcb->TickRemain  = 0u;
 8005934:	2300      	movs	r3, #0
 8005936:	6523      	str	r3, [r4, #80]	@ 0x50
        while (p_tcb->TickRemain == 0u) {
 8005938:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800593a:	2b00      	cmp	r3, #0
 800593c:	d150      	bne.n	80059e0 <OS_TickListUpdate+0xf8>
            nbr_updated++;
 800593e:	3501      	adds	r5, #1
 8005940:	b2ad      	uxth	r5, r5
            switch (p_tcb->TaskState) {
 8005942:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 8005946:	2b01      	cmp	r3, #1
 8005948:	d0df      	beq.n	800590a <OS_TickListUpdate+0x22>
 800594a:	2b05      	cmp	r3, #5
 800594c:	d034      	beq.n	80059b8 <OS_TickListUpdate+0xd0>
                     if (p_tcb->PendOn == OS_TASK_PEND_ON_MUTEX) {
 800594e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8005952:	2b04      	cmp	r3, #4
 8005954:	d034      	beq.n	80059c0 <OS_TickListUpdate+0xd8>
                     p_tcb_owner = (OS_TCB *)0;
 8005956:	2700      	movs	r7, #0
                     p_tcb->MsgPtr  = (void *)0;
 8005958:	2300      	movs	r3, #0
 800595a:	6623      	str	r3, [r4, #96]	@ 0x60
                     p_tcb->MsgSize = 0u;
 800595c:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
                     OS_PendListRemove(p_tcb);                           /* Remove task from pend list                           */
 8005960:	4620      	mov	r0, r4
 8005962:	f7fe fa36 	bl	8003dd2 <OS_PendListRemove>
                     switch (p_tcb->TaskState) {
 8005966:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 800596a:	2b03      	cmp	r3, #3
 800596c:	d02b      	beq.n	80059c6 <OS_TickListUpdate+0xde>
 800596e:	2b07      	cmp	r3, #7
 8005970:	d030      	beq.n	80059d4 <OS_TickListUpdate+0xec>
                     p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;         /* Indicate pend timed out                              */
 8005972:	2303      	movs	r3, #3
 8005974:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
                     p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                           */
 8005978:	2300      	movs	r3, #0
 800597a:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
                     if (p_tcb_owner != (OS_TCB *)0) {
 800597e:	2f00      	cmp	r7, #0
 8005980:	d0c9      	beq.n	8005916 <OS_TickListUpdate+0x2e>
                         if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8005982:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005986:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800598a:	4293      	cmp	r3, r2
 800598c:	d0c3      	beq.n	8005916 <OS_TickListUpdate+0x2e>
                             (p_tcb_owner->Prio == p_tcb->Prio)) {       /* Has the owner inherited a priority?                  */
 800598e:	f894 203b 	ldrb.w	r2, [r4, #59]	@ 0x3b
                         if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8005992:	4293      	cmp	r3, r2
 8005994:	d1bf      	bne.n	8005916 <OS_TickListUpdate+0x2e>
                             prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 8005996:	4638      	mov	r0, r7
 8005998:	f7ff fa74 	bl	8004e84 <OS_MutexGrpPrioFindHighest>
                             prio_new = (prio_new > p_tcb_owner->BasePrio) ? p_tcb_owner->BasePrio : prio_new;
 800599c:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 80059a0:	4281      	cmp	r1, r0
 80059a2:	bf28      	it	cs
 80059a4:	4601      	movcs	r1, r0
 80059a6:	b2c9      	uxtb	r1, r1
                             if (prio_new != p_tcb_owner->Prio) {
 80059a8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80059ac:	428b      	cmp	r3, r1
 80059ae:	d0b2      	beq.n	8005916 <OS_TickListUpdate+0x2e>
                                 OS_TaskChangePrio(p_tcb_owner, prio_new);
 80059b0:	4638      	mov	r0, r7
 80059b2:	f7ff fe69 	bl	8005688 <OS_TaskChangePrio>
 80059b6:	e7ae      	b.n	8005916 <OS_TickListUpdate+0x2e>
                     p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
 80059b8:	2304      	movs	r3, #4
 80059ba:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
                     break;
 80059be:	e7aa      	b.n	8005916 <OS_TickListUpdate+0x2e>
                         p_tcb_owner = (OS_TCB *)((OS_MUTEX *)((void *)p_tcb->PendObjPtr))->OwnerTCBPtr;
 80059c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80059c2:	6a5f      	ldr	r7, [r3, #36]	@ 0x24
 80059c4:	e7c8      	b.n	8005958 <OS_TickListUpdate+0x70>
                              OS_RdyListInsert(p_tcb);                   /* Insert the task in the ready list                    */
 80059c6:	4620      	mov	r0, r4
 80059c8:	f7fe fb66 	bl	8004098 <OS_RdyListInsert>
                              p_tcb->TaskState  = OS_TASK_STATE_RDY;
 80059cc:	2300      	movs	r3, #0
 80059ce:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
                              break;
 80059d2:	e7ce      	b.n	8005972 <OS_TickListUpdate+0x8a>
                              p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 80059d4:	2304      	movs	r3, #4
 80059d6:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
                              break;
 80059da:	e7ca      	b.n	8005972 <OS_TickListUpdate+0x8a>
                p_list->NbrEntries = 0u;
 80059dc:	2200      	movs	r2, #0
 80059de:	809a      	strh	r2, [r3, #4]
                }
            }
        }
    }
#if (OS_CFG_DBG_EN > 0u)
    p_list->NbrUpdated = nbr_updated;
 80059e0:	4b03      	ldr	r3, [pc, #12]	@ (80059f0 <OS_TickListUpdate+0x108>)
 80059e2:	80dd      	strh	r5, [r3, #6]
#endif
}
 80059e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    p_tcb->TickRemain -= ticks;
 80059e6:	1b9b      	subs	r3, r3, r6
 80059e8:	6523      	str	r3, [r4, #80]	@ 0x50
 80059ea:	e7a5      	b.n	8005938 <OS_TickListUpdate+0x50>
    nbr_updated = 0u;
 80059ec:	2500      	movs	r5, #0
 80059ee:	e7f7      	b.n	80059e0 <OS_TickListUpdate+0xf8>
 80059f0:	20001ab8 	.word	0x20001ab8

080059f4 <OS_TickInit>:
    *p_err                = OS_ERR_NONE;
 80059f4:	2300      	movs	r3, #0
 80059f6:	8003      	strh	r3, [r0, #0]
    OSTickCtr             = 0u;                               /* Clear the tick counter                               */
 80059f8:	4a03      	ldr	r2, [pc, #12]	@ (8005a08 <OS_TickInit+0x14>)
 80059fa:	6013      	str	r3, [r2, #0]
    OSTickList.TCB_Ptr    = (OS_TCB *)0;
 80059fc:	4a03      	ldr	r2, [pc, #12]	@ (8005a0c <OS_TickInit+0x18>)
 80059fe:	6013      	str	r3, [r2, #0]
    OSTickList.NbrEntries = 0u;
 8005a00:	8093      	strh	r3, [r2, #4]
    OSTickList.NbrUpdated = 0u;
 8005a02:	80d3      	strh	r3, [r2, #6]
}
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	20001ac0 	.word	0x20001ac0
 8005a0c:	20001ab8 	.word	0x20001ab8

08005a10 <OS_TickUpdate>:
{
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	4604      	mov	r4, r0
    CPU_CRITICAL_ENTER();
 8005a14:	2040      	movs	r0, #64	@ 0x40
 8005a16:	f7fa fbdb 	bl	80001d0 <CPU_SR_Save>
 8005a1a:	4605      	mov	r5, r0
    OSTickCtr += ticks;                                         /* Keep track of the number of ticks                    */
 8005a1c:	4a05      	ldr	r2, [pc, #20]	@ (8005a34 <OS_TickUpdate+0x24>)
 8005a1e:	6813      	ldr	r3, [r2, #0]
 8005a20:	4423      	add	r3, r4
 8005a22:	6013      	str	r3, [r2, #0]
    OS_TickListUpdate(ticks);
 8005a24:	4620      	mov	r0, r4
 8005a26:	f7ff ff5f 	bl	80058e8 <OS_TickListUpdate>
    CPU_CRITICAL_EXIT();
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f7fa fbde 	bl	80001ec <CPU_SR_Restore>
}
 8005a30:	bd38      	pop	{r3, r4, r5, pc}
 8005a32:	bf00      	nop
 8005a34:	20001ac0 	.word	0x20001ac0

08005a38 <OS_TickListInsert>:
{
 8005a38:	b570      	push	{r4, r5, r6, lr}
    delta = (time + tick_base) - (OSTickCtr + elapsed);         /* How many ticks until our delay expires?              */
 8005a3a:	4413      	add	r3, r2
 8005a3c:	4a27      	ldr	r2, [pc, #156]	@ (8005adc <OS_TickListInsert+0xa4>)
 8005a3e:	6814      	ldr	r4, [r2, #0]
 8005a40:	eb01 0c04 	add.w	ip, r1, r4
    if (delta == 0u) {
 8005a44:	ebb3 020c 	subs.w	r2, r3, ip
 8005a48:	d014      	beq.n	8005a74 <OS_TickListInsert+0x3c>
    if (p_list->TCB_Ptr == (OS_TCB *)0) {                       /* Is the list empty?                                   */
 8005a4a:	4c25      	ldr	r4, [pc, #148]	@ (8005ae0 <OS_TickListInsert+0xa8>)
 8005a4c:	6824      	ldr	r4, [r4, #0]
 8005a4e:	b1ac      	cbz	r4, 8005a7c <OS_TickListInsert+0x44>
    p_list->NbrEntries++;                                       /* Update debug counter to reflect the new entry.       */
 8005a50:	4d23      	ldr	r5, [pc, #140]	@ (8005ae0 <OS_TickListInsert+0xa8>)
 8005a52:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8005a56:	f10e 0e01 	add.w	lr, lr, #1
 8005a5a:	f8a5 e004 	strh.w	lr, [r5, #4]
    remain = p_tcb2->TickRemain - elapsed;                      /* How many ticks until the head's delay expires?       */
 8005a5e:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 8005a60:	eba5 0e01 	sub.w	lr, r5, r1
    if ((delta               <   remain) &&                     /* If our entry is the new head of the tick list    ... */
 8005a64:	4572      	cmp	r2, lr
 8005a66:	d201      	bcs.n	8005a6c <OS_TickListInsert+0x34>
 8005a68:	69e6      	ldr	r6, [r4, #28]
 8005a6a:	b186      	cbz	r6, 8005a8e <OS_TickListInsert+0x56>
    delta  -= remain;                                           /* Make delta relative to the head.                     */
 8005a6c:	1b49      	subs	r1, r1, r5
 8005a6e:	4411      	add	r1, r2
    p_tcb2  = p_tcb1->TickNextPtr;
 8005a70:	69a3      	ldr	r3, [r4, #24]
    while ((p_tcb2 !=        (OS_TCB *)0) &&                    /* Find the appropriate position in the delta list.     */
 8005a72:	e01c      	b.n	8005aae <OS_TickListInsert+0x76>
        p_tcb->TickRemain = 0u;
 8005a74:	2300      	movs	r3, #0
 8005a76:	6503      	str	r3, [r0, #80]	@ 0x50
        return (OS_FALSE);
 8005a78:	4618      	mov	r0, r3
 8005a7a:	e027      	b.n	8005acc <OS_TickListInsert+0x94>
        p_tcb->TickRemain   = delta;                            /* Yes, Store time in TCB                               */
 8005a7c:	6502      	str	r2, [r0, #80]	@ 0x50
        p_tcb->TickNextPtr  = (OS_TCB *)0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	6183      	str	r3, [r0, #24]
        p_tcb->TickPrevPtr  = (OS_TCB *)0;
 8005a82:	61c3      	str	r3, [r0, #28]
        p_list->TCB_Ptr     = p_tcb;                            /* Point to TCB of task to place in the list            */
 8005a84:	4b16      	ldr	r3, [pc, #88]	@ (8005ae0 <OS_TickListInsert+0xa8>)
 8005a86:	6018      	str	r0, [r3, #0]
        p_list->NbrEntries  = 1u;                               /* List contains 1 entry                                */
 8005a88:	2001      	movs	r0, #1
 8005a8a:	8098      	strh	r0, [r3, #4]
        return (OS_TRUE);
 8005a8c:	e01e      	b.n	8005acc <OS_TickListInsert+0x94>
        p_tcb->TickRemain    =  delta;                          /* ... the delta is equivalent to the full delay    ... */
 8005a8e:	6502      	str	r2, [r0, #80]	@ 0x50
        p_tcb2->TickRemain   =  remain - delta;                 /* ... the previous head's delta is now relative to it. */
 8005a90:	ebac 0303 	sub.w	r3, ip, r3
 8005a94:	4473      	add	r3, lr
 8005a96:	6523      	str	r3, [r4, #80]	@ 0x50
        p_tcb->TickPrevPtr   = (OS_TCB *)0;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61c3      	str	r3, [r0, #28]
        p_tcb->TickNextPtr   =  p_tcb2;
 8005a9c:	6184      	str	r4, [r0, #24]
        p_tcb2->TickPrevPtr  =  p_tcb;
 8005a9e:	61e0      	str	r0, [r4, #28]
        p_list->TCB_Ptr      =  p_tcb;
 8005aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8005ae0 <OS_TickListInsert+0xa8>)
 8005aa2:	6018      	str	r0, [r3, #0]
        return (OS_TRUE);
 8005aa4:	2001      	movs	r0, #1
 8005aa6:	e011      	b.n	8005acc <OS_TickListInsert+0x94>
        delta  -= p_tcb2->TickRemain;
 8005aa8:	1a89      	subs	r1, r1, r2
        p_tcb1  = p_tcb2;
 8005aaa:	461c      	mov	r4, r3
        p_tcb2  = p_tcb2->TickNextPtr;
 8005aac:	699b      	ldr	r3, [r3, #24]
    while ((p_tcb2 !=        (OS_TCB *)0) &&                    /* Find the appropriate position in the delta list.     */
 8005aae:	b113      	cbz	r3, 8005ab6 <OS_TickListInsert+0x7e>
           (delta  >= p_tcb2->TickRemain)) {
 8005ab0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
    while ((p_tcb2 !=        (OS_TCB *)0) &&                    /* Find the appropriate position in the delta list.     */
 8005ab2:	428a      	cmp	r2, r1
 8005ab4:	d9f8      	bls.n	8005aa8 <OS_TickListInsert+0x70>
    if (p_tcb2 != (OS_TCB *)0) {                                /* Our entry is not the last element in the list.       */
 8005ab6:	b153      	cbz	r3, 8005ace <OS_TickListInsert+0x96>
        p_tcb1               = p_tcb2->TickPrevPtr;
 8005ab8:	69dc      	ldr	r4, [r3, #28]
        p_tcb->TickRemain    = delta;                           /* Store remaining time                                 */
 8005aba:	6501      	str	r1, [r0, #80]	@ 0x50
        p_tcb->TickPrevPtr   = p_tcb1;
 8005abc:	61c4      	str	r4, [r0, #28]
        p_tcb->TickNextPtr   = p_tcb2;
 8005abe:	6183      	str	r3, [r0, #24]
        p_tcb2->TickRemain  -= delta;                           /* Reduce time of next entry in the list                */
 8005ac0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ac2:	1a52      	subs	r2, r2, r1
 8005ac4:	651a      	str	r2, [r3, #80]	@ 0x50
        p_tcb2->TickPrevPtr  = p_tcb;
 8005ac6:	61d8      	str	r0, [r3, #28]
        p_tcb1->TickNextPtr  = p_tcb;
 8005ac8:	61a0      	str	r0, [r4, #24]
    return (OS_TRUE);
 8005aca:	2001      	movs	r0, #1
}
 8005acc:	bd70      	pop	{r4, r5, r6, pc}
        p_tcb->TickRemain    = delta;
 8005ace:	6501      	str	r1, [r0, #80]	@ 0x50
        p_tcb->TickPrevPtr   = p_tcb1;
 8005ad0:	61c4      	str	r4, [r0, #28]
        p_tcb->TickNextPtr   = (OS_TCB *)0;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	6183      	str	r3, [r0, #24]
        p_tcb1->TickNextPtr  = p_tcb;
 8005ad6:	61a0      	str	r0, [r4, #24]
    return (OS_TRUE);
 8005ad8:	2001      	movs	r0, #1
 8005ada:	e7f7      	b.n	8005acc <OS_TickListInsert+0x94>
 8005adc:	20001ac0 	.word	0x20001ac0
 8005ae0:	20001ab8 	.word	0x20001ab8

08005ae4 <OS_TickListInsertDly>:
{
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	461d      	mov	r5, r3
    if (opt == OS_OPT_TIME_MATCH) {                             /* MATCH to absolute tick ctr value mode                */
 8005aea:	2a04      	cmp	r2, #4
 8005aec:	d026      	beq.n	8005b3c <OS_TickListInsertDly+0x58>
    } else if (opt == OS_OPT_TIME_PERIODIC) {                   /* PERIODIC mode.                                       */
 8005aee:	2a08      	cmp	r2, #8
 8005af0:	d00c      	beq.n	8005b0c <OS_TickListInsertDly+0x28>
        tick_base = OSTickCtr;
 8005af2:	4b16      	ldr	r3, [pc, #88]	@ (8005b4c <OS_TickListInsertDly+0x68>)
 8005af4:	681a      	ldr	r2, [r3, #0]
    valid_dly = OS_TickListInsert(p_tcb, elapsed, tick_base, time);
 8005af6:	460b      	mov	r3, r1
 8005af8:	2100      	movs	r1, #0
 8005afa:	4620      	mov	r0, r4
 8005afc:	f7ff ff9c 	bl	8005a38 <OS_TickListInsert>
    if (valid_dly == OS_TRUE) {
 8005b00:	2801      	cmp	r0, #1
 8005b02:	d01d      	beq.n	8005b40 <OS_TickListInsertDly+0x5c>
       *p_err = OS_ERR_TIME_ZERO_DLY;
 8005b04:	f247 237e 	movw	r3, #29310	@ 0x727e
 8005b08:	802b      	strh	r3, [r5, #0]
}
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
        if (time == 0u) {
 8005b0c:	b191      	cbz	r1, 8005b34 <OS_TickListInsertDly+0x50>
        tick_base = p_tcb->TickCtrPrev;
 8005b0e:	6d42      	ldr	r2, [r0, #84]	@ 0x54
        base_offset = OSTickCtr - tick_base;
 8005b10:	4b0e      	ldr	r3, [pc, #56]	@ (8005b4c <OS_TickListInsertDly+0x68>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	1a9b      	subs	r3, r3, r2
        if (base_offset >= time) {                              /* If our task missed the last period, move         ... */
 8005b16:	4299      	cmp	r1, r3
 8005b18:	d808      	bhi.n	8005b2c <OS_TickListInsertDly+0x48>
            tick_base += time * (base_offset / time);           /* ... tick_base up to the next one.                    */
 8005b1a:	fbb3 f0f1 	udiv	r0, r3, r1
 8005b1e:	fb01 f000 	mul.w	r0, r1, r0
 8005b22:	4402      	add	r2, r0
            if ((base_offset % time) != 0u) {
 8005b24:	4283      	cmp	r3, r0
 8005b26:	d000      	beq.n	8005b2a <OS_TickListInsertDly+0x46>
                tick_base += time;                              /* Account for rounding errors with integer division    */
 8005b28:	440a      	add	r2, r1
            p_tcb->TickCtrPrev = tick_base;                     /* Adjust the periodic tick base                        */
 8005b2a:	6562      	str	r2, [r4, #84]	@ 0x54
        p_tcb->TickCtrPrev += time;                             /* Update for the next time we perform a periodic dly.  */
 8005b2c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005b2e:	440b      	add	r3, r1
 8005b30:	6563      	str	r3, [r4, #84]	@ 0x54
 8005b32:	e7e0      	b.n	8005af6 <OS_TickListInsertDly+0x12>
           *p_err = OS_ERR_TIME_ZERO_DLY;                       /* Infinite frequency is invalid.                       */
 8005b34:	f247 237e 	movw	r3, #29310	@ 0x727e
 8005b38:	802b      	strh	r3, [r5, #0]
            return;
 8005b3a:	e7e6      	b.n	8005b0a <OS_TickListInsertDly+0x26>
        tick_base = 0u;                                         /* tick_base + time == time                             */
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	e7da      	b.n	8005af6 <OS_TickListInsertDly+0x12>
        p_tcb->TaskState = OS_TASK_STATE_DLY;
 8005b40:	2301      	movs	r3, #1
 8005b42:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
       *p_err            = OS_ERR_NONE;
 8005b46:	2300      	movs	r3, #0
 8005b48:	802b      	strh	r3, [r5, #0]
 8005b4a:	e7de      	b.n	8005b0a <OS_TickListInsertDly+0x26>
 8005b4c:	20001ac0 	.word	0x20001ac0

08005b50 <OS_TickListRemove>:
    p_tcb1 = p_tcb->TickPrevPtr;
 8005b50:	69c2      	ldr	r2, [r0, #28]
    p_tcb2 = p_tcb->TickNextPtr;
 8005b52:	6983      	ldr	r3, [r0, #24]
    if (p_tcb1 == (OS_TCB *)0) {
 8005b54:	b17a      	cbz	r2, 8005b76 <OS_TickListRemove+0x26>
        p_tcb1->TickNextPtr = p_tcb2;
 8005b56:	6193      	str	r3, [r2, #24]
        if (p_tcb2 != (OS_TCB *)0) {
 8005b58:	b123      	cbz	r3, 8005b64 <OS_TickListRemove+0x14>
            p_tcb2->TickPrevPtr  = p_tcb1;
 8005b5a:	61da      	str	r2, [r3, #28]
            p_tcb2->TickRemain  += p_tcb->TickRemain;            /* Add back the ticks to the delta list                 */
 8005b5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b5e:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8005b60:	440a      	add	r2, r1
 8005b62:	651a      	str	r2, [r3, #80]	@ 0x50
        p_tcb->TickPrevPtr       = (OS_TCB *)0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61c3      	str	r3, [r0, #28]
        p_list->NbrEntries--;
 8005b68:	490e      	ldr	r1, [pc, #56]	@ (8005ba4 <OS_TickListRemove+0x54>)
 8005b6a:	888a      	ldrh	r2, [r1, #4]
 8005b6c:	3a01      	subs	r2, #1
 8005b6e:	808a      	strh	r2, [r1, #4]
        p_tcb->TickNextPtr       = (OS_TCB *)0;
 8005b70:	6183      	str	r3, [r0, #24]
        p_tcb->TickRemain        =           0u;
 8005b72:	6503      	str	r3, [r0, #80]	@ 0x50
 8005b74:	4770      	bx	lr
        if (p_tcb2 == (OS_TCB *)0) {                            /* Remove the ONLY entry in the list?                   */
 8005b76:	b183      	cbz	r3, 8005b9a <OS_TickListRemove+0x4a>
{
 8005b78:	b410      	push	{r4}
            p_tcb2->TickPrevPtr  = (OS_TCB *)0;
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	61da      	str	r2, [r3, #28]
            p_tcb2->TickRemain  += p_tcb->TickRemain;           /* Add back the ticks to the delta                      */
 8005b7e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005b80:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 8005b82:	4421      	add	r1, r4
 8005b84:	6519      	str	r1, [r3, #80]	@ 0x50
            p_list->TCB_Ptr      = p_tcb2;
 8005b86:	4907      	ldr	r1, [pc, #28]	@ (8005ba4 <OS_TickListRemove+0x54>)
 8005b88:	600b      	str	r3, [r1, #0]
            p_list->NbrEntries--;
 8005b8a:	888b      	ldrh	r3, [r1, #4]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	808b      	strh	r3, [r1, #4]
            p_tcb->TickNextPtr          = (OS_TCB *)0;
 8005b90:	6182      	str	r2, [r0, #24]
            p_tcb->TickRemain           =           0u;
 8005b92:	6502      	str	r2, [r0, #80]	@ 0x50
}
 8005b94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b98:	4770      	bx	lr
            p_list->TCB_Ptr      = (OS_TCB *)0;
 8005b9a:	4a02      	ldr	r2, [pc, #8]	@ (8005ba4 <OS_TickListRemove+0x54>)
 8005b9c:	6013      	str	r3, [r2, #0]
            p_list->NbrEntries   =           0u;
 8005b9e:	8093      	strh	r3, [r2, #4]
            p_tcb->TickRemain    =           0u;
 8005ba0:	6503      	str	r3, [r0, #80]	@ 0x50
 8005ba2:	4770      	bx	lr
 8005ba4:	20001ab8 	.word	0x20001ab8

08005ba8 <OSTimeDly>:
*/

void  OSTimeDly (OS_TICK   dly,
                 OS_OPT    opt,
                 OS_ERR   *p_err)
{
 8005ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005baa:	4614      	mov	r4, r2
    *p_err = OS_ERR_TICK_DISABLED;
    return;
#else

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
 8005bac:	4b1f      	ldr	r3, [pc, #124]	@ (8005c2c <OSTimeDly+0x84>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	b94b      	cbnz	r3, 8005bc6 <OSTimeDly+0x1e>
 8005bb2:	4606      	mov	r6, r0
 8005bb4:	460d      	mov	r5, r1
        return;
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 8005bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8005c30 <OSTimeDly+0x88>)
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d007      	beq.n	8005bce <OSTimeDly+0x26>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8005bbe:	f645 6389 	movw	r3, #24201	@ 0x5e89
 8005bc2:	8013      	strh	r3, [r2, #0]
        return;
 8005bc4:	e002      	b.n	8005bcc <OSTimeDly+0x24>
       *p_err = OS_ERR_TIME_DLY_ISR;
 8005bc6:	f247 2375 	movw	r3, #29301	@ 0x7275
 8005bca:	8013      	strh	r3, [r2, #0]
    OS_RdyListRemove(OSTCBCurPtr);                              /* Remove current task from ready list                  */
    CPU_CRITICAL_EXIT();
    OSSched();                                                  /* Find next task to run!                               */
#endif
#endif
}
 8005bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (OSSchedLockNestingCtr > 0u) {                           /* Can't delay when the scheduler is locked             */
 8005bce:	4b19      	ldr	r3, [pc, #100]	@ (8005c34 <OSTimeDly+0x8c>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	b95b      	cbnz	r3, 8005bec <OSTimeDly+0x44>
    switch (opt) {
 8005bd4:	2908      	cmp	r1, #8
 8005bd6:	d805      	bhi.n	8005be4 <OSTimeDly+0x3c>
 8005bd8:	f240 1315 	movw	r3, #277	@ 0x115
 8005bdc:	40cb      	lsrs	r3, r1
 8005bde:	f013 0f01 	tst.w	r3, #1
 8005be2:	d107      	bne.n	8005bf4 <OSTimeDly+0x4c>
            *p_err = OS_ERR_OPT_INVALID;
 8005be4:	f645 6325 	movw	r3, #24101	@ 0x5e25
 8005be8:	8023      	strh	r3, [r4, #0]
             return;
 8005bea:	e7ef      	b.n	8005bcc <OSTimeDly+0x24>
       *p_err = OS_ERR_SCHED_LOCKED;
 8005bec:	f646 5363 	movw	r3, #28003	@ 0x6d63
 8005bf0:	8013      	strh	r3, [r2, #0]
        return;
 8005bf2:	e7eb      	b.n	8005bcc <OSTimeDly+0x24>
    CPU_CRITICAL_ENTER();
 8005bf4:	2040      	movs	r0, #64	@ 0x40
 8005bf6:	f7fa faeb 	bl	80001d0 <CPU_SR_Save>
 8005bfa:	4607      	mov	r7, r0
    OS_TickListInsertDly(OSTCBCurPtr,
 8005bfc:	4623      	mov	r3, r4
 8005bfe:	462a      	mov	r2, r5
 8005c00:	4631      	mov	r1, r6
 8005c02:	480d      	ldr	r0, [pc, #52]	@ (8005c38 <OSTimeDly+0x90>)
 8005c04:	6800      	ldr	r0, [r0, #0]
 8005c06:	f7ff ff6d 	bl	8005ae4 <OS_TickListInsertDly>
    if (*p_err != OS_ERR_NONE) {
 8005c0a:	8823      	ldrh	r3, [r4, #0]
 8005c0c:	b94b      	cbnz	r3, 8005c22 <OSTimeDly+0x7a>
    OS_RdyListRemove(OSTCBCurPtr);                              /* Remove current task from ready list                  */
 8005c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c38 <OSTimeDly+0x90>)
 8005c10:	6818      	ldr	r0, [r3, #0]
 8005c12:	f7fe fabb 	bl	800418c <OS_RdyListRemove>
    CPU_CRITICAL_EXIT();
 8005c16:	4638      	mov	r0, r7
 8005c18:	f7fa fae8 	bl	80001ec <CPU_SR_Restore>
    OSSched();                                                  /* Find next task to run!                               */
 8005c1c:	f7fd ffca 	bl	8003bb4 <OSSched>
 8005c20:	e7d4      	b.n	8005bcc <OSTimeDly+0x24>
         CPU_CRITICAL_EXIT();
 8005c22:	4638      	mov	r0, r7
 8005c24:	f7fa fae2 	bl	80001ec <CPU_SR_Restore>
         return;
 8005c28:	e7d0      	b.n	8005bcc <OSTimeDly+0x24>
 8005c2a:	bf00      	nop
 8005c2c:	20001d76 	.word	0x20001d76
 8005c30:	20001d75 	.word	0x20001d75
 8005c34:	20001bb8 	.word	0x20001bb8
 8005c38:	20001988 	.word	0x20001988

08005c3c <OSTimeDlyHMSM>:
                     CPU_INT16U   minutes,
                     CPU_INT16U   seconds,
                     CPU_INT32U   milli,
                     OS_OPT       opt,
                     OS_ERR      *p_err)
{
 8005c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3e:	f8bd c018 	ldrh.w	ip, [sp, #24]
 8005c42:	9d07      	ldr	r5, [sp, #28]
#if (OS_CFG_TICK_EN == 0u)
    *p_err = OS_ERR_TICK_DISABLED;
    return;
#else
#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
 8005c44:	4c44      	ldr	r4, [pc, #272]	@ (8005d58 <OSTimeDlyHMSM+0x11c>)
 8005c46:	7824      	ldrb	r4, [r4, #0]
 8005c48:	b93c      	cbnz	r4, 8005c5a <OSTimeDlyHMSM+0x1e>
        return;
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 8005c4a:	4c44      	ldr	r4, [pc, #272]	@ (8005d5c <OSTimeDlyHMSM+0x120>)
 8005c4c:	7824      	ldrb	r4, [r4, #0]
 8005c4e:	2c01      	cmp	r4, #1
 8005c50:	d007      	beq.n	8005c62 <OSTimeDlyHMSM+0x26>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8005c52:	f645 6389 	movw	r3, #24201	@ 0x5e89
 8005c56:	802b      	strh	r3, [r5, #0]
        return;
 8005c58:	e002      	b.n	8005c60 <OSTimeDlyHMSM+0x24>
       *p_err = OS_ERR_TIME_DLY_ISR;
 8005c5a:	f247 2375 	movw	r3, #29301	@ 0x7275
 8005c5e:	802b      	strh	r3, [r5, #0]

    OS_RdyListRemove(OSTCBCurPtr);                              /* Remove current task from ready list                  */
    CPU_CRITICAL_EXIT();
    OSSched();                                                  /* Find next task to run!                               */
#endif
}
 8005c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (OSSchedLockNestingCtr > 0u) {                           /* Can't delay when the scheduler is locked             */
 8005c62:	4c3f      	ldr	r4, [pc, #252]	@ (8005d60 <OSTimeDlyHMSM+0x124>)
 8005c64:	7824      	ldrb	r4, [r4, #0]
 8005c66:	b974      	cbnz	r4, 8005c86 <OSTimeDlyHMSM+0x4a>
    opt_time = opt & OS_OPT_TIME_MASK;                          /* Retrieve time options only.                          */
 8005c68:	f00c 040e 	and.w	r4, ip, #14
    switch (opt_time) {
 8005c6c:	2c08      	cmp	r4, #8
 8005c6e:	d806      	bhi.n	8005c7e <OSTimeDlyHMSM+0x42>
 8005c70:	f240 1e15 	movw	lr, #277	@ 0x115
 8005c74:	fa2e fe04 	lsr.w	lr, lr, r4
 8005c78:	f01e 0f01 	tst.w	lr, #1
 8005c7c:	d107      	bne.n	8005c8e <OSTimeDlyHMSM+0x52>
            *p_err = OS_ERR_OPT_INVALID;
 8005c7e:	f645 6325 	movw	r3, #24101	@ 0x5e25
 8005c82:	802b      	strh	r3, [r5, #0]
             return;
 8005c84:	e7ec      	b.n	8005c60 <OSTimeDlyHMSM+0x24>
       *p_err = OS_ERR_SCHED_LOCKED;
 8005c86:	f646 5363 	movw	r3, #28003	@ 0x6d63
 8005c8a:	802b      	strh	r3, [r5, #0]
        return;
 8005c8c:	e7e8      	b.n	8005c60 <OSTimeDlyHMSM+0x24>
    if (opt_invalid == OS_TRUE) {
 8005c8e:	f03c 061e 	bics.w	r6, ip, #30
 8005c92:	d10f      	bne.n	8005cb4 <OSTimeDlyHMSM+0x78>
    if (opt_non_strict != OS_TRUE) {
 8005c94:	f01c 0f10 	tst.w	ip, #16
 8005c98:	d11c      	bne.n	8005cd4 <OSTimeDlyHMSM+0x98>
         if (milli   > 999u) {
 8005c9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c9e:	d20d      	bcs.n	8005cbc <OSTimeDlyHMSM+0x80>
         if (seconds > 59u) {
 8005ca0:	2a3b      	cmp	r2, #59	@ 0x3b
 8005ca2:	d80f      	bhi.n	8005cc4 <OSTimeDlyHMSM+0x88>
         if (minutes > 59u) {
 8005ca4:	293b      	cmp	r1, #59	@ 0x3b
 8005ca6:	d811      	bhi.n	8005ccc <OSTimeDlyHMSM+0x90>
         if (hours   > 99u) {
 8005ca8:	2863      	cmp	r0, #99	@ 0x63
 8005caa:	d91a      	bls.n	8005ce2 <OSTimeDlyHMSM+0xa6>
            *p_err = OS_ERR_TIME_INVALID_HOURS;
 8005cac:	f247 2378 	movw	r3, #29304	@ 0x7278
 8005cb0:	802b      	strh	r3, [r5, #0]
             return;
 8005cb2:	e7d5      	b.n	8005c60 <OSTimeDlyHMSM+0x24>
       *p_err = OS_ERR_OPT_INVALID;
 8005cb4:	f645 6325 	movw	r3, #24101	@ 0x5e25
 8005cb8:	802b      	strh	r3, [r5, #0]
        return;
 8005cba:	e7d1      	b.n	8005c60 <OSTimeDlyHMSM+0x24>
            *p_err = OS_ERR_TIME_INVALID_MILLISECONDS;
 8005cbc:	f247 237b 	movw	r3, #29307	@ 0x727b
 8005cc0:	802b      	strh	r3, [r5, #0]
             return;
 8005cc2:	e7cd      	b.n	8005c60 <OSTimeDlyHMSM+0x24>
            *p_err = OS_ERR_TIME_INVALID_SECONDS;
 8005cc4:	f247 237a 	movw	r3, #29306	@ 0x727a
 8005cc8:	802b      	strh	r3, [r5, #0]
             return;
 8005cca:	e7c9      	b.n	8005c60 <OSTimeDlyHMSM+0x24>
            *p_err = OS_ERR_TIME_INVALID_MINUTES;
 8005ccc:	f247 2379 	movw	r3, #29305	@ 0x7279
 8005cd0:	802b      	strh	r3, [r5, #0]
             return;
 8005cd2:	e7c5      	b.n	8005c60 <OSTimeDlyHMSM+0x24>
         if (minutes > 9999u) {
 8005cd4:	f242 760f 	movw	r6, #9999	@ 0x270f
 8005cd8:	42b1      	cmp	r1, r6
 8005cda:	d830      	bhi.n	8005d3e <OSTimeDlyHMSM+0x102>
         if (hours   > 999u) {
 8005cdc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8005ce0:	d231      	bcs.n	8005d46 <OSTimeDlyHMSM+0x10a>
    tick_rate = OSCfg_TickRate_Hz;
 8005ce2:	4e20      	ldr	r6, [pc, #128]	@ (8005d64 <OSTimeDlyHMSM+0x128>)
 8005ce4:	6837      	ldr	r7, [r6, #0]
    ticks     = ((((OS_TICK)hours * (OS_TICK)3600u) + ((OS_TICK)minutes * (OS_TICK)60u) + (OS_TICK)seconds) * tick_rate)
 8005ce6:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8005cea:	0089      	lsls	r1, r1, #2
 8005cec:	f44f 6661 	mov.w	r6, #3600	@ 0xe10
 8005cf0:	fb06 1000 	mla	r0, r6, r0, r1
 8005cf4:	4402      	add	r2, r0
              + ((tick_rate * ((OS_TICK)milli + ((OS_TICK)500u / tick_rate))) / (OS_TICK)1000u);
 8005cf6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8005cfa:	fbb6 f6f7 	udiv	r6, r6, r7
 8005cfe:	441e      	add	r6, r3
 8005d00:	fb07 f606 	mul.w	r6, r7, r6
 8005d04:	4b18      	ldr	r3, [pc, #96]	@ (8005d68 <OSTimeDlyHMSM+0x12c>)
 8005d06:	fba3 3606 	umull	r3, r6, r3, r6
 8005d0a:	09b6      	lsrs	r6, r6, #6
    ticks     = ((((OS_TICK)hours * (OS_TICK)3600u) + ((OS_TICK)minutes * (OS_TICK)60u) + (OS_TICK)seconds) * tick_rate)
 8005d0c:	fb07 6602 	mla	r6, r7, r2, r6
    CPU_CRITICAL_ENTER();
 8005d10:	2040      	movs	r0, #64	@ 0x40
 8005d12:	f7fa fa5d 	bl	80001d0 <CPU_SR_Save>
 8005d16:	4607      	mov	r7, r0
    OS_TickListInsertDly(OSTCBCurPtr,
 8005d18:	462b      	mov	r3, r5
 8005d1a:	4622      	mov	r2, r4
 8005d1c:	4631      	mov	r1, r6
 8005d1e:	4813      	ldr	r0, [pc, #76]	@ (8005d6c <OSTimeDlyHMSM+0x130>)
 8005d20:	6800      	ldr	r0, [r0, #0]
 8005d22:	f7ff fedf 	bl	8005ae4 <OS_TickListInsertDly>
    if (*p_err != OS_ERR_NONE) {
 8005d26:	882b      	ldrh	r3, [r5, #0]
 8005d28:	b98b      	cbnz	r3, 8005d4e <OSTimeDlyHMSM+0x112>
    OS_RdyListRemove(OSTCBCurPtr);                              /* Remove current task from ready list                  */
 8005d2a:	4b10      	ldr	r3, [pc, #64]	@ (8005d6c <OSTimeDlyHMSM+0x130>)
 8005d2c:	6818      	ldr	r0, [r3, #0]
 8005d2e:	f7fe fa2d 	bl	800418c <OS_RdyListRemove>
    CPU_CRITICAL_EXIT();
 8005d32:	4638      	mov	r0, r7
 8005d34:	f7fa fa5a 	bl	80001ec <CPU_SR_Restore>
    OSSched();                                                  /* Find next task to run!                               */
 8005d38:	f7fd ff3c 	bl	8003bb4 <OSSched>
 8005d3c:	e790      	b.n	8005c60 <OSTimeDlyHMSM+0x24>
            *p_err = OS_ERR_TIME_INVALID_MINUTES;
 8005d3e:	f247 2379 	movw	r3, #29305	@ 0x7279
 8005d42:	802b      	strh	r3, [r5, #0]
             return;
 8005d44:	e78c      	b.n	8005c60 <OSTimeDlyHMSM+0x24>
            *p_err = OS_ERR_TIME_INVALID_HOURS;
 8005d46:	f247 2378 	movw	r3, #29304	@ 0x7278
 8005d4a:	802b      	strh	r3, [r5, #0]
             return;
 8005d4c:	e788      	b.n	8005c60 <OSTimeDlyHMSM+0x24>
         CPU_CRITICAL_EXIT();
 8005d4e:	4638      	mov	r0, r7
 8005d50:	f7fa fa4c 	bl	80001ec <CPU_SR_Restore>
         return;
 8005d54:	e784      	b.n	8005c60 <OSTimeDlyHMSM+0x24>
 8005d56:	bf00      	nop
 8005d58:	20001d76 	.word	0x20001d76
 8005d5c:	20001d75 	.word	0x20001d75
 8005d60:	20001bb8 	.word	0x20001bb8
 8005d64:	08006318 	.word	0x08006318
 8005d68:	10624dd3 	.word	0x10624dd3
 8005d6c:	20001988 	.word	0x20001988

08005d70 <OSTimeTick>:
* Note(s)    : none
************************************************************************************************************************
*/

void  OSTimeTick (void)
{
 8005d70:	b508      	push	{r3, lr}
    if (OSRunning != OS_STATE_OS_RUNNING) {
 8005d72:	4b0a      	ldr	r3, [pc, #40]	@ (8005d9c <OSTimeTick+0x2c>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d000      	beq.n	8005d7c <OSTimeTick+0xc>
#endif

#if (OS_CFG_TICK_EN > 0u)
    OS_TickUpdate(1u);                                          /* Update from the ISR                                  */
#endif
}
 8005d7a:	bd08      	pop	{r3, pc}
    OSTimeTickHook();                                           /* Call user definable hook                             */
 8005d7c:	f7fd fe8c 	bl	8003a98 <OSTimeTickHook>
    OS_SchedRoundRobin(&OSRdyList[OSPrioCur]);                  /* Update quanta ctr for the task which just ran        */
 8005d80:	4b07      	ldr	r3, [pc, #28]	@ (8005da0 <OSTimeTick+0x30>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005d88:	009a      	lsls	r2, r3, #2
 8005d8a:	4806      	ldr	r0, [pc, #24]	@ (8005da4 <OSTimeTick+0x34>)
 8005d8c:	4410      	add	r0, r2
 8005d8e:	f7fe fa39 	bl	8004204 <OS_SchedRoundRobin>
    OS_TickUpdate(1u);                                          /* Update from the ISR                                  */
 8005d92:	2001      	movs	r0, #1
 8005d94:	f7ff fe3c 	bl	8005a10 <OS_TickUpdate>
 8005d98:	e7ef      	b.n	8005d7a <OSTimeTick+0xa>
 8005d9a:	bf00      	nop
 8005d9c:	20001d75 	.word	0x20001d75
 8005da0:	20001d49 	.word	0x20001d49
 8005da4:	20001bbc 	.word	0x20001bbc

08005da8 <OS_TmrLock>:
* Note(s)    : 1) These functions are INTERNAL to uC/OS-III and your application MUST NOT call them.
************************************************************************************************************************
*/

static  void  OS_TmrLock (void)
{
 8005da8:	b500      	push	{lr}
 8005daa:	b085      	sub	sp, #20
    OS_ERR  err;


    OSMutexPend(&OSTmrMutex, 0u, OS_OPT_PEND_BLOCKING, (CPU_TS *)0, &err);
 8005dac:	f10d 030e 	add.w	r3, sp, #14
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	2300      	movs	r3, #0
 8005db4:	461a      	mov	r2, r3
 8005db6:	4619      	mov	r1, r3
 8005db8:	4802      	ldr	r0, [pc, #8]	@ (8005dc4 <OS_TmrLock+0x1c>)
 8005dba:	f7fe ff9f 	bl	8004cfc <OSMutexPend>
}
 8005dbe:	b005      	add	sp, #20
 8005dc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005dc4:	20001a5c 	.word	0x20001a5c

08005dc8 <OS_TmrCondCreate>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrCondCreate (void)
{
 8005dc8:	b510      	push	{r4, lr}
    CPU_SR_ALLOC();


    CPU_CRITICAL_ENTER();
 8005dca:	2040      	movs	r0, #64	@ 0x40
 8005dcc:	f7fa fa00 	bl	80001d0 <CPU_SR_Save>
 8005dd0:	4604      	mov	r4, r0
#if (OS_OBJ_TYPE_REQ > 0u)
    OSTmrCond.Type  = OS_OBJ_TYPE_COND;                         /* Mark the data structure as a condition variable.     */
 8005dd2:	4806      	ldr	r0, [pc, #24]	@ (8005dec <OS_TmrCondCreate+0x24>)
 8005dd4:	4b06      	ldr	r3, [pc, #24]	@ (8005df0 <OS_TmrCondCreate+0x28>)
 8005dd6:	6003      	str	r3, [r0, #0]
#endif
    OSTmrCond.Mutex = &OSTmrMutex;                              /* Bind the timer mutex to the condition variable.      */
 8005dd8:	4b06      	ldr	r3, [pc, #24]	@ (8005df4 <OS_TmrCondCreate+0x2c>)
 8005dda:	6203      	str	r3, [r0, #32]
    OS_PendListInit(&OSTmrCond.PendList);                       /* Initialize the waiting list                          */
 8005ddc:	3008      	adds	r0, #8
 8005dde:	f7fd ffc9 	bl	8003d74 <OS_PendListInit>
    CPU_CRITICAL_EXIT();
 8005de2:	4620      	mov	r0, r4
 8005de4:	f7fa fa02 	bl	80001ec <CPU_SR_Restore>
}
 8005de8:	bd10      	pop	{r4, pc}
 8005dea:	bf00      	nop
 8005dec:	20001a88 	.word	0x20001a88
 8005df0:	444e4f43 	.word	0x444e4f43
 8005df4:	20001a5c 	.word	0x20001a5c

08005df8 <OS_TmrCondSignal>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrCondSignal (void)
{
 8005df8:	b510      	push	{r4, lr}
 8005dfa:	b082      	sub	sp, #8
    OS_PEND_LIST  *p_pend_list;
    CPU_TS         ts;
    CPU_SR_ALLOC();


    CPU_CRITICAL_ENTER();
 8005dfc:	2040      	movs	r0, #64	@ 0x40
 8005dfe:	f7fa f9e7 	bl	80001d0 <CPU_SR_Save>
 8005e02:	4604      	mov	r4, r0
    ts             = 0u;
#endif

    p_pend_list    = &OSTmrCond.PendList;

    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* Timer task waiting on cond?                          */
 8005e04:	4b08      	ldr	r3, [pc, #32]	@ (8005e28 <OS_TmrCondSignal+0x30>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	b15b      	cbz	r3, 8005e22 <OS_TmrCondSignal+0x2a>
        CPU_CRITICAL_EXIT();
        return;                                                 /* No, nothing to signal.                               */
    } else {
                                                                /* Yes, signal the timer task.                          */
        OS_Post((OS_PEND_OBJ *)((void *)&OSTmrCond),
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	9200      	str	r2, [sp, #0]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	4906      	ldr	r1, [pc, #24]	@ (8005e2c <OS_TmrCondSignal+0x34>)
 8005e12:	4805      	ldr	r0, [pc, #20]	@ (8005e28 <OS_TmrCondSignal+0x30>)
 8005e14:	f7fe f956 	bl	80040c4 <OS_Post>
                                (void *) 0,
                                         0u,
                                         ts);
    }

    CPU_CRITICAL_EXIT();
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f7fa f9e7 	bl	80001ec <CPU_SR_Restore>
}
 8005e1e:	b002      	add	sp, #8
 8005e20:	bd10      	pop	{r4, pc}
        CPU_CRITICAL_EXIT();
 8005e22:	f7fa f9e3 	bl	80001ec <CPU_SR_Restore>
        return;                                                 /* No, nothing to signal.                               */
 8005e26:	e7fa      	b.n	8005e1e <OS_TmrCondSignal+0x26>
 8005e28:	20001a88 	.word	0x20001a88
 8005e2c:	20001994 	.word	0x20001994

08005e30 <OS_TmrCondWait>:
{
 8005e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e32:	b083      	sub	sp, #12
 8005e34:	4605      	mov	r5, r0
    CPU_CRITICAL_ENTER();
 8005e36:	2040      	movs	r0, #64	@ 0x40
 8005e38:	f7fa f9ca 	bl	80001d0 <CPU_SR_Save>
 8005e3c:	4604      	mov	r4, r0
    OS_MutexGrpRemove(&OSTmrTaskTCB, &OSTmrMutex);
 8005e3e:	4e2f      	ldr	r6, [pc, #188]	@ (8005efc <OS_TmrCondWait+0xcc>)
 8005e40:	492f      	ldr	r1, [pc, #188]	@ (8005f00 <OS_TmrCondWait+0xd0>)
 8005e42:	4630      	mov	r0, r6
 8005e44:	f7ff f814 	bl	8004e70 <OS_MutexGrpRemove>
    if (OSTmrTaskTCB.Prio != OSTmrTaskTCB.BasePrio) {           /* Restore our original prio.                           */
 8005e48:	f896 203b 	ldrb.w	r2, [r6, #59]	@ 0x3b
 8005e4c:	f896 303c 	ldrb.w	r3, [r6, #60]	@ 0x3c
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d003      	beq.n	8005e5c <OS_TmrCondWait+0x2c>
        OSTmrTaskTCB.Prio          = OSTmrTaskTCB.BasePrio;
 8005e54:	f886 303b 	strb.w	r3, [r6, #59]	@ 0x3b
        OSPrioCur                  = OSTmrTaskTCB.BasePrio;
 8005e58:	4a2a      	ldr	r2, [pc, #168]	@ (8005f04 <OS_TmrCondWait+0xd4>)
 8005e5a:	7013      	strb	r3, [r2, #0]
    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* Any task waiting on mutex?                           */
 8005e5c:	4b28      	ldr	r3, [pc, #160]	@ (8005f00 <OS_TmrCondWait+0xd0>)
 8005e5e:	689e      	ldr	r6, [r3, #8]
 8005e60:	2e00      	cmp	r6, #0
 8005e62:	d035      	beq.n	8005ed0 <OS_TmrCondWait+0xa0>
        OSTmrMutex.OwnerTCBPtr     = p_tcb;
 8005e64:	4f26      	ldr	r7, [pc, #152]	@ (8005f00 <OS_TmrCondWait+0xd0>)
 8005e66:	627e      	str	r6, [r7, #36]	@ 0x24
        OSTmrMutex.OwnerNestingCtr =           1u;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        OS_MutexGrpAdd(p_tcb, &OSTmrMutex);
 8005e6e:	4639      	mov	r1, r7
 8005e70:	4630      	mov	r0, r6
 8005e72:	f7fe ff3f 	bl	8004cf4 <OS_MutexGrpAdd>
        OS_Post((OS_PEND_OBJ *)((void *)&OSTmrMutex),
 8005e76:	2200      	movs	r2, #0
 8005e78:	9200      	str	r2, [sp, #0]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	4638      	mov	r0, r7
 8005e80:	f7fe f920 	bl	80040c4 <OS_Post>
    OS_Pend((OS_PEND_OBJ *)((void *)&OSTmrCond),                /* Pend on the condition variable.                      */
 8005e84:	462b      	mov	r3, r5
 8005e86:	2203      	movs	r2, #3
 8005e88:	491c      	ldr	r1, [pc, #112]	@ (8005efc <OS_TmrCondWait+0xcc>)
 8005e8a:	481f      	ldr	r0, [pc, #124]	@ (8005f08 <OS_TmrCondWait+0xd8>)
 8005e8c:	f7fe fa16 	bl	80042bc <OS_Pend>
    CPU_CRITICAL_EXIT();
 8005e90:	4620      	mov	r0, r4
 8005e92:	f7fa f9ab 	bl	80001ec <CPU_SR_Restore>
    OSSched();
 8005e96:	f7fd fe8d 	bl	8003bb4 <OSSched>
    CPU_CRITICAL_ENTER();                                       /* Either we timed out, or were signaled.               */
 8005e9a:	2040      	movs	r0, #64	@ 0x40
 8005e9c:	f7fa f998 	bl	80001d0 <CPU_SR_Save>
 8005ea0:	4604      	mov	r4, r0
    if (OSTmrMutex.OwnerTCBPtr == (OS_TCB *)0) {                /* Can we grab the mutex?                               */
 8005ea2:	4b17      	ldr	r3, [pc, #92]	@ (8005f00 <OS_TmrCondWait+0xd0>)
 8005ea4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005ea6:	b1c0      	cbz	r0, 8005eda <OS_TmrCondWait+0xaa>
        if (p_tcb->Prio > OSTmrTaskTCB.Prio) {                  /* See if mutex owner has a lower priority than TmrTask.*/
 8005ea8:	f890 303b 	ldrb.w	r3, [r0, #59]	@ 0x3b
 8005eac:	4a13      	ldr	r2, [pc, #76]	@ (8005efc <OS_TmrCondWait+0xcc>)
 8005eae:	f892 103b 	ldrb.w	r1, [r2, #59]	@ 0x3b
 8005eb2:	428b      	cmp	r3, r1
 8005eb4:	d81f      	bhi.n	8005ef6 <OS_TmrCondWait+0xc6>
        OS_Pend((OS_PEND_OBJ *)((void *)&OSTmrMutex),           /* Block TmrTask until it gets the Mutex.               */
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	2204      	movs	r2, #4
 8005eba:	4910      	ldr	r1, [pc, #64]	@ (8005efc <OS_TmrCondWait+0xcc>)
 8005ebc:	4810      	ldr	r0, [pc, #64]	@ (8005f00 <OS_TmrCondWait+0xd0>)
 8005ebe:	f7fe f9fd 	bl	80042bc <OS_Pend>
        CPU_CRITICAL_EXIT();
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f7fa f992 	bl	80001ec <CPU_SR_Restore>
        OSSched();
 8005ec8:	f7fd fe74 	bl	8003bb4 <OSSched>
}
 8005ecc:	b003      	add	sp, #12
 8005ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
        OSTmrMutex.OwnerTCBPtr     = (OS_TCB *)0;               /* No                                                   */
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	625a      	str	r2, [r3, #36]	@ 0x24
        OSTmrMutex.OwnerNestingCtr =           0u;
 8005ed4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8005ed8:	e7d4      	b.n	8005e84 <OS_TmrCondWait+0x54>
        OS_MutexGrpAdd(&OSTmrTaskTCB, &OSTmrMutex);             /* Yes, no-one else pending.                            */
 8005eda:	461d      	mov	r5, r3
 8005edc:	4e07      	ldr	r6, [pc, #28]	@ (8005efc <OS_TmrCondWait+0xcc>)
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f7fe ff07 	bl	8004cf4 <OS_MutexGrpAdd>
        OSTmrMutex.OwnerTCBPtr     = &OSTmrTaskTCB;
 8005ee6:	626e      	str	r6, [r5, #36]	@ 0x24
        OSTmrMutex.OwnerNestingCtr = 1u;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        CPU_CRITICAL_EXIT();
 8005eee:	4620      	mov	r0, r4
 8005ef0:	f7fa f97c 	bl	80001ec <CPU_SR_Restore>
 8005ef4:	e7ea      	b.n	8005ecc <OS_TmrCondWait+0x9c>
            OS_TaskChangePrio(p_tcb, OSTmrTaskTCB.Prio);
 8005ef6:	f7ff fbc7 	bl	8005688 <OS_TaskChangePrio>
 8005efa:	e7dc      	b.n	8005eb6 <OS_TmrCondWait+0x86>
 8005efc:	20001994 	.word	0x20001994
 8005f00:	20001a5c 	.word	0x20001a5c
 8005f04:	20001d49 	.word	0x20001d49
 8005f08:	20001a88 	.word	0x20001a88

08005f0c <OS_TmrInit>:
{
 8005f0c:	b510      	push	{r4, lr}
 8005f0e:	b08a      	sub	sp, #40	@ 0x28
 8005f10:	4604      	mov	r4, r0
    OSTmrQty             =           0u;                        /* Keep track of the number of timers created           */
 8005f12:	2300      	movs	r3, #0
 8005f14:	4a23      	ldr	r2, [pc, #140]	@ (8005fa4 <OS_TmrInit+0x98>)
 8005f16:	8013      	strh	r3, [r2, #0]
    OSTmrDbgListPtr      = (OS_TMR *)0;
 8005f18:	4a23      	ldr	r2, [pc, #140]	@ (8005fa8 <OS_TmrInit+0x9c>)
 8005f1a:	6013      	str	r3, [r2, #0]
    OSTmrListPtr         = (OS_TMR *)0;                         /* Create an empty timer list                           */
 8005f1c:	4a23      	ldr	r2, [pc, #140]	@ (8005fac <OS_TmrInit+0xa0>)
 8005f1e:	6013      	str	r3, [r2, #0]
    OSTmrListEntries     =           0u;
 8005f20:	4a23      	ldr	r2, [pc, #140]	@ (8005fb0 <OS_TmrInit+0xa4>)
 8005f22:	8013      	strh	r3, [r2, #0]
    OSTmrToTicksMult = OSCfg_TickRate_Hz / OSCfg_TmrTaskRate_Hz;
 8005f24:	4b23      	ldr	r3, [pc, #140]	@ (8005fb4 <OS_TmrInit+0xa8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a23      	ldr	r2, [pc, #140]	@ (8005fb8 <OS_TmrInit+0xac>)
 8005f2a:	6812      	ldr	r2, [r2, #0]
 8005f2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f30:	4a22      	ldr	r2, [pc, #136]	@ (8005fbc <OS_TmrInit+0xb0>)
 8005f32:	6013      	str	r3, [r2, #0]
    OSMutexCreate(&OSTmrMutex,                                  /* Use a mutex to protect the timers                    */
 8005f34:	4602      	mov	r2, r0
 8005f36:	4922      	ldr	r1, [pc, #136]	@ (8005fc0 <OS_TmrInit+0xb4>)
 8005f38:	4822      	ldr	r0, [pc, #136]	@ (8005fc4 <OS_TmrInit+0xb8>)
 8005f3a:	f7fe fe9f 	bl	8004c7c <OSMutexCreate>
    if (*p_err != OS_ERR_NONE) {
 8005f3e:	8823      	ldrh	r3, [r4, #0]
 8005f40:	b10b      	cbz	r3, 8005f46 <OS_TmrInit+0x3a>
}
 8005f42:	b00a      	add	sp, #40	@ 0x28
 8005f44:	bd10      	pop	{r4, pc}
    OS_TmrCondCreate();
 8005f46:	f7ff ff3f 	bl	8005dc8 <OS_TmrCondCreate>
    if (OSCfg_TmrTaskStkBasePtr == (CPU_STK *)0) {
 8005f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8005fc8 <OS_TmrInit+0xbc>)
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	b16a      	cbz	r2, 8005f6c <OS_TmrInit+0x60>
    if (OSCfg_TmrTaskStkSize < OSCfg_StkSizeMin) {
 8005f50:	4b1e      	ldr	r3, [pc, #120]	@ (8005fcc <OS_TmrInit+0xc0>)
 8005f52:	6819      	ldr	r1, [r3, #0]
 8005f54:	4b1e      	ldr	r3, [pc, #120]	@ (8005fd0 <OS_TmrInit+0xc4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4299      	cmp	r1, r3
 8005f5a:	d30b      	bcc.n	8005f74 <OS_TmrInit+0x68>
    if (OSCfg_TmrTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 8005f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8005fd4 <OS_TmrInit+0xc8>)
 8005f5e:	7818      	ldrb	r0, [r3, #0]
 8005f60:	281e      	cmp	r0, #30
 8005f62:	d90b      	bls.n	8005f7c <OS_TmrInit+0x70>
       *p_err = OS_ERR_TMR_PRIO_INVALID;
 8005f64:	f247 3346 	movw	r3, #29510	@ 0x7346
 8005f68:	8023      	strh	r3, [r4, #0]
        return;
 8005f6a:	e7ea      	b.n	8005f42 <OS_TmrInit+0x36>
       *p_err = OS_ERR_TMR_STK_INVALID;
 8005f6c:	f247 3347 	movw	r3, #29511	@ 0x7347
 8005f70:	8023      	strh	r3, [r4, #0]
        return;
 8005f72:	e7e6      	b.n	8005f42 <OS_TmrInit+0x36>
       *p_err = OS_ERR_TMR_STK_SIZE_INVALID;
 8005f74:	f247 3348 	movw	r3, #29512	@ 0x7348
 8005f78:	8023      	strh	r3, [r4, #0]
        return;
 8005f7a:	e7e2      	b.n	8005f42 <OS_TmrInit+0x36>
    OSTaskCreate(&OSTmrTaskTCB,
 8005f7c:	9408      	str	r4, [sp, #32]
 8005f7e:	230b      	movs	r3, #11
 8005f80:	9307      	str	r3, [sp, #28]
 8005f82:	2300      	movs	r3, #0
 8005f84:	9306      	str	r3, [sp, #24]
 8005f86:	9305      	str	r3, [sp, #20]
 8005f88:	9304      	str	r3, [sp, #16]
 8005f8a:	9103      	str	r1, [sp, #12]
 8005f8c:	4912      	ldr	r1, [pc, #72]	@ (8005fd8 <OS_TmrInit+0xcc>)
 8005f8e:	6809      	ldr	r1, [r1, #0]
 8005f90:	9102      	str	r1, [sp, #8]
 8005f92:	9201      	str	r2, [sp, #4]
 8005f94:	9000      	str	r0, [sp, #0]
 8005f96:	4a11      	ldr	r2, [pc, #68]	@ (8005fdc <OS_TmrInit+0xd0>)
 8005f98:	4911      	ldr	r1, [pc, #68]	@ (8005fe0 <OS_TmrInit+0xd4>)
 8005f9a:	4812      	ldr	r0, [pc, #72]	@ (8005fe4 <OS_TmrInit+0xd8>)
 8005f9c:	f7ff fa9c 	bl	80054d8 <OSTaskCreate>
 8005fa0:	e7cf      	b.n	8005f42 <OS_TmrInit+0x36>
 8005fa2:	bf00      	nop
 8005fa4:	20001a58 	.word	0x20001a58
 8005fa8:	20001ab4 	.word	0x20001ab4
 8005fac:	20001aac 	.word	0x20001aac
 8005fb0:	20001ab0 	.word	0x20001ab0
 8005fb4:	08006318 	.word	0x08006318
 8005fb8:	08006310 	.word	0x08006310
 8005fbc:	2000198c 	.word	0x2000198c
 8005fc0:	080064f4 	.word	0x080064f4
 8005fc4:	20001a5c 	.word	0x20001a5c
 8005fc8:	0800630c 	.word	0x0800630c
 8005fcc:	08006304 	.word	0x08006304
 8005fd0:	0800631c 	.word	0x0800631c
 8005fd4:	08006314 	.word	0x08006314
 8005fd8:	08006308 	.word	0x08006308
 8005fdc:	08006129 	.word	0x08006129
 8005fe0:	08006504 	.word	0x08006504
 8005fe4:	20001994 	.word	0x20001994

08005fe8 <OS_TmrLink>:
{
 8005fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (OSTmrListPtr == (OS_TMR *)0) {                          /* Is the list empty?                                   */
 8005fea:	4b23      	ldr	r3, [pc, #140]	@ (8006078 <OS_TmrLink+0x90>)
 8005fec:	681c      	ldr	r4, [r3, #0]
 8005fee:	b184      	cbz	r4, 8006012 <OS_TmrLink+0x2a>
    OSTmrListEntries++;
 8005ff0:	4a22      	ldr	r2, [pc, #136]	@ (800607c <OS_TmrLink+0x94>)
 8005ff2:	8813      	ldrh	r3, [r2, #0]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	8013      	strh	r3, [r2, #0]
    delta = (time + p_tmr->Remain) - OSTmrTaskTickBase;
 8005ff8:	6983      	ldr	r3, [r0, #24]
 8005ffa:	440b      	add	r3, r1
 8005ffc:	4a20      	ldr	r2, [pc, #128]	@ (8006080 <OS_TmrLink+0x98>)
 8005ffe:	6816      	ldr	r6, [r2, #0]
 8006000:	1b9a      	subs	r2, r3, r6
    remain = p_tmr2->Remain;
 8006002:	69a5      	ldr	r5, [r4, #24]
    if ((delta           <     remain) &&
 8006004:	42aa      	cmp	r2, r5
 8006006:	d201      	bcs.n	800600c <OS_TmrLink+0x24>
 8006008:	6967      	ldr	r7, [r4, #20]
 800600a:	b17f      	cbz	r7, 800602c <OS_TmrLink+0x44>
    delta  -= remain;                                           /* Make delta relative to the current head.             */
 800600c:	1b52      	subs	r2, r2, r5
    p_tmr2  = p_tmr1->NextPtr;
 800600e:	6923      	ldr	r3, [r4, #16]
    while ((p_tmr2 !=        (OS_TMR *)0) &&                    /* Find the appropriate position in the delta list.     */
 8006010:	e01d      	b.n	800604e <OS_TmrLink+0x66>
        p_tmr->NextPtr    = (OS_TMR *)0;                        /* Yes, this is the first entry                         */
 8006012:	2300      	movs	r3, #0
 8006014:	6103      	str	r3, [r0, #16]
        p_tmr->PrevPtr    = (OS_TMR *)0;
 8006016:	6143      	str	r3, [r0, #20]
        OSTmrListPtr      = p_tmr;
 8006018:	4b17      	ldr	r3, [pc, #92]	@ (8006078 <OS_TmrLink+0x90>)
 800601a:	6018      	str	r0, [r3, #0]
        OSTmrListEntries  = 1u;
 800601c:	4b17      	ldr	r3, [pc, #92]	@ (800607c <OS_TmrLink+0x94>)
 800601e:	2201      	movs	r2, #1
 8006020:	801a      	strh	r2, [r3, #0]
        OSTmrTaskTickBase = time;
 8006022:	4b17      	ldr	r3, [pc, #92]	@ (8006080 <OS_TmrLink+0x98>)
 8006024:	6019      	str	r1, [r3, #0]
        OS_TmrCondSignal();
 8006026:	f7ff fee7 	bl	8005df8 <OS_TmrCondSignal>
        return;
 800602a:	e01e      	b.n	800606a <OS_TmrLink+0x82>
        p_tmr2->Remain    =  remain - delta;
 800602c:	1af3      	subs	r3, r6, r3
 800602e:	442b      	add	r3, r5
 8006030:	61a3      	str	r3, [r4, #24]
        p_tmr->PrevPtr    = (OS_TMR *)0;
 8006032:	2300      	movs	r3, #0
 8006034:	6143      	str	r3, [r0, #20]
        p_tmr->NextPtr    =  p_tmr2;
 8006036:	6104      	str	r4, [r0, #16]
        p_tmr2->PrevPtr   =  p_tmr;
 8006038:	6160      	str	r0, [r4, #20]
        OSTmrListPtr      =  p_tmr;
 800603a:	4b0f      	ldr	r3, [pc, #60]	@ (8006078 <OS_TmrLink+0x90>)
 800603c:	6018      	str	r0, [r3, #0]
        OSTmrTaskTickBase = time;
 800603e:	4b10      	ldr	r3, [pc, #64]	@ (8006080 <OS_TmrLink+0x98>)
 8006040:	6019      	str	r1, [r3, #0]
        OS_TmrCondSignal();
 8006042:	f7ff fed9 	bl	8005df8 <OS_TmrCondSignal>
        return;
 8006046:	e010      	b.n	800606a <OS_TmrLink+0x82>
        delta  -= p_tmr2->Remain;                               /* Update our delta as we traverse the list.            */
 8006048:	1a52      	subs	r2, r2, r1
        p_tmr1  = p_tmr2;
 800604a:	461c      	mov	r4, r3
        p_tmr2  = p_tmr2->NextPtr;
 800604c:	691b      	ldr	r3, [r3, #16]
    while ((p_tmr2 !=        (OS_TMR *)0) &&                    /* Find the appropriate position in the delta list.     */
 800604e:	b113      	cbz	r3, 8006056 <OS_TmrLink+0x6e>
           (delta  >= p_tmr2->Remain)) {
 8006050:	6999      	ldr	r1, [r3, #24]
    while ((p_tmr2 !=        (OS_TMR *)0) &&                    /* Find the appropriate position in the delta list.     */
 8006052:	4291      	cmp	r1, r2
 8006054:	d9f8      	bls.n	8006048 <OS_TmrLink+0x60>
    if (p_tmr2 != (OS_TMR *)0) {                                /* Our entry is not the last element in the list.       */
 8006056:	b14b      	cbz	r3, 800606c <OS_TmrLink+0x84>
        p_tmr1           = p_tmr2->PrevPtr;
 8006058:	695c      	ldr	r4, [r3, #20]
        p_tmr->Remain    = delta;                               /* Store remaining time                                 */
 800605a:	6182      	str	r2, [r0, #24]
        p_tmr->PrevPtr   = p_tmr1;
 800605c:	6144      	str	r4, [r0, #20]
        p_tmr->NextPtr   = p_tmr2;
 800605e:	6103      	str	r3, [r0, #16]
        p_tmr2->Remain  -= delta;                               /* Reduce time of next entry in the list                */
 8006060:	6999      	ldr	r1, [r3, #24]
 8006062:	1a89      	subs	r1, r1, r2
 8006064:	6199      	str	r1, [r3, #24]
        p_tmr2->PrevPtr  = p_tmr;
 8006066:	6158      	str	r0, [r3, #20]
        p_tmr1->NextPtr  = p_tmr;
 8006068:	6120      	str	r0, [r4, #16]
}
 800606a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_tmr->Remain    = delta;
 800606c:	6182      	str	r2, [r0, #24]
        p_tmr->PrevPtr   = p_tmr1;
 800606e:	6144      	str	r4, [r0, #20]
        p_tmr->NextPtr   = (OS_TMR *)0;
 8006070:	2300      	movs	r3, #0
 8006072:	6103      	str	r3, [r0, #16]
        p_tmr1->NextPtr  = p_tmr;
 8006074:	6120      	str	r0, [r4, #16]
 8006076:	e7f8      	b.n	800606a <OS_TmrLink+0x82>
 8006078:	20001aac 	.word	0x20001aac
 800607c:	20001ab0 	.word	0x20001ab0
 8006080:	20001990 	.word	0x20001990

08006084 <OS_TmrUnlink>:
{
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	4604      	mov	r4, r0
    p_tmr1                          = p_tmr->PrevPtr;
 8006088:	6943      	ldr	r3, [r0, #20]
    p_tmr2                          = p_tmr->NextPtr;
 800608a:	6905      	ldr	r5, [r0, #16]
    if (p_tmr1 == (OS_TMR *)0) {
 800608c:	b17b      	cbz	r3, 80060ae <OS_TmrUnlink+0x2a>
        OSTmrListEntries--;
 800608e:	4923      	ldr	r1, [pc, #140]	@ (800611c <OS_TmrUnlink+0x98>)
 8006090:	880a      	ldrh	r2, [r1, #0]
 8006092:	3a01      	subs	r2, #1
 8006094:	800a      	strh	r2, [r1, #0]
        p_tmr1->NextPtr             = p_tmr2;
 8006096:	611d      	str	r5, [r3, #16]
        if (p_tmr2 != (OS_TMR *)0) {
 8006098:	b125      	cbz	r5, 80060a4 <OS_TmrUnlink+0x20>
            p_tmr2->PrevPtr         = p_tmr1;
 800609a:	616b      	str	r3, [r5, #20]
            p_tmr2->Remain         += p_tmr->Remain;            /* Add back the ticks to the delta list                 */
 800609c:	69ab      	ldr	r3, [r5, #24]
 800609e:	6982      	ldr	r2, [r0, #24]
 80060a0:	4413      	add	r3, r2
 80060a2:	61ab      	str	r3, [r5, #24]
        p_tmr->PrevPtr              = (OS_TMR *)0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	6163      	str	r3, [r4, #20]
        p_tmr->NextPtr              = (OS_TMR *)0;
 80060a8:	6123      	str	r3, [r4, #16]
        p_tmr->Remain               =           0u;
 80060aa:	61a3      	str	r3, [r4, #24]
}
 80060ac:	bd38      	pop	{r3, r4, r5, pc}
        if (p_tmr2 == (OS_TMR *)0) {                            /* Remove the ONLY entry in the list?                   */
 80060ae:	b185      	cbz	r5, 80060d2 <OS_TmrUnlink+0x4e>
            OSTmrListEntries--;
 80060b0:	4a1a      	ldr	r2, [pc, #104]	@ (800611c <OS_TmrUnlink+0x98>)
 80060b2:	8813      	ldrh	r3, [r2, #0]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	8013      	strh	r3, [r2, #0]
            elapsed                 = time - OSTmrTaskTickBase;
 80060b8:	4b19      	ldr	r3, [pc, #100]	@ (8006120 <OS_TmrUnlink+0x9c>)
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	1a8a      	subs	r2, r1, r2
            p_tmr2->PrevPtr         = (OS_TMR *)0;
 80060be:	2300      	movs	r3, #0
 80060c0:	616b      	str	r3, [r5, #20]
            p_tmr2->Remain         += p_tmr->Remain;            /* Add back the ticks to the delta                      */
 80060c2:	69ab      	ldr	r3, [r5, #24]
 80060c4:	6980      	ldr	r0, [r0, #24]
 80060c6:	4403      	add	r3, r0
 80060c8:	61ab      	str	r3, [r5, #24]
            OSTmrListPtr            = p_tmr2;
 80060ca:	4b16      	ldr	r3, [pc, #88]	@ (8006124 <OS_TmrUnlink+0xa0>)
 80060cc:	601d      	str	r5, [r3, #0]
    p_tmr2                          = p_tmr->NextPtr;
 80060ce:	462b      	mov	r3, r5
            while ((elapsed >           0u) &&
 80060d0:	e00d      	b.n	80060ee <OS_TmrUnlink+0x6a>
            OSTmrListPtr            = (OS_TMR *)0;
 80060d2:	4a14      	ldr	r2, [pc, #80]	@ (8006124 <OS_TmrUnlink+0xa0>)
 80060d4:	6013      	str	r3, [r2, #0]
            OSTmrListEntries        = 0u;
 80060d6:	4a11      	ldr	r2, [pc, #68]	@ (800611c <OS_TmrUnlink+0x98>)
 80060d8:	8013      	strh	r3, [r2, #0]
            p_tmr->Remain           = 0u;
 80060da:	6183      	str	r3, [r0, #24]
            OSTmrTaskTickBase       = time;
 80060dc:	4b10      	ldr	r3, [pc, #64]	@ (8006120 <OS_TmrUnlink+0x9c>)
 80060de:	6019      	str	r1, [r3, #0]
            OS_TmrCondSignal();
 80060e0:	f7ff fe8a 	bl	8005df8 <OS_TmrCondSignal>
 80060e4:	e7e2      	b.n	80060ac <OS_TmrUnlink+0x28>
                    p_tmr2->Remain -= elapsed;
 80060e6:	1a80      	subs	r0, r0, r2
 80060e8:	6198      	str	r0, [r3, #24]
                    elapsed         = 0u;
 80060ea:	2200      	movs	r2, #0
                p_tmr2              = p_tmr1->NextPtr;
 80060ec:	691b      	ldr	r3, [r3, #16]
            while ((elapsed >           0u) &&
 80060ee:	b13a      	cbz	r2, 8006100 <OS_TmrUnlink+0x7c>
 80060f0:	b133      	cbz	r3, 8006100 <OS_TmrUnlink+0x7c>
                if (elapsed > p_tmr2->Remain) {
 80060f2:	6998      	ldr	r0, [r3, #24]
 80060f4:	4290      	cmp	r0, r2
 80060f6:	d2f6      	bcs.n	80060e6 <OS_TmrUnlink+0x62>
                    elapsed        -= p_tmr2->Remain;
 80060f8:	1a12      	subs	r2, r2, r0
                    p_tmr2->Remain  = 0u;
 80060fa:	2000      	movs	r0, #0
 80060fc:	6198      	str	r0, [r3, #24]
 80060fe:	e7f5      	b.n	80060ec <OS_TmrUnlink+0x68>
            if ((OSTmrListPtr->Remain != p_tmr->Remain) ||      /* Reload if new head has a different delay         ... */
 8006100:	69ab      	ldr	r3, [r5, #24]
 8006102:	69a2      	ldr	r2, [r4, #24]
 8006104:	4293      	cmp	r3, r2
 8006106:	d100      	bne.n	800610a <OS_TmrUnlink+0x86>
 8006108:	b91b      	cbnz	r3, 8006112 <OS_TmrUnlink+0x8e>
                OSTmrTaskTickBase   = time;
 800610a:	4b05      	ldr	r3, [pc, #20]	@ (8006120 <OS_TmrUnlink+0x9c>)
 800610c:	6019      	str	r1, [r3, #0]
                OS_TmrCondSignal();
 800610e:	f7ff fe73 	bl	8005df8 <OS_TmrCondSignal>
            p_tmr->NextPtr          = (OS_TMR *)0;
 8006112:	2300      	movs	r3, #0
 8006114:	6123      	str	r3, [r4, #16]
            p_tmr->Remain           =           0u;
 8006116:	61a3      	str	r3, [r4, #24]
 8006118:	e7c8      	b.n	80060ac <OS_TmrUnlink+0x28>
 800611a:	bf00      	nop
 800611c:	20001ab0 	.word	0x20001ab0
 8006120:	20001990 	.word	0x20001990
 8006124:	20001aac 	.word	0x20001aac

08006128 <OS_TmrTask>:
{
 8006128:	b510      	push	{r4, lr}
    OS_TmrLock();
 800612a:	f7ff fe3d 	bl	8005da8 <OS_TmrLock>
 800612e:	e005      	b.n	800613c <OS_TmrTask+0x14>
            timeout                = 0u;
 8006130:	2000      	movs	r0, #0
        OS_TmrCondWait(timeout);                                /* Suspend the timer task until it needs to process ... */
 8006132:	f7ff fe7d 	bl	8005e30 <OS_TmrCondWait>
        if (OSTmrListPtr == (OS_TMR *)0) {                      /* Suppresses static analyzer warnings.                 */
 8006136:	4b2a      	ldr	r3, [pc, #168]	@ (80061e0 <OS_TmrTask+0xb8>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	b92b      	cbnz	r3, 8006148 <OS_TmrTask+0x20>
        if (OSTmrListPtr == (OS_TMR *)0) {
 800613c:	4b28      	ldr	r3, [pc, #160]	@ (80061e0 <OS_TmrTask+0xb8>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d0f5      	beq.n	8006130 <OS_TmrTask+0x8>
            timeout                = OSTmrListPtr->Remain;
 8006144:	6998      	ldr	r0, [r3, #24]
 8006146:	e7f4      	b.n	8006132 <OS_TmrTask+0xa>
        CPU_CRITICAL_ENTER();
 8006148:	2040      	movs	r0, #64	@ 0x40
 800614a:	f7fa f841 	bl	80001d0 <CPU_SR_Save>
        time                       = OSTickCtr;
 800614e:	4b25      	ldr	r3, [pc, #148]	@ (80061e4 <OS_TmrTask+0xbc>)
 8006150:	681c      	ldr	r4, [r3, #0]
        CPU_CRITICAL_EXIT();
 8006152:	f7fa f84b 	bl	80001ec <CPU_SR_Restore>
        elapsed                    = time - OSTmrTaskTickBase;
 8006156:	4b24      	ldr	r3, [pc, #144]	@ (80061e8 <OS_TmrTask+0xc0>)
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	1aa2      	subs	r2, r4, r2
        OSTmrTaskTickBase          = time;
 800615c:	601c      	str	r4, [r3, #0]
        p_tmr = OSTmrListPtr;
 800615e:	4b20      	ldr	r3, [pc, #128]	@ (80061e0 <OS_TmrTask+0xb8>)
 8006160:	681c      	ldr	r4, [r3, #0]
 8006162:	4623      	mov	r3, r4
        while ((elapsed !=          0u) &&
 8006164:	e003      	b.n	800616e <OS_TmrTask+0x46>
                p_tmr->Remain     -= elapsed;
 8006166:	1a89      	subs	r1, r1, r2
 8006168:	6199      	str	r1, [r3, #24]
                elapsed            = 0u;
 800616a:	2200      	movs	r2, #0
            p_tmr                  = p_tmr->NextPtr;
 800616c:	691b      	ldr	r3, [r3, #16]
        while ((elapsed !=          0u) &&
 800616e:	b16a      	cbz	r2, 800618c <OS_TmrTask+0x64>
 8006170:	b163      	cbz	r3, 800618c <OS_TmrTask+0x64>
            if (elapsed > p_tmr->Remain) {
 8006172:	6999      	ldr	r1, [r3, #24]
 8006174:	4291      	cmp	r1, r2
 8006176:	d2f6      	bcs.n	8006166 <OS_TmrTask+0x3e>
                elapsed           -= p_tmr->Remain;
 8006178:	1a52      	subs	r2, r2, r1
                p_tmr->Remain      = 0u;
 800617a:	2100      	movs	r1, #0
 800617c:	6199      	str	r1, [r3, #24]
 800617e:	e7f5      	b.n	800616c <OS_TmrTask+0x44>
            if (p_tmr->State == OS_TMR_STATE_TIMEOUT) {
 8006180:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8006184:	2b04      	cmp	r3, #4
 8006186:	d010      	beq.n	80061aa <OS_TmrTask+0x82>
            p_tmr                  = OSTmrListPtr;
 8006188:	4b15      	ldr	r3, [pc, #84]	@ (80061e0 <OS_TmrTask+0xb8>)
 800618a:	681c      	ldr	r4, [r3, #0]
        while ((p_tmr         != (OS_TMR *)0) &&
 800618c:	2c00      	cmp	r4, #0
 800618e:	d0d5      	beq.n	800613c <OS_TmrTask+0x14>
               (p_tmr->Remain ==          0u)) {
 8006190:	69a3      	ldr	r3, [r4, #24]
        while ((p_tmr         != (OS_TMR *)0) &&
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1d2      	bne.n	800613c <OS_TmrTask+0x14>
            p_tmr->State           = OS_TMR_STATE_TIMEOUT;
 8006196:	2304      	movs	r3, #4
 8006198:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
            p_fnct                 = p_tmr->CallbackPtr;
 800619c:	68a3      	ldr	r3, [r4, #8]
            if (p_fnct != (OS_TMR_CALLBACK_PTR)0u) {
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0ee      	beq.n	8006180 <OS_TmrTask+0x58>
                (*p_fnct)(p_tmr, p_tmr->CallbackPtrArg);
 80061a2:	68e1      	ldr	r1, [r4, #12]
 80061a4:	4620      	mov	r0, r4
 80061a6:	4798      	blx	r3
 80061a8:	e7ea      	b.n	8006180 <OS_TmrTask+0x58>
                OS_TmrUnlink(p_tmr, OSTmrTaskTickBase);
 80061aa:	4b0f      	ldr	r3, [pc, #60]	@ (80061e8 <OS_TmrTask+0xc0>)
 80061ac:	6819      	ldr	r1, [r3, #0]
 80061ae:	4620      	mov	r0, r4
 80061b0:	f7ff ff68 	bl	8006084 <OS_TmrUnlink>
                if (p_tmr->Opt == OS_OPT_TMR_PERIODIC) {
 80061b4:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d007      	beq.n	80061ca <OS_TmrTask+0xa2>
                    p_tmr->PrevPtr = (OS_TMR *)0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	6163      	str	r3, [r4, #20]
                    p_tmr->NextPtr = (OS_TMR *)0;
 80061be:	6123      	str	r3, [r4, #16]
                    p_tmr->Remain  = 0u;
 80061c0:	61a3      	str	r3, [r4, #24]
                    p_tmr->State   = OS_TMR_STATE_COMPLETED;
 80061c2:	2303      	movs	r3, #3
 80061c4:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
 80061c8:	e7de      	b.n	8006188 <OS_TmrTask+0x60>
                    p_tmr->State   = OS_TMR_STATE_RUNNING;
 80061ca:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
                    p_tmr->Remain  = p_tmr->Period;
 80061ce:	6a23      	ldr	r3, [r4, #32]
 80061d0:	61a3      	str	r3, [r4, #24]
                    OS_TmrLink(p_tmr, OSTmrTaskTickBase);
 80061d2:	4b05      	ldr	r3, [pc, #20]	@ (80061e8 <OS_TmrTask+0xc0>)
 80061d4:	6819      	ldr	r1, [r3, #0]
 80061d6:	4620      	mov	r0, r4
 80061d8:	f7ff ff06 	bl	8005fe8 <OS_TmrLink>
 80061dc:	e7d4      	b.n	8006188 <OS_TmrTask+0x60>
 80061de:	bf00      	nop
 80061e0:	20001aac 	.word	0x20001aac
 80061e4:	20001ac0 	.word	0x20001ac0
 80061e8:	20001990 	.word	0x20001990

080061ec <memset>:
 80061ec:	4402      	add	r2, r0
 80061ee:	4603      	mov	r3, r0
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d100      	bne.n	80061f6 <memset+0xa>
 80061f4:	4770      	bx	lr
 80061f6:	f803 1b01 	strb.w	r1, [r3], #1
 80061fa:	e7f9      	b.n	80061f0 <memset+0x4>

080061fc <__libc_init_array>:
 80061fc:	b570      	push	{r4, r5, r6, lr}
 80061fe:	4d0d      	ldr	r5, [pc, #52]	@ (8006234 <__libc_init_array+0x38>)
 8006200:	4c0d      	ldr	r4, [pc, #52]	@ (8006238 <__libc_init_array+0x3c>)
 8006202:	1b64      	subs	r4, r4, r5
 8006204:	10a4      	asrs	r4, r4, #2
 8006206:	2600      	movs	r6, #0
 8006208:	42a6      	cmp	r6, r4
 800620a:	d109      	bne.n	8006220 <__libc_init_array+0x24>
 800620c:	4d0b      	ldr	r5, [pc, #44]	@ (800623c <__libc_init_array+0x40>)
 800620e:	4c0c      	ldr	r4, [pc, #48]	@ (8006240 <__libc_init_array+0x44>)
 8006210:	f000 f818 	bl	8006244 <_init>
 8006214:	1b64      	subs	r4, r4, r5
 8006216:	10a4      	asrs	r4, r4, #2
 8006218:	2600      	movs	r6, #0
 800621a:	42a6      	cmp	r6, r4
 800621c:	d105      	bne.n	800622a <__libc_init_array+0x2e>
 800621e:	bd70      	pop	{r4, r5, r6, pc}
 8006220:	f855 3b04 	ldr.w	r3, [r5], #4
 8006224:	4798      	blx	r3
 8006226:	3601      	adds	r6, #1
 8006228:	e7ee      	b.n	8006208 <__libc_init_array+0xc>
 800622a:	f855 3b04 	ldr.w	r3, [r5], #4
 800622e:	4798      	blx	r3
 8006230:	3601      	adds	r6, #1
 8006232:	e7f2      	b.n	800621a <__libc_init_array+0x1e>
 8006234:	08006524 	.word	0x08006524
 8006238:	08006524 	.word	0x08006524
 800623c:	08006524 	.word	0x08006524
 8006240:	08006528 	.word	0x08006528

08006244 <_init>:
 8006244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006246:	bf00      	nop
 8006248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624a:	bc08      	pop	{r3}
 800624c:	469e      	mov	lr, r3
 800624e:	4770      	bx	lr

08006250 <_fini>:
 8006250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006252:	bf00      	nop
 8006254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006256:	bc08      	pop	{r3}
 8006258:	469e      	mov	lr, r3
 800625a:	4770      	bx	lr
