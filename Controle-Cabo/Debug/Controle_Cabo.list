
Controle_Cabo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083bc  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08008568  08008568  00009568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800884c  0800884c  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000008  0800884c  0800884c  0000984c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008854  08008854  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008854  08008854  00009854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008858  08008858  00009858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800885c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a00c  2**0
                  CONTENTS
 10 .bss          00001f18  2000000c  2000000c  0000a00c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001f24  20001f24  0000a00c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001caec  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004126  00000000  00000000  00026b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001300  00000000  00000000  0002ac50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e38  00000000  00000000  0002bf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000264ef  00000000  00000000  0002cd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e4e  00000000  00000000  00053277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7150  00000000  00000000  0006c0c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00163215  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a74  00000000  00000000  00163258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000c6  00000000  00000000  00167ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008550 	.word	0x08008550

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08008550 	.word	0x08008550

080001ec <CPU_IntDis>:
@               void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 80001ec:	b672      	cpsid	i
        BX      LR
 80001ee:	4770      	bx	lr

080001f0 <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 80001f0:	b662      	cpsie	i
        BX      LR
 80001f2:	4770      	bx	lr

080001f4 <CPU_SR_Save>:
@                       CPSIE i
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 80001f4:	b672      	cpsid	i
        PUSH   {R1}
 80001f6:	b402      	push	{r1}
        MRS     R1, BASEPRI
 80001f8:	f3ef 8111 	mrs	r1, BASEPRI
        MSR     BASEPRI, R0
 80001fc:	f380 8811 	msr	BASEPRI, r0
        DSB
 8000200:	f3bf 8f4f 	dsb	sy
        ISB
 8000204:	f3bf 8f6f 	isb	sy
        MOV     R0, R1
 8000208:	4608      	mov	r0, r1
        POP    {R1}
 800020a:	bc02      	pop	{r1}
        CPSIE   I
 800020c:	b662      	cpsie	i
        BX      LR
 800020e:	4770      	bx	lr

08000210 <CPU_SR_Restore>:


.thumb_func
CPU_SR_Restore:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 8000210:	b672      	cpsid	i
        MSR     BASEPRI, R0
 8000212:	f380 8811 	msr	BASEPRI, r0
        DSB
 8000216:	f3bf 8f4f 	dsb	sy
        ISB
 800021a:	f3bf 8f6f 	isb	sy
        CPSIE   I
 800021e:	b662      	cpsie	i
        BX      LR
 8000220:	4770      	bx	lr

08000222 <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 8000222:	bf30      	wfi
        BX      LR
 8000224:	4770      	bx	lr

08000226 <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 8000226:	bf20      	wfe
        BX      LR
 8000228:	4770      	bx	lr

0800022a <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 800022a:	fab0 f080 	clz	r0, r0
        BX      LR
 800022e:	4770      	bx	lr

08000230 <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 8000230:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 8000234:	fab0 f080 	clz	r0, r0
        BX      LR
 8000238:	4770      	bx	lr

0800023a <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 800023a:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 800023e:	4770      	bx	lr

08000240 <OSStartHighRdy>:
@              h) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000240:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 8000242:	f64e 5022 	movw	r0, #60706	@ 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 8000246:	f2ce 0000 	movt	r0, #57344	@ 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 800024a:	f240 01ff 	movw	r1, #255	@ 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 800024e:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 8000252:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 8000254:	2000      	movs	r0, #0
    MSR     PSP, R0
 8000256:	f380 8809 	msr	PSP, r0

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 800025a:	f241 00b0 	movw	r0, #4272	@ 0x10b0
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 800025e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    LDR     R1, [R0]
 8000262:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 8000264:	f381 8808 	msr	MSP, r1

    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 8000268:	f004 fbf0 	bl	8004a4c <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 800026c:	f641 10da 	movw	r0, #6618	@ 0x19da
    MOVT    R0, #:upper16:OSPrioCur
 8000270:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 8000274:	f641 11db 	movw	r1, #6619	@ 0x19db
    MOVT    R1, #:upper16:OSPrioHighRdy
 8000278:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 800027c:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 800027e:	7002      	strb	r2, [r0, #0]

    MOVW    R0, #:lower16:OSTCBCurPtr                           @ OSTCBCurPtr = OSTCBHighRdyPtr;
 8000280:	f641 701c 	movw	r0, #7964	@ 0x1f1c
    MOVT    R0, #:upper16:OSTCBCurPtr
 8000284:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdyPtr
 8000288:	f641 7120 	movw	r1, #7968	@ 0x1f20
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 800028c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 8000290:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 8000292:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 8000294:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 8000296:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 800029a:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 800029e:	f040 0002 	orr.w	r0, r0, #2
    BIC     R0, R0, #4                                          @ Clear FPCA bit to indicate FPU is not in use
 80002a2:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, R0
 80002a6:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 80002aa:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11, LR}                                  @ Restore r4-11, lr from new process stack
 80002ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 80002b2:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 80002b4:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 80002b8:	bc06      	pop	{r1, r2}
    CPSIE    I
 80002ba:	b662      	cpsie	i
    BX       R1
 80002bc:	4708      	bx	r1

080002be <OSCtxSw>:

.thumb_func
OSCtxSw:
.thumb_func
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80002be:	4825      	ldr	r0, [pc, #148]	@ (8000354 <OS_CPU_PendSVHandler+0x8c>)
    LDR     R1, =NVIC_PENDSVSET
 80002c0:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
    STR     R1, [R0]
 80002c4:	6001      	str	r1, [r0, #0]
    BX      LR
 80002c6:	4770      	bx	lr

080002c8 <OS_CPU_PendSVHandler>:
@                  CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 80002c8:	b672      	cpsid	i
    MOVW    R2, #:lower16:OS_KA_BASEPRI_Boundary                @ Set BASEPRI priority level required for exception preemption
 80002ca:	f241 02b4 	movw	r2, #4276	@ 0x10b4
    MOVT    R2, #:upper16:OS_KA_BASEPRI_Boundary
 80002ce:	f2c2 0200 	movt	r2, #8192	@ 0x2000
    LDR     R1, [R2]
 80002d2:	6811      	ldr	r1, [r2, #0]
    MSR     BASEPRI, R1
 80002d4:	f381 8811 	msr	BASEPRI, r1
    DSB
 80002d8:	f3bf 8f4f 	dsb	sy
    ISB
 80002dc:	f3bf 8f6f 	isb	sy
    CPSIE   I
 80002e0:	b662      	cpsie	i

    MRS     R0, PSP                                             @ PSP is process stack pointer
 80002e2:	f3ef 8009 	mrs	r0, PSP
#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
                                                                @ Push high vfp registers if the task is using the FPU context
    TST       R14, #0x10
 80002e6:	f01e 0f10 	tst.w	lr, #16
    IT        EQ
 80002ea:	bf08      	it	eq
    VSTMDBEQ  R0!, {S16-S31}
 80002ec:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
#endif

    STMFD   R0!, {R4-R11, R14}                                  @ Save remaining regs r4-11, R14 on process stack
 80002f0:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    MOVW    R5, #:lower16:OSTCBCurPtr                           @ OSTCBCurPtr->StkPtr = SP;
 80002f4:	f641 751c 	movw	r5, #7964	@ 0x1f1c
    MOVT    R5, #:upper16:OSTCBCurPtr
 80002f8:	f2c2 0500 	movt	r5, #8192	@ 0x2000
    LDR     R1, [R5]
 80002fc:	6829      	ldr	r1, [r5, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 80002fe:	6008      	str	r0, [r1, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 8000300:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 8000302:	f004 fba3 	bl	8004a4c <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000306:	f641 10da 	movw	r0, #6618	@ 0x19da
    MOVT    R0, #:upper16:OSPrioCur
 800030a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 800030e:	f641 11db 	movw	r1, #6619	@ 0x19db
    MOVT    R1, #:upper16:OSPrioHighRdy
 8000312:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 8000316:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000318:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdyPtr                       @ OSTCBCurPtr = OSTCBHighRdyPtr;
 800031a:	f641 7120 	movw	r1, #7968	@ 0x1f20
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 800031e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 8000322:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 8000324:	602a      	str	r2, [r5, #0]

    ORR     LR,  R4, #0x04                                      @ Ensure exception return uses process stack
 8000326:	f044 0e04 	orr.w	lr, r4, #4
    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 800032a:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11, R14}                                  @ Restore r4-11, R14 from new process stack
 800032c:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
                                                                @ Pop the high vfp registers if the next task is using the FPU context
    TST       R14, #0x10
 8000330:	f01e 0f10 	tst.w	lr, #16
    IT        EQ
 8000334:	bf08      	it	eq
    VLDMIAEQ  R0!, {S16-S31}
 8000336:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
#endif

    MSR     PSP, R0                                             @ Load PSP with new process SP
 800033a:	f380 8809 	msr	PSP, r0

    MOV     R2, #0                                              @ Restore BASEPRI priority level to 0
 800033e:	f04f 0200 	mov.w	r2, #0
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 8000342:	b672      	cpsid	i
    MSR     BASEPRI, R2
 8000344:	f382 8811 	msr	BASEPRI, r2
    DSB
 8000348:	f3bf 8f4f 	dsb	sy
    ISB
 800034c:	f3bf 8f6f 	isb	sy
    CPSIE   I
 8000350:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 8000352:	4770      	bx	lr
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000354:	e000ed04 	.word	0xe000ed04

08000358 <__aeabi_uldivmod>:
 8000358:	b953      	cbnz	r3, 8000370 <__aeabi_uldivmod+0x18>
 800035a:	b94a      	cbnz	r2, 8000370 <__aeabi_uldivmod+0x18>
 800035c:	2900      	cmp	r1, #0
 800035e:	bf08      	it	eq
 8000360:	2800      	cmpeq	r0, #0
 8000362:	bf1c      	itt	ne
 8000364:	f04f 31ff 	movne.w	r1, #4294967295
 8000368:	f04f 30ff 	movne.w	r0, #4294967295
 800036c:	f000 b96a 	b.w	8000644 <__aeabi_idiv0>
 8000370:	f1ad 0c08 	sub.w	ip, sp, #8
 8000374:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000378:	f000 f806 	bl	8000388 <__udivmoddi4>
 800037c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000380:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000384:	b004      	add	sp, #16
 8000386:	4770      	bx	lr

08000388 <__udivmoddi4>:
 8000388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800038c:	9d08      	ldr	r5, [sp, #32]
 800038e:	460c      	mov	r4, r1
 8000390:	2b00      	cmp	r3, #0
 8000392:	d14e      	bne.n	8000432 <__udivmoddi4+0xaa>
 8000394:	4694      	mov	ip, r2
 8000396:	458c      	cmp	ip, r1
 8000398:	4686      	mov	lr, r0
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	d962      	bls.n	8000466 <__udivmoddi4+0xde>
 80003a0:	b14a      	cbz	r2, 80003b6 <__udivmoddi4+0x2e>
 80003a2:	f1c2 0320 	rsb	r3, r2, #32
 80003a6:	4091      	lsls	r1, r2
 80003a8:	fa20 f303 	lsr.w	r3, r0, r3
 80003ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b0:	4319      	orrs	r1, r3
 80003b2:	fa00 fe02 	lsl.w	lr, r0, r2
 80003b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ba:	fa1f f68c 	uxth.w	r6, ip
 80003be:	fbb1 f4f7 	udiv	r4, r1, r7
 80003c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003c6:	fb07 1114 	mls	r1, r7, r4, r1
 80003ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ce:	fb04 f106 	mul.w	r1, r4, r6
 80003d2:	4299      	cmp	r1, r3
 80003d4:	d90a      	bls.n	80003ec <__udivmoddi4+0x64>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f104 30ff 	add.w	r0, r4, #4294967295
 80003de:	f080 8112 	bcs.w	8000606 <__udivmoddi4+0x27e>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 810f 	bls.w	8000606 <__udivmoddi4+0x27e>
 80003e8:	3c02      	subs	r4, #2
 80003ea:	4463      	add	r3, ip
 80003ec:	1a59      	subs	r1, r3, r1
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f6:	fb07 1110 	mls	r1, r7, r0, r1
 80003fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fe:	fb00 f606 	mul.w	r6, r0, r6
 8000402:	429e      	cmp	r6, r3
 8000404:	d90a      	bls.n	800041c <__udivmoddi4+0x94>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 31ff 	add.w	r1, r0, #4294967295
 800040e:	f080 80fc 	bcs.w	800060a <__udivmoddi4+0x282>
 8000412:	429e      	cmp	r6, r3
 8000414:	f240 80f9 	bls.w	800060a <__udivmoddi4+0x282>
 8000418:	4463      	add	r3, ip
 800041a:	3802      	subs	r0, #2
 800041c:	1b9b      	subs	r3, r3, r6
 800041e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000422:	2100      	movs	r1, #0
 8000424:	b11d      	cbz	r5, 800042e <__udivmoddi4+0xa6>
 8000426:	40d3      	lsrs	r3, r2
 8000428:	2200      	movs	r2, #0
 800042a:	e9c5 3200 	strd	r3, r2, [r5]
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	428b      	cmp	r3, r1
 8000434:	d905      	bls.n	8000442 <__udivmoddi4+0xba>
 8000436:	b10d      	cbz	r5, 800043c <__udivmoddi4+0xb4>
 8000438:	e9c5 0100 	strd	r0, r1, [r5]
 800043c:	2100      	movs	r1, #0
 800043e:	4608      	mov	r0, r1
 8000440:	e7f5      	b.n	800042e <__udivmoddi4+0xa6>
 8000442:	fab3 f183 	clz	r1, r3
 8000446:	2900      	cmp	r1, #0
 8000448:	d146      	bne.n	80004d8 <__udivmoddi4+0x150>
 800044a:	42a3      	cmp	r3, r4
 800044c:	d302      	bcc.n	8000454 <__udivmoddi4+0xcc>
 800044e:	4290      	cmp	r0, r2
 8000450:	f0c0 80f0 	bcc.w	8000634 <__udivmoddi4+0x2ac>
 8000454:	1a86      	subs	r6, r0, r2
 8000456:	eb64 0303 	sbc.w	r3, r4, r3
 800045a:	2001      	movs	r0, #1
 800045c:	2d00      	cmp	r5, #0
 800045e:	d0e6      	beq.n	800042e <__udivmoddi4+0xa6>
 8000460:	e9c5 6300 	strd	r6, r3, [r5]
 8000464:	e7e3      	b.n	800042e <__udivmoddi4+0xa6>
 8000466:	2a00      	cmp	r2, #0
 8000468:	f040 8090 	bne.w	800058c <__udivmoddi4+0x204>
 800046c:	eba1 040c 	sub.w	r4, r1, ip
 8000470:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000474:	fa1f f78c 	uxth.w	r7, ip
 8000478:	2101      	movs	r1, #1
 800047a:	fbb4 f6f8 	udiv	r6, r4, r8
 800047e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000482:	fb08 4416 	mls	r4, r8, r6, r4
 8000486:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800048a:	fb07 f006 	mul.w	r0, r7, r6
 800048e:	4298      	cmp	r0, r3
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x11c>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f106 34ff 	add.w	r4, r6, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0x11a>
 800049c:	4298      	cmp	r0, r3
 800049e:	f200 80cd 	bhi.w	800063c <__udivmoddi4+0x2b4>
 80004a2:	4626      	mov	r6, r4
 80004a4:	1a1c      	subs	r4, r3, r0
 80004a6:	fa1f f38e 	uxth.w	r3, lr
 80004aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80004ae:	fb08 4410 	mls	r4, r8, r0, r4
 80004b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b6:	fb00 f707 	mul.w	r7, r0, r7
 80004ba:	429f      	cmp	r7, r3
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x148>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c6:	d202      	bcs.n	80004ce <__udivmoddi4+0x146>
 80004c8:	429f      	cmp	r7, r3
 80004ca:	f200 80b0 	bhi.w	800062e <__udivmoddi4+0x2a6>
 80004ce:	4620      	mov	r0, r4
 80004d0:	1bdb      	subs	r3, r3, r7
 80004d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004d6:	e7a5      	b.n	8000424 <__udivmoddi4+0x9c>
 80004d8:	f1c1 0620 	rsb	r6, r1, #32
 80004dc:	408b      	lsls	r3, r1
 80004de:	fa22 f706 	lsr.w	r7, r2, r6
 80004e2:	431f      	orrs	r7, r3
 80004e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80004e8:	fa04 f301 	lsl.w	r3, r4, r1
 80004ec:	ea43 030c 	orr.w	r3, r3, ip
 80004f0:	40f4      	lsrs	r4, r6
 80004f2:	fa00 f801 	lsl.w	r8, r0, r1
 80004f6:	0c38      	lsrs	r0, r7, #16
 80004f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004fc:	fbb4 fef0 	udiv	lr, r4, r0
 8000500:	fa1f fc87 	uxth.w	ip, r7
 8000504:	fb00 441e 	mls	r4, r0, lr, r4
 8000508:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800050c:	fb0e f90c 	mul.w	r9, lr, ip
 8000510:	45a1      	cmp	r9, r4
 8000512:	fa02 f201 	lsl.w	r2, r2, r1
 8000516:	d90a      	bls.n	800052e <__udivmoddi4+0x1a6>
 8000518:	193c      	adds	r4, r7, r4
 800051a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800051e:	f080 8084 	bcs.w	800062a <__udivmoddi4+0x2a2>
 8000522:	45a1      	cmp	r9, r4
 8000524:	f240 8081 	bls.w	800062a <__udivmoddi4+0x2a2>
 8000528:	f1ae 0e02 	sub.w	lr, lr, #2
 800052c:	443c      	add	r4, r7
 800052e:	eba4 0409 	sub.w	r4, r4, r9
 8000532:	fa1f f983 	uxth.w	r9, r3
 8000536:	fbb4 f3f0 	udiv	r3, r4, r0
 800053a:	fb00 4413 	mls	r4, r0, r3, r4
 800053e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000542:	fb03 fc0c 	mul.w	ip, r3, ip
 8000546:	45a4      	cmp	ip, r4
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x1d2>
 800054a:	193c      	adds	r4, r7, r4
 800054c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000550:	d267      	bcs.n	8000622 <__udivmoddi4+0x29a>
 8000552:	45a4      	cmp	ip, r4
 8000554:	d965      	bls.n	8000622 <__udivmoddi4+0x29a>
 8000556:	3b02      	subs	r3, #2
 8000558:	443c      	add	r4, r7
 800055a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800055e:	fba0 9302 	umull	r9, r3, r0, r2
 8000562:	eba4 040c 	sub.w	r4, r4, ip
 8000566:	429c      	cmp	r4, r3
 8000568:	46ce      	mov	lr, r9
 800056a:	469c      	mov	ip, r3
 800056c:	d351      	bcc.n	8000612 <__udivmoddi4+0x28a>
 800056e:	d04e      	beq.n	800060e <__udivmoddi4+0x286>
 8000570:	b155      	cbz	r5, 8000588 <__udivmoddi4+0x200>
 8000572:	ebb8 030e 	subs.w	r3, r8, lr
 8000576:	eb64 040c 	sbc.w	r4, r4, ip
 800057a:	fa04 f606 	lsl.w	r6, r4, r6
 800057e:	40cb      	lsrs	r3, r1
 8000580:	431e      	orrs	r6, r3
 8000582:	40cc      	lsrs	r4, r1
 8000584:	e9c5 6400 	strd	r6, r4, [r5]
 8000588:	2100      	movs	r1, #0
 800058a:	e750      	b.n	800042e <__udivmoddi4+0xa6>
 800058c:	f1c2 0320 	rsb	r3, r2, #32
 8000590:	fa20 f103 	lsr.w	r1, r0, r3
 8000594:	fa0c fc02 	lsl.w	ip, ip, r2
 8000598:	fa24 f303 	lsr.w	r3, r4, r3
 800059c:	4094      	lsls	r4, r2
 800059e:	430c      	orrs	r4, r1
 80005a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80005a8:	fa1f f78c 	uxth.w	r7, ip
 80005ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80005b0:	fb08 3110 	mls	r1, r8, r0, r3
 80005b4:	0c23      	lsrs	r3, r4, #16
 80005b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005ba:	fb00 f107 	mul.w	r1, r0, r7
 80005be:	4299      	cmp	r1, r3
 80005c0:	d908      	bls.n	80005d4 <__udivmoddi4+0x24c>
 80005c2:	eb1c 0303 	adds.w	r3, ip, r3
 80005c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80005ca:	d22c      	bcs.n	8000626 <__udivmoddi4+0x29e>
 80005cc:	4299      	cmp	r1, r3
 80005ce:	d92a      	bls.n	8000626 <__udivmoddi4+0x29e>
 80005d0:	3802      	subs	r0, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	1a5b      	subs	r3, r3, r1
 80005d6:	b2a4      	uxth	r4, r4
 80005d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80005dc:	fb08 3311 	mls	r3, r8, r1, r3
 80005e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005e4:	fb01 f307 	mul.w	r3, r1, r7
 80005e8:	42a3      	cmp	r3, r4
 80005ea:	d908      	bls.n	80005fe <__udivmoddi4+0x276>
 80005ec:	eb1c 0404 	adds.w	r4, ip, r4
 80005f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80005f4:	d213      	bcs.n	800061e <__udivmoddi4+0x296>
 80005f6:	42a3      	cmp	r3, r4
 80005f8:	d911      	bls.n	800061e <__udivmoddi4+0x296>
 80005fa:	3902      	subs	r1, #2
 80005fc:	4464      	add	r4, ip
 80005fe:	1ae4      	subs	r4, r4, r3
 8000600:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000604:	e739      	b.n	800047a <__udivmoddi4+0xf2>
 8000606:	4604      	mov	r4, r0
 8000608:	e6f0      	b.n	80003ec <__udivmoddi4+0x64>
 800060a:	4608      	mov	r0, r1
 800060c:	e706      	b.n	800041c <__udivmoddi4+0x94>
 800060e:	45c8      	cmp	r8, r9
 8000610:	d2ae      	bcs.n	8000570 <__udivmoddi4+0x1e8>
 8000612:	ebb9 0e02 	subs.w	lr, r9, r2
 8000616:	eb63 0c07 	sbc.w	ip, r3, r7
 800061a:	3801      	subs	r0, #1
 800061c:	e7a8      	b.n	8000570 <__udivmoddi4+0x1e8>
 800061e:	4631      	mov	r1, r6
 8000620:	e7ed      	b.n	80005fe <__udivmoddi4+0x276>
 8000622:	4603      	mov	r3, r0
 8000624:	e799      	b.n	800055a <__udivmoddi4+0x1d2>
 8000626:	4630      	mov	r0, r6
 8000628:	e7d4      	b.n	80005d4 <__udivmoddi4+0x24c>
 800062a:	46d6      	mov	lr, sl
 800062c:	e77f      	b.n	800052e <__udivmoddi4+0x1a6>
 800062e:	4463      	add	r3, ip
 8000630:	3802      	subs	r0, #2
 8000632:	e74d      	b.n	80004d0 <__udivmoddi4+0x148>
 8000634:	4606      	mov	r6, r0
 8000636:	4623      	mov	r3, r4
 8000638:	4608      	mov	r0, r1
 800063a:	e70f      	b.n	800045c <__udivmoddi4+0xd4>
 800063c:	3e02      	subs	r6, #2
 800063e:	4463      	add	r3, ip
 8000640:	e730      	b.n	80004a4 <__udivmoddi4+0x11c>
 8000642:	bf00      	nop

08000644 <__aeabi_idiv0>:
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <HAL_ADC_ConvCpltCallback>:

/* Functions prototypes ------------------------------------------------------*/

/* Interrupções --------------------------------------------------------------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC2) {
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a06      	ldr	r2, [pc, #24]	@ (8000670 <HAL_ADC_ConvCpltCallback+0x28>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d106      	bne.n	8000668 <HAL_ADC_ConvCpltCallback+0x20>
		OS_ERR err;

		OSFlagPost(
 800065a:	f107 030e 	add.w	r3, r7, #14
 800065e:	2200      	movs	r2, #0
 8000660:	2101      	movs	r1, #1
 8000662:	4804      	ldr	r0, [pc, #16]	@ (8000674 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000664:	f005 fcae 	bl	8005fc4 <OSFlagPost>
			(OS_FLAGS     )MOTOR_BOBINA_ADC_RDY,
			(OS_OPT       )OS_OPT_POST_FLAG_SET,
			(OS_ERR      *)&err
		);
	}
}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40012100 	.word	0x40012100
 8000674:	200009b8 	.word	0x200009b8

08000678 <motorBobinaTask>:


/* Task ----------------------------------------------------------------------*/
static void motorBobinaTask(void *p_arg)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08c      	sub	sp, #48	@ 0x30
 800067c:	af02      	add	r7, sp, #8
 800067e:	6078      	str	r0, [r7, #4]
	CPU_TS ts;

	(void)p_arg;

	/* Inicializa a amostragem e conversão a/d e d/a */
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) &motorBobinaTensaoRead, 1);
 8000680:	2201      	movs	r2, #1
 8000682:	493f      	ldr	r1, [pc, #252]	@ (8000780 <motorBobinaTask+0x108>)
 8000684:	483f      	ldr	r0, [pc, #252]	@ (8000784 <motorBobinaTask+0x10c>)
 8000686:	f001 f8b3 	bl	80017f0 <HAL_ADC_Start_DMA>
	HAL_DAC_Start_DMA(&hdac, MOTOR_BOBINA_VEL_DAC_CHANNEL, (const uint32_t *) &motorBobinaVel, 1, DAC_ALIGN_12B_R);
 800068a:	2300      	movs	r3, #0
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2301      	movs	r3, #1
 8000690:	4a3d      	ldr	r2, [pc, #244]	@ (8000788 <motorBobinaTask+0x110>)
 8000692:	2100      	movs	r1, #0
 8000694:	483d      	ldr	r0, [pc, #244]	@ (800078c <motorBobinaTask+0x114>)
 8000696:	f001 fdb3 	bl	8002200 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim2); /* 6.4 kHz */
 800069a:	483d      	ldr	r0, [pc, #244]	@ (8000790 <motorBobinaTask+0x118>)
 800069c:	f003 f98e 	bl	80039bc <HAL_TIM_Base_Start>

	int32_t kp = 15;
 80006a0:	230f      	movs	r3, #15
 80006a2:	61fb      	str	r3, [r7, #28]
	int32_t motorBobinaTensaoRef = 2048;
 80006a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Infinite loop */
	while (DEF_TRUE) {
		OSFlagPend(
 80006aa:	f107 0312 	add.w	r3, r7, #18
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80006ba:	2200      	movs	r2, #0
 80006bc:	2101      	movs	r1, #1
 80006be:	4835      	ldr	r0, [pc, #212]	@ (8000794 <motorBobinaTask+0x11c>)
 80006c0:	f005 fa16 	bl	8005af0 <OSFlagPend>
			(OS_OPT       )(OS_OPT_PEND_FLAG_SET_ANY + OS_OPT_PEND_FLAG_CONSUME),
			(CPU_TS      *)&ts,
			(OS_ERR      *)&err
		);

		int32_t erro = motorBobinaTensaoRef - (int32_t) motorBobinaTensaoRead;
 80006c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000780 <motorBobinaTask+0x108>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ce:	1a9b      	subs	r3, r3, r2
 80006d0:	623b      	str	r3, [r7, #32]

		/* Desliga o motor caso pressionado o switch e também aplica uma zona morta */
		if (abs(erro) <= ERRO_DEATHZONE || (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == SW_ON)) {
 80006d2:	6a3b      	ldr	r3, [r7, #32]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	bfb8      	it	lt
 80006d8:	425b      	neglt	r3, r3
 80006da:	2b32      	cmp	r3, #50	@ 0x32
 80006dc:	d907      	bls.n	80006ee <motorBobinaTask+0x76>
 80006de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006e2:	482d      	ldr	r0, [pc, #180]	@ (8000798 <motorBobinaTask+0x120>)
 80006e4:	f002 fc6c 	bl	8002fc0 <HAL_GPIO_ReadPin>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d108      	bne.n	8000700 <motorBobinaTask+0x88>
			HAL_GPIO_WritePin(MOTOR_BOBINA_EN_GPIO_Port, MOTOR_BOBINA_EN_Pin, MOTOR_BOBINA_EN_OFF);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f4:	4829      	ldr	r0, [pc, #164]	@ (800079c <motorBobinaTask+0x124>)
 80006f6:	f002 fc7b 	bl	8002ff0 <HAL_GPIO_WritePin>
			erro = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]
 80006fe:	e00e      	b.n	800071e <motorBobinaTask+0xa6>
		}
		else {
			HAL_GPIO_WritePin(MOTOR_BOBINA_EN_GPIO_Port, MOTOR_BOBINA_EN_Pin, MOTOR_BOBINA_EN_ON);
 8000700:	2201      	movs	r2, #1
 8000702:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000706:	4825      	ldr	r0, [pc, #148]	@ (800079c <motorBobinaTask+0x124>)
 8000708:	f002 fc72 	bl	8002ff0 <HAL_GPIO_WritePin>
			erro = (erro >= 0 ? erro - ERRO_DEATHZONE : erro + ERRO_DEATHZONE); /* Retira o degrau devido a zona morta */
 800070c:	6a3b      	ldr	r3, [r7, #32]
 800070e:	2b00      	cmp	r3, #0
 8000710:	db02      	blt.n	8000718 <motorBobinaTask+0xa0>
 8000712:	6a3b      	ldr	r3, [r7, #32]
 8000714:	3b32      	subs	r3, #50	@ 0x32
 8000716:	e001      	b.n	800071c <motorBobinaTask+0xa4>
 8000718:	6a3b      	ldr	r3, [r7, #32]
 800071a:	3332      	adds	r3, #50	@ 0x32
 800071c:	623b      	str	r3, [r7, #32]
		}

		/* Controle P */
		int32_t controle = kp*erro;
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	6a3a      	ldr	r2, [r7, #32]
 8000722:	fb02 f303 	mul.w	r3, r2, r3
 8000726:	61bb      	str	r3, [r7, #24]
		int32_t vel_dac = abs(controle);
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	2b00      	cmp	r3, #0
 800072c:	bfb8      	it	lt
 800072e:	425b      	neglt	r3, r3
 8000730:	617b      	str	r3, [r7, #20]

		/* Limita o valor para o máximo do DAC */
		motorBobinaVel = vel_dac > DAC_MAX ? DAC_MAX : vel_dac;
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000738:	4293      	cmp	r3, r2
 800073a:	bfa8      	it	ge
 800073c:	4613      	movge	r3, r2
 800073e:	b29a      	uxth	r2, r3
 8000740:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <motorBobinaTask+0x110>)
 8000742:	801a      	strh	r2, [r3, #0]

		/* Caso o valor seja positivo, seta a direção CLOCK_WISE */
		if (controle >= 0) {
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	2b00      	cmp	r3, #0
 8000748:	db06      	blt.n	8000758 <motorBobinaTask+0xe0>
			HAL_GPIO_WritePin(MOTOR_BOBINA_DIR_GPIO_Port, MOTOR_BOBINA_DIR_Pin, MOTOR_BOBINA_CLOCKWISE);
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000750:	4812      	ldr	r0, [pc, #72]	@ (800079c <motorBobinaTask+0x124>)
 8000752:	f002 fc4d 	bl	8002ff0 <HAL_GPIO_WritePin>
 8000756:	e005      	b.n	8000764 <motorBobinaTask+0xec>
		}
		else {
			HAL_GPIO_WritePin(MOTOR_BOBINA_DIR_GPIO_Port, MOTOR_BOBINA_DIR_Pin, MOTOR_BOBINA_COUNTER_CLOCKWISE);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800075e:	480f      	ldr	r0, [pc, #60]	@ (800079c <motorBobinaTask+0x124>)
 8000760:	f002 fc46 	bl	8002ff0 <HAL_GPIO_WritePin>
		}

		/* Ajuste do ponto de referência */
		if (HAL_GPIO_ReadPin(SW0_GPIO_Port, SW0_Pin) == SW_ON) {
 8000764:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000768:	480b      	ldr	r0, [pc, #44]	@ (8000798 <motorBobinaTask+0x120>)
 800076a:	f002 fc29 	bl	8002fc0 <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d19a      	bne.n	80006aa <motorBobinaTask+0x32>
			motorBobinaTensaoRef = motorBobinaTensaoRead;
 8000774:	4b02      	ldr	r3, [pc, #8]	@ (8000780 <motorBobinaTask+0x108>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	b29b      	uxth	r3, r3
 800077a:	627b      	str	r3, [r7, #36]	@ 0x24
	while (DEF_TRUE) {
 800077c:	e795      	b.n	80006aa <motorBobinaTask+0x32>
 800077e:	bf00      	nop
 8000780:	200004ec 	.word	0x200004ec
 8000784:	20000ea0 	.word	0x20000ea0
 8000788:	200004ee 	.word	0x200004ee
 800078c:	20000f48 	.word	0x20000f48
 8000790:	20001064 	.word	0x20001064
 8000794:	200009b8 	.word	0x200009b8
 8000798:	40020c00 	.word	0x40020c00
 800079c:	40021400 	.word	0x40021400

080007a0 <motorBobinaCreateTask>:
	}
}

/* Functions -----------------------------------------------------------------*/
void motorBobinaCreateTask(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	@ 0x30
 80007a4:	af0a      	add	r7, sp, #40	@ 0x28
    OS_ERR err;

	OSTaskCreate(
 80007a6:	1dbb      	adds	r3, r7, #6
 80007a8:	9308      	str	r3, [sp, #32]
 80007aa:	2303      	movs	r3, #3
 80007ac:	9307      	str	r3, [sp, #28]
 80007ae:	2300      	movs	r3, #0
 80007b0:	9306      	str	r3, [sp, #24]
 80007b2:	2300      	movs	r3, #0
 80007b4:	9305      	str	r3, [sp, #20]
 80007b6:	2300      	movs	r3, #0
 80007b8:	9304      	str	r3, [sp, #16]
 80007ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007be:	9303      	str	r3, [sp, #12]
 80007c0:	2300      	movs	r3, #0
 80007c2:	9302      	str	r3, [sp, #8]
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <motorBobinaCreateTask+0x4c>)
 80007c6:	9301      	str	r3, [sp, #4]
 80007c8:	2303      	movs	r3, #3
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2300      	movs	r3, #0
 80007ce:	4a08      	ldr	r2, [pc, #32]	@ (80007f0 <motorBobinaCreateTask+0x50>)
 80007d0:	4908      	ldr	r1, [pc, #32]	@ (80007f4 <motorBobinaCreateTask+0x54>)
 80007d2:	4809      	ldr	r0, [pc, #36]	@ (80007f8 <motorBobinaCreateTask+0x58>)
 80007d4:	f006 fb8c 	bl	8006ef0 <OSTaskCreate>
        (void         *)0u,
        (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
        (OS_ERR       *)&err
	);

	if (err != OS_ERR_NONE) {
 80007d8:	88fb      	ldrh	r3, [r7, #6]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <motorBobinaCreateTask+0x42>
		Error_Handler();
 80007de:	f000 fa11 	bl	8000c04 <Error_Handler>
	}
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000ec 	.word	0x200000ec
 80007f0:	08000679 	.word	0x08000679
 80007f4:	08008568 	.word	0x08008568
 80007f8:	20000028 	.word	0x20000028

080007fc <HAL_GPIO_EXTI_Callback>:
static void carroTransversalCtrl(CARRO_TRANSVERSAL_CTRL ctrl);
static void carroTransversalHome(void);

/* Interrupções --------------------------------------------------------------*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800080c:	d02c      	beq.n	8000868 <HAL_GPIO_EXTI_Callback+0x6c>
 800080e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000812:	dc64      	bgt.n	80008de <HAL_GPIO_EXTI_Callback+0xe2>
 8000814:	2b08      	cmp	r3, #8
 8000816:	d04c      	beq.n	80008b2 <HAL_GPIO_EXTI_Callback+0xb6>
 8000818:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800081c:	d15f      	bne.n	80008de <HAL_GPIO_EXTI_Callback+0xe2>
		case OPTO_1_Pin:
			if (HAL_GPIO_ReadPin(OPTO_2_GPIO_Port, OPTO_2_Pin) == OPTO_OFF) {
 800081e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000822:	4834      	ldr	r0, [pc, #208]	@ (80008f4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000824:	f002 fbcc 	bl	8002fc0 <HAL_GPIO_ReadPin>
 8000828:	4603      	mov	r3, r0
 800082a:	2b01      	cmp	r3, #1
 800082c:	d159      	bne.n	80008e2 <HAL_GPIO_EXTI_Callback+0xe6>
				bobinaTick++;
 800082e:	4b32      	ldr	r3, [pc, #200]	@ (80008f8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000830:	f993 3000 	ldrsb.w	r3, [r3]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	3301      	adds	r3, #1
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b25a      	sxtb	r2, r3
 800083c:	4b2e      	ldr	r3, [pc, #184]	@ (80008f8 <HAL_GPIO_EXTI_Callback+0xfc>)
 800083e:	701a      	strb	r2, [r3, #0]

				if (bobinaTick > BOBINA_TICK_VOLTA) {
 8000840:	4b2d      	ldr	r3, [pc, #180]	@ (80008f8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000842:	f993 3000 	ldrsb.w	r3, [r3]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b08      	cmp	r3, #8
 800084a:	d94a      	bls.n	80008e2 <HAL_GPIO_EXTI_Callback+0xe6>
					bobinaTick = 0;
 800084c:	4b2a      	ldr	r3, [pc, #168]	@ (80008f8 <HAL_GPIO_EXTI_Callback+0xfc>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
					carroTransversalAndar = true;
 8000852:	4b2a      	ldr	r3, [pc, #168]	@ (80008fc <HAL_GPIO_EXTI_Callback+0x100>)
 8000854:	2201      	movs	r2, #1
 8000856:	701a      	strb	r2, [r3, #0]

					OS_ERR err;
					OSFlagPost(
 8000858:	f107 030e 	add.w	r3, r7, #14
 800085c:	2200      	movs	r2, #0
 800085e:	2102      	movs	r1, #2
 8000860:	4827      	ldr	r0, [pc, #156]	@ (8000900 <HAL_GPIO_EXTI_Callback+0x104>)
 8000862:	f005 fbaf 	bl	8005fc4 <OSFlagPost>
						(OS_OPT       )OS_OPT_POST_FLAG_SET,
						(OS_ERR      *)&err
					);
				}
			}
			break;
 8000866:	e03c      	b.n	80008e2 <HAL_GPIO_EXTI_Callback+0xe6>

		case OPTO_2_Pin:
			if (HAL_GPIO_ReadPin(OPTO_1_GPIO_Port, OPTO_1_Pin) == OPTO_OFF) {
 8000868:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800086c:	4821      	ldr	r0, [pc, #132]	@ (80008f4 <HAL_GPIO_EXTI_Callback+0xf8>)
 800086e:	f002 fba7 	bl	8002fc0 <HAL_GPIO_ReadPin>
 8000872:	4603      	mov	r3, r0
 8000874:	2b01      	cmp	r3, #1
 8000876:	d136      	bne.n	80008e6 <HAL_GPIO_EXTI_Callback+0xea>
				bobinaTick--;
 8000878:	4b1f      	ldr	r3, [pc, #124]	@ (80008f8 <HAL_GPIO_EXTI_Callback+0xfc>)
 800087a:	f993 3000 	ldrsb.w	r3, [r3]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	3b01      	subs	r3, #1
 8000882:	b2db      	uxtb	r3, r3
 8000884:	b25a      	sxtb	r2, r3
 8000886:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000888:	701a      	strb	r2, [r3, #0]

				if (bobinaTick < -1*BOBINA_TICK_VOLTA) {
 800088a:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <HAL_GPIO_EXTI_Callback+0xfc>)
 800088c:	f993 3000 	ldrsb.w	r3, [r3]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	2bf7      	cmp	r3, #247	@ 0xf7
 8000894:	d827      	bhi.n	80008e6 <HAL_GPIO_EXTI_Callback+0xea>
					bobinaTick = 0;
 8000896:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
					carroTransversalAndar = true;
 800089c:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <HAL_GPIO_EXTI_Callback+0x100>)
 800089e:	2201      	movs	r2, #1
 80008a0:	701a      	strb	r2, [r3, #0]

					OS_ERR err;
					OSFlagPost(
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	2200      	movs	r2, #0
 80008a8:	2103      	movs	r1, #3
 80008aa:	4815      	ldr	r0, [pc, #84]	@ (8000900 <HAL_GPIO_EXTI_Callback+0x104>)
 80008ac:	f005 fb8a 	bl	8005fc4 <OSFlagPost>
						(OS_OPT       )OS_OPT_POST_FLAG_SET,
						(OS_ERR      *)&err
					);
				}
			}
			break;
 80008b0:	e019      	b.n	80008e6 <HAL_GPIO_EXTI_Callback+0xea>

		case OPTO_3_Pin:
			carroTransversalTick++;
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <HAL_GPIO_EXTI_Callback+0x108>)
 80008b4:	f993 3000 	ldrsb.w	r3, [r3]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	3301      	adds	r3, #1
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	b25a      	sxtb	r2, r3
 80008c0:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <HAL_GPIO_EXTI_Callback+0x108>)
 80008c2:	701a      	strb	r2, [r3, #0]

			if (carroTransversalTick > CARRO_TRANSVERSAL_TICK_VOLTA) {
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <HAL_GPIO_EXTI_Callback+0x108>)
 80008c6:	f993 3000 	ldrsb.w	r3, [r3]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b14      	cmp	r3, #20
 80008ce:	d90c      	bls.n	80008ea <HAL_GPIO_EXTI_Callback+0xee>
				carroTransversalTick = 0;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <HAL_GPIO_EXTI_Callback+0x108>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
				carroTransversalAndar = false;
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <HAL_GPIO_EXTI_Callback+0x100>)
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
			}
			break;
 80008dc:	e005      	b.n	80008ea <HAL_GPIO_EXTI_Callback+0xee>

		default:
			__NOP();
 80008de:	bf00      	nop
			break;
 80008e0:	e004      	b.n	80008ec <HAL_GPIO_EXTI_Callback+0xf0>
			break;
 80008e2:	bf00      	nop
 80008e4:	e002      	b.n	80008ec <HAL_GPIO_EXTI_Callback+0xf0>
			break;
 80008e6:	bf00      	nop
 80008e8:	e000      	b.n	80008ec <HAL_GPIO_EXTI_Callback+0xf0>
			break;
 80008ea:	bf00      	nop
	}
}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40020c00 	.word	0x40020c00
 80008f8:	200009b4 	.word	0x200009b4
 80008fc:	200009b6 	.word	0x200009b6
 8000900:	200009b8 	.word	0x200009b8
 8000904:	200009b5 	.word	0x200009b5

08000908 <carroTransversalTask>:

/* Task ----------------------------------------------------------------------*/
static void carroTransversalTask(void *p_arg)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	@ 0x28
 800090c:	af02      	add	r7, sp, #8
 800090e:	6078      	str	r0, [r7, #4]
	OS_FLAGS comando;
	CPU_TS ts;

	(void)p_arg;

	HAL_TIM_PWM_Start(&htim1, MOTOR_CARRO_TRANSVERSAL_PWM_Channel);
 8000910:	210c      	movs	r1, #12
 8000912:	4834      	ldr	r0, [pc, #208]	@ (80009e4 <carroTransversalTask+0xdc>)
 8000914:	f003 f914 	bl	8003b40 <HAL_TIM_PWM_Start>

	/* Trás o carro transversal para posição inicial */
	carroTransversalHome();
 8000918:	f000 f8d2 	bl	8000ac0 <carroTransversalHome>

	bobinaTick = 0;
 800091c:	4b32      	ldr	r3, [pc, #200]	@ (80009e8 <carroTransversalTask+0xe0>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
	carroTransversalTick = 0;
 8000922:	4b32      	ldr	r3, [pc, #200]	@ (80009ec <carroTransversalTask+0xe4>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
	carroTransversalAndar = false;
 8000928:	4b31      	ldr	r3, [pc, #196]	@ (80009f0 <carroTransversalTask+0xe8>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]

	OS_FLAGS comandoPrev = MOTOR_BOBINA_LIBERANDO;
 800092e:	2302      	movs	r3, #2
 8000930:	61fb      	str	r3, [r7, #28]
	CARRO_TRANSVERSAL_CTRL carroCtrl = PARADO;
 8000932:	2302      	movs	r3, #2
 8000934:	76fb      	strb	r3, [r7, #27]

	/* Infinite loop */
	while (DEF_TRUE) {
		/* Espera o comando para andar */
		comando = OSFlagPend(
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	9301      	str	r3, [sp, #4]
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000946:	2200      	movs	r2, #0
 8000948:	2105      	movs	r1, #5
 800094a:	482a      	ldr	r0, [pc, #168]	@ (80009f4 <carroTransversalTask+0xec>)
 800094c:	f005 f8d0 	bl	8005af0 <OSFlagPend>
 8000950:	6178      	str	r0, [r7, #20]
					(OS_OPT       )(OS_OPT_PEND_FLAG_SET_ANY + OS_OPT_PEND_FLAG_CONSUME),
					(CPU_TS      *)&ts,
					(OS_ERR      *)&err
				);

		while (carroTransversalAndar) {
 8000952:	e03e      	b.n	80009d2 <carroTransversalTask+0xca>
			bool fimCurso_1 = HAL_GPIO_ReadPin(FIM_CURSO_1_GPIO_Port, FIM_CURSO_1_Pin);
 8000954:	2108      	movs	r1, #8
 8000956:	4828      	ldr	r0, [pc, #160]	@ (80009f8 <carroTransversalTask+0xf0>)
 8000958:	f002 fb32 	bl	8002fc0 <HAL_GPIO_ReadPin>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	bf14      	ite	ne
 8000962:	2301      	movne	r3, #1
 8000964:	2300      	moveq	r3, #0
 8000966:	74fb      	strb	r3, [r7, #19]
			bool fimCurso_2 = HAL_GPIO_ReadPin(FIM_CURSO_2_GPIO_Port, FIM_CURSO_2_Pin);
 8000968:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800096c:	4823      	ldr	r0, [pc, #140]	@ (80009fc <carroTransversalTask+0xf4>)
 800096e:	f002 fb27 	bl	8002fc0 <HAL_GPIO_ReadPin>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	bf14      	ite	ne
 8000978:	2301      	movne	r3, #1
 800097a:	2300      	moveq	r3, #0
 800097c:	74bb      	strb	r3, [r7, #18]

			if (fimCurso_1 && fimCurso_2) { /* Ambas fim de cursos acionado -> impossível */
 800097e:	7cfb      	ldrb	r3, [r7, #19]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d008      	beq.n	8000996 <carroTransversalTask+0x8e>
 8000984:	7cbb      	ldrb	r3, [r7, #18]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d005      	beq.n	8000996 <carroTransversalTask+0x8e>
				carroTransversalAndar = false;
 800098a:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <carroTransversalTask+0xe8>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
				carroCtrl = PARADO;
 8000990:	2302      	movs	r3, #2
 8000992:	76fb      	strb	r3, [r7, #27]
 8000994:	e019      	b.n	80009ca <carroTransversalTask+0xc2>
			}
			else {
				if (fimCurso_1) {
 8000996:	7cfb      	ldrb	r3, [r7, #19]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d002      	beq.n	80009a2 <carroTransversalTask+0x9a>
					carroCtrl = DIREITA;
 800099c:	2301      	movs	r3, #1
 800099e:	76fb      	strb	r3, [r7, #27]
 80009a0:	e013      	b.n	80009ca <carroTransversalTask+0xc2>
				}
				else if (fimCurso_2) {
 80009a2:	7cbb      	ldrb	r3, [r7, #18]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d002      	beq.n	80009ae <carroTransversalTask+0xa6>
					carroCtrl = ESQUERDA;
 80009a8:	2300      	movs	r3, #0
 80009aa:	76fb      	strb	r3, [r7, #27]
 80009ac:	e00d      	b.n	80009ca <carroTransversalTask+0xc2>
				}
				else {
					if (comando != comandoPrev) {
 80009ae:	697a      	ldr	r2, [r7, #20]
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d009      	beq.n	80009ca <carroTransversalTask+0xc2>
						comandoPrev = comando;
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	61fb      	str	r3, [r7, #28]

						if (carroCtrl == ESQUERDA) {
 80009ba:	7efb      	ldrb	r3, [r7, #27]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d102      	bne.n	80009c6 <carroTransversalTask+0xbe>
							carroCtrl = DIREITA;
 80009c0:	2301      	movs	r3, #1
 80009c2:	76fb      	strb	r3, [r7, #27]
 80009c4:	e001      	b.n	80009ca <carroTransversalTask+0xc2>
						}
						else {
							carroCtrl = ESQUERDA;
 80009c6:	2300      	movs	r3, #0
 80009c8:	76fb      	strb	r3, [r7, #27]
						}
					}
				}
			}

			carroTransversalCtrl(carroCtrl);
 80009ca:	7efb      	ldrb	r3, [r7, #27]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 f845 	bl	8000a5c <carroTransversalCtrl>
		while (carroTransversalAndar) {
 80009d2:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <carroTransversalTask+0xe8>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d1bc      	bne.n	8000954 <carroTransversalTask+0x4c>
		}

		carroTransversalCtrl(PARADO);
 80009da:	2002      	movs	r0, #2
 80009dc:	f000 f83e 	bl	8000a5c <carroTransversalCtrl>
		comando = OSFlagPend(
 80009e0:	e7a9      	b.n	8000936 <carroTransversalTask+0x2e>
 80009e2:	bf00      	nop
 80009e4:	2000101c 	.word	0x2000101c
 80009e8:	200009b4 	.word	0x200009b4
 80009ec:	200009b5 	.word	0x200009b5
 80009f0:	200009b6 	.word	0x200009b6
 80009f4:	200009b8 	.word	0x200009b8
 80009f8:	40020400 	.word	0x40020400
 80009fc:	40020000 	.word	0x40020000

08000a00 <carroTransversalCreateTask>:
	}
}

/* Functions -----------------------------------------------------------------*/
void carroTransversalCreateTask(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08c      	sub	sp, #48	@ 0x30
 8000a04:	af0a      	add	r7, sp, #40	@ 0x28
    OS_ERR err;

	OSTaskCreate(
 8000a06:	1dbb      	adds	r3, r7, #6
 8000a08:	9308      	str	r3, [sp, #32]
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	9307      	str	r3, [sp, #28]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	9306      	str	r3, [sp, #24]
 8000a12:	2300      	movs	r3, #0
 8000a14:	9305      	str	r3, [sp, #20]
 8000a16:	2300      	movs	r3, #0
 8000a18:	9304      	str	r3, [sp, #16]
 8000a1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a1e:	9303      	str	r3, [sp, #12]
 8000a20:	2300      	movs	r3, #0
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <carroTransversalCreateTask+0x4c>)
 8000a26:	9301      	str	r3, [sp, #4]
 8000a28:	2304      	movs	r3, #4
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <carroTransversalCreateTask+0x50>)
 8000a30:	4908      	ldr	r1, [pc, #32]	@ (8000a54 <carroTransversalCreateTask+0x54>)
 8000a32:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <carroTransversalCreateTask+0x58>)
 8000a34:	f006 fa5c 	bl	8006ef0 <OSTaskCreate>
        (void         *)0u,
        (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
        (OS_ERR       *)&err
	);

	if (err != OS_ERR_NONE) {
 8000a38:	88fb      	ldrh	r3, [r7, #6]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <carroTransversalCreateTask+0x42>
		Error_Handler();
 8000a3e:	f000 f8e1 	bl	8000c04 <Error_Handler>
	}
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200005b4 	.word	0x200005b4
 8000a50:	08000909 	.word	0x08000909
 8000a54:	08008590 	.word	0x08008590
 8000a58:	200004f0 	.word	0x200004f0

08000a5c <carroTransversalCtrl>:

static void carroTransversalCtrl(CARRO_TRANSVERSAL_CTRL ctrl)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
	switch(ctrl) {
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <carroTransversalCtrl+0x16>
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d00b      	beq.n	8000a88 <carroTransversalCtrl+0x2c>
 8000a70:	e015      	b.n	8000a9e <carroTransversalCtrl+0x42>
		case ESQUERDA:
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR1_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin, GPIO_PIN_SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	2120      	movs	r1, #32
 8000a76:	4811      	ldr	r0, [pc, #68]	@ (8000abc <carroTransversalCtrl+0x60>)
 8000a78:	f002 faba 	bl	8002ff0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR2_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2140      	movs	r1, #64	@ 0x40
 8000a80:	480e      	ldr	r0, [pc, #56]	@ (8000abc <carroTransversalCtrl+0x60>)
 8000a82:	f002 fab5 	bl	8002ff0 <HAL_GPIO_WritePin>
			break;
 8000a86:	e015      	b.n	8000ab4 <carroTransversalCtrl+0x58>

		case DIREITA:
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR1_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2120      	movs	r1, #32
 8000a8c:	480b      	ldr	r0, [pc, #44]	@ (8000abc <carroTransversalCtrl+0x60>)
 8000a8e:	f002 faaf 	bl	8002ff0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR2_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2140      	movs	r1, #64	@ 0x40
 8000a96:	4809      	ldr	r0, [pc, #36]	@ (8000abc <carroTransversalCtrl+0x60>)
 8000a98:	f002 faaa 	bl	8002ff0 <HAL_GPIO_WritePin>
			break;
 8000a9c:	e00a      	b.n	8000ab4 <carroTransversalCtrl+0x58>

		case PARADO:
		default:
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR1_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2120      	movs	r1, #32
 8000aa2:	4806      	ldr	r0, [pc, #24]	@ (8000abc <carroTransversalCtrl+0x60>)
 8000aa4:	f002 faa4 	bl	8002ff0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR2_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2140      	movs	r1, #64	@ 0x40
 8000aac:	4803      	ldr	r0, [pc, #12]	@ (8000abc <carroTransversalCtrl+0x60>)
 8000aae:	f002 fa9f 	bl	8002ff0 <HAL_GPIO_WritePin>
			break;
 8000ab2:	bf00      	nop
	}
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40021000 	.word	0x40021000

08000ac0 <carroTransversalHome>:

static void carroTransversalHome(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
	#define HOME_TIMEOUT	25000000

	uint32_t homeTimeout = HOME_TIMEOUT;
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <carroTransversalHome+0x3c>)
 8000ac8:	607b      	str	r3, [r7, #4]

	while (homeTimeout > 0 && (HAL_GPIO_ReadPin(FIM_CURSO_2_GPIO_Port, FIM_CURSO_2_Pin) == GPIO_PIN_RESET)) {
 8000aca:	e005      	b.n	8000ad8 <carroTransversalHome+0x18>
		carroTransversalCtrl(DIREITA);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f7ff ffc5 	bl	8000a5c <carroTransversalCtrl>
		homeTimeout--;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
	while (homeTimeout > 0 && (HAL_GPIO_ReadPin(FIM_CURSO_2_GPIO_Port, FIM_CURSO_2_Pin) == GPIO_PIN_RESET)) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d007      	beq.n	8000aee <carroTransversalHome+0x2e>
 8000ade:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ae2:	4807      	ldr	r0, [pc, #28]	@ (8000b00 <carroTransversalHome+0x40>)
 8000ae4:	f002 fa6c 	bl	8002fc0 <HAL_GPIO_ReadPin>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d0ee      	beq.n	8000acc <carroTransversalHome+0xc>
	}

	carroTransversalCtrl(PARADO);
 8000aee:	2002      	movs	r0, #2
 8000af0:	f7ff ffb4 	bl	8000a5c <carroTransversalCtrl>
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	017d7840 	.word	0x017d7840
 8000b00:	40020000 	.word	0x40020000

08000b04 <main>:
/* Task prototypes -----------------------------------------------------------*/
static void programStartTask(void *p_arg);

/* Main ----------------------------------------------------------------------*/
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08c      	sub	sp, #48	@ 0x30
 8000b08:	af0a      	add	r7, sp, #40	@ 0x28
	/* MCU Configuration -----------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b0a:	f000 fdcf 	bl	80016ac <HAL_Init>

	/* Configura o CLock da CPU para 160MHz */
	SystemClock_Config();
 8000b0e:	f000 f87f 	bl	8000c10 <SystemClock_Config>

	/* Inicializa o sistema */
	OS_ERR err;

	OSInit(&err);
 8000b12:	1dbb      	adds	r3, r7, #6
 8000b14:	4618      	mov	r0, r3
 8000b16:	f003 fffd 	bl	8004b14 <OSInit>

	if (err != OS_ERR_NONE) {
 8000b1a:	88fb      	ldrh	r3, [r7, #6]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <main+0x20>
		Error_Handler();
 8000b20:	f000 f870 	bl	8000c04 <Error_Handler>
	}

	OSFlagCreate(
 8000b24:	1dbb      	adds	r3, r7, #6
 8000b26:	2200      	movs	r2, #0
 8000b28:	4919      	ldr	r1, [pc, #100]	@ (8000b90 <main+0x8c>)
 8000b2a:	481a      	ldr	r0, [pc, #104]	@ (8000b94 <main+0x90>)
 8000b2c:	f004 ff8e 	bl	8005a4c <OSFlagCreate>
		(CPU_CHAR    *)"Grupo de flags",
		(OS_FLAGS     )0,
		(OS_ERR      *)&err
	);

	if (err != OS_ERR_NONE) {
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <main+0x36>
		Error_Handler();
 8000b36:	f000 f865 	bl	8000c04 <Error_Handler>
        (CPU_CHAR     *)"Tarefa de Inicializar o programa",
        (OS_TASK_PTR   )programStartTask,
        (void         *)0u,
        (OS_PRIO       )PROGRAM_START_TASK_PRIO,
        (CPU_STK      *)&programStartTaskStk[0u],
        (CPU_STK_SIZE  )programStartTaskStk[PROGRAM_START_TASK_STK_SIZE / 10u],
 8000b3a:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <main+0x94>)
 8000b3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    OSTaskCreate(
 8000b3e:	1dba      	adds	r2, r7, #6
 8000b40:	9208      	str	r2, [sp, #32]
 8000b42:	2203      	movs	r2, #3
 8000b44:	9207      	str	r2, [sp, #28]
 8000b46:	2200      	movs	r2, #0
 8000b48:	9206      	str	r2, [sp, #24]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	9205      	str	r2, [sp, #20]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	9204      	str	r2, [sp, #16]
 8000b52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b56:	9203      	str	r2, [sp, #12]
 8000b58:	9302      	str	r3, [sp, #8]
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <main+0x94>)
 8000b5c:	9301      	str	r3, [sp, #4]
 8000b5e:	2305      	movs	r3, #5
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	2300      	movs	r3, #0
 8000b64:	4a0d      	ldr	r2, [pc, #52]	@ (8000b9c <main+0x98>)
 8000b66:	490e      	ldr	r1, [pc, #56]	@ (8000ba0 <main+0x9c>)
 8000b68:	480e      	ldr	r0, [pc, #56]	@ (8000ba4 <main+0xa0>)
 8000b6a:	f006 f9c1 	bl	8006ef0 <OSTaskCreate>
        (void         *)0u,
        (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
        (OS_ERR       *)&err
	);

	if (err != OS_ERR_NONE) {
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <main+0x74>
		Error_Handler();
 8000b74:	f000 f846 	bl	8000c04 <Error_Handler>
	}

    OSStart(&err);
 8000b78:	1dbb      	adds	r3, r7, #6
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f004 f9a8 	bl	8004ed0 <OSStart>

	if (err != OS_ERR_NONE) {
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d002      	beq.n	8000b8c <main+0x88>
		Error_Handler();
 8000b86:	f000 f83d 	bl	8000c04 <Error_Handler>
	}

	/* Infinite loop */
	while (DEF_TRUE) {
 8000b8a:	bf00      	nop
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <main+0x88>
 8000b90:	080085c4 	.word	0x080085c4
 8000b94:	200009b8 	.word	0x200009b8
 8000b98:	20000aa0 	.word	0x20000aa0
 8000b9c:	08000ba9 	.word	0x08000ba9
 8000ba0:	080085d4 	.word	0x080085d4
 8000ba4:	200009dc 	.word	0x200009dc

08000ba8 <programStartTask>:

	return 0;
}

static void programStartTask(void *p_arg)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	OS_ERR err;
	(void)p_arg;

	/* Inicializa todos os periféricos configurados */
	MX_GPIO_Init();
 8000bb0:	f000 fa3c 	bl	800102c <MX_GPIO_Init>
	MX_DMA_Init();
 8000bb4:	f000 fa0c 	bl	8000fd0 <MX_DMA_Init>
	MX_ADC2_Init();
 8000bb8:	f000 f896 	bl	8000ce8 <MX_ADC2_Init>
	MX_DAC_Init();
 8000bbc:	f000 f8ea 	bl	8000d94 <MX_DAC_Init>
	MX_TIM1_Init();
 8000bc0:	f000 f91c 	bl	8000dfc <MX_TIM1_Init>
	MX_TIM2_Init();
 8000bc4:	f000 f9b8 	bl	8000f38 <MX_TIM2_Init>

	/* Habilita as saídas digitais */
	HAL_GPIO_WritePin(ENAOUT03_GPIO_Port, ENAOUT03_Pin | ENAOUT04_Pin, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000bce:	480b      	ldr	r0, [pc, #44]	@ (8000bfc <programStartTask+0x54>)
 8000bd0:	f002 fa0e 	bl	8002ff0 <HAL_GPIO_WritePin>

	/* Cria a tarefa de controle do motor do carro transversal */
	carroTransversalCreateTask();
 8000bd4:	f7ff ff14 	bl	8000a00 <carroTransversalCreateTask>

	/* Cria a tarefa de controle do motor da bobina */
	motorBobinaCreateTask();
 8000bd8:	f7ff fde2 	bl	80007a0 <motorBobinaCreateTask>

	/* Infinite loop */
	while (DEF_TRUE) {
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000bdc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000be0:	4807      	ldr	r0, [pc, #28]	@ (8000c00 <programStartTask+0x58>)
 8000be2:	f002 fa1e 	bl	8003022 <HAL_GPIO_TogglePin>
		OSTimeDly(500, OS_OPT_TIME_DLY, &err);
 8000be6:	f107 030e 	add.w	r3, r7, #14
 8000bea:	461a      	mov	r2, r3
 8000bec:	2100      	movs	r1, #0
 8000bee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bf2:	f007 f8a9 	bl	8007d48 <OSTimeDly>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000bf6:	bf00      	nop
 8000bf8:	e7f0      	b.n	8000bdc <programStartTask+0x34>
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40021400 	.word	0x40021400

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <Error_Handler+0x8>

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b094      	sub	sp, #80	@ 0x50
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	f107 0320 	add.w	r3, r7, #32
 8000c1a:	2230      	movs	r2, #48	@ 0x30
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f007 fc6a 	bl	80084f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	4b29      	ldr	r3, [pc, #164]	@ (8000ce0 <SystemClock_Config+0xd0>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3c:	4a28      	ldr	r2, [pc, #160]	@ (8000ce0 <SystemClock_Config+0xd0>)
 8000c3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c44:	4b26      	ldr	r3, [pc, #152]	@ (8000ce0 <SystemClock_Config+0xd0>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c50:	2300      	movs	r3, #0
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	4b23      	ldr	r3, [pc, #140]	@ (8000ce4 <SystemClock_Config+0xd4>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a22      	ldr	r2, [pc, #136]	@ (8000ce4 <SystemClock_Config+0xd4>)
 8000c5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	4b20      	ldr	r3, [pc, #128]	@ (8000ce4 <SystemClock_Config+0xd4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c76:	2302      	movs	r3, #2
 8000c78:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c7a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000c80:	230f      	movs	r3, #15
 8000c82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c84:	23c0      	movs	r3, #192	@ 0xc0
 8000c86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c90:	f107 0320 	add.w	r3, r7, #32
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 f9f7 	bl	8003088 <HAL_RCC_OscConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ca0:	f7ff ffb0 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cb0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000cb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2105      	movs	r1, #5
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 fc58 	bl	8003578 <HAL_RCC_ClockConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cce:	f7ff ff99 	bl	8000c04 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000cd2:	f002 fd37 	bl	8003744 <HAL_RCC_EnableCSS>
}
 8000cd6:	bf00      	nop
 8000cd8:	3750      	adds	r7, #80	@ 0x50
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40007000 	.word	0x40007000

08000ce8 <MX_ADC2_Init>:

void MX_ADC2_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cee:	463b      	mov	r3, r7
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000cfa:	4b24      	ldr	r3, [pc, #144]	@ (8000d8c <MX_ADC2_Init+0xa4>)
 8000cfc:	4a24      	ldr	r2, [pc, #144]	@ (8000d90 <MX_ADC2_Init+0xa8>)
 8000cfe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d00:	4b22      	ldr	r3, [pc, #136]	@ (8000d8c <MX_ADC2_Init+0xa4>)
 8000d02:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d06:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d08:	4b20      	ldr	r3, [pc, #128]	@ (8000d8c <MX_ADC2_Init+0xa4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d8c <MX_ADC2_Init+0xa4>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d14:	4b1d      	ldr	r3, [pc, #116]	@ (8000d8c <MX_ADC2_Init+0xa4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d8c <MX_ADC2_Init+0xa4>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <MX_ADC2_Init+0xa4>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d28:	4b18      	ldr	r3, [pc, #96]	@ (8000d8c <MX_ADC2_Init+0xa4>)
 8000d2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000d30:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <MX_ADC2_Init+0xa4>)
 8000d32:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000d36:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d38:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <MX_ADC2_Init+0xa4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <MX_ADC2_Init+0xa4>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000d44:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <MX_ADC2_Init+0xa4>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <MX_ADC2_Init+0xa4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d52:	480e      	ldr	r0, [pc, #56]	@ (8000d8c <MX_ADC2_Init+0xa4>)
 8000d54:	f000 fd08 	bl	8001768 <HAL_ADC_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 8000d5e:	f7ff ff51 	bl	8000c04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d62:	2306      	movs	r3, #6
 8000d64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d66:	2301      	movs	r3, #1
 8000d68:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000d6a:	2306      	movs	r3, #6
 8000d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d6e:	463b      	mov	r3, r7
 8000d70:	4619      	mov	r1, r3
 8000d72:	4806      	ldr	r0, [pc, #24]	@ (8000d8c <MX_ADC2_Init+0xa4>)
 8000d74:	f000 fe60 	bl	8001a38 <HAL_ADC_ConfigChannel>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_ADC2_Init+0x9a>
  {
    Error_Handler();
 8000d7e:	f7ff ff41 	bl	8000c04 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000ea0 	.word	0x20000ea0
 8000d90:	40012100 	.word	0x40012100

08000d94 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
void MX_DAC_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000da2:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <MX_DAC_Init+0x60>)
 8000da4:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <MX_DAC_Init+0x64>)
 8000da6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000da8:	4812      	ldr	r0, [pc, #72]	@ (8000df4 <MX_DAC_Init+0x60>)
 8000daa:	f001 fa06 	bl	80021ba <HAL_DAC_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000db4:	f7ff ff26 	bl	8000c04 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000db8:	2324      	movs	r3, #36	@ 0x24
 8000dba:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	480b      	ldr	r0, [pc, #44]	@ (8000df4 <MX_DAC_Init+0x60>)
 8000dc8:	f001 fafa 	bl	80023c0 <HAL_DAC_ConfigChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000dd2:	f7ff ff17 	bl	8000c04 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	2210      	movs	r2, #16
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4805      	ldr	r0, [pc, #20]	@ (8000df4 <MX_DAC_Init+0x60>)
 8000dde:	f001 faef 	bl	80023c0 <HAL_DAC_ConfigChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000de8:	f7ff ff0c 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000f48 	.word	0x20000f48
 8000df8:	40007400 	.word	0x40007400

08000dfc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b096      	sub	sp, #88	@ 0x58
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e02:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e10:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]
 8000e2a:	615a      	str	r2, [r3, #20]
 8000e2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2220      	movs	r2, #32
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f007 fb5f 	bl	80084f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f30 <MX_TIM1_Init+0x134>)
 8000e3c:	4a3d      	ldr	r2, [pc, #244]	@ (8000f34 <MX_TIM1_Init+0x138>)
 8000e3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000e40:	4b3b      	ldr	r3, [pc, #236]	@ (8000f30 <MX_TIM1_Init+0x134>)
 8000e42:	224f      	movs	r2, #79	@ 0x4f
 8000e44:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b3a      	ldr	r3, [pc, #232]	@ (8000f30 <MX_TIM1_Init+0x134>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000e4c:	4b38      	ldr	r3, [pc, #224]	@ (8000f30 <MX_TIM1_Init+0x134>)
 8000e4e:	2263      	movs	r2, #99	@ 0x63
 8000e50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e52:	4b37      	ldr	r3, [pc, #220]	@ (8000f30 <MX_TIM1_Init+0x134>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e58:	4b35      	ldr	r3, [pc, #212]	@ (8000f30 <MX_TIM1_Init+0x134>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5e:	4b34      	ldr	r3, [pc, #208]	@ (8000f30 <MX_TIM1_Init+0x134>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e64:	4832      	ldr	r0, [pc, #200]	@ (8000f30 <MX_TIM1_Init+0x134>)
 8000e66:	f002 fd5a 	bl	800391e <HAL_TIM_Base_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000e70:	f7ff fec8 	bl	8000c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e78:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e7a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e7e:	4619      	mov	r1, r3
 8000e80:	482b      	ldr	r0, [pc, #172]	@ (8000f30 <MX_TIM1_Init+0x134>)
 8000e82:	f002 ffe7 	bl	8003e54 <HAL_TIM_ConfigClockSource>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000e8c:	f7ff feba 	bl	8000c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e90:	4827      	ldr	r0, [pc, #156]	@ (8000f30 <MX_TIM1_Init+0x134>)
 8000e92:	f002 fdfb 	bl	8003a8c <HAL_TIM_PWM_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000e9c:	f7ff feb2 	bl	8000c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ea8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000eac:	4619      	mov	r1, r3
 8000eae:	4820      	ldr	r0, [pc, #128]	@ (8000f30 <MX_TIM1_Init+0x134>)
 8000eb0:	f003 fbb4 	bl	800461c <HAL_TIMEx_MasterConfigSynchronization>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000eba:	f7ff fea3 	bl	8000c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ebe:	2360      	movs	r3, #96	@ 0x60
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ed6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eda:	220c      	movs	r2, #12
 8000edc:	4619      	mov	r1, r3
 8000ede:	4814      	ldr	r0, [pc, #80]	@ (8000f30 <MX_TIM1_Init+0x134>)
 8000ee0:	f002 fef6 	bl	8003cd0 <HAL_TIM_PWM_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000eea:	f7ff fe8b 	bl	8000c04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4807      	ldr	r0, [pc, #28]	@ (8000f30 <MX_TIM1_Init+0x134>)
 8000f12:	f003 fbff 	bl	8004714 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000f1c:	f7ff fe72 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f20:	4803      	ldr	r0, [pc, #12]	@ (8000f30 <MX_TIM1_Init+0x134>)
 8000f22:	f000 fb47 	bl	80015b4 <HAL_TIM_MspPostInit>

}
 8000f26:	bf00      	nop
 8000f28:	3758      	adds	r7, #88	@ 0x58
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000101c 	.word	0x2000101c
 8000f34:	40010000 	.word	0x40010000

08000f38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f54:	4b1d      	ldr	r3, [pc, #116]	@ (8000fcc <MX_TIM2_Init+0x94>)
 8000f56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <MX_TIM2_Init+0x94>)
 8000f5e:	2263      	movs	r2, #99	@ 0x63
 8000f60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <MX_TIM2_Init+0x94>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250-1;
 8000f68:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <MX_TIM2_Init+0x94>)
 8000f6a:	22f9      	movs	r2, #249	@ 0xf9
 8000f6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6e:	4b17      	ldr	r3, [pc, #92]	@ (8000fcc <MX_TIM2_Init+0x94>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f74:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <MX_TIM2_Init+0x94>)
 8000f76:	2280      	movs	r2, #128	@ 0x80
 8000f78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f7a:	4814      	ldr	r0, [pc, #80]	@ (8000fcc <MX_TIM2_Init+0x94>)
 8000f7c:	f002 fccf 	bl	800391e <HAL_TIM_Base_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000f86:	f7ff fe3d 	bl	8000c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	4619      	mov	r1, r3
 8000f96:	480d      	ldr	r0, [pc, #52]	@ (8000fcc <MX_TIM2_Init+0x94>)
 8000f98:	f002 ff5c 	bl	8003e54 <HAL_TIM_ConfigClockSource>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000fa2:	f7ff fe2f 	bl	8000c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fa6:	2320      	movs	r3, #32
 8000fa8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fae:	463b      	mov	r3, r7
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4806      	ldr	r0, [pc, #24]	@ (8000fcc <MX_TIM2_Init+0x94>)
 8000fb4:	f003 fb32 	bl	800461c <HAL_TIMEx_MasterConfigSynchronization>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000fbe:	f7ff fe21 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20001064 	.word	0x20001064

08000fd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b13      	ldr	r3, [pc, #76]	@ (8001028 <MX_DMA_Init+0x58>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a12      	ldr	r2, [pc, #72]	@ (8001028 <MX_DMA_Init+0x58>)
 8000fe0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <MX_DMA_Init+0x58>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <MX_DMA_Init+0x58>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	@ (8001028 <MX_DMA_Init+0x58>)
 8000ffc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001000:	6313      	str	r3, [r2, #48]	@ 0x30
 8001002:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <MX_DMA_Init+0x58>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	203a      	movs	r0, #58	@ 0x3a
 8001014:	f001 f89b 	bl	800214e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001018:	203a      	movs	r0, #58	@ 0x3a
 800101a:	f001 f8b4 	bl	8002186 <HAL_NVIC_EnableIRQ>

}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800

0800102c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	@ 0x38
 8001030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
 8001046:	4b84      	ldr	r3, [pc, #528]	@ (8001258 <MX_GPIO_Init+0x22c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a83      	ldr	r2, [pc, #524]	@ (8001258 <MX_GPIO_Init+0x22c>)
 800104c:	f043 0310 	orr.w	r3, r3, #16
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b81      	ldr	r3, [pc, #516]	@ (8001258 <MX_GPIO_Init+0x22c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	623b      	str	r3, [r7, #32]
 800105c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	4b7d      	ldr	r3, [pc, #500]	@ (8001258 <MX_GPIO_Init+0x22c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a7c      	ldr	r2, [pc, #496]	@ (8001258 <MX_GPIO_Init+0x22c>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b7a      	ldr	r3, [pc, #488]	@ (8001258 <MX_GPIO_Init+0x22c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	61fb      	str	r3, [r7, #28]
 8001078:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	4b76      	ldr	r3, [pc, #472]	@ (8001258 <MX_GPIO_Init+0x22c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a75      	ldr	r2, [pc, #468]	@ (8001258 <MX_GPIO_Init+0x22c>)
 8001084:	f043 0320 	orr.w	r3, r3, #32
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b73      	ldr	r3, [pc, #460]	@ (8001258 <MX_GPIO_Init+0x22c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f003 0320 	and.w	r3, r3, #32
 8001092:	61bb      	str	r3, [r7, #24]
 8001094:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	4b6f      	ldr	r3, [pc, #444]	@ (8001258 <MX_GPIO_Init+0x22c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a6e      	ldr	r2, [pc, #440]	@ (8001258 <MX_GPIO_Init+0x22c>)
 80010a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001258 <MX_GPIO_Init+0x22c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b68      	ldr	r3, [pc, #416]	@ (8001258 <MX_GPIO_Init+0x22c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a67      	ldr	r2, [pc, #412]	@ (8001258 <MX_GPIO_Init+0x22c>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b65      	ldr	r3, [pc, #404]	@ (8001258 <MX_GPIO_Init+0x22c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b61      	ldr	r3, [pc, #388]	@ (8001258 <MX_GPIO_Init+0x22c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a60      	ldr	r2, [pc, #384]	@ (8001258 <MX_GPIO_Init+0x22c>)
 80010d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b5e      	ldr	r3, [pc, #376]	@ (8001258 <MX_GPIO_Init+0x22c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001258 <MX_GPIO_Init+0x22c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	4a59      	ldr	r2, [pc, #356]	@ (8001258 <MX_GPIO_Init+0x22c>)
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fa:	4b57      	ldr	r3, [pc, #348]	@ (8001258 <MX_GPIO_Init+0x22c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b53      	ldr	r3, [pc, #332]	@ (8001258 <MX_GPIO_Init+0x22c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	4a52      	ldr	r2, [pc, #328]	@ (8001258 <MX_GPIO_Init+0x22c>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	6313      	str	r3, [r2, #48]	@ 0x30
 8001116:	4b50      	ldr	r3, [pc, #320]	@ (8001258 <MX_GPIO_Init+0x22c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin|MOTOR_CARRO_TRANSVERSAL_DIR2_Pin|MOTOR_POLIA_EN_Pin|ENAOUT03_Pin
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 51f3 	mov.w	r1, #7776	@ 0x1e60
 8001128:	484c      	ldr	r0, [pc, #304]	@ (800125c <MX_GPIO_Init+0x230>)
 800112a:	f001 ff61 	bl	8002ff0 <HAL_GPIO_WritePin>
                          |MOTOR_POLIA_DIR_Pin|ENAOUT04_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MOTOR_BOBINA_EN_Pin|MOTOR_BOBINA_DIR_Pin|LED0_Pin|LED1_Pin
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 4163 	mov.w	r1, #58112	@ 0xe300
 8001134:	484a      	ldr	r0, [pc, #296]	@ (8001260 <MX_GPIO_Init+0x234>)
 8001136:	f001 ff5b 	bl	8002ff0 <HAL_GPIO_WritePin>
                          |LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	2103      	movs	r1, #3
 800113e:	4849      	ldr	r0, [pc, #292]	@ (8001264 <MX_GPIO_Init+0x238>)
 8001140:	f001 ff56 	bl	8002ff0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800114a:	4845      	ldr	r0, [pc, #276]	@ (8001260 <MX_GPIO_Init+0x234>)
 800114c:	f001 ff50 	bl	8002ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOTOR_CARRO_TRANSVERSAL_DIR1_Pin MOTOR_CARRO_TRANSVERSAL_DIR2_Pin MOTOR_POLIA_EN_Pin ENAOUT03_Pin
                           MOTOR_POLIA_DIR_Pin ENAOUT04_Pin */
  GPIO_InitStruct.Pin = MOTOR_CARRO_TRANSVERSAL_DIR1_Pin|MOTOR_CARRO_TRANSVERSAL_DIR2_Pin|MOTOR_POLIA_EN_Pin|ENAOUT03_Pin
 8001150:	f44f 53f3 	mov.w	r3, #7776	@ 0x1e60
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
                          |MOTOR_POLIA_DIR_Pin|ENAOUT04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	2301      	movs	r3, #1
 8001158:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001166:	4619      	mov	r1, r3
 8001168:	483c      	ldr	r0, [pc, #240]	@ (800125c <MX_GPIO_Init+0x230>)
 800116a:	f001 fd7d 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_BOBINA_EN_Pin MOTOR_BOBINA_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_BOBINA_EN_Pin|MOTOR_BOBINA_DIR_Pin;
 800116e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001180:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001184:	4619      	mov	r1, r3
 8001186:	4836      	ldr	r0, [pc, #216]	@ (8001260 <MX_GPIO_Init+0x234>)
 8001188:	f001 fd6e 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 800118c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001192:	2311      	movs	r3, #17
 8001194:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800119e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011a2:	4619      	mov	r1, r3
 80011a4:	482e      	ldr	r0, [pc, #184]	@ (8001260 <MX_GPIO_Init+0x234>)
 80011a6:	f001 fd5f 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 80011aa:	2303      	movs	r3, #3
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011ae:	2311      	movs	r3, #17
 80011b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011be:	4619      	mov	r1, r3
 80011c0:	4828      	ldr	r0, [pc, #160]	@ (8001264 <MX_GPIO_Init+0x238>)
 80011c2:	f001 fd51 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW0_Pin SW1_Pin SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW0_Pin|SW1_Pin|SW2_Pin|SW3_Pin;
 80011c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d8:	4619      	mov	r1, r3
 80011da:	4823      	ldr	r0, [pc, #140]	@ (8001268 <MX_GPIO_Init+0x23c>)
 80011dc:	f001 fd44 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : OPTO_1_Pin OPTO_2_Pin OPTO_3_Pin */
  GPIO_InitStruct.Pin = OPTO_1_Pin|OPTO_2_Pin|OPTO_3_Pin;
 80011e0:	f24c 0308 	movw	r3, #49160	@ 0xc008
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f4:	4619      	mov	r1, r3
 80011f6:	481c      	ldr	r0, [pc, #112]	@ (8001268 <MX_GPIO_Init+0x23c>)
 80011f8:	f001 fd36 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : FIM_CURSO_2_Pin */
  GPIO_InitStruct.Pin = FIM_CURSO_2_Pin;
 80011fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001202:	2300      	movs	r3, #0
 8001204:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(FIM_CURSO_2_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120e:	4619      	mov	r1, r3
 8001210:	4816      	ldr	r0, [pc, #88]	@ (800126c <MX_GPIO_Init+0x240>)
 8001212:	f001 fd29 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : FIM_CURSO_1_Pin */
  GPIO_InitStruct.Pin = FIM_CURSO_1_Pin;
 8001216:	2308      	movs	r3, #8
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121a:	2300      	movs	r3, #0
 800121c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(FIM_CURSO_1_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001226:	4619      	mov	r1, r3
 8001228:	4811      	ldr	r0, [pc, #68]	@ (8001270 <MX_GPIO_Init+0x244>)
 800122a:	f001 fd1d 	bl	8002c68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	2009      	movs	r0, #9
 8001234:	f000 ff8b 	bl	800214e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001238:	2009      	movs	r0, #9
 800123a:	f000 ffa4 	bl	8002186 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	2028      	movs	r0, #40	@ 0x28
 8001244:	f000 ff83 	bl	800214e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001248:	2028      	movs	r0, #40	@ 0x28
 800124a:	f000 ff9c 	bl	8002186 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800124e:	bf00      	nop
 8001250:	3738      	adds	r7, #56	@ 0x38
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40021000 	.word	0x40021000
 8001260:	40021400 	.word	0x40021400
 8001264:	40021800 	.word	0x40021800
 8001268:	40020c00 	.word	0x40020c00
 800126c:	40020000 	.word	0x40020000
 8001270:	40020400 	.word	0x40020400

08001274 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b10      	ldr	r3, [pc, #64]	@ (80012c0 <HAL_MspInit+0x4c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001282:	4a0f      	ldr	r2, [pc, #60]	@ (80012c0 <HAL_MspInit+0x4c>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001288:	6453      	str	r3, [r2, #68]	@ 0x44
 800128a:	4b0d      	ldr	r3, [pc, #52]	@ (80012c0 <HAL_MspInit+0x4c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <HAL_MspInit+0x4c>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	4a08      	ldr	r2, [pc, #32]	@ (80012c0 <HAL_MspInit+0x4c>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_MspInit+0x4c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800

080012c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	@ 0x28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a3c      	ldr	r2, [pc, #240]	@ (80013d4 <HAL_ADC_MspInit+0x110>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d172      	bne.n	80013cc <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	4b3b      	ldr	r3, [pc, #236]	@ (80013d8 <HAL_ADC_MspInit+0x114>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	4a3a      	ldr	r2, [pc, #232]	@ (80013d8 <HAL_ADC_MspInit+0x114>)
 80012f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012f6:	4b38      	ldr	r3, [pc, #224]	@ (80013d8 <HAL_ADC_MspInit+0x114>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b34      	ldr	r3, [pc, #208]	@ (80013d8 <HAL_ADC_MspInit+0x114>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	4a33      	ldr	r2, [pc, #204]	@ (80013d8 <HAL_ADC_MspInit+0x114>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	6313      	str	r3, [r2, #48]	@ 0x30
 8001312:	4b31      	ldr	r3, [pc, #196]	@ (80013d8 <HAL_ADC_MspInit+0x114>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	4b2d      	ldr	r3, [pc, #180]	@ (80013d8 <HAL_ADC_MspInit+0x114>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a2c      	ldr	r2, [pc, #176]	@ (80013d8 <HAL_ADC_MspInit+0x114>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b2a      	ldr	r3, [pc, #168]	@ (80013d8 <HAL_ADC_MspInit+0x114>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_IN10
    PA6     ------> ADC2_IN6
    */
    GPIO_InitStruct.Pin = MOTOR_BOBINA_TENSAO_Pin;
 800133a:	2301      	movs	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133e:	2303      	movs	r3, #3
 8001340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_BOBINA_TENSAO_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4823      	ldr	r0, [pc, #140]	@ (80013dc <HAL_ADC_MspInit+0x118>)
 800134e:	f001 fc8b 	bl	8002c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_POLIA_TENSAO_Pin;
 8001352:	2340      	movs	r3, #64	@ 0x40
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001356:	2303      	movs	r3, #3
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_POLIA_TENSAO_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	481e      	ldr	r0, [pc, #120]	@ (80013e0 <HAL_ADC_MspInit+0x11c>)
 8001366:	f001 fc7f 	bl	8002c68 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 800136a:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <HAL_ADC_MspInit+0x120>)
 800136c:	4a1e      	ldr	r2, [pc, #120]	@ (80013e8 <HAL_ADC_MspInit+0x124>)
 800136e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001370:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <HAL_ADC_MspInit+0x120>)
 8001372:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001376:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001378:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <HAL_ADC_MspInit+0x120>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800137e:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <HAL_ADC_MspInit+0x120>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001384:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <HAL_ADC_MspInit+0x120>)
 8001386:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800138a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <HAL_ADC_MspInit+0x120>)
 800138e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001392:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001394:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <HAL_ADC_MspInit+0x120>)
 8001396:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800139a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <HAL_ADC_MspInit+0x120>)
 800139e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013a2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <HAL_ADC_MspInit+0x120>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <HAL_ADC_MspInit+0x120>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80013b0:	480c      	ldr	r0, [pc, #48]	@ (80013e4 <HAL_ADC_MspInit+0x120>)
 80013b2:	f001 f8e9 	bl	8002588 <HAL_DMA_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80013bc:	f7ff fc22 	bl	8000c04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a08      	ldr	r2, [pc, #32]	@ (80013e4 <HAL_ADC_MspInit+0x120>)
 80013c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80013c6:	4a07      	ldr	r2, [pc, #28]	@ (80013e4 <HAL_ADC_MspInit+0x120>)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC2_MspInit 1 */

  }

}
 80013cc:	bf00      	nop
 80013ce:	3728      	adds	r7, #40	@ 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40012100 	.word	0x40012100
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40020000 	.word	0x40020000
 80013e4:	20000ee8 	.word	0x20000ee8
 80013e8:	40026440 	.word	0x40026440

080013ec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	@ 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a48      	ldr	r2, [pc, #288]	@ (800152c <HAL_DAC_MspInit+0x140>)
 800140a:	4293      	cmp	r3, r2
 800140c:	f040 808a 	bne.w	8001524 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	4b46      	ldr	r3, [pc, #280]	@ (8001530 <HAL_DAC_MspInit+0x144>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	4a45      	ldr	r2, [pc, #276]	@ (8001530 <HAL_DAC_MspInit+0x144>)
 800141a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800141e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001420:	4b43      	ldr	r3, [pc, #268]	@ (8001530 <HAL_DAC_MspInit+0x144>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	4b3f      	ldr	r3, [pc, #252]	@ (8001530 <HAL_DAC_MspInit+0x144>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001434:	4a3e      	ldr	r2, [pc, #248]	@ (8001530 <HAL_DAC_MspInit+0x144>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6313      	str	r3, [r2, #48]	@ 0x30
 800143c:	4b3c      	ldr	r3, [pc, #240]	@ (8001530 <HAL_DAC_MspInit+0x144>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = MOTOR_BOBINA_VEL_Pin|MOTOR_POLIA_VEL_Pin;
 8001448:	2330      	movs	r3, #48	@ 0x30
 800144a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800144c:	2303      	movs	r3, #3
 800144e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	4836      	ldr	r0, [pc, #216]	@ (8001534 <HAL_DAC_MspInit+0x148>)
 800145c:	f001 fc04 	bl	8002c68 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001460:	4b35      	ldr	r3, [pc, #212]	@ (8001538 <HAL_DAC_MspInit+0x14c>)
 8001462:	4a36      	ldr	r2, [pc, #216]	@ (800153c <HAL_DAC_MspInit+0x150>)
 8001464:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001466:	4b34      	ldr	r3, [pc, #208]	@ (8001538 <HAL_DAC_MspInit+0x14c>)
 8001468:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800146c:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800146e:	4b32      	ldr	r3, [pc, #200]	@ (8001538 <HAL_DAC_MspInit+0x14c>)
 8001470:	2240      	movs	r2, #64	@ 0x40
 8001472:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001474:	4b30      	ldr	r3, [pc, #192]	@ (8001538 <HAL_DAC_MspInit+0x14c>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800147a:	4b2f      	ldr	r3, [pc, #188]	@ (8001538 <HAL_DAC_MspInit+0x14c>)
 800147c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001480:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001482:	4b2d      	ldr	r3, [pc, #180]	@ (8001538 <HAL_DAC_MspInit+0x14c>)
 8001484:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001488:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800148a:	4b2b      	ldr	r3, [pc, #172]	@ (8001538 <HAL_DAC_MspInit+0x14c>)
 800148c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001490:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001492:	4b29      	ldr	r3, [pc, #164]	@ (8001538 <HAL_DAC_MspInit+0x14c>)
 8001494:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001498:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 800149a:	4b27      	ldr	r3, [pc, #156]	@ (8001538 <HAL_DAC_MspInit+0x14c>)
 800149c:	2200      	movs	r2, #0
 800149e:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014a0:	4b25      	ldr	r3, [pc, #148]	@ (8001538 <HAL_DAC_MspInit+0x14c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80014a6:	4824      	ldr	r0, [pc, #144]	@ (8001538 <HAL_DAC_MspInit+0x14c>)
 80014a8:	f001 f86e 	bl	8002588 <HAL_DMA_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80014b2:	f7ff fba7 	bl	8000c04 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001538 <HAL_DAC_MspInit+0x14c>)
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001538 <HAL_DAC_MspInit+0x14c>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 80014c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001540 <HAL_DAC_MspInit+0x154>)
 80014c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001544 <HAL_DAC_MspInit+0x158>)
 80014c6:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80014c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001540 <HAL_DAC_MspInit+0x154>)
 80014ca:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80014ce:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <HAL_DAC_MspInit+0x154>)
 80014d2:	2240      	movs	r2, #64	@ 0x40
 80014d4:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <HAL_DAC_MspInit+0x154>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80014dc:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <HAL_DAC_MspInit+0x154>)
 80014de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014e2:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014e4:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <HAL_DAC_MspInit+0x154>)
 80014e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014ea:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014ec:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <HAL_DAC_MspInit+0x154>)
 80014ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014f2:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <HAL_DAC_MspInit+0x154>)
 80014f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014fa:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80014fc:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <HAL_DAC_MspInit+0x154>)
 80014fe:	2200      	movs	r2, #0
 8001500:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001502:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <HAL_DAC_MspInit+0x154>)
 8001504:	2200      	movs	r2, #0
 8001506:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8001508:	480d      	ldr	r0, [pc, #52]	@ (8001540 <HAL_DAC_MspInit+0x154>)
 800150a:	f001 f83d 	bl	8002588 <HAL_DMA_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8001514:	f7ff fb76 	bl	8000c04 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a09      	ldr	r2, [pc, #36]	@ (8001540 <HAL_DAC_MspInit+0x154>)
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	4a08      	ldr	r2, [pc, #32]	@ (8001540 <HAL_DAC_MspInit+0x154>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001524:	bf00      	nop
 8001526:	3728      	adds	r7, #40	@ 0x28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40007400 	.word	0x40007400
 8001530:	40023800 	.word	0x40023800
 8001534:	40020000 	.word	0x40020000
 8001538:	20000f5c 	.word	0x20000f5c
 800153c:	40026088 	.word	0x40026088
 8001540:	20000fbc 	.word	0x20000fbc
 8001544:	400260a0 	.word	0x400260a0

08001548 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a15      	ldr	r2, [pc, #84]	@ (80015ac <HAL_TIM_Base_MspInit+0x64>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d10e      	bne.n	8001578 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <HAL_TIM_Base_MspInit+0x68>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	4a13      	ldr	r2, [pc, #76]	@ (80015b0 <HAL_TIM_Base_MspInit+0x68>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6453      	str	r3, [r2, #68]	@ 0x44
 800156a:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <HAL_TIM_Base_MspInit+0x68>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001576:	e012      	b.n	800159e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001580:	d10d      	bne.n	800159e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <HAL_TIM_Base_MspInit+0x68>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	4a09      	ldr	r2, [pc, #36]	@ (80015b0 <HAL_TIM_Base_MspInit+0x68>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6413      	str	r3, [r2, #64]	@ 0x40
 8001592:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <HAL_TIM_Base_MspInit+0x68>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40010000 	.word	0x40010000
 80015b0:	40023800 	.word	0x40023800

080015b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a12      	ldr	r2, [pc, #72]	@ (800161c <HAL_TIM_MspPostInit+0x68>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d11e      	bne.n	8001614 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <HAL_TIM_MspPostInit+0x6c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	4a10      	ldr	r2, [pc, #64]	@ (8001620 <HAL_TIM_MspPostInit+0x6c>)
 80015e0:	f043 0310 	orr.w	r3, r3, #16
 80015e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <HAL_TIM_MspPostInit+0x6c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_CARRO_TRANSVERSAL_PWM_Pin;
 80015f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001604:	2301      	movs	r3, #1
 8001606:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_CARRO_TRANSVERSAL_PWM_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	4619      	mov	r1, r3
 800160e:	4805      	ldr	r0, [pc, #20]	@ (8001624 <HAL_TIM_MspPostInit+0x70>)
 8001610:	f001 fb2a 	bl	8002c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	3720      	adds	r7, #32
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40010000 	.word	0x40010000
 8001620:	40023800 	.word	0x40023800
 8001624:	40021000 	.word	0x40021000

08001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800162c:	f002 f95c 	bl	80038e8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <NMI_Handler+0x8>

08001634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <MemManage_Handler+0x4>

08001644 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <UsageFault_Handler+0x4>

08001654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPTO_3_Pin);
 8001674:	2008      	movs	r0, #8
 8001676:	f001 fcef 	bl	8003058 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}

0800167e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPTO_1_Pin);
 8001682:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001686:	f001 fce7 	bl	8003058 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPTO_2_Pin);
 800168a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800168e:	f001 fce3 	bl	8003058 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <DMA2_Stream2_IRQHandler+0x10>)
 800169e:	f001 f879 	bl	8002794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000ee8 	.word	0x20000ee8

080016ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b0:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0d      	ldr	r2, [pc, #52]	@ (80016ec <HAL_Init+0x40>)
 80016b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016bc:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <HAL_Init+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0a      	ldr	r2, [pc, #40]	@ (80016ec <HAL_Init+0x40>)
 80016c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c8:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <HAL_Init+0x40>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a07      	ldr	r2, [pc, #28]	@ (80016ec <HAL_Init+0x40>)
 80016ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d4:	2003      	movs	r0, #3
 80016d6:	f000 fd2f 	bl	8002138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016da:	200f      	movs	r0, #15
 80016dc:	f000 f808 	bl	80016f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e0:	f7ff fdc8 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023c00 	.word	0x40023c00

080016f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <HAL_InitTick+0x54>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <HAL_InitTick+0x58>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001706:	fbb3 f3f1 	udiv	r3, r3, r1
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f000 fd47 	bl	80021a2 <HAL_SYSTICK_Config>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e00e      	b.n	800173c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b0f      	cmp	r3, #15
 8001722:	d80a      	bhi.n	800173a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001724:	2200      	movs	r2, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f000 fd0f 	bl	800214e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001730:	4a06      	ldr	r2, [pc, #24]	@ (800174c <HAL_InitTick+0x5c>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e000      	b.n	800173c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000008 	.word	0x20000008
 8001748:	20000004 	.word	0x20000004
 800174c:	20000000 	.word	0x20000000

08001750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;
 8001754:	4b03      	ldr	r3, [pc, #12]	@ (8001764 <HAL_GetTick+0x14>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	200010ac 	.word	0x200010ac

08001768 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e033      	b.n	80017e6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	2b00      	cmp	r3, #0
 8001784:	d109      	bne.n	800179a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff fd9c 	bl	80012c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d118      	bne.n	80017d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017ae:	f023 0302 	bic.w	r3, r3, #2
 80017b2:	f043 0202 	orr.w	r2, r3, #2
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 fa6e 	bl	8001c9c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	f023 0303 	bic.w	r3, r3, #3
 80017ce:	f043 0201 	orr.w	r2, r3, #1
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80017d6:	e001      	b.n	80017dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001806:	2b01      	cmp	r3, #1
 8001808:	d101      	bne.n	800180e <HAL_ADC_Start_DMA+0x1e>
 800180a:	2302      	movs	r3, #2
 800180c:	e0e9      	b.n	80019e2 <HAL_ADC_Start_DMA+0x1f2>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b01      	cmp	r3, #1
 8001822:	d018      	beq.n	8001856 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f042 0201 	orr.w	r2, r2, #1
 8001832:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001834:	4b6d      	ldr	r3, [pc, #436]	@ (80019ec <HAL_ADC_Start_DMA+0x1fc>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a6d      	ldr	r2, [pc, #436]	@ (80019f0 <HAL_ADC_Start_DMA+0x200>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	0c9a      	lsrs	r2, r3, #18
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001848:	e002      	b.n	8001850 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	3b01      	subs	r3, #1
 800184e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f9      	bne.n	800184a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001864:	d107      	bne.n	8001876 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001874:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b01      	cmp	r3, #1
 8001882:	f040 80a1 	bne.w	80019c8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d007      	beq.n	80018b8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018c4:	d106      	bne.n	80018d4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	f023 0206 	bic.w	r2, r3, #6
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	645a      	str	r2, [r3, #68]	@ 0x44
 80018d2:	e002      	b.n	80018da <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018e2:	4b44      	ldr	r3, [pc, #272]	@ (80019f4 <HAL_ADC_Start_DMA+0x204>)
 80018e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ea:	4a43      	ldr	r2, [pc, #268]	@ (80019f8 <HAL_ADC_Start_DMA+0x208>)
 80018ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018f2:	4a42      	ldr	r2, [pc, #264]	@ (80019fc <HAL_ADC_Start_DMA+0x20c>)
 80018f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018fa:	4a41      	ldr	r2, [pc, #260]	@ (8001a00 <HAL_ADC_Start_DMA+0x210>)
 80018fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001906:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001916:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001926:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	334c      	adds	r3, #76	@ 0x4c
 8001932:	4619      	mov	r1, r3
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f000 fed4 	bl	80026e4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 031f 	and.w	r3, r3, #31
 8001944:	2b00      	cmp	r3, #0
 8001946:	d12a      	bne.n	800199e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a2d      	ldr	r2, [pc, #180]	@ (8001a04 <HAL_ADC_Start_DMA+0x214>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d015      	beq.n	800197e <HAL_ADC_Start_DMA+0x18e>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a2c      	ldr	r2, [pc, #176]	@ (8001a08 <HAL_ADC_Start_DMA+0x218>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d105      	bne.n	8001968 <HAL_ADC_Start_DMA+0x178>
 800195c:	4b25      	ldr	r3, [pc, #148]	@ (80019f4 <HAL_ADC_Start_DMA+0x204>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 031f 	and.w	r3, r3, #31
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00a      	beq.n	800197e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a27      	ldr	r2, [pc, #156]	@ (8001a0c <HAL_ADC_Start_DMA+0x21c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d136      	bne.n	80019e0 <HAL_ADC_Start_DMA+0x1f0>
 8001972:	4b20      	ldr	r3, [pc, #128]	@ (80019f4 <HAL_ADC_Start_DMA+0x204>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0310 	and.w	r3, r3, #16
 800197a:	2b00      	cmp	r3, #0
 800197c:	d130      	bne.n	80019e0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d129      	bne.n	80019e0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	e020      	b.n	80019e0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a18      	ldr	r2, [pc, #96]	@ (8001a04 <HAL_ADC_Start_DMA+0x214>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d11b      	bne.n	80019e0 <HAL_ADC_Start_DMA+0x1f0>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d114      	bne.n	80019e0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	e00b      	b.n	80019e0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019cc:	f043 0210 	orr.w	r2, r3, #16
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008
 80019f0:	431bde83 	.word	0x431bde83
 80019f4:	40012300 	.word	0x40012300
 80019f8:	08001e95 	.word	0x08001e95
 80019fc:	08001f4f 	.word	0x08001f4f
 8001a00:	08001f6b 	.word	0x08001f6b
 8001a04:	40012000 	.word	0x40012000
 8001a08:	40012100 	.word	0x40012100
 8001a0c:	40012200 	.word	0x40012200

08001a10 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x1c>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e113      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x244>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b09      	cmp	r3, #9
 8001a62:	d925      	bls.n	8001ab0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68d9      	ldr	r1, [r3, #12]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	461a      	mov	r2, r3
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	3b1e      	subs	r3, #30
 8001a7a:	2207      	movs	r2, #7
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43da      	mvns	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	400a      	ands	r2, r1
 8001a88:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68d9      	ldr	r1, [r3, #12]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4403      	add	r3, r0
 8001aa2:	3b1e      	subs	r3, #30
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	e022      	b.n	8001af6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6919      	ldr	r1, [r3, #16]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6919      	ldr	r1, [r3, #16]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4403      	add	r3, r0
 8001aec:	409a      	lsls	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d824      	bhi.n	8001b48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3b05      	subs	r3, #5
 8001b10:	221f      	movs	r2, #31
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	3b05      	subs	r3, #5
 8001b3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b46:	e04c      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b0c      	cmp	r3, #12
 8001b4e:	d824      	bhi.n	8001b9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	3b23      	subs	r3, #35	@ 0x23
 8001b62:	221f      	movs	r2, #31
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43da      	mvns	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	400a      	ands	r2, r1
 8001b70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	3b23      	subs	r3, #35	@ 0x23
 8001b8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b98:	e023      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	3b41      	subs	r3, #65	@ 0x41
 8001bac:	221f      	movs	r2, #31
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	400a      	ands	r2, r1
 8001bba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	4618      	mov	r0, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3b41      	subs	r3, #65	@ 0x41
 8001bd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001be2:	4b29      	ldr	r3, [pc, #164]	@ (8001c88 <HAL_ADC_ConfigChannel+0x250>)
 8001be4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a28      	ldr	r2, [pc, #160]	@ (8001c8c <HAL_ADC_ConfigChannel+0x254>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d10f      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x1d8>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b12      	cmp	r3, #18
 8001bf6:	d10b      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a1d      	ldr	r2, [pc, #116]	@ (8001c8c <HAL_ADC_ConfigChannel+0x254>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d12b      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x23a>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001c90 <HAL_ADC_ConfigChannel+0x258>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d003      	beq.n	8001c2c <HAL_ADC_ConfigChannel+0x1f4>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b11      	cmp	r3, #17
 8001c2a:	d122      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a11      	ldr	r2, [pc, #68]	@ (8001c90 <HAL_ADC_ConfigChannel+0x258>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d111      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c4e:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <HAL_ADC_ConfigChannel+0x25c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a11      	ldr	r2, [pc, #68]	@ (8001c98 <HAL_ADC_ConfigChannel+0x260>)
 8001c54:	fba2 2303 	umull	r2, r3, r2, r3
 8001c58:	0c9a      	lsrs	r2, r3, #18
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c64:	e002      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f9      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	40012300 	.word	0x40012300
 8001c8c:	40012000 	.word	0x40012000
 8001c90:	10000012 	.word	0x10000012
 8001c94:	20000008 	.word	0x20000008
 8001c98:	431bde83 	.word	0x431bde83

08001c9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ca4:	4b79      	ldr	r3, [pc, #484]	@ (8001e8c <ADC_Init+0x1f0>)
 8001ca6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	021a      	lsls	r2, r3, #8
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001cf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6859      	ldr	r1, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6899      	ldr	r1, [r3, #8]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2e:	4a58      	ldr	r2, [pc, #352]	@ (8001e90 <ADC_Init+0x1f4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d022      	beq.n	8001d7a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6899      	ldr	r1, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6899      	ldr	r1, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	e00f      	b.n	8001d9a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d98:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0202 	bic.w	r2, r2, #2
 8001da8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6899      	ldr	r1, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7e1b      	ldrb	r3, [r3, #24]
 8001db4:	005a      	lsls	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d01b      	beq.n	8001e00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dd6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001de6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6859      	ldr	r1, [r3, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df2:	3b01      	subs	r3, #1
 8001df4:	035a      	lsls	r2, r3, #13
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	e007      	b.n	8001e10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e0e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	051a      	lsls	r2, r3, #20
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6899      	ldr	r1, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e52:	025a      	lsls	r2, r3, #9
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6899      	ldr	r1, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	029a      	lsls	r2, r3, #10
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	609a      	str	r2, [r3, #8]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	40012300 	.word	0x40012300
 8001e90:	0f000001 	.word	0x0f000001

08001e94 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d13c      	bne.n	8001f28 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d12b      	bne.n	8001f20 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d127      	bne.n	8001f20 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d006      	beq.n	8001eec <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d119      	bne.n	8001f20 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0220 	bic.w	r2, r2, #32
 8001efa:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	f043 0201 	orr.w	r2, r3, #1
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f7fe fb91 	bl	8000648 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f26:	e00e      	b.n	8001f46 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f7ff fd75 	bl	8001a24 <HAL_ADC_ErrorCallback>
}
 8001f3a:	e004      	b.n	8001f46 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	4798      	blx	r3
}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b084      	sub	sp, #16
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f5a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f7ff fd57 	bl	8001a10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b084      	sub	sp, #16
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f76:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2240      	movs	r2, #64	@ 0x40
 8001f7c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f82:	f043 0204 	orr.w	r2, r3, #4
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f7ff fd4a 	bl	8001a24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fca:	4a04      	ldr	r2, [pc, #16]	@ (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	60d3      	str	r3, [r2, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe4:	4b04      	ldr	r3, [pc, #16]	@ (8001ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 0307 	and.w	r3, r3, #7
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	2b00      	cmp	r3, #0
 800200c:	db0b      	blt.n	8002026 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	f003 021f 	and.w	r2, r3, #31
 8002014:	4907      	ldr	r1, [pc, #28]	@ (8002034 <__NVIC_EnableIRQ+0x38>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	2001      	movs	r0, #1
 800201e:	fa00 f202 	lsl.w	r2, r0, r2
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000e100 	.word	0xe000e100

08002038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002048:	2b00      	cmp	r3, #0
 800204a:	db0a      	blt.n	8002062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	490c      	ldr	r1, [pc, #48]	@ (8002084 <__NVIC_SetPriority+0x4c>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	0112      	lsls	r2, r2, #4
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	440b      	add	r3, r1
 800205c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002060:	e00a      	b.n	8002078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4908      	ldr	r1, [pc, #32]	@ (8002088 <__NVIC_SetPriority+0x50>)
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	3b04      	subs	r3, #4
 8002070:	0112      	lsls	r2, r2, #4
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	440b      	add	r3, r1
 8002076:	761a      	strb	r2, [r3, #24]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000e100 	.word	0xe000e100
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	@ 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f1c3 0307 	rsb	r3, r3, #7
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	bf28      	it	cs
 80020aa:	2304      	movcs	r3, #4
 80020ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3304      	adds	r3, #4
 80020b2:	2b06      	cmp	r3, #6
 80020b4:	d902      	bls.n	80020bc <NVIC_EncodePriority+0x30>
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3b03      	subs	r3, #3
 80020ba:	e000      	b.n	80020be <NVIC_EncodePriority+0x32>
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	f04f 32ff 	mov.w	r2, #4294967295
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43da      	mvns	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	401a      	ands	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d4:	f04f 31ff 	mov.w	r1, #4294967295
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	43d9      	mvns	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	4313      	orrs	r3, r2
         );
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3724      	adds	r7, #36	@ 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002104:	d301      	bcc.n	800210a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002106:	2301      	movs	r3, #1
 8002108:	e00f      	b.n	800212a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210a:	4a0a      	ldr	r2, [pc, #40]	@ (8002134 <SysTick_Config+0x40>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002112:	210f      	movs	r1, #15
 8002114:	f04f 30ff 	mov.w	r0, #4294967295
 8002118:	f7ff ff8e 	bl	8002038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800211c:	4b05      	ldr	r3, [pc, #20]	@ (8002134 <SysTick_Config+0x40>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002122:	4b04      	ldr	r3, [pc, #16]	@ (8002134 <SysTick_Config+0x40>)
 8002124:	2207      	movs	r2, #7
 8002126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	e000e010 	.word	0xe000e010

08002138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ff29 	bl	8001f98 <__NVIC_SetPriorityGrouping>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002160:	f7ff ff3e 	bl	8001fe0 <__NVIC_GetPriorityGrouping>
 8002164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	f7ff ff8e 	bl	800208c <NVIC_EncodePriority>
 8002170:	4602      	mov	r2, r0
 8002172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff5d 	bl	8002038 <__NVIC_SetPriority>
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff31 	bl	8001ffc <__NVIC_EnableIRQ>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffa2 	bl	80020f4 <SysTick_Config>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e014      	b.n	80021f6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	791b      	ldrb	r3, [r3, #4]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d105      	bne.n	80021e2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff f905 	bl	80013ec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2202      	movs	r2, #2
 80021e6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0a2      	b.n	8002362 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	795b      	ldrb	r3, [r3, #5]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_DAC_Start_DMA+0x28>
 8002224:	2302      	movs	r3, #2
 8002226:	e09c      	b.n	8002362 <HAL_DAC_Start_DMA+0x162>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2201      	movs	r2, #1
 800222c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2202      	movs	r2, #2
 8002232:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d129      	bne.n	800228e <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	4a4b      	ldr	r2, [pc, #300]	@ (800236c <HAL_DAC_Start_DMA+0x16c>)
 8002240:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	4a4a      	ldr	r2, [pc, #296]	@ (8002370 <HAL_DAC_Start_DMA+0x170>)
 8002248:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	4a49      	ldr	r2, [pc, #292]	@ (8002374 <HAL_DAC_Start_DMA+0x174>)
 8002250:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002260:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_DAC_Start_DMA+0x70>
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	2b04      	cmp	r3, #4
 800226c:	d005      	beq.n	800227a <HAL_DAC_Start_DMA+0x7a>
 800226e:	e009      	b.n	8002284 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3308      	adds	r3, #8
 8002276:	613b      	str	r3, [r7, #16]
        break;
 8002278:	e033      	b.n	80022e2 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	330c      	adds	r3, #12
 8002280:	613b      	str	r3, [r7, #16]
        break;
 8002282:	e02e      	b.n	80022e2 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3310      	adds	r3, #16
 800228a:	613b      	str	r3, [r7, #16]
        break;
 800228c:	e029      	b.n	80022e2 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	4a39      	ldr	r2, [pc, #228]	@ (8002378 <HAL_DAC_Start_DMA+0x178>)
 8002294:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	4a38      	ldr	r2, [pc, #224]	@ (800237c <HAL_DAC_Start_DMA+0x17c>)
 800229c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	4a37      	ldr	r2, [pc, #220]	@ (8002380 <HAL_DAC_Start_DMA+0x180>)
 80022a4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80022b4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_DAC_Start_DMA+0xc4>
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d005      	beq.n	80022ce <HAL_DAC_Start_DMA+0xce>
 80022c2:	e009      	b.n	80022d8 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	3314      	adds	r3, #20
 80022ca:	613b      	str	r3, [r7, #16]
        break;
 80022cc:	e009      	b.n	80022e2 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3318      	adds	r3, #24
 80022d4:	613b      	str	r3, [r7, #16]
        break;
 80022d6:	e004      	b.n	80022e2 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	331c      	adds	r3, #28
 80022de:	613b      	str	r3, [r7, #16]
        break;
 80022e0:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d111      	bne.n	800230c <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6898      	ldr	r0, [r3, #8]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	f000 f9ef 	bl	80026e4 <HAL_DMA_Start_IT>
 8002306:	4603      	mov	r3, r0
 8002308:	75fb      	strb	r3, [r7, #23]
 800230a:	e010      	b.n	800232e <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800231a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	68d8      	ldr	r0, [r3, #12]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	f000 f9dd 	bl	80026e4 <HAL_DMA_Start_IT>
 800232a:	4603      	mov	r3, r0
 800232c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002334:	7dfb      	ldrb	r3, [r7, #23]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10c      	bne.n	8002354 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6819      	ldr	r1, [r3, #0]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2201      	movs	r2, #1
 8002348:	409a      	lsls	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	e005      	b.n	8002360 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	f043 0204 	orr.w	r2, r3, #4
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002360:	7dfb      	ldrb	r3, [r7, #23]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	08002473 	.word	0x08002473
 8002370:	08002495 	.word	0x08002495
 8002374:	080024b1 	.word	0x080024b1
 8002378:	0800251b 	.word	0x0800251b
 800237c:	0800253d 	.word	0x0800253d
 8002380:	08002559 	.word	0x08002559

08002384 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	@ 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <HAL_DAC_ConfigChannel+0x1c>
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e042      	b.n	8002466 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	795b      	ldrb	r3, [r3, #5]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_DAC_ConfigChannel+0x2c>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e03c      	b.n	8002466 <HAL_DAC_ConfigChannel+0xa6>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2201      	movs	r2, #1
 80023f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2202      	movs	r2, #2
 80023f6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4313      	orrs	r3, r2
 8002420:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f003 0310 	and.w	r3, r3, #16
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6819      	ldr	r1, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	22c0      	movs	r2, #192	@ 0xc0
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	400a      	ands	r2, r1
 8002456:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002464:	7ffb      	ldrb	r3, [r7, #31]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	@ 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800247e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f7ff ff7f 	bl	8002384 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2201      	movs	r2, #1
 800248a:	711a      	strb	r2, [r3, #4]
}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f7ff ff78 	bl	8002398 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80024a8:	bf00      	nop
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f043 0204 	orr.w	r2, r3, #4
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f7ff ff6e 	bl	80023ac <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2201      	movs	r2, #1
 80024d4:	711a      	strb	r2, [r3, #4]
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002526:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f7ff ffd8 	bl	80024de <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2201      	movs	r2, #1
 8002532:	711a      	strb	r2, [r3, #4]
}
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002548:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f7ff ffd1 	bl	80024f2 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002550:	bf00      	nop
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002564:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f043 0204 	orr.w	r2, r3, #4
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f7ff ffc7 	bl	8002506 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2201      	movs	r2, #1
 800257c:	711a      	strb	r2, [r3, #4]
}
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002594:	f7ff f8dc 	bl	8001750 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e099      	b.n	80026d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0201 	bic.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c4:	e00f      	b.n	80025e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025c6:	f7ff f8c3 	bl	8001750 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b05      	cmp	r3, #5
 80025d2:	d908      	bls.n	80025e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2220      	movs	r2, #32
 80025d8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2203      	movs	r2, #3
 80025de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e078      	b.n	80026d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1e8      	bne.n	80025c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4b38      	ldr	r3, [pc, #224]	@ (80026e0 <HAL_DMA_Init+0x158>)
 8002600:	4013      	ands	r3, r2
 8002602:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002612:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800261e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800262a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263c:	2b04      	cmp	r3, #4
 800263e:	d107      	bne.n	8002650 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002648:	4313      	orrs	r3, r2
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	4313      	orrs	r3, r2
 800264e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f023 0307 	bic.w	r3, r3, #7
 8002666:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	4313      	orrs	r3, r2
 8002670:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002676:	2b04      	cmp	r3, #4
 8002678:	d117      	bne.n	80026aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00e      	beq.n	80026aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 fa6f 	bl	8002b70 <DMA_CheckFifoParam>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2240      	movs	r2, #64	@ 0x40
 800269c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80026a6:	2301      	movs	r3, #1
 80026a8:	e016      	b.n	80026d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fa26 	bl	8002b04 <DMA_CalcBaseAndBitshift>
 80026b8:	4603      	mov	r3, r0
 80026ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c0:	223f      	movs	r2, #63	@ 0x3f
 80026c2:	409a      	lsls	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	f010803f 	.word	0xf010803f

080026e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_DMA_Start_IT+0x26>
 8002706:	2302      	movs	r3, #2
 8002708:	e040      	b.n	800278c <HAL_DMA_Start_IT+0xa8>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b01      	cmp	r3, #1
 800271c:	d12f      	bne.n	800277e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2202      	movs	r2, #2
 8002722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f9b8 	bl	8002aa8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273c:	223f      	movs	r2, #63	@ 0x3f
 800273e:	409a      	lsls	r2, r3
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0216 	orr.w	r2, r2, #22
 8002752:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0208 	orr.w	r2, r2, #8
 800276a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	e005      	b.n	800278a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002786:	2302      	movs	r3, #2
 8002788:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800278a:	7dfb      	ldrb	r3, [r7, #23]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027a0:	4b8e      	ldr	r3, [pc, #568]	@ (80029dc <HAL_DMA_IRQHandler+0x248>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a8e      	ldr	r2, [pc, #568]	@ (80029e0 <HAL_DMA_IRQHandler+0x24c>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	0a9b      	lsrs	r3, r3, #10
 80027ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027be:	2208      	movs	r2, #8
 80027c0:	409a      	lsls	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d01a      	beq.n	8002800 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d013      	beq.n	8002800 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0204 	bic.w	r2, r2, #4
 80027e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ec:	2208      	movs	r2, #8
 80027ee:	409a      	lsls	r2, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f8:	f043 0201 	orr.w	r2, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002804:	2201      	movs	r2, #1
 8002806:	409a      	lsls	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d012      	beq.n	8002836 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00b      	beq.n	8002836 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002822:	2201      	movs	r2, #1
 8002824:	409a      	lsls	r2, r3
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282e:	f043 0202 	orr.w	r2, r3, #2
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283a:	2204      	movs	r2, #4
 800283c:	409a      	lsls	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d012      	beq.n	800286c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00b      	beq.n	800286c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002858:	2204      	movs	r2, #4
 800285a:	409a      	lsls	r2, r3
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002864:	f043 0204 	orr.w	r2, r3, #4
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002870:	2210      	movs	r2, #16
 8002872:	409a      	lsls	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4013      	ands	r3, r2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d043      	beq.n	8002904 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d03c      	beq.n	8002904 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288e:	2210      	movs	r2, #16
 8002890:	409a      	lsls	r2, r3
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d018      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d108      	bne.n	80028c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d024      	beq.n	8002904 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
 80028c2:	e01f      	b.n	8002904 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d01b      	beq.n	8002904 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	4798      	blx	r3
 80028d4:	e016      	b.n	8002904 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d107      	bne.n	80028f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0208 	bic.w	r2, r2, #8
 80028f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002908:	2220      	movs	r2, #32
 800290a:	409a      	lsls	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4013      	ands	r3, r2
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 808f 	beq.w	8002a34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8087 	beq.w	8002a34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292a:	2220      	movs	r2, #32
 800292c:	409a      	lsls	r2, r3
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b05      	cmp	r3, #5
 800293c:	d136      	bne.n	80029ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0216 	bic.w	r2, r2, #22
 800294c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800295c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d103      	bne.n	800296e <HAL_DMA_IRQHandler+0x1da>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0208 	bic.w	r2, r2, #8
 800297c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002982:	223f      	movs	r2, #63	@ 0x3f
 8002984:	409a      	lsls	r2, r3
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d07e      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	4798      	blx	r3
        }
        return;
 80029aa:	e079      	b.n	8002aa0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d01d      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10d      	bne.n	80029e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d031      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
 80029d8:	e02c      	b.n	8002a34 <HAL_DMA_IRQHandler+0x2a0>
 80029da:	bf00      	nop
 80029dc:	20000008 	.word	0x20000008
 80029e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d023      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	4798      	blx	r3
 80029f4:	e01e      	b.n	8002a34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10f      	bne.n	8002a24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0210 	bic.w	r2, r2, #16
 8002a12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d032      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d022      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2205      	movs	r2, #5
 8002a4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	3301      	adds	r3, #1
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d307      	bcc.n	8002a7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f2      	bne.n	8002a60 <HAL_DMA_IRQHandler+0x2cc>
 8002a7a:	e000      	b.n	8002a7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	4798      	blx	r3
 8002a9e:	e000      	b.n	8002aa2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002aa0:	bf00      	nop
    }
  }
}
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ac4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b40      	cmp	r3, #64	@ 0x40
 8002ad4:	d108      	bne.n	8002ae8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ae6:	e007      	b.n	8002af8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	60da      	str	r2, [r3, #12]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	3b10      	subs	r3, #16
 8002b14:	4a14      	ldr	r2, [pc, #80]	@ (8002b68 <DMA_CalcBaseAndBitshift+0x64>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	091b      	lsrs	r3, r3, #4
 8002b1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b1e:	4a13      	ldr	r2, [pc, #76]	@ (8002b6c <DMA_CalcBaseAndBitshift+0x68>)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4413      	add	r3, r2
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d909      	bls.n	8002b46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b3a:	f023 0303 	bic.w	r3, r3, #3
 8002b3e:	1d1a      	adds	r2, r3, #4
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b44:	e007      	b.n	8002b56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b4e:	f023 0303 	bic.w	r3, r3, #3
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	aaaaaaab 	.word	0xaaaaaaab
 8002b6c:	0800868c 	.word	0x0800868c

08002b70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d11f      	bne.n	8002bca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d856      	bhi.n	8002c3e <DMA_CheckFifoParam+0xce>
 8002b90:	a201      	add	r2, pc, #4	@ (adr r2, 8002b98 <DMA_CheckFifoParam+0x28>)
 8002b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b96:	bf00      	nop
 8002b98:	08002ba9 	.word	0x08002ba9
 8002b9c:	08002bbb 	.word	0x08002bbb
 8002ba0:	08002ba9 	.word	0x08002ba9
 8002ba4:	08002c3f 	.word	0x08002c3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d046      	beq.n	8002c42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb8:	e043      	b.n	8002c42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bc2:	d140      	bne.n	8002c46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc8:	e03d      	b.n	8002c46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bd2:	d121      	bne.n	8002c18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d837      	bhi.n	8002c4a <DMA_CheckFifoParam+0xda>
 8002bda:	a201      	add	r2, pc, #4	@ (adr r2, 8002be0 <DMA_CheckFifoParam+0x70>)
 8002bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be0:	08002bf1 	.word	0x08002bf1
 8002be4:	08002bf7 	.word	0x08002bf7
 8002be8:	08002bf1 	.word	0x08002bf1
 8002bec:	08002c09 	.word	0x08002c09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf4:	e030      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d025      	beq.n	8002c4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c06:	e022      	b.n	8002c4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c10:	d11f      	bne.n	8002c52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c16:	e01c      	b.n	8002c52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d903      	bls.n	8002c26 <DMA_CheckFifoParam+0xb6>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d003      	beq.n	8002c2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c24:	e018      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	73fb      	strb	r3, [r7, #15]
      break;
 8002c2a:	e015      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00e      	beq.n	8002c56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c3c:	e00b      	b.n	8002c56 <DMA_CheckFifoParam+0xe6>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e00a      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      break;
 8002c42:	bf00      	nop
 8002c44:	e008      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      break;
 8002c46:	bf00      	nop
 8002c48:	e006      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e004      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4e:	bf00      	nop
 8002c50:	e002      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c52:	bf00      	nop
 8002c54:	e000      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      break;
 8002c56:	bf00      	nop
    }
  } 
  
  return status; 
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop

08002c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b089      	sub	sp, #36	@ 0x24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	e177      	b.n	8002f74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c84:	2201      	movs	r2, #1
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4013      	ands	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	f040 8166 	bne.w	8002f6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d005      	beq.n	8002cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d130      	bne.n	8002d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 0201 	and.w	r2, r3, #1
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d017      	beq.n	8002d58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	2203      	movs	r2, #3
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d123      	bne.n	8002dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	08da      	lsrs	r2, r3, #3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3208      	adds	r2, #8
 8002d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	220f      	movs	r2, #15
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4013      	ands	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	08da      	lsrs	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3208      	adds	r2, #8
 8002da6:	69b9      	ldr	r1, [r7, #24]
 8002da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	2203      	movs	r2, #3
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0203 	and.w	r2, r3, #3
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80c0 	beq.w	8002f6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	4b66      	ldr	r3, [pc, #408]	@ (8002f8c <HAL_GPIO_Init+0x324>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df6:	4a65      	ldr	r2, [pc, #404]	@ (8002f8c <HAL_GPIO_Init+0x324>)
 8002df8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dfe:	4b63      	ldr	r3, [pc, #396]	@ (8002f8c <HAL_GPIO_Init+0x324>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e0a:	4a61      	ldr	r2, [pc, #388]	@ (8002f90 <HAL_GPIO_Init+0x328>)
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	089b      	lsrs	r3, r3, #2
 8002e10:	3302      	adds	r3, #2
 8002e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	220f      	movs	r2, #15
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a58      	ldr	r2, [pc, #352]	@ (8002f94 <HAL_GPIO_Init+0x32c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d037      	beq.n	8002ea6 <HAL_GPIO_Init+0x23e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a57      	ldr	r2, [pc, #348]	@ (8002f98 <HAL_GPIO_Init+0x330>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d031      	beq.n	8002ea2 <HAL_GPIO_Init+0x23a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a56      	ldr	r2, [pc, #344]	@ (8002f9c <HAL_GPIO_Init+0x334>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d02b      	beq.n	8002e9e <HAL_GPIO_Init+0x236>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a55      	ldr	r2, [pc, #340]	@ (8002fa0 <HAL_GPIO_Init+0x338>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d025      	beq.n	8002e9a <HAL_GPIO_Init+0x232>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a54      	ldr	r2, [pc, #336]	@ (8002fa4 <HAL_GPIO_Init+0x33c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d01f      	beq.n	8002e96 <HAL_GPIO_Init+0x22e>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a53      	ldr	r2, [pc, #332]	@ (8002fa8 <HAL_GPIO_Init+0x340>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d019      	beq.n	8002e92 <HAL_GPIO_Init+0x22a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a52      	ldr	r2, [pc, #328]	@ (8002fac <HAL_GPIO_Init+0x344>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d013      	beq.n	8002e8e <HAL_GPIO_Init+0x226>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a51      	ldr	r2, [pc, #324]	@ (8002fb0 <HAL_GPIO_Init+0x348>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00d      	beq.n	8002e8a <HAL_GPIO_Init+0x222>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a50      	ldr	r2, [pc, #320]	@ (8002fb4 <HAL_GPIO_Init+0x34c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d007      	beq.n	8002e86 <HAL_GPIO_Init+0x21e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a4f      	ldr	r2, [pc, #316]	@ (8002fb8 <HAL_GPIO_Init+0x350>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d101      	bne.n	8002e82 <HAL_GPIO_Init+0x21a>
 8002e7e:	2309      	movs	r3, #9
 8002e80:	e012      	b.n	8002ea8 <HAL_GPIO_Init+0x240>
 8002e82:	230a      	movs	r3, #10
 8002e84:	e010      	b.n	8002ea8 <HAL_GPIO_Init+0x240>
 8002e86:	2308      	movs	r3, #8
 8002e88:	e00e      	b.n	8002ea8 <HAL_GPIO_Init+0x240>
 8002e8a:	2307      	movs	r3, #7
 8002e8c:	e00c      	b.n	8002ea8 <HAL_GPIO_Init+0x240>
 8002e8e:	2306      	movs	r3, #6
 8002e90:	e00a      	b.n	8002ea8 <HAL_GPIO_Init+0x240>
 8002e92:	2305      	movs	r3, #5
 8002e94:	e008      	b.n	8002ea8 <HAL_GPIO_Init+0x240>
 8002e96:	2304      	movs	r3, #4
 8002e98:	e006      	b.n	8002ea8 <HAL_GPIO_Init+0x240>
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e004      	b.n	8002ea8 <HAL_GPIO_Init+0x240>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e002      	b.n	8002ea8 <HAL_GPIO_Init+0x240>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_GPIO_Init+0x240>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	f002 0203 	and.w	r2, r2, #3
 8002eae:	0092      	lsls	r2, r2, #2
 8002eb0:	4093      	lsls	r3, r2
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eb8:	4935      	ldr	r1, [pc, #212]	@ (8002f90 <HAL_GPIO_Init+0x328>)
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	089b      	lsrs	r3, r3, #2
 8002ebe:	3302      	adds	r3, #2
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ec6:	4b3d      	ldr	r3, [pc, #244]	@ (8002fbc <HAL_GPIO_Init+0x354>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eea:	4a34      	ldr	r2, [pc, #208]	@ (8002fbc <HAL_GPIO_Init+0x354>)
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ef0:	4b32      	ldr	r3, [pc, #200]	@ (8002fbc <HAL_GPIO_Init+0x354>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f14:	4a29      	ldr	r2, [pc, #164]	@ (8002fbc <HAL_GPIO_Init+0x354>)
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f1a:	4b28      	ldr	r3, [pc, #160]	@ (8002fbc <HAL_GPIO_Init+0x354>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002fbc <HAL_GPIO_Init+0x354>)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f44:	4b1d      	ldr	r3, [pc, #116]	@ (8002fbc <HAL_GPIO_Init+0x354>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f68:	4a14      	ldr	r2, [pc, #80]	@ (8002fbc <HAL_GPIO_Init+0x354>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3301      	adds	r3, #1
 8002f72:	61fb      	str	r3, [r7, #28]
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	2b0f      	cmp	r3, #15
 8002f78:	f67f ae84 	bls.w	8002c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	bf00      	nop
 8002f80:	3724      	adds	r7, #36	@ 0x24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	40013800 	.word	0x40013800
 8002f94:	40020000 	.word	0x40020000
 8002f98:	40020400 	.word	0x40020400
 8002f9c:	40020800 	.word	0x40020800
 8002fa0:	40020c00 	.word	0x40020c00
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40021400 	.word	0x40021400
 8002fac:	40021800 	.word	0x40021800
 8002fb0:	40021c00 	.word	0x40021c00
 8002fb4:	40022000 	.word	0x40022000
 8002fb8:	40022400 	.word	0x40022400
 8002fbc:	40013c00 	.word	0x40013c00

08002fc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	887b      	ldrh	r3, [r7, #2]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
 8002fdc:	e001      	b.n	8002fe2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	807b      	strh	r3, [r7, #2]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003000:	787b      	ldrb	r3, [r7, #1]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003006:	887a      	ldrh	r2, [r7, #2]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800300c:	e003      	b.n	8003016 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800300e:	887b      	ldrh	r3, [r7, #2]
 8003010:	041a      	lsls	r2, r3, #16
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	619a      	str	r2, [r3, #24]
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003022:	b480      	push	{r7}
 8003024:	b085      	sub	sp, #20
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	460b      	mov	r3, r1
 800302c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003034:	887a      	ldrh	r2, [r7, #2]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4013      	ands	r3, r2
 800303a:	041a      	lsls	r2, r3, #16
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	43d9      	mvns	r1, r3
 8003040:	887b      	ldrh	r3, [r7, #2]
 8003042:	400b      	ands	r3, r1
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	619a      	str	r2, [r3, #24]
}
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
	...

08003058 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003062:	4b08      	ldr	r3, [pc, #32]	@ (8003084 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	4013      	ands	r3, r2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d006      	beq.n	800307c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800306e:	4a05      	ldr	r2, [pc, #20]	@ (8003084 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fbc0 	bl	80007fc <HAL_GPIO_EXTI_Callback>
  }
}
 800307c:	bf00      	nop
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40013c00 	.word	0x40013c00

08003088 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e267      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d075      	beq.n	8003192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030a6:	4b88      	ldr	r3, [pc, #544]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d00c      	beq.n	80030cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b2:	4b85      	ldr	r3, [pc, #532]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d112      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030be:	4b82      	ldr	r3, [pc, #520]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030ca:	d10b      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030cc:	4b7e      	ldr	r3, [pc, #504]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d05b      	beq.n	8003190 <HAL_RCC_OscConfig+0x108>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d157      	bne.n	8003190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e242      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ec:	d106      	bne.n	80030fc <HAL_RCC_OscConfig+0x74>
 80030ee:	4b76      	ldr	r3, [pc, #472]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a75      	ldr	r2, [pc, #468]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e01d      	b.n	8003138 <HAL_RCC_OscConfig+0xb0>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x98>
 8003106:	4b70      	ldr	r3, [pc, #448]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a6f      	ldr	r2, [pc, #444]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 800310c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4b6d      	ldr	r3, [pc, #436]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6c      	ldr	r2, [pc, #432]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	e00b      	b.n	8003138 <HAL_RCC_OscConfig+0xb0>
 8003120:	4b69      	ldr	r3, [pc, #420]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a68      	ldr	r2, [pc, #416]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	4b66      	ldr	r3, [pc, #408]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a65      	ldr	r2, [pc, #404]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003132:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d013      	beq.n	8003168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe fb06 	bl	8001750 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003148:	f7fe fb02 	bl	8001750 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	@ 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e207      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	4b5b      	ldr	r3, [pc, #364]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0xc0>
 8003166:	e014      	b.n	8003192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fe faf2 	bl	8001750 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003170:	f7fe faee 	bl	8001750 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	@ 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e1f3      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003182:	4b51      	ldr	r3, [pc, #324]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0xe8>
 800318e:	e000      	b.n	8003192 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d063      	beq.n	8003266 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800319e:	4b4a      	ldr	r3, [pc, #296]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031aa:	4b47      	ldr	r3, [pc, #284]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d11c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b6:	4b44      	ldr	r3, [pc, #272]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d116      	bne.n	80031f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c2:	4b41      	ldr	r3, [pc, #260]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_RCC_OscConfig+0x152>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d001      	beq.n	80031da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e1c7      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031da:	4b3b      	ldr	r3, [pc, #236]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4937      	ldr	r1, [pc, #220]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ee:	e03a      	b.n	8003266 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d020      	beq.n	800323a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f8:	4b34      	ldr	r3, [pc, #208]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fe:	f7fe faa7 	bl	8001750 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003206:	f7fe faa3 	bl	8001750 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e1a8      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003218:	4b2b      	ldr	r3, [pc, #172]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003224:	4b28      	ldr	r3, [pc, #160]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4925      	ldr	r1, [pc, #148]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003234:	4313      	orrs	r3, r2
 8003236:	600b      	str	r3, [r1, #0]
 8003238:	e015      	b.n	8003266 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800323a:	4b24      	ldr	r3, [pc, #144]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe fa86 	bl	8001750 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003248:	f7fe fa82 	bl	8001750 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e187      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	4b1b      	ldr	r3, [pc, #108]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d036      	beq.n	80032e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d016      	beq.n	80032a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800327a:	4b15      	ldr	r3, [pc, #84]	@ (80032d0 <HAL_RCC_OscConfig+0x248>)
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7fe fa66 	bl	8001750 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003288:	f7fe fa62 	bl	8001750 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e167      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329a:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 800329c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x200>
 80032a6:	e01b      	b.n	80032e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a8:	4b09      	ldr	r3, [pc, #36]	@ (80032d0 <HAL_RCC_OscConfig+0x248>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ae:	f7fe fa4f 	bl	8001750 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b4:	e00e      	b.n	80032d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b6:	f7fe fa4b 	bl	8001750 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d907      	bls.n	80032d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e150      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
 80032c8:	40023800 	.word	0x40023800
 80032cc:	42470000 	.word	0x42470000
 80032d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d4:	4b88      	ldr	r3, [pc, #544]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80032d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ea      	bne.n	80032b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8097 	beq.w	800341c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f2:	4b81      	ldr	r3, [pc, #516]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10f      	bne.n	800331e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	4b7d      	ldr	r3, [pc, #500]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	4a7c      	ldr	r2, [pc, #496]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800330c:	6413      	str	r3, [r2, #64]	@ 0x40
 800330e:	4b7a      	ldr	r3, [pc, #488]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331a:	2301      	movs	r3, #1
 800331c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331e:	4b77      	ldr	r3, [pc, #476]	@ (80034fc <HAL_RCC_OscConfig+0x474>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d118      	bne.n	800335c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332a:	4b74      	ldr	r3, [pc, #464]	@ (80034fc <HAL_RCC_OscConfig+0x474>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a73      	ldr	r2, [pc, #460]	@ (80034fc <HAL_RCC_OscConfig+0x474>)
 8003330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003336:	f7fe fa0b 	bl	8001750 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333e:	f7fe fa07 	bl	8001750 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e10c      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	4b6a      	ldr	r3, [pc, #424]	@ (80034fc <HAL_RCC_OscConfig+0x474>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d106      	bne.n	8003372 <HAL_RCC_OscConfig+0x2ea>
 8003364:	4b64      	ldr	r3, [pc, #400]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003368:	4a63      	ldr	r2, [pc, #396]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003370:	e01c      	b.n	80033ac <HAL_RCC_OscConfig+0x324>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b05      	cmp	r3, #5
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0x30c>
 800337a:	4b5f      	ldr	r3, [pc, #380]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337e:	4a5e      	ldr	r2, [pc, #376]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003380:	f043 0304 	orr.w	r3, r3, #4
 8003384:	6713      	str	r3, [r2, #112]	@ 0x70
 8003386:	4b5c      	ldr	r3, [pc, #368]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338a:	4a5b      	ldr	r2, [pc, #364]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6713      	str	r3, [r2, #112]	@ 0x70
 8003392:	e00b      	b.n	80033ac <HAL_RCC_OscConfig+0x324>
 8003394:	4b58      	ldr	r3, [pc, #352]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003398:	4a57      	ldr	r2, [pc, #348]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	6713      	str	r3, [r2, #112]	@ 0x70
 80033a0:	4b55      	ldr	r3, [pc, #340]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a4:	4a54      	ldr	r2, [pc, #336]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80033a6:	f023 0304 	bic.w	r3, r3, #4
 80033aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d015      	beq.n	80033e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fe f9cc 	bl	8001750 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f7fe f9c8 	bl	8001750 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e0cb      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d2:	4b49      	ldr	r3, [pc, #292]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0ee      	beq.n	80033bc <HAL_RCC_OscConfig+0x334>
 80033de:	e014      	b.n	800340a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e0:	f7fe f9b6 	bl	8001750 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e8:	f7fe f9b2 	bl	8001750 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e0b5      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fe:	4b3e      	ldr	r3, [pc, #248]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1ee      	bne.n	80033e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d105      	bne.n	800341c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003410:	4b39      	ldr	r3, [pc, #228]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003414:	4a38      	ldr	r2, [pc, #224]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003416:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800341a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80a1 	beq.w	8003568 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003426:	4b34      	ldr	r3, [pc, #208]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b08      	cmp	r3, #8
 8003430:	d05c      	beq.n	80034ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d141      	bne.n	80034be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343a:	4b31      	ldr	r3, [pc, #196]	@ (8003500 <HAL_RCC_OscConfig+0x478>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7fe f986 	bl	8001750 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003448:	f7fe f982 	bl	8001750 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e087      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	4b27      	ldr	r3, [pc, #156]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69da      	ldr	r2, [r3, #28]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	019b      	lsls	r3, r3, #6
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	3b01      	subs	r3, #1
 8003480:	041b      	lsls	r3, r3, #16
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	491b      	ldr	r1, [pc, #108]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003490:	4b1b      	ldr	r3, [pc, #108]	@ (8003500 <HAL_RCC_OscConfig+0x478>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003496:	f7fe f95b 	bl	8001750 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800349e:	f7fe f957 	bl	8001750 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e05c      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b0:	4b11      	ldr	r3, [pc, #68]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x416>
 80034bc:	e054      	b.n	8003568 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034be:	4b10      	ldr	r3, [pc, #64]	@ (8003500 <HAL_RCC_OscConfig+0x478>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fe f944 	bl	8001750 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fe f940 	bl	8001750 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e045      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	4b06      	ldr	r3, [pc, #24]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x444>
 80034ea:	e03d      	b.n	8003568 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d107      	bne.n	8003504 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e038      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40007000 	.word	0x40007000
 8003500:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003504:	4b1b      	ldr	r3, [pc, #108]	@ (8003574 <HAL_RCC_OscConfig+0x4ec>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d028      	beq.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351c:	429a      	cmp	r2, r3
 800351e:	d121      	bne.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352a:	429a      	cmp	r2, r3
 800352c:	d11a      	bne.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003534:	4013      	ands	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800353a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800353c:	4293      	cmp	r3, r2
 800353e:	d111      	bne.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354a:	085b      	lsrs	r3, r3, #1
 800354c:	3b01      	subs	r3, #1
 800354e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d107      	bne.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800

08003578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0cc      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800358c:	4b68      	ldr	r3, [pc, #416]	@ (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d90c      	bls.n	80035b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b65      	ldr	r3, [pc, #404]	@ (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b63      	ldr	r3, [pc, #396]	@ (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0b8      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d020      	beq.n	8003602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035cc:	4b59      	ldr	r3, [pc, #356]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	4a58      	ldr	r2, [pc, #352]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035e4:	4b53      	ldr	r3, [pc, #332]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4a52      	ldr	r2, [pc, #328]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f0:	4b50      	ldr	r3, [pc, #320]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	494d      	ldr	r1, [pc, #308]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d044      	beq.n	8003698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d107      	bne.n	8003626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	4b47      	ldr	r3, [pc, #284]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d119      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e07f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b02      	cmp	r3, #2
 800362c:	d003      	beq.n	8003636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003632:	2b03      	cmp	r3, #3
 8003634:	d107      	bne.n	8003646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003636:	4b3f      	ldr	r3, [pc, #252]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e06f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003646:	4b3b      	ldr	r3, [pc, #236]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e067      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003656:	4b37      	ldr	r3, [pc, #220]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f023 0203 	bic.w	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4934      	ldr	r1, [pc, #208]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	4313      	orrs	r3, r2
 8003666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003668:	f7fe f872 	bl	8001750 <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	e00a      	b.n	8003686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003670:	f7fe f86e 	bl	8001750 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e04f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003686:	4b2b      	ldr	r3, [pc, #172]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 020c 	and.w	r2, r3, #12
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	429a      	cmp	r2, r3
 8003696:	d1eb      	bne.n	8003670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003698:	4b25      	ldr	r3, [pc, #148]	@ (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d20c      	bcs.n	80036c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b22      	ldr	r3, [pc, #136]	@ (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b20      	ldr	r3, [pc, #128]	@ (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e032      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036cc:	4b19      	ldr	r3, [pc, #100]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4916      	ldr	r1, [pc, #88]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ea:	4b12      	ldr	r3, [pc, #72]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	490e      	ldr	r1, [pc, #56]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036fe:	f000 f82d 	bl	800375c <HAL_RCC_GetSysClockFreq>
 8003702:	4602      	mov	r2, r0
 8003704:	4b0b      	ldr	r3, [pc, #44]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	490a      	ldr	r1, [pc, #40]	@ (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	5ccb      	ldrb	r3, [r1, r3]
 8003712:	fa22 f303 	lsr.w	r3, r2, r3
 8003716:	4a09      	ldr	r2, [pc, #36]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800371a:	4b09      	ldr	r3, [pc, #36]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fd ffe6 	bl	80016f0 <HAL_InitTick>

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40023c00 	.word	0x40023c00
 8003734:	40023800 	.word	0x40023800
 8003738:	08008694 	.word	0x08008694
 800373c:	20000008 	.word	0x20000008
 8003740:	20000000 	.word	0x20000000

08003744 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003748:	4b03      	ldr	r3, [pc, #12]	@ (8003758 <HAL_RCC_EnableCSS+0x14>)
 800374a:	2201      	movs	r2, #1
 800374c:	601a      	str	r2, [r3, #0]
}
 800374e:	bf00      	nop
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	4247004c 	.word	0x4247004c

0800375c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800375c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003760:	b090      	sub	sp, #64	@ 0x40
 8003762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	637b      	str	r3, [r7, #52]	@ 0x34
 8003768:	2300      	movs	r3, #0
 800376a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800376c:	2300      	movs	r3, #0
 800376e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003774:	4b59      	ldr	r3, [pc, #356]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 030c 	and.w	r3, r3, #12
 800377c:	2b08      	cmp	r3, #8
 800377e:	d00d      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0x40>
 8003780:	2b08      	cmp	r3, #8
 8003782:	f200 80a1 	bhi.w	80038c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0x34>
 800378a:	2b04      	cmp	r3, #4
 800378c:	d003      	beq.n	8003796 <HAL_RCC_GetSysClockFreq+0x3a>
 800378e:	e09b      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003790:	4b53      	ldr	r3, [pc, #332]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003792:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003794:	e09b      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003796:	4b53      	ldr	r3, [pc, #332]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003798:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800379a:	e098      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800379c:	4b4f      	ldr	r3, [pc, #316]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x180>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037a6:	4b4d      	ldr	r3, [pc, #308]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x180>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d028      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b2:	4b4a      	ldr	r3, [pc, #296]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x180>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	099b      	lsrs	r3, r3, #6
 80037b8:	2200      	movs	r2, #0
 80037ba:	623b      	str	r3, [r7, #32]
 80037bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037c4:	2100      	movs	r1, #0
 80037c6:	4b47      	ldr	r3, [pc, #284]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80037c8:	fb03 f201 	mul.w	r2, r3, r1
 80037cc:	2300      	movs	r3, #0
 80037ce:	fb00 f303 	mul.w	r3, r0, r3
 80037d2:	4413      	add	r3, r2
 80037d4:	4a43      	ldr	r2, [pc, #268]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80037d6:	fba0 1202 	umull	r1, r2, r0, r2
 80037da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037dc:	460a      	mov	r2, r1
 80037de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80037e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037e2:	4413      	add	r3, r2
 80037e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037e8:	2200      	movs	r2, #0
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	61fa      	str	r2, [r7, #28]
 80037ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80037f6:	f7fc fdaf 	bl	8000358 <__aeabi_uldivmod>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4613      	mov	r3, r2
 8003800:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003802:	e053      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003804:	4b35      	ldr	r3, [pc, #212]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	099b      	lsrs	r3, r3, #6
 800380a:	2200      	movs	r2, #0
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	617a      	str	r2, [r7, #20]
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003816:	f04f 0b00 	mov.w	fp, #0
 800381a:	4652      	mov	r2, sl
 800381c:	465b      	mov	r3, fp
 800381e:	f04f 0000 	mov.w	r0, #0
 8003822:	f04f 0100 	mov.w	r1, #0
 8003826:	0159      	lsls	r1, r3, #5
 8003828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800382c:	0150      	lsls	r0, r2, #5
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	ebb2 080a 	subs.w	r8, r2, sl
 8003836:	eb63 090b 	sbc.w	r9, r3, fp
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003846:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800384a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800384e:	ebb2 0408 	subs.w	r4, r2, r8
 8003852:	eb63 0509 	sbc.w	r5, r3, r9
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	00eb      	lsls	r3, r5, #3
 8003860:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003864:	00e2      	lsls	r2, r4, #3
 8003866:	4614      	mov	r4, r2
 8003868:	461d      	mov	r5, r3
 800386a:	eb14 030a 	adds.w	r3, r4, sl
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	eb45 030b 	adc.w	r3, r5, fp
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003882:	4629      	mov	r1, r5
 8003884:	028b      	lsls	r3, r1, #10
 8003886:	4621      	mov	r1, r4
 8003888:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800388c:	4621      	mov	r1, r4
 800388e:	028a      	lsls	r2, r1, #10
 8003890:	4610      	mov	r0, r2
 8003892:	4619      	mov	r1, r3
 8003894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003896:	2200      	movs	r2, #0
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	60fa      	str	r2, [r7, #12]
 800389c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038a0:	f7fc fd5a 	bl	8000358 <__aeabi_uldivmod>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4613      	mov	r3, r2
 80038aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038ac:	4b0b      	ldr	r3, [pc, #44]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x180>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	0c1b      	lsrs	r3, r3, #16
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	3301      	adds	r3, #1
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80038bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038c6:	e002      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c8:	4b05      	ldr	r3, [pc, #20]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80038ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3740      	adds	r7, #64	@ 0x40
 80038d4:	46bd      	mov	sp, r7
 80038d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800
 80038e0:	00f42400 	.word	0x00f42400
 80038e4:	017d7840 	.word	0x017d7840

080038e8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80038ec:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <HAL_RCC_NMI_IRQHandler+0x20>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f4:	2b80      	cmp	r3, #128	@ 0x80
 80038f6:	d104      	bne.n	8003902 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80038f8:	f000 f80a 	bl	8003910 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80038fc:	4b03      	ldr	r3, [pc, #12]	@ (800390c <HAL_RCC_NMI_IRQHandler+0x24>)
 80038fe:	2280      	movs	r2, #128	@ 0x80
 8003900:	701a      	strb	r2, [r3, #0]
  }
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40023800 	.word	0x40023800
 800390c:	4002380e 	.word	0x4002380e

08003910 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e041      	b.n	80039b4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d106      	bne.n	800394a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7fd fdff 	bl	8001548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2202      	movs	r2, #2
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3304      	adds	r3, #4
 800395a:	4619      	mov	r1, r3
 800395c:	4610      	mov	r0, r2
 800395e:	f000 fb41 	bl	8003fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d001      	beq.n	80039d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e046      	b.n	8003a62 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a23      	ldr	r2, [pc, #140]	@ (8003a70 <HAL_TIM_Base_Start+0xb4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d022      	beq.n	8003a2c <HAL_TIM_Base_Start+0x70>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ee:	d01d      	beq.n	8003a2c <HAL_TIM_Base_Start+0x70>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003a74 <HAL_TIM_Base_Start+0xb8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d018      	beq.n	8003a2c <HAL_TIM_Base_Start+0x70>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003a78 <HAL_TIM_Base_Start+0xbc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d013      	beq.n	8003a2c <HAL_TIM_Base_Start+0x70>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a1c      	ldr	r2, [pc, #112]	@ (8003a7c <HAL_TIM_Base_Start+0xc0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00e      	beq.n	8003a2c <HAL_TIM_Base_Start+0x70>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1b      	ldr	r2, [pc, #108]	@ (8003a80 <HAL_TIM_Base_Start+0xc4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d009      	beq.n	8003a2c <HAL_TIM_Base_Start+0x70>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a19      	ldr	r2, [pc, #100]	@ (8003a84 <HAL_TIM_Base_Start+0xc8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d004      	beq.n	8003a2c <HAL_TIM_Base_Start+0x70>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a18      	ldr	r2, [pc, #96]	@ (8003a88 <HAL_TIM_Base_Start+0xcc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d111      	bne.n	8003a50 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b06      	cmp	r3, #6
 8003a3c:	d010      	beq.n	8003a60 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 0201 	orr.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a4e:	e007      	b.n	8003a60 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40010000 	.word	0x40010000
 8003a74:	40000400 	.word	0x40000400
 8003a78:	40000800 	.word	0x40000800
 8003a7c:	40000c00 	.word	0x40000c00
 8003a80:	40010400 	.word	0x40010400
 8003a84:	40014000 	.word	0x40014000
 8003a88:	40001800 	.word	0x40001800

08003a8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e041      	b.n	8003b22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f839 	bl	8003b2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4610      	mov	r0, r2
 8003acc:	f000 fa8a 	bl	8003fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
	...

08003b40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d109      	bne.n	8003b64 <HAL_TIM_PWM_Start+0x24>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	bf14      	ite	ne
 8003b5c:	2301      	movne	r3, #1
 8003b5e:	2300      	moveq	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	e022      	b.n	8003baa <HAL_TIM_PWM_Start+0x6a>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d109      	bne.n	8003b7e <HAL_TIM_PWM_Start+0x3e>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	bf14      	ite	ne
 8003b76:	2301      	movne	r3, #1
 8003b78:	2300      	moveq	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	e015      	b.n	8003baa <HAL_TIM_PWM_Start+0x6a>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d109      	bne.n	8003b98 <HAL_TIM_PWM_Start+0x58>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	bf14      	ite	ne
 8003b90:	2301      	movne	r3, #1
 8003b92:	2300      	moveq	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	e008      	b.n	8003baa <HAL_TIM_PWM_Start+0x6a>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	bf14      	ite	ne
 8003ba4:	2301      	movne	r3, #1
 8003ba6:	2300      	moveq	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e07c      	b.n	8003cac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d104      	bne.n	8003bc2 <HAL_TIM_PWM_Start+0x82>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bc0:	e013      	b.n	8003bea <HAL_TIM_PWM_Start+0xaa>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d104      	bne.n	8003bd2 <HAL_TIM_PWM_Start+0x92>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bd0:	e00b      	b.n	8003bea <HAL_TIM_PWM_Start+0xaa>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d104      	bne.n	8003be2 <HAL_TIM_PWM_Start+0xa2>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003be0:	e003      	b.n	8003bea <HAL_TIM_PWM_Start+0xaa>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2202      	movs	r2, #2
 8003be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	6839      	ldr	r1, [r7, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fcec 	bl	80045d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a2d      	ldr	r2, [pc, #180]	@ (8003cb4 <HAL_TIM_PWM_Start+0x174>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d004      	beq.n	8003c0c <HAL_TIM_PWM_Start+0xcc>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a2c      	ldr	r2, [pc, #176]	@ (8003cb8 <HAL_TIM_PWM_Start+0x178>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d101      	bne.n	8003c10 <HAL_TIM_PWM_Start+0xd0>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <HAL_TIM_PWM_Start+0xd2>
 8003c10:	2300      	movs	r3, #0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d007      	beq.n	8003c26 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a22      	ldr	r2, [pc, #136]	@ (8003cb4 <HAL_TIM_PWM_Start+0x174>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d022      	beq.n	8003c76 <HAL_TIM_PWM_Start+0x136>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c38:	d01d      	beq.n	8003c76 <HAL_TIM_PWM_Start+0x136>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8003cbc <HAL_TIM_PWM_Start+0x17c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d018      	beq.n	8003c76 <HAL_TIM_PWM_Start+0x136>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1d      	ldr	r2, [pc, #116]	@ (8003cc0 <HAL_TIM_PWM_Start+0x180>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <HAL_TIM_PWM_Start+0x136>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1c      	ldr	r2, [pc, #112]	@ (8003cc4 <HAL_TIM_PWM_Start+0x184>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00e      	beq.n	8003c76 <HAL_TIM_PWM_Start+0x136>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a16      	ldr	r2, [pc, #88]	@ (8003cb8 <HAL_TIM_PWM_Start+0x178>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d009      	beq.n	8003c76 <HAL_TIM_PWM_Start+0x136>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a18      	ldr	r2, [pc, #96]	@ (8003cc8 <HAL_TIM_PWM_Start+0x188>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d004      	beq.n	8003c76 <HAL_TIM_PWM_Start+0x136>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a16      	ldr	r2, [pc, #88]	@ (8003ccc <HAL_TIM_PWM_Start+0x18c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d111      	bne.n	8003c9a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b06      	cmp	r3, #6
 8003c86:	d010      	beq.n	8003caa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c98:	e007      	b.n	8003caa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0201 	orr.w	r2, r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40010000 	.word	0x40010000
 8003cb8:	40010400 	.word	0x40010400
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	40000800 	.word	0x40000800
 8003cc4:	40000c00 	.word	0x40000c00
 8003cc8:	40014000 	.word	0x40014000
 8003ccc:	40001800 	.word	0x40001800

08003cd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d101      	bne.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e0ae      	b.n	8003e4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b0c      	cmp	r3, #12
 8003cfa:	f200 809f 	bhi.w	8003e3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8003d04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d04:	08003d39 	.word	0x08003d39
 8003d08:	08003e3d 	.word	0x08003e3d
 8003d0c:	08003e3d 	.word	0x08003e3d
 8003d10:	08003e3d 	.word	0x08003e3d
 8003d14:	08003d79 	.word	0x08003d79
 8003d18:	08003e3d 	.word	0x08003e3d
 8003d1c:	08003e3d 	.word	0x08003e3d
 8003d20:	08003e3d 	.word	0x08003e3d
 8003d24:	08003dbb 	.word	0x08003dbb
 8003d28:	08003e3d 	.word	0x08003e3d
 8003d2c:	08003e3d 	.word	0x08003e3d
 8003d30:	08003e3d 	.word	0x08003e3d
 8003d34:	08003dfb 	.word	0x08003dfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 f9fc 	bl	800413c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699a      	ldr	r2, [r3, #24]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0208 	orr.w	r2, r2, #8
 8003d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699a      	ldr	r2, [r3, #24]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0204 	bic.w	r2, r2, #4
 8003d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6999      	ldr	r1, [r3, #24]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	619a      	str	r2, [r3, #24]
      break;
 8003d76:	e064      	b.n	8003e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fa4c 	bl	800421c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6999      	ldr	r1, [r3, #24]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	021a      	lsls	r2, r3, #8
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	619a      	str	r2, [r3, #24]
      break;
 8003db8:	e043      	b.n	8003e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68b9      	ldr	r1, [r7, #8]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 faa1 	bl	8004308 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69da      	ldr	r2, [r3, #28]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f042 0208 	orr.w	r2, r2, #8
 8003dd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0204 	bic.w	r2, r2, #4
 8003de4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69d9      	ldr	r1, [r3, #28]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	61da      	str	r2, [r3, #28]
      break;
 8003df8:	e023      	b.n	8003e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 faf5 	bl	80043f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69da      	ldr	r2, [r3, #28]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69d9      	ldr	r1, [r3, #28]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	021a      	lsls	r2, r3, #8
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	61da      	str	r2, [r3, #28]
      break;
 8003e3a:	e002      	b.n	8003e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_TIM_ConfigClockSource+0x1c>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e0b4      	b.n	8003fda <HAL_TIM_ConfigClockSource+0x186>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ea8:	d03e      	beq.n	8003f28 <HAL_TIM_ConfigClockSource+0xd4>
 8003eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eae:	f200 8087 	bhi.w	8003fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb6:	f000 8086 	beq.w	8003fc6 <HAL_TIM_ConfigClockSource+0x172>
 8003eba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ebe:	d87f      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec0:	2b70      	cmp	r3, #112	@ 0x70
 8003ec2:	d01a      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0xa6>
 8003ec4:	2b70      	cmp	r3, #112	@ 0x70
 8003ec6:	d87b      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec8:	2b60      	cmp	r3, #96	@ 0x60
 8003eca:	d050      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0x11a>
 8003ecc:	2b60      	cmp	r3, #96	@ 0x60
 8003ece:	d877      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed0:	2b50      	cmp	r3, #80	@ 0x50
 8003ed2:	d03c      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0xfa>
 8003ed4:	2b50      	cmp	r3, #80	@ 0x50
 8003ed6:	d873      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed8:	2b40      	cmp	r3, #64	@ 0x40
 8003eda:	d058      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x13a>
 8003edc:	2b40      	cmp	r3, #64	@ 0x40
 8003ede:	d86f      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee0:	2b30      	cmp	r3, #48	@ 0x30
 8003ee2:	d064      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x15a>
 8003ee4:	2b30      	cmp	r3, #48	@ 0x30
 8003ee6:	d86b      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee8:	2b20      	cmp	r3, #32
 8003eea:	d060      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x15a>
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d867      	bhi.n	8003fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d05c      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x15a>
 8003ef4:	2b10      	cmp	r3, #16
 8003ef6:	d05a      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x15a>
 8003ef8:	e062      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f0a:	f000 fb41 	bl	8004590 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	609a      	str	r2, [r3, #8]
      break;
 8003f26:	e04f      	b.n	8003fc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f38:	f000 fb2a 	bl	8004590 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f4a:	609a      	str	r2, [r3, #8]
      break;
 8003f4c:	e03c      	b.n	8003fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f000 fa9e 	bl	800449c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2150      	movs	r1, #80	@ 0x50
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 faf7 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 8003f6c:	e02c      	b.n	8003fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f000 fabd 	bl	80044fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2160      	movs	r1, #96	@ 0x60
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fae7 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 8003f8c:	e01c      	b.n	8003fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f000 fa7e 	bl	800449c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2140      	movs	r1, #64	@ 0x40
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fad7 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 8003fac:	e00c      	b.n	8003fc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f000 face 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 8003fbe:	e003      	b.n	8003fc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fc4:	e000      	b.n	8003fc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a46      	ldr	r2, [pc, #280]	@ (8004110 <TIM_Base_SetConfig+0x12c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d013      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004002:	d00f      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a43      	ldr	r2, [pc, #268]	@ (8004114 <TIM_Base_SetConfig+0x130>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00b      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a42      	ldr	r2, [pc, #264]	@ (8004118 <TIM_Base_SetConfig+0x134>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d007      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a41      	ldr	r2, [pc, #260]	@ (800411c <TIM_Base_SetConfig+0x138>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a40      	ldr	r2, [pc, #256]	@ (8004120 <TIM_Base_SetConfig+0x13c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d108      	bne.n	8004036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800402a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a35      	ldr	r2, [pc, #212]	@ (8004110 <TIM_Base_SetConfig+0x12c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d02b      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004044:	d027      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a32      	ldr	r2, [pc, #200]	@ (8004114 <TIM_Base_SetConfig+0x130>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d023      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a31      	ldr	r2, [pc, #196]	@ (8004118 <TIM_Base_SetConfig+0x134>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d01f      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a30      	ldr	r2, [pc, #192]	@ (800411c <TIM_Base_SetConfig+0x138>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01b      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a2f      	ldr	r2, [pc, #188]	@ (8004120 <TIM_Base_SetConfig+0x13c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d017      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a2e      	ldr	r2, [pc, #184]	@ (8004124 <TIM_Base_SetConfig+0x140>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a2d      	ldr	r2, [pc, #180]	@ (8004128 <TIM_Base_SetConfig+0x144>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00f      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a2c      	ldr	r2, [pc, #176]	@ (800412c <TIM_Base_SetConfig+0x148>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00b      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a2b      	ldr	r2, [pc, #172]	@ (8004130 <TIM_Base_SetConfig+0x14c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d007      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a2a      	ldr	r2, [pc, #168]	@ (8004134 <TIM_Base_SetConfig+0x150>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d003      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a29      	ldr	r2, [pc, #164]	@ (8004138 <TIM_Base_SetConfig+0x154>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d108      	bne.n	80040a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800409c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a10      	ldr	r2, [pc, #64]	@ (8004110 <TIM_Base_SetConfig+0x12c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d003      	beq.n	80040dc <TIM_Base_SetConfig+0xf8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a12      	ldr	r2, [pc, #72]	@ (8004120 <TIM_Base_SetConfig+0x13c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d103      	bne.n	80040e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d105      	bne.n	8004102 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f023 0201 	bic.w	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	611a      	str	r2, [r3, #16]
  }
}
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40010000 	.word	0x40010000
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800
 800411c:	40000c00 	.word	0x40000c00
 8004120:	40010400 	.word	0x40010400
 8004124:	40014000 	.word	0x40014000
 8004128:	40014400 	.word	0x40014400
 800412c:	40014800 	.word	0x40014800
 8004130:	40001800 	.word	0x40001800
 8004134:	40001c00 	.word	0x40001c00
 8004138:	40002000 	.word	0x40002000

0800413c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	f023 0201 	bic.w	r2, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800416a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0303 	bic.w	r3, r3, #3
 8004172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f023 0302 	bic.w	r3, r3, #2
 8004184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a20      	ldr	r2, [pc, #128]	@ (8004214 <TIM_OC1_SetConfig+0xd8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_OC1_SetConfig+0x64>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a1f      	ldr	r2, [pc, #124]	@ (8004218 <TIM_OC1_SetConfig+0xdc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10c      	bne.n	80041ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0308 	bic.w	r3, r3, #8
 80041a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f023 0304 	bic.w	r3, r3, #4
 80041b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a15      	ldr	r2, [pc, #84]	@ (8004214 <TIM_OC1_SetConfig+0xd8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d003      	beq.n	80041ca <TIM_OC1_SetConfig+0x8e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a14      	ldr	r2, [pc, #80]	@ (8004218 <TIM_OC1_SetConfig+0xdc>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d111      	bne.n	80041ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	621a      	str	r2, [r3, #32]
}
 8004208:	bf00      	nop
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	40010000 	.word	0x40010000
 8004218:	40010400 	.word	0x40010400

0800421c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	f023 0210 	bic.w	r2, r3, #16
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800424a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f023 0320 	bic.w	r3, r3, #32
 8004266:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	4313      	orrs	r3, r2
 8004272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a22      	ldr	r2, [pc, #136]	@ (8004300 <TIM_OC2_SetConfig+0xe4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d003      	beq.n	8004284 <TIM_OC2_SetConfig+0x68>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a21      	ldr	r2, [pc, #132]	@ (8004304 <TIM_OC2_SetConfig+0xe8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d10d      	bne.n	80042a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800428a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800429e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a17      	ldr	r2, [pc, #92]	@ (8004300 <TIM_OC2_SetConfig+0xe4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d003      	beq.n	80042b0 <TIM_OC2_SetConfig+0x94>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a16      	ldr	r2, [pc, #88]	@ (8004304 <TIM_OC2_SetConfig+0xe8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d113      	bne.n	80042d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	621a      	str	r2, [r3, #32]
}
 80042f2:	bf00      	nop
 80042f4:	371c      	adds	r7, #28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40010000 	.word	0x40010000
 8004304:	40010400 	.word	0x40010400

08004308 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0303 	bic.w	r3, r3, #3
 800433e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	021b      	lsls	r3, r3, #8
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a21      	ldr	r2, [pc, #132]	@ (80043e8 <TIM_OC3_SetConfig+0xe0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d003      	beq.n	800436e <TIM_OC3_SetConfig+0x66>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a20      	ldr	r2, [pc, #128]	@ (80043ec <TIM_OC3_SetConfig+0xe4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d10d      	bne.n	800438a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004374:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	021b      	lsls	r3, r3, #8
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a16      	ldr	r2, [pc, #88]	@ (80043e8 <TIM_OC3_SetConfig+0xe0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d003      	beq.n	800439a <TIM_OC3_SetConfig+0x92>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a15      	ldr	r2, [pc, #84]	@ (80043ec <TIM_OC3_SetConfig+0xe4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d113      	bne.n	80043c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	621a      	str	r2, [r3, #32]
}
 80043dc:	bf00      	nop
 80043de:	371c      	adds	r7, #28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	40010000 	.word	0x40010000
 80043ec:	40010400 	.word	0x40010400

080043f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800441e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800443a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	031b      	lsls	r3, r3, #12
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a12      	ldr	r2, [pc, #72]	@ (8004494 <TIM_OC4_SetConfig+0xa4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d003      	beq.n	8004458 <TIM_OC4_SetConfig+0x68>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a11      	ldr	r2, [pc, #68]	@ (8004498 <TIM_OC4_SetConfig+0xa8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d109      	bne.n	800446c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800445e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	019b      	lsls	r3, r3, #6
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	621a      	str	r2, [r3, #32]
}
 8004486:	bf00      	nop
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40010000 	.word	0x40010000
 8004498:	40010400 	.word	0x40010400

0800449c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	f023 0201 	bic.w	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f023 030a 	bic.w	r3, r3, #10
 80044d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	621a      	str	r2, [r3, #32]
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b087      	sub	sp, #28
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	f023 0210 	bic.w	r2, r3, #16
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004524:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	031b      	lsls	r3, r3, #12
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004536:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	621a      	str	r2, [r3, #32]
}
 800454e:	bf00      	nop
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800455a:	b480      	push	{r7}
 800455c:	b085      	sub	sp, #20
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	f043 0307 	orr.w	r3, r3, #7
 800457c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	609a      	str	r2, [r3, #8]
}
 8004584:	bf00      	nop
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	021a      	lsls	r2, r3, #8
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	609a      	str	r2, [r3, #8]
}
 80045c4:	bf00      	nop
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 031f 	and.w	r3, r3, #31
 80045e2:	2201      	movs	r2, #1
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a1a      	ldr	r2, [r3, #32]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	401a      	ands	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a1a      	ldr	r2, [r3, #32]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f003 031f 	and.w	r3, r3, #31
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	fa01 f303 	lsl.w	r3, r1, r3
 8004608:	431a      	orrs	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	621a      	str	r2, [r3, #32]
}
 800460e:	bf00      	nop
 8004610:	371c      	adds	r7, #28
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800462c:	2b01      	cmp	r3, #1
 800462e:	d101      	bne.n	8004634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004630:	2302      	movs	r3, #2
 8004632:	e05a      	b.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800465a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a21      	ldr	r2, [pc, #132]	@ (80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d022      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004680:	d01d      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a1d      	ldr	r2, [pc, #116]	@ (80046fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d018      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a1b      	ldr	r2, [pc, #108]	@ (8004700 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d013      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1a      	ldr	r2, [pc, #104]	@ (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00e      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a18      	ldr	r2, [pc, #96]	@ (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d009      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a17      	ldr	r2, [pc, #92]	@ (800470c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d004      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a15      	ldr	r2, [pc, #84]	@ (8004710 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d10c      	bne.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40010000 	.word	0x40010000
 80046fc:	40000400 	.word	0x40000400
 8004700:	40000800 	.word	0x40000800
 8004704:	40000c00 	.word	0x40000c00
 8004708:	40010400 	.word	0x40010400
 800470c:	40014000 	.word	0x40014000
 8004710:	40001800 	.word	0x40001800

08004714 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800472c:	2302      	movs	r3, #2
 800472e:	e03d      	b.n	80047ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	4313      	orrs	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80047b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80047f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80047bc:	f000 f826 	bl	800480c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80047c0:	480c      	ldr	r0, [pc, #48]	@ (80047f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80047c2:	490d      	ldr	r1, [pc, #52]	@ (80047f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80047c4:	4a0d      	ldr	r2, [pc, #52]	@ (80047fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80047c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047c8:	e002      	b.n	80047d0 <LoopCopyDataInit>

080047ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047ce:	3304      	adds	r3, #4

080047d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047d4:	d3f9      	bcc.n	80047ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004800 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80047d8:	4c0a      	ldr	r4, [pc, #40]	@ (8004804 <LoopFillZerobss+0x22>)
  movs r3, #0
 80047da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047dc:	e001      	b.n	80047e2 <LoopFillZerobss>

080047de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047e0:	3204      	adds	r2, #4

080047e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047e4:	d3fb      	bcc.n	80047de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80047e6:	f003 fe8f 	bl	8008508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047ea:	f7fc f98b 	bl	8000b04 <main>
  bx  lr    
 80047ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80047f0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80047f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80047fc:	0800885c 	.word	0x0800885c
  ldr r2, =_sbss
 8004800:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8004804:	20001f24 	.word	0x20001f24

08004808 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004808:	e7fe      	b.n	8004808 <ADC_IRQHandler>
	...

0800480c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004810:	4b06      	ldr	r3, [pc, #24]	@ (800482c <SystemInit+0x20>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004816:	4a05      	ldr	r2, [pc, #20]	@ (800482c <SystemInit+0x20>)
 8004818:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800481c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004820:	bf00      	nop
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	e000ed00 	.word	0xe000ed00

08004830 <OSIdleTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSIdleTaskHook (void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppIdleTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 8004834:	4b04      	ldr	r3, [pc, #16]	@ (8004848 <OSIdleTaskHook+0x18>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <OSIdleTaskHook+0x12>
        (*OS_AppIdleTaskHookPtr)();
 800483c:	4b02      	ldr	r3, [pc, #8]	@ (8004848 <OSIdleTaskHook+0x18>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4798      	blx	r3
    }
#endif
}
 8004842:	bf00      	nop
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	200018d4 	.word	0x200018d4

0800484c <OSInitHook>:
*                 b) Set bits ASPEN and LSPEN in FPCCR register.
*********************************************************************************************************
*/

void  OSInitHook (void)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
#if (OS_CPU_ARM_FP_EN > 0u)
    CPU_INT32U   reg_val;
#endif
                                                                /* 8-byte align the ISR stack.                          */
    OS_CPU_ExceptStkBase = (CPU_STK *)(OSCfg_ISRStkBasePtr + OSCfg_ISRStkSize);
 8004852:	4b11      	ldr	r3, [pc, #68]	@ (8004898 <OSInitHook+0x4c>)
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4b11      	ldr	r3, [pc, #68]	@ (800489c <OSInitHook+0x50>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	4a10      	ldr	r2, [pc, #64]	@ (80048a0 <OSInitHook+0x54>)
 8004860:	6013      	str	r3, [r2, #0]
    OS_CPU_ExceptStkBase = (CPU_STK *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 8004862:	4b0f      	ldr	r3, [pc, #60]	@ (80048a0 <OSInitHook+0x54>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f023 0307 	bic.w	r3, r3, #7
 800486a:	461a      	mov	r2, r3
 800486c:	4b0c      	ldr	r3, [pc, #48]	@ (80048a0 <OSInitHook+0x54>)
 800486e:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    reg_val = CPU_REG_FP_FPCCR;                                 /* Check the floating point mode.                       */
 8004870:	4b0c      	ldr	r3, [pc, #48]	@ (80048a4 <OSInitHook+0x58>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	607b      	str	r3, [r7, #4]
    if ((reg_val & CPU_REG_FPCCR_LAZY_STK) != CPU_REG_FPCCR_LAZY_STK) {
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800487c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004880:	d001      	beq.n	8004886 <OSInitHook+0x3a>
        while (1u) {                                            /* See Note (1).                                        */
 8004882:	bf00      	nop
 8004884:	e7fd      	b.n	8004882 <OSInitHook+0x36>
            ;
        }
    }
#endif
                                                                /* Set BASEPRI boundary from the configuration.         */
    OS_KA_BASEPRI_Boundary = (CPU_INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 8004886:	4b08      	ldr	r3, [pc, #32]	@ (80048a8 <OSInitHook+0x5c>)
 8004888:	2240      	movs	r2, #64	@ 0x40
 800488a:	601a      	str	r2, [r3, #0]
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	080086b0 	.word	0x080086b0
 800489c:	080086b4 	.word	0x080086b4
 80048a0:	200010b0 	.word	0x200010b0
 80048a4:	e000ef34 	.word	0xe000ef34
 80048a8:	200010b4 	.word	0x200010b4

080048ac <OSStatTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSStatTaskHook (void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppStatTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 80048b0:	4b04      	ldr	r3, [pc, #16]	@ (80048c4 <OSStatTaskHook+0x18>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <OSStatTaskHook+0x12>
        (*OS_AppStatTaskHookPtr)();
 80048b8:	4b02      	ldr	r3, [pc, #8]	@ (80048c4 <OSStatTaskHook+0x18>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4798      	blx	r3
    }
#endif
}
 80048be:	bf00      	nop
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	200018d8 	.word	0x200018d8

080048c8 <OSTaskCreateHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskCreateHook (OS_TCB  *p_tcb)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskCreateHookPtr != (OS_APP_HOOK_TCB)0) {
 80048d0:	4b05      	ldr	r3, [pc, #20]	@ (80048e8 <OSTaskCreateHook+0x20>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <OSTaskCreateHook+0x18>
        (*OS_AppTaskCreateHookPtr)(p_tcb);
 80048d8:	4b03      	ldr	r3, [pc, #12]	@ (80048e8 <OSTaskCreateHook+0x20>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                                /* Prevent compiler warning                             */
#endif
}
 80048e0:	bf00      	nop
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	200018c8 	.word	0x200018c8

080048ec <OSTaskDelHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskDelHook (OS_TCB  *p_tcb)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskDelHookPtr != (OS_APP_HOOK_TCB)0) {
 80048f4:	4b05      	ldr	r3, [pc, #20]	@ (800490c <OSTaskDelHook+0x20>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <OSTaskDelHook+0x18>
        (*OS_AppTaskDelHookPtr)(p_tcb);
 80048fc:	4b03      	ldr	r3, [pc, #12]	@ (800490c <OSTaskDelHook+0x20>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                                /* Prevent compiler warning                             */
#endif
}
 8004904:	bf00      	nop
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	200018cc 	.word	0x200018cc

08004910 <OSTaskReturnHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskReturnHook (OS_TCB  *p_tcb)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskReturnHookPtr != (OS_APP_HOOK_TCB)0) {
 8004918:	4b05      	ldr	r3, [pc, #20]	@ (8004930 <OSTaskReturnHook+0x20>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <OSTaskReturnHook+0x18>
        (*OS_AppTaskReturnHookPtr)(p_tcb);
 8004920:	4b03      	ldr	r3, [pc, #12]	@ (8004930 <OSTaskReturnHook+0x20>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                                /* Prevent compiler warning                             */
#endif
}
 8004928:	bf00      	nop
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	200018d0 	.word	0x200018d0

08004934 <OSTaskStkInit>:
                         void          *p_arg,
                         CPU_STK       *p_stk_base,
                         CPU_STK       *p_stk_limit,
                         CPU_STK_SIZE   stk_size,
                         OS_OPT         opt)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
    CPU_STK    *p_stk;


    (void)opt;                                                  /* 'opt' is not used, prevent warning                   */

    p_stk = &p_stk_base[stk_size];                              /* Load stack pointer                                   */
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	4413      	add	r3, r2
 800494a:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                          */
    p_stk = (CPU_STK *)((CPU_STK)(p_stk) & 0xFFFFFFF8u);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f023 0307 	bic.w	r3, r3, #7
 8004952:	617b      	str	r3, [r7, #20]
                                                                /* Registers stacked as if auto-saved on exception      */
    *(--p_stk) = (CPU_STK)0x01000000u;                          /* xPSR                                                 */
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	3b04      	subs	r3, #4
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004960:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)p_task;                               /* Entry Point                                          */
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	3b04      	subs	r3, #4
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)OS_TaskReturn;                        /* R14 (LR)                                             */
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	3b04      	subs	r3, #4
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	4a34      	ldr	r2, [pc, #208]	@ (8004a48 <OSTaskStkInit+0x114>)
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x12121212u;                          /* R12                                                  */
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	3b04      	subs	r3, #4
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8004986:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x03030303u;                          /* R3                                                   */
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	3b04      	subs	r3, #4
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8004994:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x02020202u;                          /* R2                                                   */
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	3b04      	subs	r3, #4
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 80049a2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)p_stk_limit;                          /* R1                                                   */
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	3b04      	subs	r3, #4
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)p_arg;                                /* R0 : argument                                        */
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	3b04      	subs	r3, #4
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0xFFFFFFFDuL;                         /* R14: EXEC_RETURN; See Note 5                         */
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	3b04      	subs	r3, #4
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f06f 0202 	mvn.w	r2, #2
 80049c8:	601a      	str	r2, [r3, #0]
                                                                /* Remaining registers saved on process stack           */
    *(--p_stk) = (CPU_STK)0x11111111uL;                         /* R11                                                  */
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	3b04      	subs	r3, #4
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 80049d6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x10101010uL;                         /* R10                                                  */
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	3b04      	subs	r3, #4
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 80049e4:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x09090909uL;                         /* R9                                                   */
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	3b04      	subs	r3, #4
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 80049f2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x08080808uL;                         /* R8                                                   */
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	3b04      	subs	r3, #4
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 8004a00:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x07070707uL;                         /* R7                                                   */
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	3b04      	subs	r3, #4
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 8004a0e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x06060606uL;                         /* R6                                                   */
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	3b04      	subs	r3, #4
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 8004a1c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x05050505uL;                         /* R5                                                   */
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	3b04      	subs	r3, #4
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8004a2a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x04040404uL;                         /* R4                                                   */
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	3b04      	subs	r3, #4
 8004a30:	617b      	str	r3, [r7, #20]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8004a38:	601a      	str	r2, [r3, #0]

    return (p_stk);
 8004a3a:	697b      	ldr	r3, [r7, #20]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	371c      	adds	r7, #28
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	080076e9 	.word	0x080076e9

08004a4c <OSTaskSwHook>:
*                 to the task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/

void  OSTaskSwHook (void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
    CPU_BOOLEAN  stk_status;
#endif

#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskSwHookPtr != (OS_APP_HOOK_VOID)0) {
 8004a52:	4b17      	ldr	r3, [pc, #92]	@ (8004ab0 <OSTaskSwHook+0x64>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <OSTaskSwHook+0x14>
        (*OS_AppTaskSwHookPtr)();
 8004a5a:	4b15      	ldr	r3, [pc, #84]	@ (8004ab0 <OSTaskSwHook+0x64>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4798      	blx	r3
#endif

    OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdyPtr);

#if OS_CFG_TASK_PROFILE_EN > 0u
    ts = OS_TS_GET();
 8004a60:	2300      	movs	r3, #0
 8004a62:	607b      	str	r3, [r7, #4]
    if (OSTCBCurPtr != OSTCBHighRdyPtr) {
 8004a64:	4b13      	ldr	r3, [pc, #76]	@ (8004ab4 <OSTaskSwHook+0x68>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4b13      	ldr	r3, [pc, #76]	@ (8004ab8 <OSTaskSwHook+0x6c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d016      	beq.n	8004a9e <OSTaskSwHook+0x52>
        OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
 8004a70:	4b10      	ldr	r3, [pc, #64]	@ (8004ab4 <OSTaskSwHook+0x68>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004a78:	4b0e      	ldr	r3, [pc, #56]	@ (8004ab4 <OSTaskSwHook+0x68>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	1a8a      	subs	r2, r1, r2
 8004a80:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
 8004a84:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab4 <OSTaskSwHook+0x68>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8004a8c:	4b09      	ldr	r3, [pc, #36]	@ (8004ab4 <OSTaskSwHook+0x68>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8004a94:	4b07      	ldr	r3, [pc, #28]	@ (8004ab4 <OSTaskSwHook+0x68>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	440a      	add	r2, r1
 8004a9a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    }

    OSTCBHighRdyPtr->CyclesStart = ts;
 8004a9e:	4b06      	ldr	r3, [pc, #24]	@ (8004ab8 <OSTaskSwHook+0x6c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    stk_status = OSTaskStkRedzoneChk((OS_TCB *)0u);
    if (stk_status != OS_TRUE) {
        OSRedzoneHitHook(OSTCBCurPtr);
    }
#endif
}
 8004aa8:	bf00      	nop
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	200018dc 	.word	0x200018dc
 8004ab4:	20001f1c 	.word	0x20001f1c
 8004ab8:	20001f20 	.word	0x20001f20

08004abc <OSTimeTickHook>:
* Note(s)    : 1) This function is assumed to be called from the Tick ISR.
*********************************************************************************************************
*/

void  OSTimeTickHook (void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTimeTickHookPtr != (OS_APP_HOOK_VOID)0) {
 8004ac0:	4b04      	ldr	r3, [pc, #16]	@ (8004ad4 <OSTimeTickHook+0x18>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <OSTimeTickHook+0x12>
        (*OS_AppTimeTickHookPtr)();
 8004ac8:	4b02      	ldr	r3, [pc, #8]	@ (8004ad4 <OSTimeTickHook+0x18>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4798      	blx	r3
    }
#endif
}
 8004ace:	bf00      	nop
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	200018e0 	.word	0x200018e0

08004ad8 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler  (void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8004ade:	2300      	movs	r3, #0
 8004ae0:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 8004ae2:	2040      	movs	r0, #64	@ 0x40
 8004ae4:	f7fb fb86 	bl	80001f4 <CPU_SR_Save>
 8004ae8:	6078      	str	r0, [r7, #4]
    OSIntEnter();                                               /* Tell uC/OS-III that we are starting an ISR           */
 8004aea:	f000 f909 	bl	8004d00 <OSIntEnter>
    CPU_CRITICAL_EXIT();
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fb fb8e 	bl	8000210 <CPU_SR_Restore>

    OSTimeTick();                                               /* Call uC/OS-III's OSTimeTick()                        */
 8004af4:	f003 f990 	bl	8007e18 <OSTimeTick>

    OSIntExit();                                                /* Tell uC/OS-III that we are leaving the ISR           */
 8004af8:	f000 f91e 	bl	8004d38 <OSIntExit>
}
 8004afc:	bf00      	nop
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <OSCfg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OSCfg_Init (void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
    (void)OSCfg_TmrTaskStkBasePtr;
    (void)OSCfg_TmrTaskStkLimit;
    (void)OSCfg_TmrTaskStkSize;
    (void)OSCfg_TmrTaskStkSizeRAM;
#endif
}
 8004b08:	bf00      	nop
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
	...

08004b14 <OSInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSInit (OS_ERR  *p_err)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSInitHook();                                               /* Call port specific initialization code               */
 8004b1c:	f7ff fe96 	bl	800484c <OSInitHook>

    OSIntNestingCtr       =           0u;                       /* Clear the interrupt nesting counter                  */
 8004b20:	4b59      	ldr	r3, [pc, #356]	@ (8004c88 <OSInit+0x174>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	701a      	strb	r2, [r3, #0]

    OSRunning             =  OS_STATE_OS_STOPPED;               /* Indicate that multitasking has not started           */
 8004b26:	4b59      	ldr	r3, [pc, #356]	@ (8004c8c <OSInit+0x178>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	701a      	strb	r2, [r3, #0]

    OSSchedLockNestingCtr =           0u;                       /* Clear the scheduling lock counter                    */
 8004b2c:	4b58      	ldr	r3, [pc, #352]	@ (8004c90 <OSInit+0x17c>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	701a      	strb	r2, [r3, #0]

    OSTCBCurPtr           = (OS_TCB *)0;                        /* Initialize OS_TCB pointers to a known state          */
 8004b32:	4b58      	ldr	r3, [pc, #352]	@ (8004c94 <OSInit+0x180>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]
    OSTCBHighRdyPtr       = (OS_TCB *)0;
 8004b38:	4b57      	ldr	r3, [pc, #348]	@ (8004c98 <OSInit+0x184>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]

    OSPrioCur             =           0u;                       /* Initialize priority variables to a known state       */
 8004b3e:	4b57      	ldr	r3, [pc, #348]	@ (8004c9c <OSInit+0x188>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy         =           0u;
 8004b44:	4b56      	ldr	r3, [pc, #344]	@ (8004ca0 <OSInit+0x18c>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	701a      	strb	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;
#endif

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
    OSSchedRoundRobinEn             = OS_FALSE;
 8004b4a:	4b56      	ldr	r3, [pc, #344]	@ (8004ca4 <OSInit+0x190>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	701a      	strb	r2, [r3, #0]
    OSSchedRoundRobinDfltTimeQuanta = OSCfg_TickRate_Hz / 10u;
 8004b50:	4b55      	ldr	r3, [pc, #340]	@ (8004ca8 <OSInit+0x194>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a55      	ldr	r2, [pc, #340]	@ (8004cac <OSInit+0x198>)
 8004b56:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5a:	08db      	lsrs	r3, r3, #3
 8004b5c:	4a54      	ldr	r2, [pc, #336]	@ (8004cb0 <OSInit+0x19c>)
 8004b5e:	6013      	str	r3, [r2, #0]
#endif

#if (OS_CFG_ISR_STK_SIZE > 0u)
    p_stk = OSCfg_ISRStkBasePtr;                                /* Clear exception stack for stack checking.            */
 8004b60:	4b54      	ldr	r3, [pc, #336]	@ (8004cb4 <OSInit+0x1a0>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	60fb      	str	r3, [r7, #12]
    if (p_stk != (CPU_STK *)0) {
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00f      	beq.n	8004b8c <OSInit+0x78>
        size  = OSCfg_ISRStkSize;
 8004b6c:	4b52      	ldr	r3, [pc, #328]	@ (8004cb8 <OSInit+0x1a4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	60bb      	str	r3, [r7, #8]
        while (size > 0u) {
 8004b72:	e008      	b.n	8004b86 <OSInit+0x72>
            size--;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	60bb      	str	r3, [r7, #8]
           *p_stk = 0u;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]
            p_stk++;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	3304      	adds	r3, #4
 8004b84:	60fb      	str	r3, [r7, #12]
        while (size > 0u) {
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1f3      	bne.n	8004b74 <OSInit+0x60>

#if (OS_CFG_APP_HOOKS_EN > 0u)                                  /* Clear application hook pointers                      */
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
    OS_AppRedzoneHitHookPtr = (OS_APP_HOOK_TCB )0;
#endif
    OS_AppTaskCreateHookPtr = (OS_APP_HOOK_TCB )0;
 8004b8c:	4b4b      	ldr	r3, [pc, #300]	@ (8004cbc <OSInit+0x1a8>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]
    OS_AppTaskDelHookPtr    = (OS_APP_HOOK_TCB )0;
 8004b92:	4b4b      	ldr	r3, [pc, #300]	@ (8004cc0 <OSInit+0x1ac>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
    OS_AppTaskReturnHookPtr = (OS_APP_HOOK_TCB )0;
 8004b98:	4b4a      	ldr	r3, [pc, #296]	@ (8004cc4 <OSInit+0x1b0>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]

    OS_AppIdleTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8004b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8004cc8 <OSInit+0x1b4>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]
    OS_AppStatTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8004ba4:	4b49      	ldr	r3, [pc, #292]	@ (8004ccc <OSInit+0x1b8>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	601a      	str	r2, [r3, #0]
    OS_AppTaskSwHookPtr     = (OS_APP_HOOK_VOID)0;
 8004baa:	4b49      	ldr	r3, [pc, #292]	@ (8004cd0 <OSInit+0x1bc>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]
    OS_AppTimeTickHookPtr   = (OS_APP_HOOK_VOID)0;
 8004bb0:	4b48      	ldr	r3, [pc, #288]	@ (8004cd4 <OSInit+0x1c0>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]
#endif

#if (OS_CFG_TASK_REG_TBL_SIZE > 0u)
    OSTaskRegNextAvailID = 0u;
 8004bb6:	4b48      	ldr	r3, [pc, #288]	@ (8004cd8 <OSInit+0x1c4>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	701a      	strb	r2, [r3, #0]
#endif

    OS_PrioInit();                                              /* Initialize the priority bitmap table                 */
 8004bbc:	f001 fe7a 	bl	80068b4 <OS_PrioInit>

    OS_RdyListInit();                                           /* Initialize the Ready List                            */
 8004bc0:	f000 fc32 	bl	8005428 <OS_RdyListInit>


#if (OS_CFG_FLAG_EN > 0u)                                       /* Initialize the Event Flag module                     */
#if (OS_CFG_DBG_EN > 0u)
    OSFlagDbgListPtr = (OS_FLAG_GRP *)0;
 8004bc4:	4b45      	ldr	r3, [pc, #276]	@ (8004cdc <OSInit+0x1c8>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	601a      	str	r2, [r3, #0]
    OSFlagQty        =                0u;
 8004bca:	4b45      	ldr	r3, [pc, #276]	@ (8004ce0 <OSInit+0x1cc>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	801a      	strh	r2, [r3, #0]
#endif
#endif

#if (OS_CFG_MEM_EN > 0u)                                        /* Initialize the Memory Manager module                 */
    OS_MemInit(p_err);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f001 fb93 	bl	80062fc <OS_MemInit>
    if (*p_err != OS_ERR_NONE) {
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d143      	bne.n	8004c66 <OSInit+0x152>
    }
#endif


#if (OS_MSG_EN > 0u)                                            /* Initialize the free list of OS_MSGs                  */
    OS_MsgPoolInit(p_err);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f001 fba4 	bl	800632c <OS_MsgPoolInit>
    if (*p_err != OS_ERR_NONE) {
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d13e      	bne.n	8004c6a <OSInit+0x156>
#endif


#if (OS_CFG_MUTEX_EN > 0u)                                      /* Initialize the Mutex Manager module                  */
#if (OS_CFG_DBG_EN > 0u)
    OSMutexDbgListPtr = (OS_MUTEX *)0;
 8004bec:	4b3d      	ldr	r3, [pc, #244]	@ (8004ce4 <OSInit+0x1d0>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
    OSMutexQty        =             0u;
 8004bf2:	4b3d      	ldr	r3, [pc, #244]	@ (8004ce8 <OSInit+0x1d4>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	801a      	strh	r2, [r3, #0]
#endif


#if (OS_CFG_Q_EN > 0u)                                          /* Initialize the Message Queue Manager module          */
#if (OS_CFG_DBG_EN > 0u)
    OSQDbgListPtr = (OS_Q *)0;
 8004bf8:	4b3c      	ldr	r3, [pc, #240]	@ (8004cec <OSInit+0x1d8>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	601a      	str	r2, [r3, #0]
    OSQQty        =         0u;
 8004bfe:	4b3c      	ldr	r3, [pc, #240]	@ (8004cf0 <OSInit+0x1dc>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	801a      	strh	r2, [r3, #0]
#endif


#if (OS_CFG_SEM_EN > 0u)                                        /* Initialize the Semaphore Manager module              */
#if (OS_CFG_DBG_EN > 0u)
    OSSemDbgListPtr = (OS_SEM *)0;
 8004c04:	4b3b      	ldr	r3, [pc, #236]	@ (8004cf4 <OSInit+0x1e0>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
    OSSemQty        =           0u;
 8004c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8004cf8 <OSInit+0x1e4>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	801a      	strh	r2, [r3, #0]
        return;
    }
#endif


    OS_TaskInit(p_err);                                         /* Initialize the task manager                          */
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f002 fc83 	bl	800751c <OS_TaskInit>
    if (*p_err != OS_ERR_NONE) {
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d127      	bne.n	8004c6e <OSInit+0x15a>
        return;
    }


#if (OS_CFG_TASK_IDLE_EN > 0u)
    OS_IdleTaskInit(p_err);                                     /* Initialize the Idle Task                             */
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f9d8 	bl	8004fd4 <OS_IdleTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d122      	bne.n	8004c72 <OSInit+0x15e>
    }
#endif


#if (OS_CFG_TICK_EN > 0u)
    OS_TickInit(p_err);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f002 fe0d 	bl	800784c <OS_TickInit>
    if (*p_err != OS_ERR_NONE) {
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d11d      	bne.n	8004c76 <OSInit+0x162>
    }
#endif


#if (OS_CFG_STAT_TASK_EN > 0u)                                  /* Initialize the Statistic Task                        */
    OS_StatTaskInit(p_err);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f002 f8e4 	bl	8006e08 <OS_StatTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d118      	bne.n	8004c7a <OSInit+0x166>
    }
#endif


#if (OS_CFG_TMR_EN > 0u)                                        /* Initialize the Timer Manager module                  */
    OS_TmrInit(p_err);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f003 f905 	bl	8007e58 <OS_TmrInit>
    if (*p_err != OS_ERR_NONE) {
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d113      	bne.n	8004c7e <OSInit+0x16a>
    }
#endif


#if (OS_CFG_DBG_EN > 0u)
    OS_Dbg_Init();
 8004c56:	f000 fdd9 	bl	800580c <OS_Dbg_Init>
#endif


    OSCfg_Init();
 8004c5a:	f7ff ff53 	bl	8004b04 <OSCfg_Init>

    OSInitialized = OS_TRUE;                                    /* Kernel is initialized                                */
 8004c5e:	4b27      	ldr	r3, [pc, #156]	@ (8004cfc <OSInit+0x1e8>)
 8004c60:	2201      	movs	r2, #1
 8004c62:	701a      	strb	r2, [r3, #0]
 8004c64:	e00c      	b.n	8004c80 <OSInit+0x16c>
        return;
 8004c66:	bf00      	nop
 8004c68:	e00a      	b.n	8004c80 <OSInit+0x16c>
        return;
 8004c6a:	bf00      	nop
 8004c6c:	e008      	b.n	8004c80 <OSInit+0x16c>
        return;
 8004c6e:	bf00      	nop
 8004c70:	e006      	b.n	8004c80 <OSInit+0x16c>
        return;
 8004c72:	bf00      	nop
 8004c74:	e004      	b.n	8004c80 <OSInit+0x16c>
        return;
 8004c76:	bf00      	nop
 8004c78:	e002      	b.n	8004c80 <OSInit+0x16c>
        return;
 8004c7a:	bf00      	nop
 8004c7c:	e000      	b.n	8004c80 <OSInit+0x16c>
        return;
 8004c7e:	bf00      	nop
}
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	200019ac 	.word	0x200019ac
 8004c8c:	200019ad 	.word	0x200019ad
 8004c90:	20001cec 	.word	0x20001cec
 8004c94:	20001f1c 	.word	0x20001f1c
 8004c98:	20001f20 	.word	0x20001f20
 8004c9c:	200019da 	.word	0x200019da
 8004ca0:	200019db 	.word	0x200019db
 8004ca4:	20001cf4 	.word	0x20001cf4
 8004ca8:	080086d8 	.word	0x080086d8
 8004cac:	cccccccd 	.word	0xcccccccd
 8004cb0:	20001cf0 	.word	0x20001cf0
 8004cb4:	080086b0 	.word	0x080086b0
 8004cb8:	080086b4 	.word	0x080086b4
 8004cbc:	200018c8 	.word	0x200018c8
 8004cc0:	200018cc 	.word	0x200018cc
 8004cc4:	200018d0 	.word	0x200018d0
 8004cc8:	200018d4 	.word	0x200018d4
 8004ccc:	200018d8 	.word	0x200018d8
 8004cd0:	200018dc 	.word	0x200018dc
 8004cd4:	200018e0 	.word	0x200018e0
 8004cd8:	20001de2 	.word	0x20001de2
 8004cdc:	200019b8 	.word	0x200019b8
 8004ce0:	200019bc 	.word	0x200019bc
 8004ce4:	200019d4 	.word	0x200019d4
 8004ce8:	200019d8 	.word	0x200019d8
 8004cec:	200019e4 	.word	0x200019e4
 8004cf0:	200019e8 	.word	0x200019e8
 8004cf4:	20001cf8 	.word	0x20001cf8
 8004cf8:	20001cfc 	.word	0x20001cfc
 8004cfc:	200019ae 	.word	0x200019ae

08004d00 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 250 levels deep.
************************************************************************************************************************
*/

void  OSIntEnter (void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
    OS_TRACE_ISR_ENTER();

    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is OS running?                                       */
 8004d04:	4b0a      	ldr	r3, [pc, #40]	@ (8004d30 <OSIntEnter+0x30>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d10a      	bne.n	8004d22 <OSIntEnter+0x22>
        return;                                                 /* No                                                   */
    }

    if (OSIntNestingCtr >= 250u) {                              /* Have we nested past 250 levels?                      */
 8004d0c:	4b09      	ldr	r3, [pc, #36]	@ (8004d34 <OSIntEnter+0x34>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2bf9      	cmp	r3, #249	@ 0xf9
 8004d12:	d808      	bhi.n	8004d26 <OSIntEnter+0x26>
        return;                                                 /* Yes                                                  */
    }

    OSIntNestingCtr++;                                          /* Increment ISR nesting level                          */
 8004d14:	4b07      	ldr	r3, [pc, #28]	@ (8004d34 <OSIntEnter+0x34>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	4b05      	ldr	r3, [pc, #20]	@ (8004d34 <OSIntEnter+0x34>)
 8004d1e:	701a      	strb	r2, [r3, #0]
 8004d20:	e002      	b.n	8004d28 <OSIntEnter+0x28>
        return;                                                 /* No                                                   */
 8004d22:	bf00      	nop
 8004d24:	e000      	b.n	8004d28 <OSIntEnter+0x28>
        return;                                                 /* Yes                                                  */
 8004d26:	bf00      	nop
}
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	200019ad 	.word	0x200019ad
 8004d34:	200019ac 	.word	0x200019ac

08004d38 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSIntExit (void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
    CPU_BOOLEAN  stk_status;
#endif
    CPU_SR_ALLOC();
 8004d3e:	2300      	movs	r3, #0
 8004d40:	607b      	str	r3, [r7, #4]



    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Has the OS started?                                  */
 8004d42:	4b2c      	ldr	r3, [pc, #176]	@ (8004df4 <OSIntExit+0xbc>)
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d14f      	bne.n	8004dea <OSIntExit+0xb2>
        OS_TRACE_ISR_EXIT();
        return;                                                 /* No                                                   */
    }

    CPU_INT_DIS();
 8004d4a:	2040      	movs	r0, #64	@ 0x40
 8004d4c:	f7fb fa52 	bl	80001f4 <CPU_SR_Save>
 8004d50:	6078      	str	r0, [r7, #4]
    if (OSIntNestingCtr == 0u) {                                /* Prevent OSIntNestingCtr from wrapping                */
 8004d52:	4b29      	ldr	r3, [pc, #164]	@ (8004df8 <OSIntExit+0xc0>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d103      	bne.n	8004d62 <OSIntExit+0x2a>
        OS_TRACE_ISR_EXIT();
        CPU_INT_EN();
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fb fa58 	bl	8000210 <CPU_SR_Restore>
        return;
 8004d60:	e044      	b.n	8004dec <OSIntExit+0xb4>
    }
    OSIntNestingCtr--;
 8004d62:	4b25      	ldr	r3, [pc, #148]	@ (8004df8 <OSIntExit+0xc0>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	4b23      	ldr	r3, [pc, #140]	@ (8004df8 <OSIntExit+0xc0>)
 8004d6c:	701a      	strb	r2, [r3, #0]
    if (OSIntNestingCtr > 0u) {                                 /* ISRs still nested?                                   */
 8004d6e:	4b22      	ldr	r3, [pc, #136]	@ (8004df8 <OSIntExit+0xc0>)
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <OSIntExit+0x46>
        OS_TRACE_ISR_EXIT();
        CPU_INT_EN();                                           /* Yes                                                  */
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7fb fa4a 	bl	8000210 <CPU_SR_Restore>
        return;
 8004d7c:	e036      	b.n	8004dec <OSIntExit+0xb4>
    }

    if (OSSchedLockNestingCtr > 0u) {                           /* Scheduler still locked?                              */
 8004d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8004dfc <OSIntExit+0xc4>)
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <OSIntExit+0x56>
        OS_TRACE_ISR_EXIT();
        CPU_INT_EN();                                           /* Yes                                                  */
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fb fa42 	bl	8000210 <CPU_SR_Restore>
        return;
 8004d8c:	e02e      	b.n	8004dec <OSIntExit+0xb4>
        OSRedzoneHitHook((OS_TCB *)0);
    }
#endif
#endif

    OSPrioHighRdy   = OS_PrioGetHighest();                      /* Find highest priority                                */
 8004d8e:	f001 fdab 	bl	80068e8 <OS_PrioGetHighest>
 8004d92:	4603      	mov	r3, r0
 8004d94:	461a      	mov	r2, r3
 8004d96:	4b1a      	ldr	r3, [pc, #104]	@ (8004e00 <OSIntExit+0xc8>)
 8004d98:	701a      	strb	r2, [r3, #0]
#if (OS_CFG_TASK_IDLE_EN > 0u)
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;         /* Get highest priority task ready-to-run               */
 8004d9a:	4b19      	ldr	r3, [pc, #100]	@ (8004e00 <OSIntExit+0xc8>)
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4a18      	ldr	r2, [pc, #96]	@ (8004e04 <OSIntExit+0xcc>)
 8004da2:	460b      	mov	r3, r1
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	440b      	add	r3, r1
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a16      	ldr	r2, [pc, #88]	@ (8004e08 <OSIntExit+0xd0>)
 8004db0:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                       /* Current task still the highest priority?             */
 8004db2:	4b15      	ldr	r3, [pc, #84]	@ (8004e08 <OSIntExit+0xd0>)
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	4b15      	ldr	r3, [pc, #84]	@ (8004e0c <OSIntExit+0xd4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d103      	bne.n	8004dc6 <OSIntExit+0x8e>
        if (stk_status != OS_TRUE) {
            OSRedzoneHitHook(OSTCBCurPtr);
        }
#endif
        OS_TRACE_ISR_EXIT();
        CPU_INT_EN();
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7fb fa26 	bl	8000210 <CPU_SR_Restore>
        OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdyPtr);             /* Do this here because we don't execute OSIntCtxSw().  */
        return;
 8004dc4:	e012      	b.n	8004dec <OSIntExit+0xb4>
        }
    }
#endif

#if (OS_CFG_TASK_PROFILE_EN > 0u)
    OSTCBHighRdyPtr->CtxSwCtr++;                                /* Inc. # of context switches for this new task         */
 8004dc6:	4b10      	ldr	r3, [pc, #64]	@ (8004e08 <OSIntExit+0xd0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004dce:	3201      	adds	r2, #1
 8004dd0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#endif
#if ((OS_CFG_TASK_PROFILE_EN > 0u) || (OS_CFG_DBG_EN > 0u))
    OSTaskCtxSwCtr++;                                           /* Keep track of the total number of ctx switches       */
 8004dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8004e10 <OSIntExit+0xd8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	4a0d      	ldr	r2, [pc, #52]	@ (8004e10 <OSIntExit+0xd8>)
 8004ddc:	6013      	str	r3, [r2, #0]
    OS_TLS_TaskSw();
#endif

    OS_TRACE_ISR_EXIT_TO_SCHEDULER();

    OSIntCtxSw();                                               /* Perform interrupt level ctx switch                   */
 8004dde:	f7fb fa6e 	bl	80002be <OSCtxSw>

    CPU_INT_EN();
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7fb fa14 	bl	8000210 <CPU_SR_Restore>
 8004de8:	e000      	b.n	8004dec <OSIntExit+0xb4>
        return;                                                 /* No                                                   */
 8004dea:	bf00      	nop
}
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	200019ad 	.word	0x200019ad
 8004df8:	200019ac 	.word	0x200019ac
 8004dfc:	20001cec 	.word	0x20001cec
 8004e00:	200019db 	.word	0x200019db
 8004e04:	200019ec 	.word	0x200019ec
 8004e08:	20001f20 	.word	0x20001f20
 8004e0c:	20001f1c 	.word	0x20001f1c
 8004e10:	20001dd8 	.word	0x20001dd8

08004e14 <OSSched>:
* Note(s)    : 1) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSSched (void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	607b      	str	r3, [r7, #4]


#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)                       /* Can't schedule when the kernel is stopped.           */
    if (OSRunning != OS_STATE_OS_RUNNING) {
 8004e1e:	4b24      	ldr	r3, [pc, #144]	@ (8004eb0 <OSSched+0x9c>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d13b      	bne.n	8004e9e <OSSched+0x8a>
        return;
    }
#endif

    if (OSIntNestingCtr > 0u) {                                 /* ISRs still nested?                                   */
 8004e26:	4b23      	ldr	r3, [pc, #140]	@ (8004eb4 <OSSched+0xa0>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d139      	bne.n	8004ea2 <OSSched+0x8e>
        return;                                                 /* Yes ... only schedule when no nested ISRs            */
    }

    if (OSSchedLockNestingCtr > 0u) {                           /* Scheduler locked?                                    */
 8004e2e:	4b22      	ldr	r3, [pc, #136]	@ (8004eb8 <OSSched+0xa4>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d137      	bne.n	8004ea6 <OSSched+0x92>
        return;                                                 /* Yes                                                  */
    }

    CPU_INT_DIS();
 8004e36:	2040      	movs	r0, #64	@ 0x40
 8004e38:	f7fb f9dc 	bl	80001f4 <CPU_SR_Save>
 8004e3c:	6078      	str	r0, [r7, #4]
    OSPrioHighRdy   = OS_PrioGetHighest();                      /* Find the highest priority ready                      */
 8004e3e:	f001 fd53 	bl	80068e8 <OS_PrioGetHighest>
 8004e42:	4603      	mov	r3, r0
 8004e44:	461a      	mov	r2, r3
 8004e46:	4b1d      	ldr	r3, [pc, #116]	@ (8004ebc <OSSched+0xa8>)
 8004e48:	701a      	strb	r2, [r3, #0]
#if (OS_CFG_TASK_IDLE_EN > 0u)
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;         /* Get highest priority task ready-to-run               */
 8004e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004ebc <OSSched+0xa8>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec0 <OSSched+0xac>)
 8004e52:	460b      	mov	r3, r1
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	440b      	add	r3, r1
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a19      	ldr	r2, [pc, #100]	@ (8004ec4 <OSSched+0xb0>)
 8004e60:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                       /* Current task still the highest priority?             */
 8004e62:	4b18      	ldr	r3, [pc, #96]	@ (8004ec4 <OSSched+0xb0>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4b18      	ldr	r3, [pc, #96]	@ (8004ec8 <OSSched+0xb4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d103      	bne.n	8004e76 <OSSched+0x62>
        CPU_INT_EN();                                           /* Yes                                                  */
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fb f9ce 	bl	8000210 <CPU_SR_Restore>
        return;
 8004e74:	e018      	b.n	8004ea8 <OSSched+0x94>
#endif

    OS_TRACE_TASK_PREEMPT(OSTCBCurPtr);

#if (OS_CFG_TASK_PROFILE_EN > 0u)
    OSTCBHighRdyPtr->CtxSwCtr++;                                /* Inc. # of context switches to this task              */
 8004e76:	4b13      	ldr	r3, [pc, #76]	@ (8004ec4 <OSSched+0xb0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004e7e:	3201      	adds	r2, #1
 8004e80:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#endif

#if ((OS_CFG_TASK_PROFILE_EN > 0u) || (OS_CFG_DBG_EN > 0u))
    OSTaskCtxSwCtr++;                                           /* Increment context switch counter                     */
 8004e84:	4b11      	ldr	r3, [pc, #68]	@ (8004ecc <OSSched+0xb8>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	4a10      	ldr	r2, [pc, #64]	@ (8004ecc <OSSched+0xb8>)
 8004e8c:	6013      	str	r3, [r2, #0]
#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskSw();
#endif

#if (OS_CFG_TASK_IDLE_EN > 0u)
    OS_TASK_SW();                                               /* Perform a task level context switch                  */
 8004e8e:	f7fb fa16 	bl	80002be <OSCtxSw>
    CPU_INT_EN();
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fb f9bc 	bl	8000210 <CPU_SR_Restore>
        }
    }
#endif

#ifdef OS_TASK_SW_SYNC
    OS_TASK_SW_SYNC();
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	e004      	b.n	8004ea8 <OSSched+0x94>
        return;
 8004e9e:	bf00      	nop
 8004ea0:	e002      	b.n	8004ea8 <OSSched+0x94>
        return;                                                 /* Yes ... only schedule when no nested ISRs            */
 8004ea2:	bf00      	nop
 8004ea4:	e000      	b.n	8004ea8 <OSSched+0x94>
        return;                                                 /* Yes                                                  */
 8004ea6:	bf00      	nop
#endif
}
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	200019ad 	.word	0x200019ad
 8004eb4:	200019ac 	.word	0x200019ac
 8004eb8:	20001cec 	.word	0x20001cec
 8004ebc:	200019db 	.word	0x200019db
 8004ec0:	200019ec 	.word	0x200019ec
 8004ec4:	20001f20 	.word	0x20001f20
 8004ec8:	20001f1c 	.word	0x20001f1c
 8004ecc:	20001dd8 	.word	0x20001dd8

08004ed0 <OSStart>:
*              2) OSStart() is not supposed to return.  If it does, that would be considered a fatal error.
************************************************************************************************************************
*/

void  OSStart (OS_ERR  *p_err)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    if (OSInitialized != OS_TRUE) {
 8004ed8:	4b26      	ldr	r3, [pc, #152]	@ (8004f74 <OSStart+0xa4>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d004      	beq.n	8004eea <OSStart+0x1a>
       *p_err = OS_ERR_OS_NOT_INIT;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f645 628b 	movw	r2, #24203	@ 0x5e8b
 8004ee6:	801a      	strh	r2, [r3, #0]
        return;
 8004ee8:	e040      	b.n	8004f6c <OSStart+0x9c>
    }

    kernel_task_cnt = 0u;                                       /* Calculate the number of kernel tasks                 */
 8004eea:	2300      	movs	r3, #0
 8004eec:	81fb      	strh	r3, [r7, #14]
#if (OS_CFG_STAT_TASK_EN > 0u)
    kernel_task_cnt++;
 8004eee:	89fb      	ldrh	r3, [r7, #14]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	81fb      	strh	r3, [r7, #14]
#endif
#if (OS_CFG_TMR_EN > 0u)
    kernel_task_cnt++;
 8004ef4:	89fb      	ldrh	r3, [r7, #14]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	81fb      	strh	r3, [r7, #14]
#endif
#if (OS_CFG_TASK_IDLE_EN > 0u)
    kernel_task_cnt++;
 8004efa:	89fb      	ldrh	r3, [r7, #14]
 8004efc:	3301      	adds	r3, #1
 8004efe:	81fb      	strh	r3, [r7, #14]
#endif

    if (OSTaskQty <= kernel_task_cnt) {                         /* No application task created                          */
 8004f00:	4b1d      	ldr	r3, [pc, #116]	@ (8004f78 <OSStart+0xa8>)
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	89fa      	ldrh	r2, [r7, #14]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d304      	bcc.n	8004f14 <OSStart+0x44>
        *p_err = OS_ERR_OS_NO_APP_TASK;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f645 628c 	movw	r2, #24204	@ 0x5e8c
 8004f10:	801a      	strh	r2, [r3, #0]
         return;
 8004f12:	e02b      	b.n	8004f6c <OSStart+0x9c>
    }

    if (OSRunning == OS_STATE_OS_STOPPED) {
 8004f14:	4b19      	ldr	r3, [pc, #100]	@ (8004f7c <OSStart+0xac>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d123      	bne.n	8004f64 <OSStart+0x94>
        OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority                            */
 8004f1c:	f001 fce4 	bl	80068e8 <OS_PrioGetHighest>
 8004f20:	4603      	mov	r3, r0
 8004f22:	461a      	mov	r2, r3
 8004f24:	4b16      	ldr	r3, [pc, #88]	@ (8004f80 <OSStart+0xb0>)
 8004f26:	701a      	strb	r2, [r3, #0]
        OSPrioCur       = OSPrioHighRdy;
 8004f28:	4b15      	ldr	r3, [pc, #84]	@ (8004f80 <OSStart+0xb0>)
 8004f2a:	781a      	ldrb	r2, [r3, #0]
 8004f2c:	4b15      	ldr	r3, [pc, #84]	@ (8004f84 <OSStart+0xb4>)
 8004f2e:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8004f30:	4b13      	ldr	r3, [pc, #76]	@ (8004f80 <OSStart+0xb0>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	4619      	mov	r1, r3
 8004f36:	4a14      	ldr	r2, [pc, #80]	@ (8004f88 <OSStart+0xb8>)
 8004f38:	460b      	mov	r3, r1
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	440b      	add	r3, r1
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a11      	ldr	r2, [pc, #68]	@ (8004f8c <OSStart+0xbc>)
 8004f46:	6013      	str	r3, [r2, #0]
        OSTCBCurPtr     = OSTCBHighRdyPtr;
 8004f48:	4b10      	ldr	r3, [pc, #64]	@ (8004f8c <OSStart+0xbc>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a10      	ldr	r2, [pc, #64]	@ (8004f90 <OSStart+0xc0>)
 8004f4e:	6013      	str	r3, [r2, #0]
        OSRunning       = OS_STATE_OS_RUNNING;
 8004f50:	4b0a      	ldr	r3, [pc, #40]	@ (8004f7c <OSStart+0xac>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	701a      	strb	r2, [r3, #0]
        OSStartHighRdy();                                       /* Execute target specific code to start task           */
 8004f56:	f7fb f973 	bl	8000240 <OSStartHighRdy>
       *p_err           = OS_ERR_FATAL_RETURN;                  /* OSStart() is not supposed to return                  */
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f643 2299 	movw	r2, #15001	@ 0x3a99
 8004f60:	801a      	strh	r2, [r3, #0]
 8004f62:	e003      	b.n	8004f6c <OSStart+0x9c>
    } else {
       *p_err           = OS_ERR_OS_RUNNING;                    /* OS is already running                                */
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f645 628a 	movw	r2, #24202	@ 0x5e8a
 8004f6a:	801a      	strh	r2, [r3, #0]
    }
}
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	200019ae 	.word	0x200019ae
 8004f78:	20001de0 	.word	0x20001de0
 8004f7c:	200019ad 	.word	0x200019ad
 8004f80:	200019db 	.word	0x200019db
 8004f84:	200019da 	.word	0x200019da
 8004f88:	200019ec 	.word	0x200019ec
 8004f8c:	20001f20 	.word	0x20001f20
 8004f90:	20001f1c 	.word	0x20001f1c

08004f94 <OS_IdleTask>:
*              3) This hook has been added to allow you to do such things as STOP the CPU to conserve power.
************************************************************************************************************************
*/
#if (OS_CFG_TASK_IDLE_EN > 0u)
void  OS_IdleTask (void  *p_arg)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_EN > 0u))
    CPU_SR_ALLOC();
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60fb      	str	r3, [r7, #12]

    (void)p_arg;                                                /* Prevent compiler warning for not using 'p_arg'       */

    for (;;) {
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_EN > 0u))
        CPU_CRITICAL_ENTER();
 8004fa0:	2040      	movs	r0, #64	@ 0x40
 8004fa2:	f7fb f927 	bl	80001f4 <CPU_SR_Save>
 8004fa6:	60f8      	str	r0, [r7, #12]
#if (OS_CFG_DBG_EN > 0u)
        OSIdleTaskCtr++;
 8004fa8:	4b08      	ldr	r3, [pc, #32]	@ (8004fcc <OS_IdleTask+0x38>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3301      	adds	r3, #1
 8004fae:	4a07      	ldr	r2, [pc, #28]	@ (8004fcc <OS_IdleTask+0x38>)
 8004fb0:	6013      	str	r3, [r2, #0]
#endif
#if (OS_CFG_STAT_TASK_EN > 0u)
        OSStatTaskCtr++;
 8004fb2:	4b07      	ldr	r3, [pc, #28]	@ (8004fd0 <OS_IdleTask+0x3c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	4a05      	ldr	r2, [pc, #20]	@ (8004fd0 <OS_IdleTask+0x3c>)
 8004fba:	6013      	str	r3, [r2, #0]
#endif
        CPU_CRITICAL_EXIT();
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f7fb f927 	bl	8000210 <CPU_SR_Restore>
#endif

#if (OS_CFG_APP_HOOKS_EN > 0u)
        OSIdleTaskHook();                                       /* Call user definable HOOK                             */
 8004fc2:	f7ff fc35 	bl	8004830 <OSIdleTaskHook>
        CPU_CRITICAL_ENTER();
 8004fc6:	bf00      	nop
 8004fc8:	e7ea      	b.n	8004fa0 <OS_IdleTask+0xc>
 8004fca:	bf00      	nop
 8004fcc:	200018e4 	.word	0x200018e4
 8004fd0:	20001d04 	.word	0x20001d04

08004fd4 <OS_IdleTaskInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/
#if (OS_CFG_TASK_IDLE_EN > 0u)
void  OS_IdleTaskInit (OS_ERR  *p_err)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08c      	sub	sp, #48	@ 0x30
 8004fd8:	af0a      	add	r7, sp, #40	@ 0x28
 8004fda:	6078      	str	r0, [r7, #4]
#if (OS_CFG_DBG_EN > 0u)
    OSIdleTaskCtr = 0u;
 8004fdc:	4b10      	ldr	r3, [pc, #64]	@ (8005020 <OS_IdleTaskInit+0x4c>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
#endif
                                                                /* --------------- CREATE THE IDLE TASK --------------- */
    OSTaskCreate(&OSIdleTaskTCB,
 8004fe2:	4b10      	ldr	r3, [pc, #64]	@ (8005024 <OS_IdleTaskInit+0x50>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a10      	ldr	r2, [pc, #64]	@ (8005028 <OS_IdleTaskInit+0x54>)
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	4910      	ldr	r1, [pc, #64]	@ (800502c <OS_IdleTaskInit+0x58>)
 8004fec:	6809      	ldr	r1, [r1, #0]
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	9008      	str	r0, [sp, #32]
 8004ff2:	200b      	movs	r0, #11
 8004ff4:	9007      	str	r0, [sp, #28]
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	9006      	str	r0, [sp, #24]
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	9005      	str	r0, [sp, #20]
 8004ffe:	2000      	movs	r0, #0
 8005000:	9004      	str	r0, [sp, #16]
 8005002:	9103      	str	r1, [sp, #12]
 8005004:	9202      	str	r2, [sp, #8]
 8005006:	9301      	str	r3, [sp, #4]
 8005008:	233f      	movs	r3, #63	@ 0x3f
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	2300      	movs	r3, #0
 800500e:	4a08      	ldr	r2, [pc, #32]	@ (8005030 <OS_IdleTaskInit+0x5c>)
 8005010:	4908      	ldr	r1, [pc, #32]	@ (8005034 <OS_IdleTaskInit+0x60>)
 8005012:	4809      	ldr	r0, [pc, #36]	@ (8005038 <OS_IdleTaskInit+0x64>)
 8005014:	f001 ff6c 	bl	8006ef0 <OSTaskCreate>
                  0u,
                  0u,
                 (void       *)0,
                 (OS_OPT_TASK_STK_CHK | (OS_OPT)(OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS)),
                  p_err);
}
 8005018:	bf00      	nop
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	200018e4 	.word	0x200018e4
 8005024:	080086a4 	.word	0x080086a4
 8005028:	080086a8 	.word	0x080086a8
 800502c:	080086ac 	.word	0x080086ac
 8005030:	08004f95 	.word	0x08004f95
 8005034:	080085f8 	.word	0x080085f8
 8005038:	200018e8 	.word	0x200018e8

0800503c <OS_Pend>:

void  OS_Pend (OS_PEND_OBJ  *p_obj,
               OS_TCB       *p_tcb,
               OS_STATE      pending_on,
               OS_TICK       timeout)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	4613      	mov	r3, r2
 800504a:	71fb      	strb	r3, [r7, #7]
    OS_PEND_LIST  *p_pend_list;


    p_tcb->PendOn     = pending_on;                             /* Resource not available, wait until it is             */
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	79fa      	ldrb	r2, [r7, #7]
 8005050:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    p_tcb->PendStatus = OS_STATUS_PEND_OK;
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    OS_TaskBlock(p_tcb,                                         /* Block the task and add it to the tick list if needed */
 800505c:	6839      	ldr	r1, [r7, #0]
 800505e:	68b8      	ldr	r0, [r7, #8]
 8005060:	f000 fbb2 	bl	80057c8 <OS_TaskBlock>
                 timeout);

    if (p_obj != (OS_PEND_OBJ *)0) {                            /* Add the current task to the pend list ...            */
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <OS_Pend+0x44>
        p_pend_list             = &p_obj->PendList;             /* ... if there is an object to pend on                 */
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3308      	adds	r3, #8
 800506e:	617b      	str	r3, [r7, #20]
        p_tcb->PendObjPtr =  p_obj;                             /* Save the pointer to the object pending on            */
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	635a      	str	r2, [r3, #52]	@ 0x34
        OS_PendListInsertPrio(p_pend_list,                      /* Insert in the pend list in priority order            */
 8005076:	68b9      	ldr	r1, [r7, #8]
 8005078:	6978      	ldr	r0, [r7, #20]
 800507a:	f000 f89f 	bl	80051bc <OS_PendListInsertPrio>
 800507e:	e002      	b.n	8005086 <OS_Pend+0x4a>
                              p_tcb);

    } else {
        p_tcb->PendObjPtr = (OS_PEND_OBJ *)0;                   /* If no object being pended on, clear the pend object  */
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2200      	movs	r2, #0
 8005084:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#if (OS_CFG_DBG_EN > 0u)
    OS_PendDbgNameAdd(p_obj,
 8005086:	68b9      	ldr	r1, [r7, #8]
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f805 	bl	8005098 <OS_PendDbgNameAdd>
                      p_tcb);
#endif
}
 800508e:	bf00      	nop
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <OS_PendDbgNameAdd>:
*/

#if (OS_CFG_DBG_EN > 0u)
void  OS_PendDbgNameAdd (OS_PEND_OBJ  *p_obj,
                         OS_TCB       *p_tcb)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb1;


    if (p_obj != (OS_PEND_OBJ *)0) {
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00f      	beq.n	80050c8 <OS_PendDbgNameAdd+0x30>
        p_tcb->DbgNamePtr =  p_obj->NamePtr;                    /* Task pending on this object ... save name in TCB     */
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        p_pend_list       = &p_obj->PendList;                   /* Find name of HP task pending on this object ...      */
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3308      	adds	r3, #8
 80050b6:	60fb      	str	r3, [r7, #12]
        p_tcb1            =  p_pend_list->HeadPtr;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60bb      	str	r3, [r7, #8]
        p_obj->DbgNamePtr =  p_tcb1->NamePtr;                   /* ... Save in object                                   */
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	61da      	str	r2, [r3, #28]
            default:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
                 break;
        }
    }
}
 80050c6:	e016      	b.n	80050f6 <OS_PendDbgNameAdd+0x5e>
        switch (p_tcb->PendOn) {
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d002      	beq.n	80050d8 <OS_PendDbgNameAdd+0x40>
 80050d2:	2b07      	cmp	r3, #7
 80050d4:	d005      	beq.n	80050e2 <OS_PendDbgNameAdd+0x4a>
 80050d6:	e009      	b.n	80050ec <OS_PendDbgNameAdd+0x54>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Q");
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	4a0a      	ldr	r2, [pc, #40]	@ (8005104 <OS_PendDbgNameAdd+0x6c>)
 80050dc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
                 break;
 80050e0:	e009      	b.n	80050f6 <OS_PendDbgNameAdd+0x5e>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Sem");
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	4a08      	ldr	r2, [pc, #32]	@ (8005108 <OS_PendDbgNameAdd+0x70>)
 80050e6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
                 break;
 80050ea:	e004      	b.n	80050f6 <OS_PendDbgNameAdd+0x5e>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	4a07      	ldr	r2, [pc, #28]	@ (800510c <OS_PendDbgNameAdd+0x74>)
 80050f0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
                 break;
 80050f4:	bf00      	nop
}
 80050f6:	bf00      	nop
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	0800860c 	.word	0x0800860c
 8005108:	08008614 	.word	0x08008614
 800510c:	08008620 	.word	0x08008620

08005110 <OS_PendDbgNameRemove>:


void  OS_PendDbgNameRemove (OS_PEND_OBJ  *p_obj,
                            OS_TCB       *p_tcb)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb1;


    p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");              /* Remove name of object pended on for readied task     */
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	4a0e      	ldr	r2, [pc, #56]	@ (8005158 <OS_PendDbgNameRemove+0x48>)
 800511e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

    if (p_obj != (OS_PEND_OBJ *)0) {
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d010      	beq.n	800514a <OS_PendDbgNameRemove+0x3a>
        p_pend_list = &p_obj->PendList;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3308      	adds	r3, #8
 800512c:	60fb      	str	r3, [r7, #12]
        p_tcb1      =  p_pend_list->HeadPtr;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	60bb      	str	r3, [r7, #8]
        if (p_tcb1 != (OS_TCB *)0) {                            /* Find name of HP task pending on this object ...      */
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d004      	beq.n	8005144 <OS_PendDbgNameRemove+0x34>
            p_obj->DbgNamePtr = p_tcb1->NamePtr;                /* ... Save in object                                   */
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	61da      	str	r2, [r3, #28]
        } else {
            p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* Or no other task is pending on object                */
        }
    }
}
 8005142:	e002      	b.n	800514a <OS_PendDbgNameRemove+0x3a>
            p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* Or no other task is pending on object                */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a04      	ldr	r2, [pc, #16]	@ (8005158 <OS_PendDbgNameRemove+0x48>)
 8005148:	61da      	str	r2, [r3, #28]
}
 800514a:	bf00      	nop
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	08008620 	.word	0x08008620

0800515c <OS_PendListChangePrio>:
*              2) It's assumed that the TCB contains the NEW priority in its .Prio field.
************************************************************************************************************************
*/

void  OS_PendListChangePrio (OS_TCB  *p_tcb)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_OBJ   *p_obj;

    p_obj       =  p_tcb->PendObjPtr;                           /* Get pointer to pend list                             */
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005168:	60fb      	str	r3, [r7, #12]
    p_pend_list = &p_obj->PendList;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3308      	adds	r3, #8
 800516e:	60bb      	str	r3, [r7, #8]

    if (p_pend_list->HeadPtr->PendNextPtr != (OS_TCB *)0) {     /* Only move if multiple entries in the list            */
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d009      	beq.n	800518e <OS_PendListChangePrio+0x32>
            OS_PendListRemove(p_tcb);                           /* Remove entry from current position                   */
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f88a 	bl	8005294 <OS_PendListRemove>
            p_tcb->PendObjPtr = p_obj;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	635a      	str	r2, [r3, #52]	@ 0x34
            OS_PendListInsertPrio(p_pend_list,                  /* INSERT it back in the list                           */
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	68b8      	ldr	r0, [r7, #8]
 800518a:	f000 f817 	bl	80051bc <OS_PendListInsertPrio>
                                  p_tcb);
    }
}
 800518e:	bf00      	nop
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <OS_PendListInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application must not call it.
************************************************************************************************************************
*/

void  OS_PendListInit (OS_PEND_LIST  *p_pend_list)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
    p_pend_list->HeadPtr    = (OS_TCB *)0;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]
    p_pend_list->TailPtr    = (OS_TCB *)0;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	605a      	str	r2, [r3, #4]
#if (OS_CFG_DBG_EN > 0u)
    p_pend_list->NbrEntries =           0u;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	811a      	strh	r2, [r3, #8]
#endif
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <OS_PendListInsertPrio>:
************************************************************************************************************************
*/

void  OS_PendListInsertPrio (OS_PEND_LIST  *p_pend_list,
                             OS_TCB        *p_tcb)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
    OS_PRIO   prio;
    OS_TCB   *p_tcb_next;


    prio  = p_tcb->Prio;                                        /* Obtain the priority of the task to insert            */
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80051cc:	72fb      	strb	r3, [r7, #11]

    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* CASE 0: Insert when there are no entries             */
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10f      	bne.n	80051f6 <OS_PendListInsertPrio+0x3a>
#if (OS_CFG_DBG_EN > 0u)
        p_pend_list->NbrEntries = 1u;                           /* This is the first entry                              */
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	811a      	strh	r2, [r3, #8]
#endif
        p_tcb->PendNextPtr   = (OS_TCB *)0;                     /* No other OS_TCBs in the list                         */
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2200      	movs	r2, #0
 80051e0:	62da      	str	r2, [r3, #44]	@ 0x2c
        p_tcb->PendPrevPtr   = (OS_TCB *)0;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2200      	movs	r2, #0
 80051e6:	631a      	str	r2, [r3, #48]	@ 0x30
        p_pend_list->HeadPtr =  p_tcb;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr =  p_tcb;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	605a      	str	r2, [r3, #4]
                p_tcb->PendPrevPtr->PendNextPtr = p_tcb;
                p_tcb_next->PendPrevPtr         = p_tcb;
            }
        }
    }
}
 80051f4:	e048      	b.n	8005288 <OS_PendListInsertPrio+0xcc>
        p_pend_list->NbrEntries++;                              /* CASE 1: One more OS_TCBs in the list                 */
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	891b      	ldrh	r3, [r3, #8]
 80051fa:	3301      	adds	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	811a      	strh	r2, [r3, #8]
        p_tcb_next = p_pend_list->HeadPtr;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	60fb      	str	r3, [r7, #12]
        while (p_tcb_next != (OS_TCB *)0) {                     /* Find the position where to insert                    */
 8005208:	e008      	b.n	800521c <OS_PendListInsertPrio+0x60>
            if (prio < p_tcb_next->Prio) {
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005210:	7afa      	ldrb	r2, [r7, #11]
 8005212:	429a      	cmp	r2, r3
 8005214:	d306      	bcc.n	8005224 <OS_PendListInsertPrio+0x68>
                p_tcb_next = p_tcb_next->PendNextPtr;           /* Not Found, follow the list                           */
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521a:	60fb      	str	r3, [r7, #12]
        while (p_tcb_next != (OS_TCB *)0) {                     /* Find the position where to insert                    */
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f3      	bne.n	800520a <OS_PendListInsertPrio+0x4e>
 8005222:	e000      	b.n	8005226 <OS_PendListInsertPrio+0x6a>
                break;                                          /* Found! ... insert BEFORE current                     */
 8005224:	bf00      	nop
        if (p_tcb_next == (OS_TCB *)0) {                        /* TCB to insert is lowest in priority                  */
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10e      	bne.n	800524a <OS_PendListInsertPrio+0x8e>
            p_tcb->PendNextPtr              = (OS_TCB *)0;      /* ... insert at the tail.                              */
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2200      	movs	r2, #0
 8005230:	62da      	str	r2, [r3, #44]	@ 0x2c
            p_tcb->PendPrevPtr              =  p_pend_list->TailPtr;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	631a      	str	r2, [r3, #48]	@ 0x30
            p_tcb->PendPrevPtr->PendNextPtr =  p_tcb;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	62da      	str	r2, [r3, #44]	@ 0x2c
            p_pend_list->TailPtr            =  p_tcb;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	605a      	str	r2, [r3, #4]
}
 8005248:	e01e      	b.n	8005288 <OS_PendListInsertPrio+0xcc>
            if (p_tcb_next->PendPrevPtr == (OS_TCB *)0) {       /* Is new TCB highest priority?                         */
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10c      	bne.n	800526c <OS_PendListInsertPrio+0xb0>
                p_tcb->PendNextPtr      =  p_tcb_next;          /* Yes, insert as new Head of list                      */
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	62da      	str	r2, [r3, #44]	@ 0x2c
                p_tcb->PendPrevPtr      = (OS_TCB *)0;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2200      	movs	r2, #0
 800525c:	631a      	str	r2, [r3, #48]	@ 0x30
                p_tcb_next->PendPrevPtr =  p_tcb;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	631a      	str	r2, [r3, #48]	@ 0x30
                p_pend_list->HeadPtr    =  p_tcb;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	601a      	str	r2, [r3, #0]
}
 800526a:	e00d      	b.n	8005288 <OS_PendListInsertPrio+0xcc>
                p_tcb->PendNextPtr              = p_tcb_next;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	62da      	str	r2, [r3, #44]	@ 0x2c
                p_tcb->PendPrevPtr              = p_tcb_next->PendPrevPtr;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	631a      	str	r2, [r3, #48]	@ 0x30
                p_tcb->PendPrevPtr->PendNextPtr = p_tcb;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	62da      	str	r2, [r3, #44]	@ 0x2c
                p_tcb_next->PendPrevPtr         = p_tcb;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005288:	bf00      	nop
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <OS_PendListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PendListRemove (OS_TCB  *p_tcb)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_next;
    OS_TCB        *p_prev;


    if (p_tcb->PendObjPtr != (OS_PEND_OBJ *)0) {                /* Only remove if object has a pend list.               */
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d046      	beq.n	8005332 <OS_PendListRemove+0x9e>
        p_pend_list = &p_tcb->PendObjPtr->PendList;             /* Get pointer to pend list                             */
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052a8:	3308      	adds	r3, #8
 80052aa:	617b      	str	r3, [r7, #20]

                                                                /* Remove TCB from the pend list.                       */
        if (p_pend_list->HeadPtr->PendNextPtr == (OS_TCB *)0) {
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d106      	bne.n	80052c4 <OS_PendListRemove+0x30>
            p_pend_list->HeadPtr = (OS_TCB *)0;                 /* Only one entry in the pend list                      */
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
            p_pend_list->TailPtr = (OS_TCB *)0;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2200      	movs	r2, #0
 80052c0:	605a      	str	r2, [r3, #4]
 80052c2:	e027      	b.n	8005314 <OS_PendListRemove+0x80>
        } else if (p_tcb->PendPrevPtr == (OS_TCB *)0) {         /* See if entry is at the head of the list              */
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d109      	bne.n	80052e0 <OS_PendListRemove+0x4c>
            p_next               =  p_tcb->PendNextPtr;         /* Yes                                                  */
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d0:	60fb      	str	r3, [r7, #12]
            p_next->PendPrevPtr  = (OS_TCB *)0;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	@ 0x30
            p_pend_list->HeadPtr =  p_next;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	e019      	b.n	8005314 <OS_PendListRemove+0x80>

        } else if (p_tcb->PendNextPtr == (OS_TCB *)0) {         /* See if entry is at the tail of the list              */
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d109      	bne.n	80052fc <OS_PendListRemove+0x68>
            p_prev               =  p_tcb->PendPrevPtr;         /* Yes                                                  */
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ec:	613b      	str	r3, [r7, #16]
            p_prev->PendNextPtr  = (OS_TCB *)0;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	2200      	movs	r2, #0
 80052f2:	62da      	str	r2, [r3, #44]	@ 0x2c
            p_pend_list->TailPtr =  p_prev;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	605a      	str	r2, [r3, #4]
 80052fa:	e00b      	b.n	8005314 <OS_PendListRemove+0x80>

        } else {
            p_prev               = p_tcb->PendPrevPtr;          /* Remove from inside the list                          */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005300:	613b      	str	r3, [r7, #16]
            p_next               = p_tcb->PendNextPtr;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	60fb      	str	r3, [r7, #12]
            p_prev->PendNextPtr  = p_next;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	62da      	str	r2, [r3, #44]	@ 0x2c
            p_next->PendPrevPtr  = p_prev;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	631a      	str	r2, [r3, #48]	@ 0x30
        }
#if (OS_CFG_DBG_EN > 0u)
        p_pend_list->NbrEntries--;                              /* One less entry in the list                           */
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	891b      	ldrh	r3, [r3, #8]
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	811a      	strh	r2, [r3, #8]
#endif
        p_tcb->PendNextPtr = (OS_TCB      *)0;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	62da      	str	r2, [r3, #44]	@ 0x2c
        p_tcb->PendPrevPtr = (OS_TCB      *)0;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	631a      	str	r2, [r3, #48]	@ 0x30
        p_tcb->PendObjPtr  = (OS_PEND_OBJ *)0;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	635a      	str	r2, [r3, #52]	@ 0x34
    }
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
	...

08005340 <OS_Post>:
void  OS_Post (OS_PEND_OBJ  *p_obj,
               OS_TCB       *p_tcb,
               void         *p_void,
               OS_MSG_SIZE   msg_size,
               CPU_TS        ts)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	807b      	strh	r3, [r7, #2]
#if (OS_MSG_EN == 0u)
    (void)p_void;
    (void)msg_size;
#endif

    switch (p_tcb->TaskState) {
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005354:	2b07      	cmp	r3, #7
 8005356:	d862      	bhi.n	800541e <OS_Post+0xde>
 8005358:	a201      	add	r2, pc, #4	@ (adr r2, 8005360 <OS_Post+0x20>)
 800535a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535e:	bf00      	nop
 8005360:	0800541f 	.word	0x0800541f
 8005364:	0800541f 	.word	0x0800541f
 8005368:	08005381 	.word	0x08005381
 800536c:	08005381 	.word	0x08005381
 8005370:	0800541f 	.word	0x0800541f
 8005374:	0800541f 	.word	0x0800541f
 8005378:	080053d3 	.word	0x080053d3
 800537c:	080053d3 	.word	0x080053d3
             break;

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
#if (OS_MSG_EN > 0u)
             p_tcb->MsgPtr  = p_void;                           /* Deposit message in OS_TCB of task waiting            */
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	661a      	str	r2, [r3, #96]	@ 0x60
             p_tcb->MsgSize = msg_size;                         /* ... assuming posting a message                       */
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	887a      	ldrh	r2, [r7, #2]
 800538a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif
#if (OS_CFG_TS_EN > 0u)
                 p_tcb->TS      = ts;
#endif
             if (p_obj != (OS_PEND_OBJ *)0) {
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <OS_Post+0x5a>
                 OS_PendListRemove(p_tcb);                      /* Remove task from pend list                           */
 8005394:	68b8      	ldr	r0, [r7, #8]
 8005396:	f7ff ff7d 	bl	8005294 <OS_PendListRemove>
             }
#if (OS_CFG_DBG_EN > 0u)
             OS_PendDbgNameRemove(p_obj,
 800539a:	68b9      	ldr	r1, [r7, #8]
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f7ff feb7 	bl	8005110 <OS_PendDbgNameRemove>
                                  p_tcb);
#endif
#if (OS_CFG_TICK_EN > 0u)
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d102      	bne.n	80053b2 <OS_Post+0x72>
                 OS_TickListRemove(p_tcb);                      /* Remove from tick list                                */
 80053ac:	68b8      	ldr	r0, [r7, #8]
 80053ae:	f002 fb99 	bl	8007ae4 <OS_TickListRemove>
             }
#endif
             OS_RdyListInsert(p_tcb);                           /* Insert the task in the ready list                    */
 80053b2:	68b8      	ldr	r0, [r7, #8]
 80053b4:	f000 f85e 	bl	8005474 <OS_RdyListInsert>
             p_tcb->TaskState  = OS_TASK_STATE_RDY;
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
             p_tcb->PendStatus = OS_STATUS_PEND_OK;             /* Clear pend status                                    */
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;       /* Indicate no longer pending                           */
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
             break;
 80053d0:	e026      	b.n	8005420 <OS_Post+0xe0>

        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
#if (OS_MSG_EN > 0u)
             p_tcb->MsgPtr  = p_void;                           /* Deposit message in OS_TCB of task waiting            */
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	661a      	str	r2, [r3, #96]	@ 0x60
             p_tcb->MsgSize = msg_size;                         /* ... assuming posting a message                       */
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	887a      	ldrh	r2, [r7, #2]
 80053dc:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif
#if (OS_CFG_TS_EN > 0u)
             p_tcb->TS      = ts;
#endif
             if (p_obj != (OS_PEND_OBJ *)0) {
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <OS_Post+0xac>
                 OS_PendListRemove(p_tcb);                      /* Remove from pend list                                */
 80053e6:	68b8      	ldr	r0, [r7, #8]
 80053e8:	f7ff ff54 	bl	8005294 <OS_PendListRemove>
             }
#if (OS_CFG_DBG_EN > 0u)
             OS_PendDbgNameRemove(p_obj,
 80053ec:	68b9      	ldr	r1, [r7, #8]
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7ff fe8e 	bl	8005110 <OS_PendDbgNameRemove>
                                  p_tcb);
#endif
#if (OS_CFG_TICK_EN > 0u)
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80053fa:	2b07      	cmp	r3, #7
 80053fc:	d102      	bne.n	8005404 <OS_Post+0xc4>
                 OS_TickListRemove(p_tcb);                      /* Cancel any timeout                                   */
 80053fe:	68b8      	ldr	r0, [r7, #8]
 8005400:	f002 fb70 	bl	8007ae4 <OS_TickListRemove>
             }
#endif
             p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2204      	movs	r2, #4
 8005408:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
             p_tcb->PendStatus = OS_STATUS_PEND_OK;             /* Clear pend status                                    */
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;       /* Indicate no longer pending                           */
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
             break;
 800541c:	e000      	b.n	8005420 <OS_Post+0xe0>

        default:
                                                                /* Default case.                                        */
             break;
 800541e:	bf00      	nop
    }
}
 8005420:	bf00      	nop
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <OS_RdyListInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInit (void)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
    CPU_INT32U    i;
    OS_RDY_LIST  *p_rdy_list;



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                    /* Initialize the array of OS_RDY_LIST at each priority */
 800542e:	2300      	movs	r3, #0
 8005430:	607b      	str	r3, [r7, #4]
 8005432:	e013      	b.n	800545c <OS_RdyListInit+0x34>
        p_rdy_list = &OSRdyList[i];
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	4613      	mov	r3, r2
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	4413      	add	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4a0c      	ldr	r2, [pc, #48]	@ (8005470 <OS_RdyListInit+0x48>)
 8005440:	4413      	add	r3, r2
 8005442:	603b      	str	r3, [r7, #0]
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries =           0u;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2200      	movs	r2, #0
 8005448:	811a      	strh	r2, [r3, #8]
#endif
        p_rdy_list->HeadPtr    = (OS_TCB *)0;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    = (OS_TCB *)0;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2200      	movs	r2, #0
 8005454:	605a      	str	r2, [r3, #4]
    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                    /* Initialize the array of OS_RDY_LIST at each priority */
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3301      	adds	r3, #1
 800545a:	607b      	str	r3, [r7, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005460:	d9e8      	bls.n	8005434 <OS_RdyListInit+0xc>
    }
}
 8005462:	bf00      	nop
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	200019ec 	.word	0x200019ec

08005474 <OS_RdyListInsert>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInsert (OS_TCB  *p_tcb)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
    OS_PrioInsert(p_tcb->Prio);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005482:	4618      	mov	r0, r3
 8005484:	f001 fa4c 	bl	8006920 <OS_PrioInsert>
    if (p_tcb->Prio == OSPrioCur) {                             /* Are we readying a task at the same prio?             */
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800548e:	4b07      	ldr	r3, [pc, #28]	@ (80054ac <OS_RdyListInsert+0x38>)
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d103      	bne.n	800549e <OS_RdyListInsert+0x2a>
        OS_RdyListInsertTail(p_tcb);                            /* Yes, insert readied task at the end of the list      */
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f84c 	bl	8005534 <OS_RdyListInsertTail>
    } else {
        OS_RdyListInsertHead(p_tcb);                            /* No,  insert readied task at the beginning of the list*/
    }

    OS_TRACE_TASK_READY(p_tcb);
}
 800549c:	e002      	b.n	80054a4 <OS_RdyListInsert+0x30>
        OS_RdyListInsertHead(p_tcb);                            /* No,  insert readied task at the beginning of the list*/
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f806 	bl	80054b0 <OS_RdyListInsertHead>
}
 80054a4:	bf00      	nop
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	200019da 	.word	0x200019da

080054b0 <OS_RdyListInsertHead>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertHead (OS_TCB  *p_tcb)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80054be:	461a      	mov	r2, r3
 80054c0:	4613      	mov	r3, r2
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	4413      	add	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4a19      	ldr	r2, [pc, #100]	@ (8005530 <OS_RdyListInsertHead+0x80>)
 80054ca:	4413      	add	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->HeadPtr == (OS_TCB *)0) {                   /* CASE 0: Insert when there are no entries             */
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10f      	bne.n	80054f6 <OS_RdyListInsertHead+0x46>
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries =           1u;                  /* This is the first entry                              */
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	811a      	strh	r2, [r3, #8]
#endif
        p_tcb->NextPtr         = (OS_TCB *)0;                   /* No other OS_TCBs in the list                         */
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	611a      	str	r2, [r3, #16]
        p_tcb->PrevPtr         = (OS_TCB *)0;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	615a      	str	r2, [r3, #20]
        p_rdy_list->HeadPtr    =  p_tcb;                        /* Both list pointers point to this OS_TCB              */
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    =  p_tcb;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	605a      	str	r2, [r3, #4]
        p_tcb->PrevPtr         = (OS_TCB *)0;
        p_tcb2                 =  p_rdy_list->HeadPtr;          /* Adjust old head of list's links                      */
        p_tcb2->PrevPtr        =  p_tcb;
        p_rdy_list->HeadPtr    =  p_tcb;
    }
}
 80054f4:	e015      	b.n	8005522 <OS_RdyListInsertHead+0x72>
        p_rdy_list->NbrEntries++;                               /* One more OS_TCB in the list                          */
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	891b      	ldrh	r3, [r3, #8]
 80054fa:	3301      	adds	r3, #1
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr         =  p_rdy_list->HeadPtr;          /* Adjust new OS_TCBs links                             */
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	611a      	str	r2, [r3, #16]
        p_tcb->PrevPtr         = (OS_TCB *)0;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	615a      	str	r2, [r3, #20]
        p_tcb2                 =  p_rdy_list->HeadPtr;          /* Adjust old head of list's links                      */
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	60bb      	str	r3, [r7, #8]
        p_tcb2->PrevPtr        =  p_tcb;
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	615a      	str	r2, [r3, #20]
        p_rdy_list->HeadPtr    =  p_tcb;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	601a      	str	r2, [r3, #0]
}
 8005522:	bf00      	nop
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	200019ec 	.word	0x200019ec

08005534 <OS_RdyListInsertTail>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertTail (OS_TCB  *p_tcb)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005542:	461a      	mov	r2, r3
 8005544:	4613      	mov	r3, r2
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4a18      	ldr	r2, [pc, #96]	@ (80055b0 <OS_RdyListInsertTail+0x7c>)
 800554e:	4413      	add	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->HeadPtr == (OS_TCB *)0) {                   /* CASE 0: Insert when there are no entries             */
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10f      	bne.n	800557a <OS_RdyListInsertTail+0x46>
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries  =           1u;                 /* This is the first entry                              */
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2201      	movs	r2, #1
 800555e:	811a      	strh	r2, [r3, #8]
#endif
        p_tcb->NextPtr          = (OS_TCB *)0;                  /* No other OS_TCBs in the list                         */
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	611a      	str	r2, [r3, #16]
        p_tcb->PrevPtr          = (OS_TCB *)0;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	615a      	str	r2, [r3, #20]
        p_rdy_list->HeadPtr     =  p_tcb;                       /* Both list pointers point to this OS_TCB              */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr     =  p_tcb;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	605a      	str	r2, [r3, #4]
        p_tcb2                  =  p_rdy_list->TailPtr;
        p_tcb->PrevPtr          =  p_tcb2;
        p_tcb2->NextPtr         =  p_tcb;                       /* Adjust old tail of list's links                      */
        p_rdy_list->TailPtr     =  p_tcb;
    }
}
 8005578:	e014      	b.n	80055a4 <OS_RdyListInsertTail+0x70>
        p_rdy_list->NbrEntries++;                               /* One more OS_TCB in the list                          */
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	891b      	ldrh	r3, [r3, #8]
 800557e:	3301      	adds	r3, #1
 8005580:	b29a      	uxth	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB *)0;                  /* Adjust new OS_TCBs links                             */
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	611a      	str	r2, [r3, #16]
        p_tcb2                  =  p_rdy_list->TailPtr;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	60bb      	str	r3, [r7, #8]
        p_tcb->PrevPtr          =  p_tcb2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	615a      	str	r2, [r3, #20]
        p_tcb2->NextPtr         =  p_tcb;                       /* Adjust old tail of list's links                      */
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	611a      	str	r2, [r3, #16]
        p_rdy_list->TailPtr     =  p_tcb;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	605a      	str	r2, [r3, #4]
}
 80055a4:	bf00      	nop
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	200019ec 	.word	0x200019ec

080055b4 <OS_RdyListMoveHeadToTail>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListMoveHeadToTail (OS_RDY_LIST  *p_rdy_list)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
    OS_TCB  *p_tcb1;
    OS_TCB  *p_tcb2;
    OS_TCB  *p_tcb3;


     if (p_rdy_list->HeadPtr != p_rdy_list->TailPtr) {
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d03a      	beq.n	800563e <OS_RdyListMoveHeadToTail+0x8a>
         if (p_rdy_list->HeadPtr->NextPtr == p_rdy_list->TailPtr) { /* SWAP the TCBs                                    */
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d118      	bne.n	8005608 <OS_RdyListMoveHeadToTail+0x54>
             p_tcb1              =  p_rdy_list->HeadPtr;        /* Point to current head                                */
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	617b      	str	r3, [r7, #20]
             p_tcb2              =  p_rdy_list->TailPtr;        /* Point to current tail                                */
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	613b      	str	r3, [r7, #16]
             p_tcb1->PrevPtr     =  p_tcb2;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	615a      	str	r2, [r3, #20]
             p_tcb1->NextPtr     = (OS_TCB *)0;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	2200      	movs	r2, #0
 80055ec:	611a      	str	r2, [r3, #16]
             p_tcb2->PrevPtr     = (OS_TCB *)0;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	2200      	movs	r2, #0
 80055f2:	615a      	str	r2, [r3, #20]
             p_tcb2->NextPtr     =  p_tcb1;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	611a      	str	r2, [r3, #16]
             p_rdy_list->HeadPtr =  p_tcb2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	601a      	str	r2, [r3, #0]
             p_rdy_list->TailPtr =  p_tcb1;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	605a      	str	r2, [r3, #4]
             p_tcb2->NextPtr     =  p_tcb1;                     /* Adjust forward link of old list tail                 */
             p_rdy_list->HeadPtr =  p_tcb3;                     /* Adjust new list head and tail pointers               */
             p_rdy_list->TailPtr =  p_tcb1;
         }
     }
}
 8005606:	e01a      	b.n	800563e <OS_RdyListMoveHeadToTail+0x8a>
             p_tcb1              =  p_rdy_list->HeadPtr;        /* Point to current head                                */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	617b      	str	r3, [r7, #20]
             p_tcb2              =  p_rdy_list->TailPtr;        /* Point to current tail                                */
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	613b      	str	r3, [r7, #16]
             p_tcb3              =  p_tcb1->NextPtr;            /* Point to new list head                               */
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	60fb      	str	r3, [r7, #12]
             p_tcb3->PrevPtr     = (OS_TCB *)0;                 /* Adjust back    link of new list head                 */
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	615a      	str	r2, [r3, #20]
             p_tcb1->NextPtr     = (OS_TCB *)0;                 /* Adjust forward link of new list tail                 */
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2200      	movs	r2, #0
 8005624:	611a      	str	r2, [r3, #16]
             p_tcb1->PrevPtr     =  p_tcb2;                     /* Adjust back    link of new list tail                 */
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	615a      	str	r2, [r3, #20]
             p_tcb2->NextPtr     =  p_tcb1;                     /* Adjust forward link of old list tail                 */
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	611a      	str	r2, [r3, #16]
             p_rdy_list->HeadPtr =  p_tcb3;                     /* Adjust new list head and tail pointers               */
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	601a      	str	r2, [r3, #0]
             p_rdy_list->TailPtr =  p_tcb1;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	605a      	str	r2, [r3, #4]
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
	...

0800564c <OS_RdyListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListRemove (OS_TCB  *p_tcb)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
    OS_TCB       *p_tcb1;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800565a:	461a      	mov	r2, r3
 800565c:	4613      	mov	r3, r2
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	4413      	add	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4a24      	ldr	r2, [pc, #144]	@ (80056f8 <OS_RdyListRemove+0xac>)
 8005666:	4413      	add	r3, r2
 8005668:	617b      	str	r3, [r7, #20]
    p_tcb1     = p_tcb->PrevPtr;                                /* Point to next and previous OS_TCB in the list        */
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	613b      	str	r3, [r7, #16]
    p_tcb2     = p_tcb->NextPtr;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {                                /* Was the OS_TCB to remove at the head?                */
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d11f      	bne.n	80056bc <OS_RdyListRemove+0x70>
        if (p_tcb2 == (OS_TCB *)0) {                            /* Yes, was it the only OS_TCB?                         */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10f      	bne.n	80056a2 <OS_RdyListRemove+0x56>
#if (OS_CFG_DBG_EN > 0u)
            p_rdy_list->NbrEntries =           0u;              /* Yes, no more entries                                 */
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2200      	movs	r2, #0
 8005686:	811a      	strh	r2, [r3, #8]
#endif
            p_rdy_list->HeadPtr    = (OS_TCB *)0;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2200      	movs	r2, #0
 800568c:	601a      	str	r2, [r3, #0]
            p_rdy_list->TailPtr    = (OS_TCB *)0;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2200      	movs	r2, #0
 8005692:	605a      	str	r2, [r3, #4]
            OS_PrioRemove(p_tcb->Prio);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800569a:	4618      	mov	r0, r3
 800569c:	f001 f966 	bl	800696c <OS_PrioRemove>
 80056a0:	e01f      	b.n	80056e2 <OS_RdyListRemove+0x96>
        } else {
#if (OS_CFG_DBG_EN > 0u)
            p_rdy_list->NbrEntries--;                           /* No,  one less entry                                  */
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	891b      	ldrh	r3, [r3, #8]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	811a      	strh	r2, [r3, #8]
#endif
            p_tcb2->PrevPtr     = (OS_TCB *)0;                  /* adjust back link of new list head                    */
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	615a      	str	r2, [r3, #20]
            p_rdy_list->HeadPtr =  p_tcb2;                      /* adjust OS_RDY_LIST's new head                        */
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	e012      	b.n	80056e2 <OS_RdyListRemove+0x96>
        }
    } else {
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries--;                               /* No,  one less entry                                  */
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	891b      	ldrh	r3, [r3, #8]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	811a      	strh	r2, [r3, #8]
#endif
        p_tcb1->NextPtr = p_tcb2;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	611a      	str	r2, [r3, #16]
        if (p_tcb2 == (OS_TCB *)0) {
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d103      	bne.n	80056dc <OS_RdyListRemove+0x90>
            p_rdy_list->TailPtr = p_tcb1;                       /* Removing the TCB at the tail, adj the tail ptr       */
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	605a      	str	r2, [r3, #4]
 80056da:	e002      	b.n	80056e2 <OS_RdyListRemove+0x96>
        } else {
            p_tcb2->PrevPtr     = p_tcb1;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	615a      	str	r2, [r3, #20]
        }
    }
    p_tcb->PrevPtr = (OS_TCB *)0;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	615a      	str	r2, [r3, #20]
    p_tcb->NextPtr = (OS_TCB *)0;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	611a      	str	r2, [r3, #16]

    OS_TRACE_TASK_SUSPENDED(p_tcb);
}
 80056ee:	bf00      	nop
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	200019ec 	.word	0x200019ec

080056fc <OS_SchedRoundRobin>:
************************************************************************************************************************
*/

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
void  OS_SchedRoundRobin (OS_RDY_LIST  *p_rdy_list)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
    OS_TCB  *p_tcb;
    CPU_SR_ALLOC();
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]


    if (OSSchedRoundRobinEn != OS_TRUE) {                       /* Make sure round-robin has been enabled               */
 8005708:	4b2b      	ldr	r3, [pc, #172]	@ (80057b8 <OS_SchedRoundRobin+0xbc>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d14f      	bne.n	80057b0 <OS_SchedRoundRobin+0xb4>
        return;
    }

    CPU_CRITICAL_ENTER();
 8005710:	2040      	movs	r0, #64	@ 0x40
 8005712:	f7fa fd6f 	bl	80001f4 <CPU_SR_Save>
 8005716:	60f8      	str	r0, [r7, #12]
    p_tcb = p_rdy_list->HeadPtr;                                /* Decrement time quanta counter                        */
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	60bb      	str	r3, [r7, #8]

    if (p_tcb == (OS_TCB *)0) {
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d103      	bne.n	800572c <OS_SchedRoundRobin+0x30>
        CPU_CRITICAL_EXIT();
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f7fa fd73 	bl	8000210 <CPU_SR_Restore>
        return;
 800572a:	e042      	b.n	80057b2 <OS_SchedRoundRobin+0xb6>
    }

#if (OS_CFG_TASK_IDLE_EN > 0u)
    if (p_tcb == &OSIdleTaskTCB) {
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4a23      	ldr	r2, [pc, #140]	@ (80057bc <OS_SchedRoundRobin+0xc0>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d103      	bne.n	800573c <OS_SchedRoundRobin+0x40>
        CPU_CRITICAL_EXIT();
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f7fa fd6b 	bl	8000210 <CPU_SR_Restore>
        return;
 800573a:	e03a      	b.n	80057b2 <OS_SchedRoundRobin+0xb6>
    }
#endif

    if (p_tcb->TimeQuantaCtr > 0u) {
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005740:	2b00      	cmp	r3, #0
 8005742:	d004      	beq.n	800574e <OS_SchedRoundRobin+0x52>
        p_tcb->TimeQuantaCtr--;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005748:	1e5a      	subs	r2, r3, #1
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if (p_tcb->TimeQuantaCtr > 0u) {                            /* Task not done with its time quanta                   */
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <OS_SchedRoundRobin+0x62>
        CPU_CRITICAL_EXIT();
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f7fa fd5a 	bl	8000210 <CPU_SR_Restore>
        return;
 800575c:	e029      	b.n	80057b2 <OS_SchedRoundRobin+0xb6>
    }

    if (p_rdy_list->HeadPtr == p_rdy_list->TailPtr) {           /* See if it's time to time slice current task          */
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	429a      	cmp	r2, r3
 8005768:	d103      	bne.n	8005772 <OS_SchedRoundRobin+0x76>
        CPU_CRITICAL_EXIT();                                    /* ... only if multiple tasks at same priority          */
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f7fa fd50 	bl	8000210 <CPU_SR_Restore>
        return;
 8005770:	e01f      	b.n	80057b2 <OS_SchedRoundRobin+0xb6>
    }

    if (OSSchedLockNestingCtr > 0u) {                           /* Can't round-robin if the scheduler is locked         */
 8005772:	4b13      	ldr	r3, [pc, #76]	@ (80057c0 <OS_SchedRoundRobin+0xc4>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <OS_SchedRoundRobin+0x86>
        CPU_CRITICAL_EXIT();
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f7fa fd48 	bl	8000210 <CPU_SR_Restore>
        return;
 8005780:	e017      	b.n	80057b2 <OS_SchedRoundRobin+0xb6>
    }

    OS_RdyListMoveHeadToTail(p_rdy_list);                       /* Move current OS_TCB to the end of the list           */
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff ff16 	bl	80055b4 <OS_RdyListMoveHeadToTail>
    p_tcb = p_rdy_list->HeadPtr;                                /* Point to new OS_TCB at head of the list              */
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	60bb      	str	r3, [r7, #8]
    if (p_tcb->TimeQuanta == 0u) {                              /* See if we need to use the default time slice         */
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005792:	2b00      	cmp	r3, #0
 8005794:	d104      	bne.n	80057a0 <OS_SchedRoundRobin+0xa4>
        p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta;
 8005796:	4b0b      	ldr	r3, [pc, #44]	@ (80057c4 <OS_SchedRoundRobin+0xc8>)
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800579e:	e003      	b.n	80057a8 <OS_SchedRoundRobin+0xac>
    } else {
        p_tcb->TimeQuantaCtr = p_tcb->TimeQuanta;               /* Load time slice counter with new time                */
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    CPU_CRITICAL_EXIT();
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f7fa fd31 	bl	8000210 <CPU_SR_Restore>
 80057ae:	e000      	b.n	80057b2 <OS_SchedRoundRobin+0xb6>
        return;
 80057b0:	bf00      	nop
}
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	20001cf4 	.word	0x20001cf4
 80057bc:	200018e8 	.word	0x200018e8
 80057c0:	20001cec 	.word	0x20001cec
 80057c4:	20001cf0 	.word	0x20001cf0

080057c8 <OS_TaskBlock>:
************************************************************************************************************************
*/

void  OS_TaskBlock (OS_TCB   *p_tcb,
                    OS_TICK   timeout)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]

    elapsed = OS_DynTickGet();
#endif

#if (OS_CFG_TICK_EN > 0u)
    if (timeout > 0u) {                                         /* Add task to tick list if timeout non zero            */
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00b      	beq.n	80057f0 <OS_TaskBlock+0x28>
#if (OS_CFG_DYN_TICK_EN > 0u)
        (void)OS_TickListInsert(p_tcb, elapsed, (OSTickCtr + elapsed), timeout);
#else
        (void)OS_TickListInsert(p_tcb,      0u,             OSTickCtr, timeout);
 80057d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005808 <OS_TaskBlock+0x40>)
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2100      	movs	r1, #0
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f002 f86d 	bl	80078c0 <OS_TickListInsert>
#endif
        p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2203      	movs	r2, #3
 80057ea:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80057ee:	e003      	b.n	80057f8 <OS_TaskBlock+0x30>
    } else {
        p_tcb->TaskState = OS_TASK_STATE_PEND;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
#else
    (void)timeout;
    p_tcb->TaskState = OS_TASK_STATE_PEND;
#endif
    OS_RdyListRemove(p_tcb);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7ff ff27 	bl	800564c <OS_RdyListRemove>
}
 80057fe:	bf00      	nop
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20001de4 	.word	0x20001de4

0800580c <OS_Dbg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OS_Dbg_Init (void)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
    CPU_INT08U const * volatile  p_temp08;
    CPU_INT16U const * volatile  p_temp16;
    CPU_INT32U const * volatile  p_temp32;


    p_temp08 = (CPU_INT08U const *)&OSDbg_DbgEn;
 8005812:	4b4a      	ldr	r3, [pc, #296]	@ (800593c <OS_Dbg_Init+0x130>)
 8005814:	60fb      	str	r3, [r7, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_DataSize;
 8005816:	4b4a      	ldr	r3, [pc, #296]	@ (8005940 <OS_Dbg_Init+0x134>)
 8005818:	607b      	str	r3, [r7, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_ArgChkEn;
 800581a:	4b4a      	ldr	r3, [pc, #296]	@ (8005944 <OS_Dbg_Init+0x138>)
 800581c:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_AppHooksEn;
 800581e:	4b4a      	ldr	r3, [pc, #296]	@ (8005948 <OS_Dbg_Init+0x13c>)
 8005820:	60fb      	str	r3, [r7, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_EndiannessTest;
 8005822:	4b4a      	ldr	r3, [pc, #296]	@ (800594c <OS_Dbg_Init+0x140>)
 8005824:	607b      	str	r3, [r7, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_CalledFromISRChkEn;
 8005826:	4b4a      	ldr	r3, [pc, #296]	@ (8005950 <OS_Dbg_Init+0x144>)
 8005828:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrp;
 800582a:	4b4a      	ldr	r3, [pc, #296]	@ (8005954 <OS_Dbg_Init+0x148>)
 800582c:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagEn;
 800582e:	4b4a      	ldr	r3, [pc, #296]	@ (8005958 <OS_Dbg_Init+0x14c>)
 8005830:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_FLAG_EN > 0u)
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagDelEn;
 8005832:	4b4a      	ldr	r3, [pc, #296]	@ (800595c <OS_Dbg_Init+0x150>)
 8005834:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagModeClrEn;
 8005836:	4b4a      	ldr	r3, [pc, #296]	@ (8005960 <OS_Dbg_Init+0x154>)
 8005838:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagPendAbortEn;
 800583a:	4b4a      	ldr	r3, [pc, #296]	@ (8005964 <OS_Dbg_Init+0x158>)
 800583c:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrpSize;
 800583e:	4b4a      	ldr	r3, [pc, #296]	@ (8005968 <OS_Dbg_Init+0x15c>)
 8005840:	60bb      	str	r3, [r7, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagWidth;
 8005842:	4b4a      	ldr	r3, [pc, #296]	@ (800596c <OS_Dbg_Init+0x160>)
 8005844:	60bb      	str	r3, [r7, #8]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mem;
 8005846:	4b4a      	ldr	r3, [pc, #296]	@ (8005970 <OS_Dbg_Init+0x164>)
 8005848:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MemEn;
 800584a:	4b4a      	ldr	r3, [pc, #296]	@ (8005974 <OS_Dbg_Init+0x168>)
 800584c:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_MEM_EN > 0u)
    p_temp16 = (CPU_INT16U const *)&OSDbg_MemSize;
 800584e:	4b4a      	ldr	r3, [pc, #296]	@ (8005978 <OS_Dbg_Init+0x16c>)
 8005850:	60bb      	str	r3, [r7, #8]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_MsgEn;
 8005852:	4b4a      	ldr	r3, [pc, #296]	@ (800597c <OS_Dbg_Init+0x170>)
 8005854:	60fb      	str	r3, [r7, #12]
#if (OS_MSG_EN > 0u)
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgSize;
 8005856:	4b4a      	ldr	r3, [pc, #296]	@ (8005980 <OS_Dbg_Init+0x174>)
 8005858:	60bb      	str	r3, [r7, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgPoolSize;
 800585a:	4b4a      	ldr	r3, [pc, #296]	@ (8005984 <OS_Dbg_Init+0x178>)
 800585c:	60bb      	str	r3, [r7, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgQSize;
 800585e:	4b4a      	ldr	r3, [pc, #296]	@ (8005988 <OS_Dbg_Init+0x17c>)
 8005860:	60bb      	str	r3, [r7, #8]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mutex;
 8005862:	4b4a      	ldr	r3, [pc, #296]	@ (800598c <OS_Dbg_Init+0x180>)
 8005864:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexEn;
 8005866:	4b4a      	ldr	r3, [pc, #296]	@ (8005990 <OS_Dbg_Init+0x184>)
 8005868:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_MUTEX_EN > 0u)
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexDelEn;
 800586a:	4b4a      	ldr	r3, [pc, #296]	@ (8005994 <OS_Dbg_Init+0x188>)
 800586c:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexPendAbortEn;
 800586e:	4b4a      	ldr	r3, [pc, #296]	@ (8005998 <OS_Dbg_Init+0x18c>)
 8005870:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MutexSize;
 8005872:	4b4a      	ldr	r3, [pc, #296]	@ (800599c <OS_Dbg_Init+0x190>)
 8005874:	60bb      	str	r3, [r7, #8]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_ObjTypeChkEn;
 8005876:	4b4a      	ldr	r3, [pc, #296]	@ (80059a0 <OS_Dbg_Init+0x194>)
 8005878:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_ObjCreatedChkEn;
 800587a:	4b4a      	ldr	r3, [pc, #296]	@ (80059a4 <OS_Dbg_Init+0x198>)
 800587c:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PendListSize;
 800587e:	4b4a      	ldr	r3, [pc, #296]	@ (80059a8 <OS_Dbg_Init+0x19c>)
 8005880:	60bb      	str	r3, [r7, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendObjSize;
 8005882:	4b4a      	ldr	r3, [pc, #296]	@ (80059ac <OS_Dbg_Init+0x1a0>)
 8005884:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioMax;
 8005886:	4b4a      	ldr	r3, [pc, #296]	@ (80059b0 <OS_Dbg_Init+0x1a4>)
 8005888:	60bb      	str	r3, [r7, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioTblSize;
 800588a:	4b4a      	ldr	r3, [pc, #296]	@ (80059b4 <OS_Dbg_Init+0x1a8>)
 800588c:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PtrSize;
 800588e:	4b4a      	ldr	r3, [pc, #296]	@ (80059b8 <OS_Dbg_Init+0x1ac>)
 8005890:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Q;
 8005892:	4b4a      	ldr	r3, [pc, #296]	@ (80059bc <OS_Dbg_Init+0x1b0>)
 8005894:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QEn;
 8005896:	4b4a      	ldr	r3, [pc, #296]	@ (80059c0 <OS_Dbg_Init+0x1b4>)
 8005898:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_Q_EN > 0u)
    p_temp08 = (CPU_INT08U const *)&OSDbg_QDelEn;
 800589a:	4b4a      	ldr	r3, [pc, #296]	@ (80059c4 <OS_Dbg_Init+0x1b8>)
 800589c:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QFlushEn;
 800589e:	4b4a      	ldr	r3, [pc, #296]	@ (80059c8 <OS_Dbg_Init+0x1bc>)
 80058a0:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QPendAbortEn;
 80058a2:	4b4a      	ldr	r3, [pc, #296]	@ (80059cc <OS_Dbg_Init+0x1c0>)
 80058a4:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_QSize;
 80058a6:	4b4a      	ldr	r3, [pc, #296]	@ (80059d0 <OS_Dbg_Init+0x1c4>)
 80058a8:	60bb      	str	r3, [r7, #8]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_SchedRoundRobinEn;
 80058aa:	4b4a      	ldr	r3, [pc, #296]	@ (80059d4 <OS_Dbg_Init+0x1c8>)
 80058ac:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Sem;
 80058ae:	4b4a      	ldr	r3, [pc, #296]	@ (80059d8 <OS_Dbg_Init+0x1cc>)
 80058b0:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemEn;
 80058b2:	4b4a      	ldr	r3, [pc, #296]	@ (80059dc <OS_Dbg_Init+0x1d0>)
 80058b4:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_SEM_EN > 0u)
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemDelEn;
 80058b6:	4b4a      	ldr	r3, [pc, #296]	@ (80059e0 <OS_Dbg_Init+0x1d4>)
 80058b8:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemPendAbortEn;
 80058ba:	4b4a      	ldr	r3, [pc, #296]	@ (80059e4 <OS_Dbg_Init+0x1d8>)
 80058bc:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSetEn;
 80058be:	4b4a      	ldr	r3, [pc, #296]	@ (80059e8 <OS_Dbg_Init+0x1dc>)
 80058c0:	60bb      	str	r3, [r7, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSize;
 80058c2:	4b4a      	ldr	r3, [pc, #296]	@ (80059ec <OS_Dbg_Init+0x1e0>)
 80058c4:	60bb      	str	r3, [r7, #8]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_RdyList;
 80058c6:	4b4a      	ldr	r3, [pc, #296]	@ (80059f0 <OS_Dbg_Init+0x1e4>)
 80058c8:	60bb      	str	r3, [r7, #8]
    p_temp32 = (CPU_INT32U const *)&OSDbg_RdyListSize;
 80058ca:	4b4a      	ldr	r3, [pc, #296]	@ (80059f4 <OS_Dbg_Init+0x1e8>)
 80058cc:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_StkWidth;
 80058ce:	4b4a      	ldr	r3, [pc, #296]	@ (80059f8 <OS_Dbg_Init+0x1ec>)
 80058d0:	60bb      	str	r3, [r7, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskEn;
 80058d2:	4b4a      	ldr	r3, [pc, #296]	@ (80059fc <OS_Dbg_Init+0x1f0>)
 80058d4:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskStkChkEn;
 80058d6:	4b4a      	ldr	r3, [pc, #296]	@ (8005a00 <OS_Dbg_Init+0x1f4>)
 80058d8:	60fb      	str	r3, [r7, #12]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskChangePrioEn;
 80058da:	4b4a      	ldr	r3, [pc, #296]	@ (8005a04 <OS_Dbg_Init+0x1f8>)
 80058dc:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskDelEn;
 80058de:	4b4a      	ldr	r3, [pc, #296]	@ (8005a08 <OS_Dbg_Init+0x1fc>)
 80058e0:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQEn;
 80058e2:	4b4a      	ldr	r3, [pc, #296]	@ (8005a0c <OS_Dbg_Init+0x200>)
 80058e4:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQPendAbortEn;
 80058e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005a10 <OS_Dbg_Init+0x204>)
 80058e8:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskProfileEn;
 80058ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005a14 <OS_Dbg_Init+0x208>)
 80058ec:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TaskRegTblSize;
 80058ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005a18 <OS_Dbg_Init+0x20c>)
 80058f0:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSemPendAbortEn;
 80058f2:	4b4a      	ldr	r3, [pc, #296]	@ (8005a1c <OS_Dbg_Init+0x210>)
 80058f4:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSuspendEn;
 80058f6:	4b4a      	ldr	r3, [pc, #296]	@ (8005a20 <OS_Dbg_Init+0x214>)
 80058f8:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TCBSize;
 80058fa:	4b4a      	ldr	r3, [pc, #296]	@ (8005a24 <OS_Dbg_Init+0x218>)
 80058fc:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TickListSize;
 80058fe:	4b4a      	ldr	r3, [pc, #296]	@ (8005a28 <OS_Dbg_Init+0x21c>)
 8005900:	60bb      	str	r3, [r7, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyHMSMEn;
 8005902:	4b4a      	ldr	r3, [pc, #296]	@ (8005a2c <OS_Dbg_Init+0x220>)
 8005904:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyResumeEn;
 8005906:	4b4a      	ldr	r3, [pc, #296]	@ (8005a30 <OS_Dbg_Init+0x224>)
 8005908:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TLS_TblSize;
 800590a:	4b4a      	ldr	r3, [pc, #296]	@ (8005a34 <OS_Dbg_Init+0x228>)
 800590c:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Tmr;
 800590e:	4b4a      	ldr	r3, [pc, #296]	@ (8005a38 <OS_Dbg_Init+0x22c>)
 8005910:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrEn;
 8005912:	4b4a      	ldr	r3, [pc, #296]	@ (8005a3c <OS_Dbg_Init+0x230>)
 8005914:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_TMR_EN > 0u)
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrDelEn;
 8005916:	4b4a      	ldr	r3, [pc, #296]	@ (8005a40 <OS_Dbg_Init+0x234>)
 8005918:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TmrSize;
 800591a:	4b4a      	ldr	r3, [pc, #296]	@ (8005a44 <OS_Dbg_Init+0x238>)
 800591c:	60bb      	str	r3, [r7, #8]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_VersionNbr;
 800591e:	4b4a      	ldr	r3, [pc, #296]	@ (8005a48 <OS_Dbg_Init+0x23c>)
 8005920:	60bb      	str	r3, [r7, #8]

    p_temp08 = p_temp08;                                     /* Prevent compiler warning for not using 'p_temp'        */
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	60fb      	str	r3, [r7, #12]
    p_temp16 = p_temp16;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	60bb      	str	r3, [r7, #8]
    p_temp32 = p_temp32;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	607b      	str	r3, [r7, #4]
}
 800592e:	bf00      	nop
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	080086f0 	.word	0x080086f0
 8005940:	08008848 	.word	0x08008848
 8005944:	080086f1 	.word	0x080086f1
 8005948:	080086f2 	.word	0x080086f2
 800594c:	080086f4 	.word	0x080086f4
 8005950:	080086f8 	.word	0x080086f8
 8005954:	080086fc 	.word	0x080086fc
 8005958:	080086f9 	.word	0x080086f9
 800595c:	08008720 	.word	0x08008720
 8005960:	08008721 	.word	0x08008721
 8005964:	08008722 	.word	0x08008722
 8005968:	08008724 	.word	0x08008724
 800596c:	08008726 	.word	0x08008726
 8005970:	08008728 	.word	0x08008728
 8005974:	08008748 	.word	0x08008748
 8005978:	0800874a 	.word	0x0800874a
 800597c:	0800874c 	.word	0x0800874c
 8005980:	0800874e 	.word	0x0800874e
 8005984:	08008750 	.word	0x08008750
 8005988:	08008752 	.word	0x08008752
 800598c:	08008754 	.word	0x08008754
 8005990:	08008780 	.word	0x08008780
 8005994:	08008781 	.word	0x08008781
 8005998:	08008782 	.word	0x08008782
 800599c:	08008784 	.word	0x08008784
 80059a0:	08008786 	.word	0x08008786
 80059a4:	08008787 	.word	0x08008787
 80059a8:	08008788 	.word	0x08008788
 80059ac:	0800878a 	.word	0x0800878a
 80059b0:	0800878c 	.word	0x0800878c
 80059b4:	0800878e 	.word	0x0800878e
 80059b8:	08008790 	.word	0x08008790
 80059bc:	08008794 	.word	0x08008794
 80059c0:	080087c4 	.word	0x080087c4
 80059c4:	080087c5 	.word	0x080087c5
 80059c8:	080087c6 	.word	0x080087c6
 80059cc:	080087c7 	.word	0x080087c7
 80059d0:	080087c8 	.word	0x080087c8
 80059d4:	080087ca 	.word	0x080087ca
 80059d8:	080087cc 	.word	0x080087cc
 80059dc:	080087f0 	.word	0x080087f0
 80059e0:	080087f1 	.word	0x080087f1
 80059e4:	080087f2 	.word	0x080087f2
 80059e8:	080087f3 	.word	0x080087f3
 80059ec:	080087f4 	.word	0x080087f4
 80059f0:	080087f6 	.word	0x080087f6
 80059f4:	080087f8 	.word	0x080087f8
 80059f8:	080087fc 	.word	0x080087fc
 80059fc:	080087fd 	.word	0x080087fd
 8005a00:	080087fe 	.word	0x080087fe
 8005a04:	080087ff 	.word	0x080087ff
 8005a08:	08008800 	.word	0x08008800
 8005a0c:	08008801 	.word	0x08008801
 8005a10:	08008802 	.word	0x08008802
 8005a14:	08008803 	.word	0x08008803
 8005a18:	08008804 	.word	0x08008804
 8005a1c:	08008806 	.word	0x08008806
 8005a20:	08008807 	.word	0x08008807
 8005a24:	08008808 	.word	0x08008808
 8005a28:	0800880a 	.word	0x0800880a
 8005a2c:	0800880c 	.word	0x0800880c
 8005a30:	0800880d 	.word	0x0800880d
 8005a34:	0800880e 	.word	0x0800880e
 8005a38:	08008810 	.word	0x08008810
 8005a3c:	08008840 	.word	0x08008840
 8005a40:	08008841 	.word	0x08008841
 8005a44:	08008842 	.word	0x08008842
 8005a48:	08008844 	.word	0x08008844

08005a4c <OSFlagCreate>:

void  OSFlagCreate (OS_FLAG_GRP  *p_grp,
                    CPU_CHAR     *p_name,
                    OS_FLAGS      flags,
                    OS_ERR       *p_err)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
    CPU_SR_ALLOC();
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* See if called from ISR ...                           */
 8005a5e:	4b21      	ldr	r3, [pc, #132]	@ (8005ae4 <OSFlagCreate+0x98>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d004      	beq.n	8005a70 <OSFlagCreate+0x24>
       *p_err = OS_ERR_CREATE_ISR;                              /* ... can't CREATE from an ISR                         */
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	f642 62e1 	movw	r2, #12001	@ 0x2ee1
 8005a6c:	801a      	strh	r2, [r3, #0]
        return;
 8005a6e:	e035      	b.n	8005adc <OSFlagCreate+0x90>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_grp == (OS_FLAG_GRP *)0) {                            /* Validate 'p_grp'                                     */
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d104      	bne.n	8005a80 <OSFlagCreate+0x34>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 8005a7c:	801a      	strh	r2, [r3, #0]
        return;
 8005a7e:	e02d      	b.n	8005adc <OSFlagCreate+0x90>
    }
#endif

    CPU_CRITICAL_ENTER();
 8005a80:	2040      	movs	r0, #64	@ 0x40
 8005a82:	f7fa fbb7 	bl	80001f4 <CPU_SR_Save>
 8005a86:	6178      	str	r0, [r7, #20]
#if (OS_OBJ_TYPE_REQ > 0u)
#if (OS_CFG_OBJ_CREATED_CHK_EN > 0u)
    if (p_grp->Type == OS_OBJ_TYPE_FLAG) {
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a16      	ldr	r2, [pc, #88]	@ (8005ae8 <OSFlagCreate+0x9c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d107      	bne.n	8005aa2 <OSFlagCreate+0x56>
        CPU_CRITICAL_EXIT();
 8005a92:	6978      	ldr	r0, [r7, #20]
 8005a94:	f7fa fbbc 	bl	8000210 <CPU_SR_Restore>
        *p_err = OS_ERR_OBJ_CREATED;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	f645 52c1 	movw	r2, #24001	@ 0x5dc1
 8005a9e:	801a      	strh	r2, [r3, #0]
        return;
 8005aa0:	e01c      	b.n	8005adc <OSFlagCreate+0x90>
    }
#endif
    p_grp->Type    = OS_OBJ_TYPE_FLAG;                          /* Set to event flag group type                         */
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4a10      	ldr	r2, [pc, #64]	@ (8005ae8 <OSFlagCreate+0x9c>)
 8005aa6:	601a      	str	r2, [r3, #0]
#endif
#if (OS_CFG_DBG_EN > 0u)
    p_grp->NamePtr = p_name;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	605a      	str	r2, [r3, #4]
#else
    (void)p_name;
#endif
    p_grp->Flags   = flags;                                     /* Set to desired initial value                         */
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	621a      	str	r2, [r3, #32]
#if (OS_CFG_TS_EN > 0u)
    p_grp->TS      = 0u;
#endif
    OS_PendListInit(&p_grp->PendList);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3308      	adds	r3, #8
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7ff fb6c 	bl	8005196 <OS_PendListInit>

#if (OS_CFG_DBG_EN > 0u)
    OS_FlagDbgListAdd(p_grp);
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 fbb0 	bl	8006224 <OS_FlagDbgListAdd>
    OSFlagQty++;
 8005ac4:	4b09      	ldr	r3, [pc, #36]	@ (8005aec <OSFlagCreate+0xa0>)
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	4b07      	ldr	r3, [pc, #28]	@ (8005aec <OSFlagCreate+0xa0>)
 8005ace:	801a      	strh	r2, [r3, #0]
#endif

    OS_TRACE_FLAG_CREATE(p_grp, p_name);

    CPU_CRITICAL_EXIT();
 8005ad0:	6978      	ldr	r0, [r7, #20]
 8005ad2:	f7fa fb9d 	bl	8000210 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	801a      	strh	r2, [r3, #0]
}
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	200019ac 	.word	0x200019ac
 8005ae8:	47414c46 	.word	0x47414c46
 8005aec:	200019bc 	.word	0x200019bc

08005af0 <OSFlagPend>:
                      OS_FLAGS      flags,
                      OS_TICK       timeout,
                      OS_OPT        opt,
                      CPU_TS       *p_ts,
                      OS_ERR       *p_err)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	807b      	strh	r3, [r7, #2]
    CPU_BOOLEAN  consume;
    OS_FLAGS     flags_rdy;
    OS_OPT       mode;
    CPU_SR_ALLOC();
 8005afe:	2300      	movs	r3, #0
 8005b00:	61bb      	str	r3, [r7, #24]
        return ((OS_FLAGS)0);
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* See if called from ISR ...                           */
 8005b02:	4ba1      	ldr	r3, [pc, #644]	@ (8005d88 <OSFlagPend+0x298>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d009      	beq.n	8005b1e <OSFlagPend+0x2e>
        if ((opt & OS_OPT_PEND_NON_BLOCKING) != OS_OPT_PEND_NON_BLOCKING) {
 8005b0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	db05      	blt.n	8005b1e <OSFlagPend+0x2e>
           *p_err = OS_ERR_PEND_ISR;                            /* ... can't PEND from an ISR                           */
 8005b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b14:	f246 12ae 	movw	r2, #25006	@ 0x61ae
 8005b18:	801a      	strh	r2, [r3, #0]
            OS_TRACE_FLAG_PEND_FAILED(p_grp);
            OS_TRACE_FLAG_PEND_EXIT(OS_ERR_PEND_ISR);
            return ((OS_FLAGS)0);
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	e249      	b.n	8005fb2 <OSFlagPend+0x4c2>
        }
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 8005b1e:	4b9b      	ldr	r3, [pc, #620]	@ (8005d8c <OSFlagPend+0x29c>)
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d005      	beq.n	8005b32 <OSFlagPend+0x42>
        OS_TRACE_FLAG_PEND_EXIT(OS_ERR_OS_NOT_RUNNING);
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8005b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b28:	f645 6289 	movw	r2, #24201	@ 0x5e89
 8005b2c:	801a      	strh	r2, [r3, #0]
        return (0u);
 8005b2e:	2300      	movs	r3, #0
 8005b30:	e23f      	b.n	8005fb2 <OSFlagPend+0x4c2>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_grp == (OS_FLAG_GRP *)0) {                            /* Validate 'p_grp'                                     */
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d105      	bne.n	8005b44 <OSFlagPend+0x54>
        OS_TRACE_FLAG_PEND_FAILED(p_grp);
        OS_TRACE_FLAG_PEND_EXIT(OS_ERR_OBJ_PTR_NULL);
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8005b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3a:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 8005b3e:	801a      	strh	r2, [r3, #0]
        return (0u);
 8005b40:	2300      	movs	r3, #0
 8005b42:	e236      	b.n	8005fb2 <OSFlagPend+0x4c2>
    }
    switch (opt) {                                              /* Validate 'opt'                                       */
 8005b44:	887b      	ldrh	r3, [r7, #2]
 8005b46:	f248 1208 	movw	r2, #33032	@ 0x8108
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	dc51      	bgt.n	8005bf2 <OSFlagPend+0x102>
 8005b4e:	f5b3 4f01 	cmp.w	r3, #33024	@ 0x8100
 8005b52:	dc0b      	bgt.n	8005b6c <OSFlagPend+0x7c>
 8005b54:	f248 0208 	movw	r2, #32776	@ 0x8008
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	dc4a      	bgt.n	8005bf2 <OSFlagPend+0x102>
 8005b5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b60:	dc14      	bgt.n	8005b8c <OSFlagPend+0x9c>
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	dc3f      	bgt.n	8005be6 <OSFlagPend+0xf6>
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	dc2f      	bgt.n	8005bca <OSFlagPend+0xda>
 8005b6a:	e042      	b.n	8005bf2 <OSFlagPend+0x102>
 8005b6c:	f5a3 4301 	sub.w	r3, r3, #33024	@ 0x8100
 8005b70:	3b01      	subs	r3, #1
 8005b72:	228b      	movs	r2, #139	@ 0x8b
 8005b74:	fa22 f303 	lsr.w	r3, r2, r3
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	bf14      	ite	ne
 8005b80:	2301      	movne	r3, #1
 8005b82:	2300      	moveq	r3, #0
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d139      	bne.n	8005bfe <OSFlagPend+0x10e>
 8005b8a:	e032      	b.n	8005bf2 <OSFlagPend+0x102>
 8005b8c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8005b90:	3b01      	subs	r3, #1
 8005b92:	228b      	movs	r2, #139	@ 0x8b
 8005b94:	fa22 f303 	lsr.w	r3, r2, r3
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	bf14      	ite	ne
 8005ba0:	2301      	movne	r3, #1
 8005ba2:	2300      	moveq	r3, #0
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d129      	bne.n	8005bfe <OSFlagPend+0x10e>
 8005baa:	e022      	b.n	8005bf2 <OSFlagPend+0x102>
 8005bac:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8005bb0:	228b      	movs	r2, #139	@ 0x8b
 8005bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	bf14      	ite	ne
 8005bbe:	2301      	movne	r3, #1
 8005bc0:	2300      	moveq	r3, #0
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d11a      	bne.n	8005bfe <OSFlagPend+0x10e>
 8005bc8:	e013      	b.n	8005bf2 <OSFlagPend+0x102>
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f44f 738b 	mov.w	r3, #278	@ 0x116
 8005bd0:	40d3      	lsrs	r3, r2
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	bf14      	ite	ne
 8005bda:	2301      	movne	r3, #1
 8005bdc:	2300      	moveq	r3, #0
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10c      	bne.n	8005bfe <OSFlagPend+0x10e>
 8005be4:	e005      	b.n	8005bf2 <OSFlagPend+0x102>
 8005be6:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8005bea:	dc02      	bgt.n	8005bf2 <OSFlagPend+0x102>
 8005bec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bf0:	dcdc      	bgt.n	8005bac <OSFlagPend+0xbc>
             break;

        default:
             OS_TRACE_FLAG_PEND_FAILED(p_grp);
             OS_TRACE_FLAG_PEND_EXIT(OS_ERR_OPT_INVALID);
            *p_err = OS_ERR_OPT_INVALID;
 8005bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf4:	f645 6225 	movw	r2, #24101	@ 0x5e25
 8005bf8:	801a      	strh	r2, [r3, #0]
             return (0u);
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	e1d9      	b.n	8005fb2 <OSFlagPend+0x4c2>
             break;
 8005bfe:	bf00      	nop
    }
#endif

#if (OS_CFG_OBJ_TYPE_CHK_EN > 0u)
    if (p_grp->Type != OS_OBJ_TYPE_FLAG) {                      /* Validate that we are pointing at an event flag       */
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a62      	ldr	r2, [pc, #392]	@ (8005d90 <OSFlagPend+0x2a0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d005      	beq.n	8005c16 <OSFlagPend+0x126>
        OS_TRACE_FLAG_PEND_FAILED(p_grp);
        OS_TRACE_FLAG_PEND_EXIT(OS_ERR_OBJ_TYPE);
       *p_err = OS_ERR_OBJ_TYPE;
 8005c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c0c:	f645 52c4 	movw	r2, #24004	@ 0x5dc4
 8005c10:	801a      	strh	r2, [r3, #0]
        return (0u);
 8005c12:	2300      	movs	r3, #0
 8005c14:	e1cd      	b.n	8005fb2 <OSFlagPend+0x4c2>
    }
#endif

    if ((opt & OS_OPT_PEND_FLAG_CONSUME) != 0u) {               /* See if we need to consume the flags                  */
 8005c16:	887b      	ldrh	r3, [r7, #2]
 8005c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <OSFlagPend+0x136>
        consume = OS_TRUE;
 8005c20:	2301      	movs	r3, #1
 8005c22:	77fb      	strb	r3, [r7, #31]
 8005c24:	e001      	b.n	8005c2a <OSFlagPend+0x13a>
    } else {
        consume = OS_FALSE;
 8005c26:	2300      	movs	r3, #0
 8005c28:	77fb      	strb	r3, [r7, #31]
    }

    if (p_ts != (CPU_TS *)0) {
 8005c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <OSFlagPend+0x146>
       *p_ts = 0u;                                              /* Initialize the returned timestamp                    */
 8005c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
    }

    mode = opt & OS_OPT_PEND_FLAG_MASK;
 8005c36:	887b      	ldrh	r3, [r7, #2]
 8005c38:	f003 030f 	and.w	r3, r3, #15
 8005c3c:	82fb      	strh	r3, [r7, #22]
    CPU_CRITICAL_ENTER();
 8005c3e:	2040      	movs	r0, #64	@ 0x40
 8005c40:	f7fa fad8 	bl	80001f4 <CPU_SR_Save>
 8005c44:	61b8      	str	r0, [r7, #24]
    switch (mode) {
 8005c46:	8afb      	ldrh	r3, [r7, #22]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	2b07      	cmp	r3, #7
 8005c4c:	f200 812d 	bhi.w	8005eaa <OSFlagPend+0x3ba>
 8005c50:	a201      	add	r2, pc, #4	@ (adr r2, 8005c58 <OSFlagPend+0x168>)
 8005c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c56:	bf00      	nop
 8005c58:	08005d9d 	.word	0x08005d9d
 8005c5c:	08005e25 	.word	0x08005e25
 8005c60:	08005eab 	.word	0x08005eab
 8005c64:	08005c79 	.word	0x08005c79
 8005c68:	08005eab 	.word	0x08005eab
 8005c6c:	08005eab 	.word	0x08005eab
 8005c70:	08005eab 	.word	0x08005eab
 8005c74:	08005d01 	.word	0x08005d01
        case OS_OPT_PEND_FLAG_SET_ALL:                          /* See if all required flags are set                    */
             flags_rdy = (p_grp->Flags & flags);                /* Extract only the bits we want                        */
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	613b      	str	r3, [r7, #16]
             if (flags_rdy == flags) {                          /* Must match ALL the bits that we want                 */
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d116      	bne.n	8005cb8 <OSFlagPend+0x1c8>
                 if (consume == OS_TRUE) {                      /* See if we need to consume the flags                  */
 8005c8a:	7ffb      	ldrb	r3, [r7, #31]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d106      	bne.n	8005c9e <OSFlagPend+0x1ae>
                     p_grp->Flags &= ~flags_rdy;                /* Clear ONLY the flags that we wanted                  */
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6a1a      	ldr	r2, [r3, #32]
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	43db      	mvns	r3, r3
 8005c98:	401a      	ands	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	621a      	str	r2, [r3, #32]
                 }
                 OSTCBCurPtr->FlagsRdy = flags_rdy;             /* Save flags that were ready                           */
 8005c9e:	4b3d      	ldr	r3, [pc, #244]	@ (8005d94 <OSFlagPend+0x2a4>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#if (OS_CFG_TS_EN > 0u)
                 if (p_ts != (CPU_TS *)0) {
                    *p_ts = p_grp->TS;
                 }
#endif
                 CPU_CRITICAL_EXIT();                           /* Yes, condition met, return to caller                 */
 8005ca8:	69b8      	ldr	r0, [r7, #24]
 8005caa:	f7fa fab1 	bl	8000210 <CPU_SR_Restore>
                 OS_TRACE_FLAG_PEND(p_grp);
                 OS_TRACE_FLAG_PEND_EXIT(OS_ERR_NONE);
                *p_err = OS_ERR_NONE;
 8005cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	801a      	strh	r2, [r3, #0]
                 return (flags_rdy);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	e17c      	b.n	8005fb2 <OSFlagPend+0x4c2>
             } else {                                           /* Block task until events occur or timeout             */
                 if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {
 8005cb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	da08      	bge.n	8005cd2 <OSFlagPend+0x1e2>
                     CPU_CRITICAL_EXIT();
 8005cc0:	69b8      	ldr	r0, [r7, #24]
 8005cc2:	f7fa faa5 	bl	8000210 <CPU_SR_Restore>
                     OS_TRACE_FLAG_PEND_FAILED(p_grp);
                     OS_TRACE_FLAG_PEND_EXIT(OS_ERR_PEND_WOULD_BLOCK);
                    *p_err = OS_ERR_PEND_WOULD_BLOCK;           /* Specified non-blocking so task would block           */
 8005cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc8:	f246 12b0 	movw	r2, #25008	@ 0x61b0
 8005ccc:	801a      	strh	r2, [r3, #0]
                     return ((OS_FLAGS)0);
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e16f      	b.n	8005fb2 <OSFlagPend+0x4c2>
                 } else {                                       /* Specified blocking so check is scheduler is locked   */
                     if (OSSchedLockNestingCtr > 0u) {          /* See if called with scheduler locked ...        */
 8005cd2:	4b31      	ldr	r3, [pc, #196]	@ (8005d98 <OSFlagPend+0x2a8>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d008      	beq.n	8005cec <OSFlagPend+0x1fc>
                         CPU_CRITICAL_EXIT();
 8005cda:	69b8      	ldr	r0, [r7, #24]
 8005cdc:	f7fa fa98 	bl	8000210 <CPU_SR_Restore>
                         OS_TRACE_FLAG_PEND_FAILED(p_grp);
                         OS_TRACE_FLAG_PEND_EXIT(OS_ERR_SCHED_LOCKED);
                        *p_err = OS_ERR_SCHED_LOCKED;           /* ... can't PEND when locked                           */
 8005ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce2:	f646 5263 	movw	r2, #28003	@ 0x6d63
 8005ce6:	801a      	strh	r2, [r3, #0]
                         return (0u);
 8005ce8:	2300      	movs	r3, #0
 8005cea:	e162      	b.n	8005fb2 <OSFlagPend+0x4c2>
                     }
                 }
                                                                /* Lock the scheduler/re-enable interrupts              */
                 OS_FlagBlock(p_grp,
 8005cec:	887a      	ldrh	r2, [r7, #2]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 fa72 	bl	80061dc <OS_FlagBlock>
                              flags,
                              opt,
                              timeout);
                 CPU_CRITICAL_EXIT();
 8005cf8:	69b8      	ldr	r0, [r7, #24]
 8005cfa:	f7fa fa89 	bl	8000210 <CPU_SR_Restore>
             }
             break;
 8005cfe:	e0dd      	b.n	8005ebc <OSFlagPend+0x3cc>

        case OS_OPT_PEND_FLAG_SET_ANY:
             flags_rdy = (p_grp->Flags & flags);                /* Extract only the bits we want                        */
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	4013      	ands	r3, r2
 8005d08:	613b      	str	r3, [r7, #16]
             if (flags_rdy != 0u) {                             /* See if any flag set                                  */
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d016      	beq.n	8005d3e <OSFlagPend+0x24e>
                 if (consume == OS_TRUE) {                      /* See if we need to consume the flags                  */
 8005d10:	7ffb      	ldrb	r3, [r7, #31]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d106      	bne.n	8005d24 <OSFlagPend+0x234>
                     p_grp->Flags &= ~flags_rdy;                /* Clear ONLY the flags that we got                     */
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6a1a      	ldr	r2, [r3, #32]
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	401a      	ands	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	621a      	str	r2, [r3, #32]
                 }
                 OSTCBCurPtr->FlagsRdy = flags_rdy;             /* Save flags that were ready                           */
 8005d24:	4b1b      	ldr	r3, [pc, #108]	@ (8005d94 <OSFlagPend+0x2a4>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#if (OS_CFG_TS_EN > 0u)
                 if (p_ts != (CPU_TS *)0) {
                    *p_ts  = p_grp->TS;
                 }
#endif
                 CPU_CRITICAL_EXIT();                           /* Yes, condition met, return to caller                 */
 8005d2e:	69b8      	ldr	r0, [r7, #24]
 8005d30:	f7fa fa6e 	bl	8000210 <CPU_SR_Restore>
                 OS_TRACE_FLAG_PEND(p_grp);
                 OS_TRACE_FLAG_PEND_EXIT(OS_ERR_NONE);
                *p_err = OS_ERR_NONE;
 8005d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d36:	2200      	movs	r2, #0
 8005d38:	801a      	strh	r2, [r3, #0]
                 return (flags_rdy);
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	e139      	b.n	8005fb2 <OSFlagPend+0x4c2>
             } else {                                           /* Block task until events occur or timeout             */
                 if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {
 8005d3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	da08      	bge.n	8005d58 <OSFlagPend+0x268>
                     CPU_CRITICAL_EXIT();
 8005d46:	69b8      	ldr	r0, [r7, #24]
 8005d48:	f7fa fa62 	bl	8000210 <CPU_SR_Restore>
                     OS_TRACE_FLAG_PEND_EXIT(OS_ERR_PEND_WOULD_BLOCK);
                    *p_err = OS_ERR_PEND_WOULD_BLOCK;           /* Specified non-blocking so task would block           */
 8005d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4e:	f246 12b0 	movw	r2, #25008	@ 0x61b0
 8005d52:	801a      	strh	r2, [r3, #0]
                     return ((OS_FLAGS)0);
 8005d54:	2300      	movs	r3, #0
 8005d56:	e12c      	b.n	8005fb2 <OSFlagPend+0x4c2>
                 } else {                                       /* Specified blocking so check is scheduler is locked   */
                     if (OSSchedLockNestingCtr > 0u) {          /* See if called with scheduler locked ...        */
 8005d58:	4b0f      	ldr	r3, [pc, #60]	@ (8005d98 <OSFlagPend+0x2a8>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d008      	beq.n	8005d72 <OSFlagPend+0x282>
                         CPU_CRITICAL_EXIT();
 8005d60:	69b8      	ldr	r0, [r7, #24]
 8005d62:	f7fa fa55 	bl	8000210 <CPU_SR_Restore>
                         OS_TRACE_FLAG_PEND_EXIT(OS_ERR_SCHED_LOCKED);
                        *p_err = OS_ERR_SCHED_LOCKED;           /* ... can't PEND when locked                           */
 8005d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d68:	f646 5263 	movw	r2, #28003	@ 0x6d63
 8005d6c:	801a      	strh	r2, [r3, #0]
                         return ((OS_FLAGS)0);
 8005d6e:	2300      	movs	r3, #0
 8005d70:	e11f      	b.n	8005fb2 <OSFlagPend+0x4c2>
                     }
                 }

                 OS_FlagBlock(p_grp,
 8005d72:	887a      	ldrh	r2, [r7, #2]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 fa2f 	bl	80061dc <OS_FlagBlock>
                              flags,
                              opt,
                              timeout);
                 CPU_CRITICAL_EXIT();
 8005d7e:	69b8      	ldr	r0, [r7, #24]
 8005d80:	f7fa fa46 	bl	8000210 <CPU_SR_Restore>
             }
             break;
 8005d84:	e09a      	b.n	8005ebc <OSFlagPend+0x3cc>
 8005d86:	bf00      	nop
 8005d88:	200019ac 	.word	0x200019ac
 8005d8c:	200019ad 	.word	0x200019ad
 8005d90:	47414c46 	.word	0x47414c46
 8005d94:	20001f1c 	.word	0x20001f1c
 8005d98:	20001cec 	.word	0x20001cec

#if (OS_CFG_FLAG_MODE_CLR_EN > 0u)
        case OS_OPT_PEND_FLAG_CLR_ALL:                          /* See if all required flags are cleared                */
             flags_rdy = (OS_FLAGS)(~p_grp->Flags & flags);     /* Extract only the bits we want                        */
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	43db      	mvns	r3, r3
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	4013      	ands	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]
             if (flags_rdy == flags) {                          /* Must match ALL the bits that we want                 */
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d115      	bne.n	8005ddc <OSFlagPend+0x2ec>
                 if (consume == OS_TRUE) {                      /* See if we need to consume the flags                  */
 8005db0:	7ffb      	ldrb	r3, [r7, #31]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d105      	bne.n	8005dc2 <OSFlagPend+0x2d2>
                     p_grp->Flags |= flags_rdy;                 /* Set ONLY the flags that we wanted                    */
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6a1a      	ldr	r2, [r3, #32]
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	621a      	str	r2, [r3, #32]
                 }
                 OSTCBCurPtr->FlagsRdy = flags_rdy;             /* Save flags that were ready                           */
 8005dc2:	4b7e      	ldr	r3, [pc, #504]	@ (8005fbc <OSFlagPend+0x4cc>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#if (OS_CFG_TS_EN > 0u)
                 if (p_ts != (CPU_TS *)0) {
                    *p_ts  = p_grp->TS;
                 }
#endif
                 CPU_CRITICAL_EXIT();                           /* Yes, condition met, return to caller                 */
 8005dcc:	69b8      	ldr	r0, [r7, #24]
 8005dce:	f7fa fa1f 	bl	8000210 <CPU_SR_Restore>
                 OS_TRACE_FLAG_PEND(p_grp);
                 OS_TRACE_FLAG_PEND_EXIT(OS_ERR_NONE);
                *p_err = OS_ERR_NONE;
 8005dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	801a      	strh	r2, [r3, #0]
                 return (flags_rdy);
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	e0ea      	b.n	8005fb2 <OSFlagPend+0x4c2>
             } else {                                           /* Block task until events occur or timeout             */
                 if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {
 8005ddc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	da08      	bge.n	8005df6 <OSFlagPend+0x306>
                     CPU_CRITICAL_EXIT();
 8005de4:	69b8      	ldr	r0, [r7, #24]
 8005de6:	f7fa fa13 	bl	8000210 <CPU_SR_Restore>
                     OS_TRACE_FLAG_PEND_EXIT(OS_ERR_PEND_WOULD_BLOCK);
                    *p_err = OS_ERR_PEND_WOULD_BLOCK;           /* Specified non-blocking so task would block           */
 8005dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dec:	f246 12b0 	movw	r2, #25008	@ 0x61b0
 8005df0:	801a      	strh	r2, [r3, #0]
                     return ((OS_FLAGS)0);
 8005df2:	2300      	movs	r3, #0
 8005df4:	e0dd      	b.n	8005fb2 <OSFlagPend+0x4c2>
                 } else {                                       /* Specified blocking so check is scheduler is locked   */
                     if (OSSchedLockNestingCtr > 0u) {          /* See if called with scheduler locked ...        */
 8005df6:	4b72      	ldr	r3, [pc, #456]	@ (8005fc0 <OSFlagPend+0x4d0>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d008      	beq.n	8005e10 <OSFlagPend+0x320>
                         CPU_CRITICAL_EXIT();
 8005dfe:	69b8      	ldr	r0, [r7, #24]
 8005e00:	f7fa fa06 	bl	8000210 <CPU_SR_Restore>
                         OS_TRACE_FLAG_PEND_EXIT(OS_ERR_SCHED_LOCKED);
                        *p_err = OS_ERR_SCHED_LOCKED;           /* ... can't PEND when locked                           */
 8005e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e06:	f646 5263 	movw	r2, #28003	@ 0x6d63
 8005e0a:	801a      	strh	r2, [r3, #0]
                         return (0);
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	e0d0      	b.n	8005fb2 <OSFlagPend+0x4c2>
                     }
                 }

                 OS_FlagBlock(p_grp,
 8005e10:	887a      	ldrh	r2, [r7, #2]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68b9      	ldr	r1, [r7, #8]
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 f9e0 	bl	80061dc <OS_FlagBlock>
                              flags,
                              opt,
                              timeout);
                 CPU_CRITICAL_EXIT();
 8005e1c:	69b8      	ldr	r0, [r7, #24]
 8005e1e:	f7fa f9f7 	bl	8000210 <CPU_SR_Restore>
             }
             break;
 8005e22:	e04b      	b.n	8005ebc <OSFlagPend+0x3cc>

        case OS_OPT_PEND_FLAG_CLR_ANY:
             flags_rdy = (~p_grp->Flags & flags);               /* Extract only the bits we want                        */
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]
             if (flags_rdy != 0u) {                             /* See if any flag cleared                              */
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d015      	beq.n	8005e62 <OSFlagPend+0x372>
                 if (consume == OS_TRUE) {                      /* See if we need to consume the flags                  */
 8005e36:	7ffb      	ldrb	r3, [r7, #31]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d105      	bne.n	8005e48 <OSFlagPend+0x358>
                     p_grp->Flags |= flags_rdy;                 /* Set ONLY the flags that we got                       */
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6a1a      	ldr	r2, [r3, #32]
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	621a      	str	r2, [r3, #32]
                 }
                 OSTCBCurPtr->FlagsRdy = flags_rdy;             /* Save flags that were ready                           */
 8005e48:	4b5c      	ldr	r3, [pc, #368]	@ (8005fbc <OSFlagPend+0x4cc>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#if (OS_CFG_TS_EN > 0u)
                 if (p_ts != (CPU_TS *)0) {
                    *p_ts  = p_grp->TS;
                 }
#endif
                 CPU_CRITICAL_EXIT();                           /* Yes, condition met, return to caller                 */
 8005e52:	69b8      	ldr	r0, [r7, #24]
 8005e54:	f7fa f9dc 	bl	8000210 <CPU_SR_Restore>
                 OS_TRACE_FLAG_PEND(p_grp);
                 OS_TRACE_FLAG_PEND_EXIT(OS_ERR_NONE);
                *p_err = OS_ERR_NONE;
 8005e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	801a      	strh	r2, [r3, #0]
                 return (flags_rdy);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	e0a7      	b.n	8005fb2 <OSFlagPend+0x4c2>
             } else {                                           /* Block task until events occur or timeout             */
                 if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {
 8005e62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	da08      	bge.n	8005e7c <OSFlagPend+0x38c>
                     CPU_CRITICAL_EXIT();
 8005e6a:	69b8      	ldr	r0, [r7, #24]
 8005e6c:	f7fa f9d0 	bl	8000210 <CPU_SR_Restore>
                     OS_TRACE_FLAG_PEND_EXIT(OS_ERR_PEND_WOULD_BLOCK);
                    *p_err = OS_ERR_PEND_WOULD_BLOCK;           /* Specified non-blocking so task would block           */
 8005e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e72:	f246 12b0 	movw	r2, #25008	@ 0x61b0
 8005e76:	801a      	strh	r2, [r3, #0]
                     return ((OS_FLAGS)0);
 8005e78:	2300      	movs	r3, #0
 8005e7a:	e09a      	b.n	8005fb2 <OSFlagPend+0x4c2>
                 } else {                                       /* Specified blocking so check is scheduler is locked   */
                     if (OSSchedLockNestingCtr > 0u) {          /* See if called with scheduler locked ...        */
 8005e7c:	4b50      	ldr	r3, [pc, #320]	@ (8005fc0 <OSFlagPend+0x4d0>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d008      	beq.n	8005e96 <OSFlagPend+0x3a6>
                         CPU_CRITICAL_EXIT();
 8005e84:	69b8      	ldr	r0, [r7, #24]
 8005e86:	f7fa f9c3 	bl	8000210 <CPU_SR_Restore>
                         OS_TRACE_FLAG_PEND_EXIT(OS_ERR_SCHED_LOCKED);
                        *p_err = OS_ERR_SCHED_LOCKED;           /* ... can't PEND when locked                           */
 8005e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8c:	f646 5263 	movw	r2, #28003	@ 0x6d63
 8005e90:	801a      	strh	r2, [r3, #0]
                         return (0u);
 8005e92:	2300      	movs	r3, #0
 8005e94:	e08d      	b.n	8005fb2 <OSFlagPend+0x4c2>
                     }
                 }

                 OS_FlagBlock(p_grp,
 8005e96:	887a      	ldrh	r2, [r7, #2]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68b9      	ldr	r1, [r7, #8]
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f99d 	bl	80061dc <OS_FlagBlock>
                              flags,
                              opt,
                              timeout);
                 CPU_CRITICAL_EXIT();
 8005ea2:	69b8      	ldr	r0, [r7, #24]
 8005ea4:	f7fa f9b4 	bl	8000210 <CPU_SR_Restore>
             }
             break;
 8005ea8:	e008      	b.n	8005ebc <OSFlagPend+0x3cc>
#endif

        default:
             CPU_CRITICAL_EXIT();
 8005eaa:	69b8      	ldr	r0, [r7, #24]
 8005eac:	f7fa f9b0 	bl	8000210 <CPU_SR_Restore>
             OS_TRACE_FLAG_PEND_FAILED(p_grp);
             OS_TRACE_FLAG_PEND_EXIT(OS_ERR_OPT_INVALID);
            *p_err = OS_ERR_OPT_INVALID;
 8005eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb2:	f645 6225 	movw	r2, #24101	@ 0x5e25
 8005eb6:	801a      	strh	r2, [r3, #0]
             return (0u);
 8005eb8:	2300      	movs	r3, #0
 8005eba:	e07a      	b.n	8005fb2 <OSFlagPend+0x4c2>
    }

    OS_TRACE_FLAG_PEND_BLOCK(p_grp);

    OSSched();                                                  /* Find next HPT ready to run                           */
 8005ebc:	f7fe ffaa 	bl	8004e14 <OSSched>

    CPU_CRITICAL_ENTER();
 8005ec0:	2040      	movs	r0, #64	@ 0x40
 8005ec2:	f7fa f997 	bl	80001f4 <CPU_SR_Save>
 8005ec6:	61b8      	str	r0, [r7, #24]
    switch (OSTCBCurPtr->PendStatus) {
 8005ec8:	4b3c      	ldr	r3, [pc, #240]	@ (8005fbc <OSFlagPend+0x4cc>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d82d      	bhi.n	8005f30 <OSFlagPend+0x440>
 8005ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8005edc <OSFlagPend+0x3ec>)
 8005ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eda:	bf00      	nop
 8005edc:	08005eed 	.word	0x08005eed
 8005ee0:	08005ef5 	.word	0x08005ef5
 8005ee4:	08005f21 	.word	0x08005f21
 8005ee8:	08005f05 	.word	0x08005f05
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_FLAG_PEND(p_grp);
            *p_err = OS_ERR_NONE;
 8005eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eee:	2200      	movs	r2, #0
 8005ef0:	801a      	strh	r2, [r3, #0]
             break;
 8005ef2:	e025      	b.n	8005f40 <OSFlagPend+0x450>
#if (OS_CFG_TS_EN > 0u)
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             CPU_CRITICAL_EXIT();
 8005ef4:	69b8      	ldr	r0, [r7, #24]
 8005ef6:	f7fa f98b 	bl	8000210 <CPU_SR_Restore>
             OS_TRACE_FLAG_PEND_FAILED(p_grp);
            *p_err = OS_ERR_PEND_ABORT;
 8005efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efc:	f246 12a9 	movw	r2, #25001	@ 0x61a9
 8005f00:	801a      	strh	r2, [r3, #0]
             break;
 8005f02:	e01d      	b.n	8005f40 <OSFlagPend+0x450>

        case OS_STATUS_PEND_TIMEOUT:                            /* Indicate that we didn't get semaphore within timeout */
             if (p_ts != (CPU_TS *)0) {
 8005f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d002      	beq.n	8005f10 <OSFlagPend+0x420>
                *p_ts = 0u;
 8005f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
             }
             CPU_CRITICAL_EXIT();
 8005f10:	69b8      	ldr	r0, [r7, #24]
 8005f12:	f7fa f97d 	bl	8000210 <CPU_SR_Restore>
             OS_TRACE_FLAG_PEND_FAILED(p_grp);
            *p_err = OS_ERR_TIMEOUT;
 8005f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f18:	f247 22d9 	movw	r2, #29401	@ 0x72d9
 8005f1c:	801a      	strh	r2, [r3, #0]
             break;
 8005f1e:	e00f      	b.n	8005f40 <OSFlagPend+0x450>
#if (OS_CFG_TS_EN > 0u)
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             CPU_CRITICAL_EXIT();
 8005f20:	69b8      	ldr	r0, [r7, #24]
 8005f22:	f7fa f975 	bl	8000210 <CPU_SR_Restore>
             OS_TRACE_FLAG_PEND_FAILED(p_grp);
            *p_err = OS_ERR_OBJ_DEL;
 8005f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f28:	f645 52c2 	movw	r2, #24002	@ 0x5dc2
 8005f2c:	801a      	strh	r2, [r3, #0]
             break;
 8005f2e:	e007      	b.n	8005f40 <OSFlagPend+0x450>

        default:
             CPU_CRITICAL_EXIT();
 8005f30:	69b8      	ldr	r0, [r7, #24]
 8005f32:	f7fa f96d 	bl	8000210 <CPU_SR_Restore>
             OS_TRACE_FLAG_PEND_FAILED(p_grp);
            *p_err = OS_ERR_STATUS_INVALID;
 8005f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f38:	f646 622e 	movw	r2, #28206	@ 0x6e2e
 8005f3c:	801a      	strh	r2, [r3, #0]
             break;
 8005f3e:	bf00      	nop
    }
    if (*p_err != OS_ERR_NONE) {
 8005f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <OSFlagPend+0x45c>
        OS_TRACE_FLAG_PEND_EXIT(*p_err);
        return (0u);
 8005f48:	2300      	movs	r3, #0
 8005f4a:	e032      	b.n	8005fb2 <OSFlagPend+0x4c2>
    }

    flags_rdy = OSTCBCurPtr->FlagsRdy;
 8005f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fbc <OSFlagPend+0x4cc>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f54:	613b      	str	r3, [r7, #16]
    if (consume == OS_TRUE) {                                   /* See if we need to consume the flags                  */
 8005f56:	7ffb      	ldrb	r3, [r7, #31]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d123      	bne.n	8005fa4 <OSFlagPend+0x4b4>
        switch (mode) {
 8005f5c:	8afb      	ldrh	r3, [r7, #22]
 8005f5e:	2b08      	cmp	r3, #8
 8005f60:	d008      	beq.n	8005f74 <OSFlagPend+0x484>
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	dc15      	bgt.n	8005f92 <OSFlagPend+0x4a2>
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	dc02      	bgt.n	8005f70 <OSFlagPend+0x480>
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	dc0a      	bgt.n	8005f84 <OSFlagPend+0x494>
 8005f6e:	e010      	b.n	8005f92 <OSFlagPend+0x4a2>
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d10e      	bne.n	8005f92 <OSFlagPend+0x4a2>
            case OS_OPT_PEND_FLAG_SET_ALL:
            case OS_OPT_PEND_FLAG_SET_ANY:                      /* Clear ONLY the flags we got                          */
                 p_grp->Flags &= ~flags_rdy;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a1a      	ldr	r2, [r3, #32]
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	43db      	mvns	r3, r3
 8005f7c:	401a      	ands	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	621a      	str	r2, [r3, #32]
                 break;
 8005f82:	e00f      	b.n	8005fa4 <OSFlagPend+0x4b4>

#if (OS_CFG_FLAG_MODE_CLR_EN > 0u)
            case OS_OPT_PEND_FLAG_CLR_ALL:
            case OS_OPT_PEND_FLAG_CLR_ANY:                      /* Set   ONLY the flags we got                          */
                 p_grp->Flags |=  flags_rdy;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a1a      	ldr	r2, [r3, #32]
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	621a      	str	r2, [r3, #32]
                 break;
 8005f90:	e008      	b.n	8005fa4 <OSFlagPend+0x4b4>
#endif
            default:
                 CPU_CRITICAL_EXIT();
 8005f92:	69b8      	ldr	r0, [r7, #24]
 8005f94:	f7fa f93c 	bl	8000210 <CPU_SR_Restore>
                 OS_TRACE_FLAG_PEND_EXIT(OS_ERR_OPT_INVALID);
                *p_err = OS_ERR_OPT_INVALID;
 8005f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9a:	f645 6225 	movw	r2, #24101	@ 0x5e25
 8005f9e:	801a      	strh	r2, [r3, #0]
                 return (0u);
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e006      	b.n	8005fb2 <OSFlagPend+0x4c2>
        }
    }
    CPU_CRITICAL_EXIT();
 8005fa4:	69b8      	ldr	r0, [r7, #24]
 8005fa6:	f7fa f933 	bl	8000210 <CPU_SR_Restore>
    OS_TRACE_FLAG_PEND_EXIT(OS_ERR_NONE);
   *p_err = OS_ERR_NONE;                                        /* Event(s) must have occurred                          */
 8005faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fac:	2200      	movs	r2, #0
 8005fae:	801a      	strh	r2, [r3, #0]
    return (flags_rdy);
 8005fb0:	693b      	ldr	r3, [r7, #16]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3720      	adds	r7, #32
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	20001f1c 	.word	0x20001f1c
 8005fc0:	20001cec 	.word	0x20001cec

08005fc4 <OSFlagPost>:

OS_FLAGS  OSFlagPost (OS_FLAG_GRP  *p_grp,
                      OS_FLAGS      flags,
                      OS_OPT        opt,
                      OS_ERR       *p_err)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08c      	sub	sp, #48	@ 0x30
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	603b      	str	r3, [r7, #0]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	80fb      	strh	r3, [r7, #6]
    OS_OPT         mode;
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb;
    OS_TCB        *p_tcb_next;
    CPU_TS         ts;
    CPU_SR_ALLOC();
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

    OS_TRACE_FLAG_POST_ENTER(p_grp, flags, opt);

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 8005fd8:	4b7e      	ldr	r3, [pc, #504]	@ (80061d4 <OSFlagPost+0x210>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d005      	beq.n	8005fec <OSFlagPost+0x28>
        OS_TRACE_FLAG_POST_EXIT(OS_ERR_OS_NOT_RUNNING);
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	f645 6289 	movw	r2, #24201	@ 0x5e89
 8005fe6:	801a      	strh	r2, [r3, #0]
        return (0u);
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e0ef      	b.n	80061cc <OSFlagPost+0x208>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_grp == (OS_FLAG_GRP *)0) {                            /* Validate 'p_grp'                                     */
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d105      	bne.n	8005ffe <OSFlagPost+0x3a>
        OS_TRACE_FLAG_POST_FAILED(p_grp);
        OS_TRACE_FLAG_POST_EXIT(OS_ERR_OBJ_PTR_NULL);
       *p_err  = OS_ERR_OBJ_PTR_NULL;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 8005ff8:	801a      	strh	r2, [r3, #0]
        return (0u);
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e0e6      	b.n	80061cc <OSFlagPost+0x208>
    }
#endif

#if (OS_CFG_OBJ_TYPE_CHK_EN > 0u)
    if (p_grp->Type != OS_OBJ_TYPE_FLAG) {                      /* Make sure we are pointing to an event flag grp       */
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a75      	ldr	r2, [pc, #468]	@ (80061d8 <OSFlagPost+0x214>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d005      	beq.n	8006014 <OSFlagPost+0x50>
        OS_TRACE_FLAG_POST_FAILED(p_grp);
        OS_TRACE_FLAG_POST_EXIT(OS_ERR_OBJ_TYPE);
       *p_err = OS_ERR_OBJ_TYPE;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	f645 52c4 	movw	r2, #24004	@ 0x5dc4
 800600e:	801a      	strh	r2, [r3, #0]
        return (0u);
 8006010:	2300      	movs	r3, #0
 8006012:	e0db      	b.n	80061cc <OSFlagPost+0x208>
#endif

#if (OS_CFG_TS_EN > 0u)
    ts = OS_TS_GET();                                           /* Get timestamp                                        */
#else
    ts = 0u;
 8006014:	2300      	movs	r3, #0
 8006016:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

    OS_TRACE_FLAG_POST(p_grp);

    switch (opt) {
 8006018:	88fb      	ldrh	r3, [r7, #6]
 800601a:	f248 0201 	movw	r2, #32769	@ 0x8001
 800601e:	4293      	cmp	r3, r2
 8006020:	d019      	beq.n	8006056 <OSFlagPost+0x92>
 8006022:	f248 0201 	movw	r2, #32769	@ 0x8001
 8006026:	4293      	cmp	r3, r2
 8006028:	dc21      	bgt.n	800606e <OSFlagPost+0xaa>
 800602a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800602e:	d007      	beq.n	8006040 <OSFlagPost+0x7c>
 8006030:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006034:	dc1b      	bgt.n	800606e <OSFlagPost+0xaa>
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <OSFlagPost+0x7c>
 800603a:	2b01      	cmp	r3, #1
 800603c:	d00b      	beq.n	8006056 <OSFlagPost+0x92>
 800603e:	e016      	b.n	800606e <OSFlagPost+0xaa>
        case OS_OPT_POST_FLAG_SET:
        case OS_OPT_POST_FLAG_SET | OS_OPT_POST_NO_SCHED:
             CPU_CRITICAL_ENTER();
 8006040:	2040      	movs	r0, #64	@ 0x40
 8006042:	f7fa f8d7 	bl	80001f4 <CPU_SR_Save>
 8006046:	62b8      	str	r0, [r7, #40]	@ 0x28
             p_grp->Flags |=  flags;                            /* Set   the flags specified in the group               */
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a1a      	ldr	r2, [r3, #32]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	431a      	orrs	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	621a      	str	r2, [r3, #32]
             break;
 8006054:	e011      	b.n	800607a <OSFlagPost+0xb6>

        case OS_OPT_POST_FLAG_CLR:
        case OS_OPT_POST_FLAG_CLR | OS_OPT_POST_NO_SCHED:
             CPU_CRITICAL_ENTER();
 8006056:	2040      	movs	r0, #64	@ 0x40
 8006058:	f7fa f8cc 	bl	80001f4 <CPU_SR_Save>
 800605c:	62b8      	str	r0, [r7, #40]	@ 0x28
             p_grp->Flags &= ~flags;                            /* Clear the flags specified in the group               */
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a1a      	ldr	r2, [r3, #32]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	43db      	mvns	r3, r3
 8006066:	401a      	ands	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	621a      	str	r2, [r3, #32]
             break;
 800606c:	e005      	b.n	800607a <OSFlagPost+0xb6>

        default:
            *p_err = OS_ERR_OPT_INVALID;                        /* INVALID option                                       */
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	f645 6225 	movw	r2, #24101	@ 0x5e25
 8006074:	801a      	strh	r2, [r3, #0]
             OS_TRACE_FLAG_POST_EXIT(*p_err);
             return (0u);
 8006076:	2300      	movs	r3, #0
 8006078:	e0a8      	b.n	80061cc <OSFlagPost+0x208>
    }
#if (OS_CFG_TS_EN > 0u)
    p_grp->TS   = ts;
#endif
    p_pend_list = &p_grp->PendList;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3308      	adds	r3, #8
 800607e:	623b      	str	r3, [r7, #32]
    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* Any task waiting on event flag group?                */
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d108      	bne.n	800609a <OSFlagPost+0xd6>
        CPU_CRITICAL_EXIT();                                    /* No                                                   */
 8006088:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800608a:	f7fa f8c1 	bl	8000210 <CPU_SR_Restore>
       *p_err = OS_ERR_NONE;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2200      	movs	r2, #0
 8006092:	801a      	strh	r2, [r3, #0]
        OS_TRACE_FLAG_POST_EXIT(*p_err);
        return (p_grp->Flags);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	e098      	b.n	80061cc <OSFlagPost+0x208>
    }

    p_tcb = p_pend_list->HeadPtr;
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (p_tcb != (OS_TCB *)0) {                              /* Go through all tasks waiting on event flag(s)        */
 80060a0:	e07a      	b.n	8006198 <OSFlagPost+0x1d4>
        p_tcb_next = p_tcb->PendNextPtr;
 80060a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a6:	61bb      	str	r3, [r7, #24]
        mode       = p_tcb->FlagsOpt & OS_OPT_PEND_FLAG_MASK;
 80060a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060aa:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 80060ae:	f003 030f 	and.w	r3, r3, #15
 80060b2:	82fb      	strh	r3, [r7, #22]
        switch (mode) {
 80060b4:	8afb      	ldrh	r3, [r7, #22]
 80060b6:	3b01      	subs	r3, #1
 80060b8:	2b07      	cmp	r3, #7
 80060ba:	d85b      	bhi.n	8006174 <OSFlagPost+0x1b0>
 80060bc:	a201      	add	r2, pc, #4	@ (adr r2, 80060c4 <OSFlagPost+0x100>)
 80060be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c2:	bf00      	nop
 80060c4:	0800612b 	.word	0x0800612b
 80060c8:	08006153 	.word	0x08006153
 80060cc:	08006175 	.word	0x08006175
 80060d0:	080060e5 	.word	0x080060e5
 80060d4:	08006175 	.word	0x08006175
 80060d8:	08006175 	.word	0x08006175
 80060dc:	08006175 	.word	0x08006175
 80060e0:	0800610b 	.word	0x0800610b
            case OS_OPT_PEND_FLAG_SET_ALL:                      /* See if all req. flags are set for current node       */
                 flags_rdy = (p_grp->Flags & p_tcb->FlagsPend);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a1a      	ldr	r2, [r3, #32]
 80060e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060ee:	4013      	ands	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]
                 if (flags_rdy == p_tcb->FlagsPend) {
 80060f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d143      	bne.n	8006186 <OSFlagPost+0x1c2>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                         */
 80060fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006100:	6939      	ldr	r1, [r7, #16]
 8006102:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006104:	f000 f8b6 	bl	8006274 <OS_FlagTaskRdy>
                                    flags_rdy,
                                    ts);
                 }
                 break;
 8006108:	e03d      	b.n	8006186 <OSFlagPost+0x1c2>

            case OS_OPT_PEND_FLAG_SET_ANY:                      /* See if any flag set                                  */
                 flags_rdy = (p_grp->Flags & p_tcb->FlagsPend);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a1a      	ldr	r2, [r3, #32]
 800610e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006110:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006114:	4013      	ands	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
                 if (flags_rdy != 0u) {
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d035      	beq.n	800618a <OSFlagPost+0x1c6>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                         */
 800611e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006120:	6939      	ldr	r1, [r7, #16]
 8006122:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006124:	f000 f8a6 	bl	8006274 <OS_FlagTaskRdy>
                                    flags_rdy,
                                    ts);
                 }
                 break;
 8006128:	e02f      	b.n	800618a <OSFlagPost+0x1c6>

#if (OS_CFG_FLAG_MODE_CLR_EN > 0u)
            case OS_OPT_PEND_FLAG_CLR_ALL:                      /* See if all req. flags are set for current node       */
                 flags_rdy = (OS_FLAGS)(~p_grp->Flags & p_tcb->FlagsPend);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	43da      	mvns	r2, r3
 8006130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006136:	4013      	ands	r3, r2
 8006138:	613b      	str	r3, [r7, #16]
                 if (flags_rdy == p_tcb->FlagsPend) {
 800613a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800613c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	429a      	cmp	r2, r3
 8006144:	d123      	bne.n	800618e <OSFlagPost+0x1ca>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                         */
 8006146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006148:	6939      	ldr	r1, [r7, #16]
 800614a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800614c:	f000 f892 	bl	8006274 <OS_FlagTaskRdy>
                                    flags_rdy,
                                    ts);
                 }
                 break;
 8006150:	e01d      	b.n	800618e <OSFlagPost+0x1ca>

            case OS_OPT_PEND_FLAG_CLR_ANY:                      /* See if any flag set                                  */
                 flags_rdy = (OS_FLAGS)(~p_grp->Flags & p_tcb->FlagsPend);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	43da      	mvns	r2, r3
 8006158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800615a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800615e:	4013      	ands	r3, r2
 8006160:	613b      	str	r3, [r7, #16]
                 if (flags_rdy != 0u) {
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d014      	beq.n	8006192 <OSFlagPost+0x1ce>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                         */
 8006168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800616a:	6939      	ldr	r1, [r7, #16]
 800616c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800616e:	f000 f881 	bl	8006274 <OS_FlagTaskRdy>
                                    flags_rdy,
                                    ts);
                 }
                 break;
 8006172:	e00e      	b.n	8006192 <OSFlagPost+0x1ce>
#endif
            default:
                 CPU_CRITICAL_EXIT();
 8006174:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006176:	f7fa f84b 	bl	8000210 <CPU_SR_Restore>
                *p_err = OS_ERR_FLAG_PEND_OPT;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	f643 22ff 	movw	r2, #15103	@ 0x3aff
 8006180:	801a      	strh	r2, [r3, #0]
                 OS_TRACE_FLAG_POST_EXIT(*p_err);
                 return (0u);
 8006182:	2300      	movs	r3, #0
 8006184:	e022      	b.n	80061cc <OSFlagPost+0x208>
                 break;
 8006186:	bf00      	nop
 8006188:	e004      	b.n	8006194 <OSFlagPost+0x1d0>
                 break;
 800618a:	bf00      	nop
 800618c:	e002      	b.n	8006194 <OSFlagPost+0x1d0>
                 break;
 800618e:	bf00      	nop
 8006190:	e000      	b.n	8006194 <OSFlagPost+0x1d0>
                 break;
 8006192:	bf00      	nop
        }
                                                                /* Point to next task waiting for event flag(s)         */
        p_tcb = p_tcb_next;
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (p_tcb != (OS_TCB *)0) {                              /* Go through all tasks waiting on event flag(s)        */
 8006198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800619a:	2b00      	cmp	r3, #0
 800619c:	d181      	bne.n	80060a2 <OSFlagPost+0xde>
    }
    CPU_CRITICAL_EXIT();
 800619e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061a0:	f7fa f836 	bl	8000210 <CPU_SR_Restore>

    if ((opt & OS_OPT_POST_NO_SCHED) == 0u) {
 80061a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	db01      	blt.n	80061b0 <OSFlagPost+0x1ec>
        OSSched();
 80061ac:	f7fe fe32 	bl	8004e14 <OSSched>
    }

    CPU_CRITICAL_ENTER();
 80061b0:	2040      	movs	r0, #64	@ 0x40
 80061b2:	f7fa f81f 	bl	80001f4 <CPU_SR_Save>
 80061b6:	62b8      	str	r0, [r7, #40]	@ 0x28
    flags_cur = p_grp->Flags;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	61fb      	str	r3, [r7, #28]
    CPU_CRITICAL_EXIT();
 80061be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061c0:	f7fa f826 	bl	8000210 <CPU_SR_Restore>
   *p_err     = OS_ERR_NONE;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2200      	movs	r2, #0
 80061c8:	801a      	strh	r2, [r3, #0]

    OS_TRACE_FLAG_POST_EXIT(*p_err);
    return (flags_cur);
 80061ca:	69fb      	ldr	r3, [r7, #28]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3730      	adds	r7, #48	@ 0x30
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	200019ad 	.word	0x200019ad
 80061d8:	47414c46 	.word	0x47414c46

080061dc <OS_FlagBlock>:

void  OS_FlagBlock (OS_FLAG_GRP  *p_grp,
                    OS_FLAGS      flags,
                    OS_OPT        opt,
                    OS_TICK       timeout)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	4613      	mov	r3, r2
 80061ea:	80fb      	strh	r3, [r7, #6]
    OSTCBCurPtr->FlagsPend = flags;                             /* Save the flags that we need to wait for              */
 80061ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006220 <OS_FlagBlock+0x44>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    OSTCBCurPtr->FlagsOpt  = opt;                               /* Save the type of wait we are doing                   */
 80061f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006220 <OS_FlagBlock+0x44>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	88fa      	ldrh	r2, [r7, #6]
 80061fc:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
    OSTCBCurPtr->FlagsRdy  = 0u;
 8006200:	4b07      	ldr	r3, [pc, #28]	@ (8006220 <OS_FlagBlock+0x44>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2200      	movs	r2, #0
 8006206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    OS_Pend((OS_PEND_OBJ *)((void *)p_grp),
 800620a:	4b05      	ldr	r3, [pc, #20]	@ (8006220 <OS_FlagBlock+0x44>)
 800620c:	6819      	ldr	r1, [r3, #0]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2201      	movs	r2, #1
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f7fe ff12 	bl	800503c <OS_Pend>
             OSTCBCurPtr,
             OS_TASK_PEND_ON_FLAG,
             timeout);
}
 8006218:	bf00      	nop
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	20001f1c 	.word	0x20001f1c

08006224 <OS_FlagDbgListAdd>:
************************************************************************************************************************
*/

#if (OS_CFG_DBG_EN > 0u)
void  OS_FlagDbgListAdd (OS_FLAG_GRP  *p_grp)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
    p_grp->DbgNamePtr                = (CPU_CHAR *)((void *)" ");
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a0f      	ldr	r2, [pc, #60]	@ (800626c <OS_FlagDbgListAdd+0x48>)
 8006230:	61da      	str	r2, [r3, #28]
    p_grp->DbgPrevPtr                = (OS_FLAG_GRP *)0;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	615a      	str	r2, [r3, #20]
    if (OSFlagDbgListPtr == (OS_FLAG_GRP *)0) {
 8006238:	4b0d      	ldr	r3, [pc, #52]	@ (8006270 <OS_FlagDbgListAdd+0x4c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d103      	bne.n	8006248 <OS_FlagDbgListAdd+0x24>
        p_grp->DbgNextPtr            = (OS_FLAG_GRP *)0;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	619a      	str	r2, [r3, #24]
 8006246:	e007      	b.n	8006258 <OS_FlagDbgListAdd+0x34>
    } else {
        p_grp->DbgNextPtr            = OSFlagDbgListPtr;
 8006248:	4b09      	ldr	r3, [pc, #36]	@ (8006270 <OS_FlagDbgListAdd+0x4c>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	619a      	str	r2, [r3, #24]
        OSFlagDbgListPtr->DbgPrevPtr = p_grp;
 8006250:	4b07      	ldr	r3, [pc, #28]	@ (8006270 <OS_FlagDbgListAdd+0x4c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	615a      	str	r2, [r3, #20]
    }
    OSFlagDbgListPtr                 = p_grp;
 8006258:	4a05      	ldr	r2, [pc, #20]	@ (8006270 <OS_FlagDbgListAdd+0x4c>)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6013      	str	r3, [r2, #0]
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	0800862c 	.word	0x0800862c
 8006270:	200019b8 	.word	0x200019b8

08006274 <OS_FlagTaskRdy>:
*/

void   OS_FlagTaskRdy (OS_TCB    *p_tcb,
                       OS_FLAGS   flags_rdy,
                       CPU_TS     ts)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
#if (OS_CFG_TS_EN == 0u)
    (void)ts;                                                   /* Prevent compiler warning for not using 'ts'          */
#endif

    p_tcb->FlagsRdy   = flags_rdy;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    p_tcb->PendStatus = OS_STATUS_PEND_OK;                      /* Clear pend status                                    */
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;                /* Indicate no longer pending                           */
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
#if (OS_CFG_TS_EN > 0u)
    p_tcb->TS         = ts;
#endif
    switch (p_tcb->TaskState) {
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800629e:	2b03      	cmp	r3, #3
 80062a0:	dc02      	bgt.n	80062a8 <OS_FlagTaskRdy+0x34>
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	da04      	bge.n	80062b0 <OS_FlagTaskRdy+0x3c>
        case OS_TASK_STATE_DLY:
        case OS_TASK_STATE_DLY_SUSPENDED:
        case OS_TASK_STATE_SUSPENDED:
        default:
                                                                /* Default case.                                        */
             break;
 80062a6:	e020      	b.n	80062ea <OS_FlagTaskRdy+0x76>
 80062a8:	3b06      	subs	r3, #6
    switch (p_tcb->TaskState) {
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d81d      	bhi.n	80062ea <OS_FlagTaskRdy+0x76>
 80062ae:	e00f      	b.n	80062d0 <OS_FlagTaskRdy+0x5c>
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d102      	bne.n	80062c0 <OS_FlagTaskRdy+0x4c>
                 OS_TickListRemove(p_tcb);                      /* Remove from tick list                                */
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f001 fc12 	bl	8007ae4 <OS_TickListRemove>
             OS_RdyListInsert(p_tcb);                           /* Insert the task in the ready list                    */
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f7ff f8d7 	bl	8005474 <OS_RdyListInsert>
             p_tcb->TaskState = OS_TASK_STATE_RDY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
             break;
 80062ce:	e00d      	b.n	80062ec <OS_FlagTaskRdy+0x78>
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80062d6:	2b07      	cmp	r3, #7
 80062d8:	d102      	bne.n	80062e0 <OS_FlagTaskRdy+0x6c>
                 OS_TickListRemove(p_tcb);                      /* Remove from tick list                                */
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f001 fc02 	bl	8007ae4 <OS_TickListRemove>
             p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2204      	movs	r2, #4
 80062e4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
             break;
 80062e8:	e000      	b.n	80062ec <OS_FlagTaskRdy+0x78>
             break;
 80062ea:	bf00      	nop
    }
    OS_PendListRemove(p_tcb);
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f7fe ffd1 	bl	8005294 <OS_PendListRemove>
}
 80062f2:	bf00      	nop
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_MemInit (OS_ERR  *p_err)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
#if (OS_CFG_DBG_EN > 0u)
    OSMemDbgListPtr = (OS_MEM *)0;
 8006304:	4b07      	ldr	r3, [pc, #28]	@ (8006324 <OS_MemInit+0x28>)
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]
    OSMemQty        = 0u;
 800630a:	4b07      	ldr	r3, [pc, #28]	@ (8006328 <OS_MemInit+0x2c>)
 800630c:	2200      	movs	r2, #0
 800630e:	801a      	strh	r2, [r3, #0]
#endif
   *p_err           = OS_ERR_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	801a      	strh	r2, [r3, #0]
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	200019c0 	.word	0x200019c0
 8006328:	200019c4 	.word	0x200019c4

0800632c <OS_MsgPoolInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MsgPoolInit (OS_ERR  *p_err)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
    OS_MSG_QTY   i;
    OS_MSG_QTY   loops;


#if (OS_CFG_ARG_CHK_EN > 0u)
    if (OSCfg_MsgPoolBasePtr == (OS_MSG *)0) {
 8006334:	4b2b      	ldr	r3, [pc, #172]	@ (80063e4 <OS_MsgPoolInit+0xb8>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d104      	bne.n	8006346 <OS_MsgPoolInit+0x1a>
       *p_err = OS_ERR_MSG_POOL_NULL_PTR;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f245 721e 	movw	r2, #22302	@ 0x571e
 8006342:	801a      	strh	r2, [r3, #0]
        return;
 8006344:	e048      	b.n	80063d8 <OS_MsgPoolInit+0xac>
    }
    if (OSCfg_MsgPoolSize == 0u) {
 8006346:	4b28      	ldr	r3, [pc, #160]	@ (80063e8 <OS_MsgPoolInit+0xbc>)
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d104      	bne.n	8006358 <OS_MsgPoolInit+0x2c>
       *p_err = OS_ERR_MSG_POOL_EMPTY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f245 721d 	movw	r2, #22301	@ 0x571d
 8006354:	801a      	strh	r2, [r3, #0]
        return;
 8006356:	e03f      	b.n	80063d8 <OS_MsgPoolInit+0xac>
    }
#endif

    p_msg1 = OSCfg_MsgPoolBasePtr;
 8006358:	4b22      	ldr	r3, [pc, #136]	@ (80063e4 <OS_MsgPoolInit+0xb8>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	617b      	str	r3, [r7, #20]
    p_msg2 = OSCfg_MsgPoolBasePtr;
 800635e:	4b21      	ldr	r3, [pc, #132]	@ (80063e4 <OS_MsgPoolInit+0xb8>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	613b      	str	r3, [r7, #16]
    p_msg2++;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	330c      	adds	r3, #12
 8006368:	613b      	str	r3, [r7, #16]
    loops  = OSCfg_MsgPoolSize - 1u;
 800636a:	4b1f      	ldr	r3, [pc, #124]	@ (80063e8 <OS_MsgPoolInit+0xbc>)
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	3b01      	subs	r3, #1
 8006370:	81bb      	strh	r3, [r7, #12]
    for (i = 0u; i < loops; i++) {                              /* Init. list of free OS_MSGs                           */
 8006372:	2300      	movs	r3, #0
 8006374:	81fb      	strh	r3, [r7, #14]
 8006376:	e011      	b.n	800639c <OS_MsgPoolInit+0x70>
        p_msg1->NextPtr = p_msg2;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	601a      	str	r2, [r3, #0]
        p_msg1->MsgPtr  = (void *)0;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	2200      	movs	r2, #0
 8006382:	605a      	str	r2, [r3, #4]
        p_msg1->MsgSize =         0u;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2200      	movs	r2, #0
 8006388:	811a      	strh	r2, [r3, #8]
#if (OS_CFG_TS_EN > 0u)
        p_msg1->MsgTS   =         0u;
#endif
        p_msg1++;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	330c      	adds	r3, #12
 800638e:	617b      	str	r3, [r7, #20]
        p_msg2++;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	330c      	adds	r3, #12
 8006394:	613b      	str	r3, [r7, #16]
    for (i = 0u; i < loops; i++) {                              /* Init. list of free OS_MSGs                           */
 8006396:	89fb      	ldrh	r3, [r7, #14]
 8006398:	3301      	adds	r3, #1
 800639a:	81fb      	strh	r3, [r7, #14]
 800639c:	89fa      	ldrh	r2, [r7, #14]
 800639e:	89bb      	ldrh	r3, [r7, #12]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d3e9      	bcc.n	8006378 <OS_MsgPoolInit+0x4c>
    }
    p_msg1->NextPtr = (OS_MSG *)0;                              /* Last OS_MSG                                          */
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]
    p_msg1->MsgPtr  = (void   *)0;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2200      	movs	r2, #0
 80063ae:	605a      	str	r2, [r3, #4]
    p_msg1->MsgSize =           0u;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	2200      	movs	r2, #0
 80063b4:	811a      	strh	r2, [r3, #8]
#if (OS_CFG_TS_EN > 0u)
    p_msg1->MsgTS   =           0u;
#endif

    OSMsgPool.NextPtr    = OSCfg_MsgPoolBasePtr;
 80063b6:	4b0b      	ldr	r3, [pc, #44]	@ (80063e4 <OS_MsgPoolInit+0xb8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a0c      	ldr	r2, [pc, #48]	@ (80063ec <OS_MsgPoolInit+0xc0>)
 80063bc:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree    = OSCfg_MsgPoolSize;
 80063be:	4b0a      	ldr	r3, [pc, #40]	@ (80063e8 <OS_MsgPoolInit+0xbc>)
 80063c0:	881a      	ldrh	r2, [r3, #0]
 80063c2:	4b0a      	ldr	r3, [pc, #40]	@ (80063ec <OS_MsgPoolInit+0xc0>)
 80063c4:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed    = 0u;
 80063c6:	4b09      	ldr	r3, [pc, #36]	@ (80063ec <OS_MsgPoolInit+0xc0>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	80da      	strh	r2, [r3, #6]
#if (OS_CFG_DBG_EN > 0u)
    OSMsgPool.NbrUsedMax = 0u;
 80063cc:	4b07      	ldr	r3, [pc, #28]	@ (80063ec <OS_MsgPoolInit+0xc0>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	811a      	strh	r2, [r3, #8]
#endif
   *p_err                = OS_ERR_NONE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	801a      	strh	r2, [r3, #0]
}
 80063d8:	371c      	adds	r7, #28
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	080086bc 	.word	0x080086bc
 80063e8:	080086b8 	.word	0x080086b8
 80063ec:	200019c8 	.word	0x200019c8

080063f0 <OS_MsgQFreeAll>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_MSG_QTY  OS_MsgQFreeAll (OS_MSG_Q  *p_msg_q)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
    OS_MSG      *p_msg;
    OS_MSG_QTY   qty;



    qty = p_msg_q->NbrEntries;                                  /* Get the number of OS_MSGs being freed                */
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	895b      	ldrh	r3, [r3, #10]
 80063fc:	81fb      	strh	r3, [r7, #14]
    if (p_msg_q->NbrEntries > 0u) {
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	895b      	ldrh	r3, [r3, #10]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d026      	beq.n	8006454 <OS_MsgQFreeAll+0x64>
        p_msg                   = p_msg_q->InPtr;               /* Point to end of message chain                        */
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	60bb      	str	r3, [r7, #8]
        p_msg->NextPtr          = OSMsgPool.NextPtr;
 800640c:	4b15      	ldr	r3, [pc, #84]	@ (8006464 <OS_MsgQFreeAll+0x74>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	601a      	str	r2, [r3, #0]
        OSMsgPool.NextPtr       = p_msg_q->OutPtr;              /* Point to beginning of message chain                  */
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	4a12      	ldr	r2, [pc, #72]	@ (8006464 <OS_MsgQFreeAll+0x74>)
 800641a:	6013      	str	r3, [r2, #0]
        OSMsgPool.NbrUsed      -= p_msg_q->NbrEntries;          /* Update statistics for free list of messages          */
 800641c:	4b11      	ldr	r3, [pc, #68]	@ (8006464 <OS_MsgQFreeAll+0x74>)
 800641e:	88da      	ldrh	r2, [r3, #6]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	895b      	ldrh	r3, [r3, #10]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	b29a      	uxth	r2, r3
 8006428:	4b0e      	ldr	r3, [pc, #56]	@ (8006464 <OS_MsgQFreeAll+0x74>)
 800642a:	80da      	strh	r2, [r3, #6]
        OSMsgPool.NbrFree      += p_msg_q->NbrEntries;
 800642c:	4b0d      	ldr	r3, [pc, #52]	@ (8006464 <OS_MsgQFreeAll+0x74>)
 800642e:	889a      	ldrh	r2, [r3, #4]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	895b      	ldrh	r3, [r3, #10]
 8006434:	4413      	add	r3, r2
 8006436:	b29a      	uxth	r2, r3
 8006438:	4b0a      	ldr	r3, [pc, #40]	@ (8006464 <OS_MsgQFreeAll+0x74>)
 800643a:	809a      	strh	r2, [r3, #4]
        p_msg_q->NbrEntries     =           0u;                 /* Flush the message queue                              */
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	815a      	strh	r2, [r3, #10]
#if (OS_CFG_DBG_EN > 0u)
        p_msg_q->NbrEntriesMax  =           0u;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	819a      	strh	r2, [r3, #12]
#endif
        p_msg_q->InPtr          = (OS_MSG *)0;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
        p_msg_q->OutPtr         = (OS_MSG *)0;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	605a      	str	r2, [r3, #4]
    }
    return (qty);
 8006454:	89fb      	ldrh	r3, [r7, #14]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	200019c8 	.word	0x200019c8

08006468 <OS_MsgQInit>:
************************************************************************************************************************
*/

void  OS_MsgQInit (OS_MSG_Q    *p_msg_q,
                   OS_MSG_QTY   size)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	460b      	mov	r3, r1
 8006472:	807b      	strh	r3, [r7, #2]
    p_msg_q->NbrEntriesSize = size;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	887a      	ldrh	r2, [r7, #2]
 8006478:	811a      	strh	r2, [r3, #8]
    p_msg_q->NbrEntries     =           0u;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	815a      	strh	r2, [r3, #10]
#if (OS_CFG_DBG_EN > 0u)
    p_msg_q->NbrEntriesMax  =           0u;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	819a      	strh	r2, [r3, #12]
#endif
    p_msg_q->InPtr          = (OS_MSG *)0;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]
    p_msg_q->OutPtr         = (OS_MSG *)0;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	605a      	str	r2, [r3, #4]
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
	...

080064a0 <OSMutexCreate>:
*/

void  OSMutexCreate (OS_MUTEX  *p_mutex,
                     CPU_CHAR  *p_name,
                     OS_ERR    *p_err)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
    CPU_SR_ALLOC();
 80064ac:	2300      	movs	r3, #0
 80064ae:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to be called from an ISR                 */
 80064b0:	4b24      	ldr	r3, [pc, #144]	@ (8006544 <OSMutexCreate+0xa4>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d004      	beq.n	80064c2 <OSMutexCreate+0x22>
       *p_err = OS_ERR_CREATE_ISR;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f642 62e1 	movw	r2, #12001	@ 0x2ee1
 80064be:	801a      	strh	r2, [r3, #0]
        return;
 80064c0:	e03c      	b.n	800653c <OSMutexCreate+0x9c>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_mutex == (OS_MUTEX *)0) {                             /* Validate 'p_mutex'                                   */
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d104      	bne.n	80064d2 <OSMutexCreate+0x32>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 80064ce:	801a      	strh	r2, [r3, #0]
        return;
 80064d0:	e034      	b.n	800653c <OSMutexCreate+0x9c>
    }
#endif

    CPU_CRITICAL_ENTER();
 80064d2:	2040      	movs	r0, #64	@ 0x40
 80064d4:	f7f9 fe8e 	bl	80001f4 <CPU_SR_Save>
 80064d8:	6178      	str	r0, [r7, #20]
#if (OS_OBJ_TYPE_REQ > 0u)
#if (OS_CFG_OBJ_CREATED_CHK_EN > 0u)
    if (p_mutex->Type == OS_OBJ_TYPE_MUTEX) {
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a1a      	ldr	r2, [pc, #104]	@ (8006548 <OSMutexCreate+0xa8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d107      	bne.n	80064f4 <OSMutexCreate+0x54>
        CPU_CRITICAL_EXIT();
 80064e4:	6978      	ldr	r0, [r7, #20]
 80064e6:	f7f9 fe93 	bl	8000210 <CPU_SR_Restore>
        *p_err = OS_ERR_OBJ_CREATED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f645 52c1 	movw	r2, #24001	@ 0x5dc1
 80064f0:	801a      	strh	r2, [r3, #0]
        return;
 80064f2:	e023      	b.n	800653c <OSMutexCreate+0x9c>
    }
#endif
    p_mutex->Type              =  OS_OBJ_TYPE_MUTEX;            /* Mark the data structure as a mutex                   */
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4a14      	ldr	r2, [pc, #80]	@ (8006548 <OSMutexCreate+0xa8>)
 80064f8:	601a      	str	r2, [r3, #0]
#endif
#if (OS_CFG_DBG_EN > 0u)
    p_mutex->NamePtr           =  p_name;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	605a      	str	r2, [r3, #4]
#else
    (void)p_name;
#endif
    p_mutex->MutexGrpNextPtr   = (OS_MUTEX *)0;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	621a      	str	r2, [r3, #32]
    p_mutex->OwnerTCBPtr       = (OS_TCB   *)0;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	625a      	str	r2, [r3, #36]	@ 0x24
    p_mutex->OwnerNestingCtr   =             0u;                /* Mutex is available                                   */
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if (OS_CFG_TS_EN > 0u)
    p_mutex->TS                =             0u;
#endif
    OS_PendListInit(&p_mutex->PendList);                        /* Initialize the waiting list                          */
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	3308      	adds	r3, #8
 8006518:	4618      	mov	r0, r3
 800651a:	f7fe fe3c 	bl	8005196 <OS_PendListInit>

#if (OS_CFG_DBG_EN > 0u)
    OS_MutexDbgListAdd(p_mutex);
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 f906 	bl	8006730 <OS_MutexDbgListAdd>
    OSMutexQty++;
 8006524:	4b09      	ldr	r3, [pc, #36]	@ (800654c <OSMutexCreate+0xac>)
 8006526:	881b      	ldrh	r3, [r3, #0]
 8006528:	3301      	adds	r3, #1
 800652a:	b29a      	uxth	r2, r3
 800652c:	4b07      	ldr	r3, [pc, #28]	@ (800654c <OSMutexCreate+0xac>)
 800652e:	801a      	strh	r2, [r3, #0]
#endif

    OS_TRACE_MUTEX_CREATE(p_mutex, p_name);
    CPU_CRITICAL_EXIT();
 8006530:	6978      	ldr	r0, [r7, #20]
 8006532:	f7f9 fe6d 	bl	8000210 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	801a      	strh	r2, [r3, #0]
}
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	200019ac 	.word	0x200019ac
 8006548:	5854554d 	.word	0x5854554d
 800654c:	200019d8 	.word	0x200019d8

08006550 <OSMutexPend>:
void  OSMutexPend (OS_MUTEX  *p_mutex,
                   OS_TICK    timeout,
                   OS_OPT     opt,
                   CPU_TS    *p_ts,
                   OS_ERR    *p_err)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	603b      	str	r3, [r7, #0]
 800655c:	4613      	mov	r3, r2
 800655e:	80fb      	strh	r3, [r7, #6]
    OS_TCB  *p_tcb;
    CPU_SR_ALLOC();
 8006560:	2300      	movs	r3, #0
 8006562:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
 8006564:	4b6d      	ldr	r3, [pc, #436]	@ (800671c <OSMutexPend+0x1cc>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d004      	beq.n	8006576 <OSMutexPend+0x26>
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_PEND_ISR);
       *p_err = OS_ERR_PEND_ISR;
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	f246 12ae 	movw	r2, #25006	@ 0x61ae
 8006572:	801a      	strh	r2, [r3, #0]
        return;
 8006574:	e0cf      	b.n	8006716 <OSMutexPend+0x1c6>
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 8006576:	4b6a      	ldr	r3, [pc, #424]	@ (8006720 <OSMutexPend+0x1d0>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d004      	beq.n	8006588 <OSMutexPend+0x38>
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_OS_NOT_RUNNING);
       *p_err = OS_ERR_OS_NOT_RUNNING;
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	f645 6289 	movw	r2, #24201	@ 0x5e89
 8006584:	801a      	strh	r2, [r3, #0]
        return;
 8006586:	e0c6      	b.n	8006716 <OSMutexPend+0x1c6>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_mutex == (OS_MUTEX *)0) {                             /* Validate arguments                                   */
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d104      	bne.n	8006598 <OSMutexPend+0x48>
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_OBJ_PTR_NULL);
       *p_err = OS_ERR_OBJ_PTR_NULL;
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 8006594:	801a      	strh	r2, [r3, #0]
        return;
 8006596:	e0be      	b.n	8006716 <OSMutexPend+0x1c6>
    }
    switch (opt) {                                              /* Validate 'opt'                                       */
 8006598:	88fb      	ldrh	r3, [r7, #6]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d007      	beq.n	80065ae <OSMutexPend+0x5e>
 800659e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065a2:	d004      	beq.n	80065ae <OSMutexPend+0x5e>
             break;

        default:
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
             OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_OPT_INVALID);
            *p_err = OS_ERR_OPT_INVALID;
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	f645 6225 	movw	r2, #24101	@ 0x5e25
 80065aa:	801a      	strh	r2, [r3, #0]
             return;
 80065ac:	e0b3      	b.n	8006716 <OSMutexPend+0x1c6>
             break;
 80065ae:	bf00      	nop
    }
#endif

#if (OS_CFG_OBJ_TYPE_CHK_EN > 0u)
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {                   /* Make sure mutex was created                          */
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a5b      	ldr	r2, [pc, #364]	@ (8006724 <OSMutexPend+0x1d4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d004      	beq.n	80065c4 <OSMutexPend+0x74>
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_OBJ_TYPE);
       *p_err = OS_ERR_OBJ_TYPE;
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	f645 52c4 	movw	r2, #24004	@ 0x5dc4
 80065c0:	801a      	strh	r2, [r3, #0]
        return;
 80065c2:	e0a8      	b.n	8006716 <OSMutexPend+0x1c6>
    }
#endif

    CPU_CRITICAL_ENTER();
 80065c4:	2040      	movs	r0, #64	@ 0x40
 80065c6:	f7f9 fe15 	bl	80001f4 <CPU_SR_Save>
 80065ca:	6178      	str	r0, [r7, #20]
    if (p_mutex->OwnerNestingCtr == 0u) {                       /* Resource available?                                  */
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d114      	bne.n	8006600 <OSMutexPend+0xb0>
        p_mutex->OwnerTCBPtr     = OSTCBCurPtr;                 /* Yes, caller may proceed                              */
 80065d6:	4b54      	ldr	r3, [pc, #336]	@ (8006728 <OSMutexPend+0x1d8>)
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	625a      	str	r2, [r3, #36]	@ 0x24
        p_mutex->OwnerNestingCtr = 1u;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if (OS_CFG_TS_EN > 0u)
        if (p_ts != (CPU_TS *)0) {
           *p_ts = p_mutex->TS;
        }
#endif
        OS_MutexGrpAdd(OSTCBCurPtr, p_mutex);                   /* Add mutex to owner's group                           */
 80065e6:	4b50      	ldr	r3, [pc, #320]	@ (8006728 <OSMutexPend+0x1d8>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68f9      	ldr	r1, [r7, #12]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 f8c7 	bl	8006780 <OS_MutexGrpAdd>
        CPU_CRITICAL_EXIT();
 80065f2:	6978      	ldr	r0, [r7, #20]
 80065f4:	f7f9 fe0c 	bl	8000210 <CPU_SR_Restore>
        OS_TRACE_MUTEX_PEND(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_NONE);
       *p_err = OS_ERR_NONE;
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	2200      	movs	r2, #0
 80065fc:	801a      	strh	r2, [r3, #0]
        return;
 80065fe:	e08a      	b.n	8006716 <OSMutexPend+0x1c6>
    }

    if (OSTCBCurPtr == p_mutex->OwnerTCBPtr) {                  /* See if current task is already the owner of the mutex*/
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006604:	4b48      	ldr	r3, [pc, #288]	@ (8006728 <OSMutexPend+0x1d8>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d11c      	bne.n	8006646 <OSMutexPend+0xf6>
        if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)-1) {
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006612:	2bff      	cmp	r3, #255	@ 0xff
 8006614:	d107      	bne.n	8006626 <OSMutexPend+0xd6>
            CPU_CRITICAL_EXIT();
 8006616:	6978      	ldr	r0, [r7, #20]
 8006618:	f7f9 fdfa 	bl	8000210 <CPU_SR_Restore>
            OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_MUTEX_OVF);
           *p_err = OS_ERR_MUTEX_OVF;
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	f245 7284 	movw	r2, #22404	@ 0x5784
 8006622:	801a      	strh	r2, [r3, #0]
            return;
 8006624:	e077      	b.n	8006716 <OSMutexPend+0x1c6>
        }
        p_mutex->OwnerNestingCtr++;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800662c:	3301      	adds	r3, #1
 800662e:	b2da      	uxtb	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if (OS_CFG_TS_EN > 0u)
        if (p_ts != (CPU_TS *)0) {
           *p_ts = p_mutex->TS;
        }
#endif
        CPU_CRITICAL_EXIT();
 8006636:	6978      	ldr	r0, [r7, #20]
 8006638:	f7f9 fdea 	bl	8000210 <CPU_SR_Restore>
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_MUTEX_OWNER);
       *p_err = OS_ERR_MUTEX_OWNER;                             /* Indicate that current task already owns the mutex    */
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	f245 7282 	movw	r2, #22402	@ 0x5782
 8006642:	801a      	strh	r2, [r3, #0]
        return;
 8006644:	e067      	b.n	8006716 <OSMutexPend+0x1c6>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {               /* Caller wants to block if not available?              */
 8006646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800664a:	2b00      	cmp	r3, #0
 800664c:	da07      	bge.n	800665e <OSMutexPend+0x10e>
        CPU_CRITICAL_EXIT();
 800664e:	6978      	ldr	r0, [r7, #20]
 8006650:	f7f9 fdde 	bl	8000210 <CPU_SR_Restore>
           *p_ts = 0u;
        }
#endif
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_PEND_WOULD_BLOCK);
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                        /* No                                                   */
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	f246 12b0 	movw	r2, #25008	@ 0x61b0
 800665a:	801a      	strh	r2, [r3, #0]
        return;
 800665c:	e05b      	b.n	8006716 <OSMutexPend+0x1c6>
    } else {
        if (OSSchedLockNestingCtr > 0u) {                       /* Can't pend when the scheduler is locked              */
 800665e:	4b33      	ldr	r3, [pc, #204]	@ (800672c <OSMutexPend+0x1dc>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d007      	beq.n	8006676 <OSMutexPend+0x126>
            CPU_CRITICAL_EXIT();
 8006666:	6978      	ldr	r0, [r7, #20]
 8006668:	f7f9 fdd2 	bl	8000210 <CPU_SR_Restore>
               *p_ts = 0u;
            }
#endif
            OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_SCHED_LOCKED);
           *p_err = OS_ERR_SCHED_LOCKED;
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	f646 5263 	movw	r2, #28003	@ 0x6d63
 8006672:	801a      	strh	r2, [r3, #0]
            return;
 8006674:	e04f      	b.n	8006716 <OSMutexPend+0x1c6>
        }
    }

    p_tcb = p_mutex->OwnerTCBPtr;                               /* Point to the TCB of the Mutex owner                  */
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667a:	613b      	str	r3, [r7, #16]
    if (p_tcb->Prio > OSTCBCurPtr->Prio) {                      /* See if mutex owner has a lower priority than current */
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 8006682:	4b29      	ldr	r3, [pc, #164]	@ (8006728 <OSMutexPend+0x1d8>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800668a:	429a      	cmp	r2, r3
 800668c:	d907      	bls.n	800669e <OSMutexPend+0x14e>
        OS_TaskChangePrio(p_tcb, OSTCBCurPtr->Prio);
 800668e:	4b26      	ldr	r3, [pc, #152]	@ (8006728 <OSMutexPend+0x1d8>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8006696:	4619      	mov	r1, r3
 8006698:	6938      	ldr	r0, [r7, #16]
 800669a:	f001 f839 	bl	8007710 <OS_TaskChangePrio>
        OS_TRACE_MUTEX_TASK_PRIO_INHERIT(p_tcb, p_tcb->Prio);
    }

    OS_Pend((OS_PEND_OBJ *)((void *)p_mutex),                   /* Block task pending on Mutex                          */
 800669e:	4b22      	ldr	r3, [pc, #136]	@ (8006728 <OSMutexPend+0x1d8>)
 80066a0:	6819      	ldr	r1, [r3, #0]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2204      	movs	r2, #4
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f7fe fcc8 	bl	800503c <OS_Pend>
             OSTCBCurPtr,
             OS_TASK_PEND_ON_MUTEX,
             timeout);

    CPU_CRITICAL_EXIT();
 80066ac:	6978      	ldr	r0, [r7, #20]
 80066ae:	f7f9 fdaf 	bl	8000210 <CPU_SR_Restore>
    OS_TRACE_MUTEX_PEND_BLOCK(p_mutex);
    OSSched();                                                  /* Find the next highest priority task ready to run     */
 80066b2:	f7fe fbaf 	bl	8004e14 <OSSched>

    CPU_CRITICAL_ENTER();
 80066b6:	2040      	movs	r0, #64	@ 0x40
 80066b8:	f7f9 fd9c 	bl	80001f4 <CPU_SR_Save>
 80066bc:	6178      	str	r0, [r7, #20]
    switch (OSTCBCurPtr->PendStatus) {
 80066be:	4b1a      	ldr	r3, [pc, #104]	@ (8006728 <OSMutexPend+0x1d8>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d81d      	bhi.n	8006706 <OSMutexPend+0x1b6>
 80066ca:	a201      	add	r2, pc, #4	@ (adr r2, 80066d0 <OSMutexPend+0x180>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	080066e1 	.word	0x080066e1
 80066d4:	080066e9 	.word	0x080066e9
 80066d8:	080066fd 	.word	0x080066fd
 80066dc:	080066f3 	.word	0x080066f3
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_MUTEX_PEND(p_mutex);
            *p_err = OS_ERR_NONE;
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	2200      	movs	r2, #0
 80066e4:	801a      	strh	r2, [r3, #0]
             break;
 80066e6:	e013      	b.n	8006710 <OSMutexPend+0x1c0>
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            *p_err = OS_ERR_PEND_ABORT;
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	f246 12a9 	movw	r2, #25001	@ 0x61a9
 80066ee:	801a      	strh	r2, [r3, #0]
             break;
 80066f0:	e00e      	b.n	8006710 <OSMutexPend+0x1c0>
             if (p_ts != (CPU_TS *)0) {
                *p_ts = 0u;
             }
#endif
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            *p_err = OS_ERR_TIMEOUT;
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	f247 22d9 	movw	r2, #29401	@ 0x72d9
 80066f8:	801a      	strh	r2, [r3, #0]
             break;
 80066fa:	e009      	b.n	8006710 <OSMutexPend+0x1c0>
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            *p_err = OS_ERR_OBJ_DEL;
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	f645 52c2 	movw	r2, #24002	@ 0x5dc2
 8006702:	801a      	strh	r2, [r3, #0]
             break;
 8006704:	e004      	b.n	8006710 <OSMutexPend+0x1c0>

        default:
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            *p_err = OS_ERR_STATUS_INVALID;
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	f646 622e 	movw	r2, #28206	@ 0x6e2e
 800670c:	801a      	strh	r2, [r3, #0]
             break;
 800670e:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
 8006710:	6978      	ldr	r0, [r7, #20]
 8006712:	f7f9 fd7d 	bl	8000210 <CPU_SR_Restore>
    OS_TRACE_MUTEX_PEND_EXIT(*p_err);
}
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	200019ac 	.word	0x200019ac
 8006720:	200019ad 	.word	0x200019ad
 8006724:	5854554d 	.word	0x5854554d
 8006728:	20001f1c 	.word	0x20001f1c
 800672c:	20001cec 	.word	0x20001cec

08006730 <OS_MutexDbgListAdd>:
************************************************************************************************************************
*/

#if (OS_CFG_DBG_EN > 0u)
void  OS_MutexDbgListAdd (OS_MUTEX  *p_mutex)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
    p_mutex->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a0f      	ldr	r2, [pc, #60]	@ (8006778 <OS_MutexDbgListAdd+0x48>)
 800673c:	61da      	str	r2, [r3, #28]
    p_mutex->DbgPrevPtr               = (OS_MUTEX *)0;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	615a      	str	r2, [r3, #20]
    if (OSMutexDbgListPtr == (OS_MUTEX *)0) {
 8006744:	4b0d      	ldr	r3, [pc, #52]	@ (800677c <OS_MutexDbgListAdd+0x4c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d103      	bne.n	8006754 <OS_MutexDbgListAdd+0x24>
        p_mutex->DbgNextPtr           = (OS_MUTEX *)0;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	619a      	str	r2, [r3, #24]
 8006752:	e007      	b.n	8006764 <OS_MutexDbgListAdd+0x34>
    } else {
        p_mutex->DbgNextPtr           =  OSMutexDbgListPtr;
 8006754:	4b09      	ldr	r3, [pc, #36]	@ (800677c <OS_MutexDbgListAdd+0x4c>)
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	619a      	str	r2, [r3, #24]
        OSMutexDbgListPtr->DbgPrevPtr =  p_mutex;
 800675c:	4b07      	ldr	r3, [pc, #28]	@ (800677c <OS_MutexDbgListAdd+0x4c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	615a      	str	r2, [r3, #20]
    }
    OSMutexDbgListPtr                 =  p_mutex;
 8006764:	4a05      	ldr	r2, [pc, #20]	@ (800677c <OS_MutexDbgListAdd+0x4c>)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6013      	str	r3, [r2, #0]
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	08008638 	.word	0x08008638
 800677c:	200019d4 	.word	0x200019d4

08006780 <OS_MutexGrpAdd>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpAdd (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
    p_mutex->MutexGrpNextPtr = p_tcb->MutexGrpHeadPtr;      /* The mutex grp is not sorted add to head of list.       */
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	621a      	str	r2, [r3, #32]
    p_tcb->MutexGrpHeadPtr   = p_mutex;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <OS_MutexGrpRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpRemove (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
    OS_MUTEX  **pp_mutex;

    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	3340      	adds	r3, #64	@ 0x40
 80067b2:	60fb      	str	r3, [r7, #12]

    while(*pp_mutex != p_mutex) {
 80067b4:	e003      	b.n	80067be <OS_MutexGrpRemove+0x1a>
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3320      	adds	r3, #32
 80067bc:	60fb      	str	r3, [r7, #12]
    while(*pp_mutex != p_mutex) {
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d1f6      	bne.n	80067b6 <OS_MutexGrpRemove+0x12>
    }

    *pp_mutex = (*pp_mutex)->MutexGrpNextPtr;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6a1a      	ldr	r2, [r3, #32]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	601a      	str	r2, [r3, #0]
}
 80067d2:	bf00      	nop
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <OS_MutexGrpPrioFindHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_MutexGrpPrioFindHighest (OS_TCB  *p_tcb)
{
 80067de:	b480      	push	{r7}
 80067e0:	b087      	sub	sp, #28
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
    OS_PRIO     highest_prio;
    OS_PRIO     prio;
    OS_TCB     *p_head;


    highest_prio = (OS_PRIO)(OS_CFG_PRIO_MAX - 1u);
 80067e6:	233f      	movs	r3, #63	@ 0x3f
 80067e8:	74fb      	strb	r3, [r7, #19]
    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3340      	adds	r3, #64	@ 0x40
 80067ee:	617b      	str	r3, [r7, #20]

    while(*pp_mutex != (OS_MUTEX *)0) {
 80067f0:	e014      	b.n	800681c <OS_MutexGrpPrioFindHighest+0x3e>
        p_head = (*pp_mutex)->PendList.HeadPtr;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	60fb      	str	r3, [r7, #12]
        if (p_head != (OS_TCB *)0) {
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d009      	beq.n	8006814 <OS_MutexGrpPrioFindHighest+0x36>
            prio = p_head->Prio;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8006806:	72fb      	strb	r3, [r7, #11]
            if(prio < highest_prio) {
 8006808:	7afa      	ldrb	r2, [r7, #11]
 800680a:	7cfb      	ldrb	r3, [r7, #19]
 800680c:	429a      	cmp	r2, r3
 800680e:	d201      	bcs.n	8006814 <OS_MutexGrpPrioFindHighest+0x36>
                highest_prio = prio;
 8006810:	7afb      	ldrb	r3, [r7, #11]
 8006812:	74fb      	strb	r3, [r7, #19]
            }
        }
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3320      	adds	r3, #32
 800681a:	617b      	str	r3, [r7, #20]
    while(*pp_mutex != (OS_MUTEX *)0) {
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e6      	bne.n	80067f2 <OS_MutexGrpPrioFindHighest+0x14>
    }

    return (highest_prio);
 8006824:	7cfb      	ldrb	r3, [r7, #19]
}
 8006826:	4618      	mov	r0, r3
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <OS_MutexGrpPostAll>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpPostAll (OS_TCB  *p_tcb)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b08a      	sub	sp, #40	@ 0x28
 8006836:	af02      	add	r7, sp, #8
 8006838:	6078      	str	r0, [r7, #4]
    CPU_TS         ts;
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb_new;


    p_mutex = p_tcb->MutexGrpHeadPtr;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683e:	61fb      	str	r3, [r7, #28]

    while(p_mutex != (OS_MUTEX *)0) {
 8006840:	e02f      	b.n	80068a2 <OS_MutexGrpPostAll+0x70>

        OS_TRACE_MUTEX_POST(p_mutex);

        p_mutex_next = p_mutex->MutexGrpNextPtr;
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	61bb      	str	r3, [r7, #24]
#if (OS_CFG_TS_EN > 0u)
        ts           = OS_TS_GET();                             /* Get timestamp                                        */
        p_mutex->TS  = ts;
#else
        ts           = 0u;
 8006848:	2300      	movs	r3, #0
 800684a:	617b      	str	r3, [r7, #20]
#endif
        OS_MutexGrpRemove(p_tcb,  p_mutex);                     /* Remove mutex from owner's group                      */
 800684c:	69f9      	ldr	r1, [r7, #28]
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff ffa8 	bl	80067a4 <OS_MutexGrpRemove>

        p_pend_list = &p_mutex->PendList;
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	3308      	adds	r3, #8
 8006858:	613b      	str	r3, [r7, #16]
        if (p_pend_list->HeadPtr == (OS_TCB *)0) {              /* Any task waiting on mutex?                           */
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d107      	bne.n	8006872 <OS_MutexGrpPostAll+0x40>
            p_mutex->OwnerNestingCtr =           0u;            /* Decrement owner's nesting counter                    */
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            p_mutex->OwnerTCBPtr     = (OS_TCB *)0;             /* No                                                   */
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	2200      	movs	r2, #0
 800686e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006870:	e015      	b.n	800689e <OS_MutexGrpPostAll+0x6c>
        } else {
                                                                /* Get TCB from head of pend list                       */
            p_tcb_new                = p_pend_list->HeadPtr;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	60fb      	str	r3, [r7, #12]
            p_mutex->OwnerTCBPtr     = p_tcb;                   /* Give mutex to new owner                              */
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	625a      	str	r2, [r3, #36]	@ 0x24
            p_mutex->OwnerNestingCtr = 1u;
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            OS_MutexGrpAdd(p_tcb_new, p_mutex);
 8006886:	69f9      	ldr	r1, [r7, #28]
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f7ff ff79 	bl	8006780 <OS_MutexGrpAdd>
                                                                /* Post to mutex                                        */
            OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	2300      	movs	r3, #0
 8006894:	2200      	movs	r2, #0
 8006896:	68f9      	ldr	r1, [r7, #12]
 8006898:	69f8      	ldr	r0, [r7, #28]
 800689a:	f7fe fd51 	bl	8005340 <OS_Post>
                                   (void *)0,
                                   0u,
                                   ts);
        }

        p_mutex = p_mutex_next;
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	61fb      	str	r3, [r7, #28]
    while(p_mutex != (OS_MUTEX *)0) {
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1cc      	bne.n	8006842 <OS_MutexGrpPostAll+0x10>
    }

}
 80068a8:	bf00      	nop
 80068aa:	bf00      	nop
 80068ac:	3720      	adds	r7, #32
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <OS_PrioInit>:
* Note       : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_PrioInit (void)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
    CPU_DATA  i;


                                                                /* Clear the bitmap table ... no task is ready          */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 80068ba:	2300      	movs	r3, #0
 80068bc:	607b      	str	r3, [r7, #4]
 80068be:	e007      	b.n	80068d0 <OS_PrioInit+0x1c>
         OSPrioTbl[i] = 0u;
 80068c0:	4a08      	ldr	r2, [pc, #32]	@ (80068e4 <OS_PrioInit+0x30>)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2100      	movs	r1, #0
 80068c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	3301      	adds	r3, #1
 80068ce:	607b      	str	r3, [r7, #4]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d9f4      	bls.n	80068c0 <OS_PrioInit+0xc>
    }

#if (OS_CFG_TASK_IDLE_EN == 0u)
    OS_PrioInsert ((OS_PRIO)(OS_CFG_PRIO_MAX - 1u));            /* Insert what would be the idle task                   */
#endif
}
 80068d6:	bf00      	nop
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	200019dc 	.word	0x200019dc

080068e8 <OS_PrioGetHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_PrioGetHighest (void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	af00      	add	r7, sp, #0
#if   (OS_CFG_PRIO_MAX <= (CPU_CFG_DATA_SIZE * 8u))             /* Optimize for less than word size nbr of priorities   */
    return ((OS_PRIO)CPU_CntLeadZeros(OSPrioTbl[0]));


#elif (OS_CFG_PRIO_MAX <= (2u * (CPU_CFG_DATA_SIZE * 8u)))      /* Optimize for    2x the word size nbr of priorities   */
    if (OSPrioTbl[0] == 0u) {
 80068ec:	4b0b      	ldr	r3, [pc, #44]	@ (800691c <OS_PrioGetHighest+0x34>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d109      	bne.n	8006908 <OS_PrioGetHighest+0x20>
        return ((OS_PRIO)((OS_PRIO)CPU_CntLeadZeros(OSPrioTbl[1]) + (CPU_CFG_DATA_SIZE * 8u)));
 80068f4:	4b09      	ldr	r3, [pc, #36]	@ (800691c <OS_PrioGetHighest+0x34>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7f9 fc96 	bl	800022a <CPU_CntLeadZeros>
 80068fe:	4603      	mov	r3, r0
 8006900:	b2db      	uxtb	r3, r3
 8006902:	3320      	adds	r3, #32
 8006904:	b2db      	uxtb	r3, r3
 8006906:	e006      	b.n	8006916 <OS_PrioGetHighest+0x2e>
    } else {
        return ((OS_PRIO)((OS_PRIO)CPU_CntLeadZeros(OSPrioTbl[0])));
 8006908:	4b04      	ldr	r3, [pc, #16]	@ (800691c <OS_PrioGetHighest+0x34>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4618      	mov	r0, r3
 800690e:	f7f9 fc8c 	bl	800022a <CPU_CntLeadZeros>
 8006912:	4603      	mov	r3, r0
 8006914:	b2db      	uxtb	r3, r3
    }
    prio += (OS_PRIO)CPU_CntLeadZeros(*p_tbl);                  /* Find the position of the first bit set at the entry  */

    return (prio);
#endif
}
 8006916:	4618      	mov	r0, r3
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	200019dc 	.word	0x200019dc

08006920 <OS_PrioInsert>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioInsert (OS_PRIO  prio)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	4603      	mov	r3, r0
 8006928:	71fb      	strb	r3, [r7, #7]
#if   (OS_CFG_PRIO_MAX <= (CPU_CFG_DATA_SIZE * 8u))             /* Optimize for less than word size nbr of priorities   */
    OSPrioTbl[0] |= (CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - prio);


#elif (OS_CFG_PRIO_MAX <= (2u * (CPU_CFG_DATA_SIZE * 8u)))      /* Optimize for    2x the word size nbr of priorities   */
    if (prio < (CPU_CFG_DATA_SIZE * 8u)) {
 800692a:	79fb      	ldrb	r3, [r7, #7]
 800692c:	2b1f      	cmp	r3, #31
 800692e:	d80a      	bhi.n	8006946 <OS_PrioInsert+0x26>
        OSPrioTbl[0] |= (CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - prio);
 8006930:	4b0d      	ldr	r3, [pc, #52]	@ (8006968 <OS_PrioInsert+0x48>)
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	79fb      	ldrb	r3, [r7, #7]
 8006936:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800693a:	fa21 f303 	lsr.w	r3, r1, r3
 800693e:	4313      	orrs	r3, r2
 8006940:	4a09      	ldr	r2, [pc, #36]	@ (8006968 <OS_PrioInsert+0x48>)
 8006942:	6013      	str	r3, [r2, #0]

    ix             = (OS_PRIO)(prio /  (CPU_CFG_DATA_SIZE * 8u));
    bit_nbr        = (CPU_DATA)prio & ((CPU_CFG_DATA_SIZE * 8u) - 1u);
    OSPrioTbl[ix] |= (CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - bit_nbr);
#endif
}
 8006944:	e00a      	b.n	800695c <OS_PrioInsert+0x3c>
        OSPrioTbl[1] |= (CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - (prio - (CPU_CFG_DATA_SIZE * 8u)));
 8006946:	4b08      	ldr	r3, [pc, #32]	@ (8006968 <OS_PrioInsert+0x48>)
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	79fb      	ldrb	r3, [r7, #7]
 800694c:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8006950:	2101      	movs	r1, #1
 8006952:	fa01 f303 	lsl.w	r3, r1, r3
 8006956:	4313      	orrs	r3, r2
 8006958:	4a03      	ldr	r2, [pc, #12]	@ (8006968 <OS_PrioInsert+0x48>)
 800695a:	6053      	str	r3, [r2, #4]
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	200019dc 	.word	0x200019dc

0800696c <OS_PrioRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioRemove (OS_PRIO  prio)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	4603      	mov	r3, r0
 8006974:	71fb      	strb	r3, [r7, #7]
#if   (OS_CFG_PRIO_MAX <= (CPU_CFG_DATA_SIZE * 8u))             /* Optimize for less than word size nbr of priorities   */
    OSPrioTbl[0] &= ~((CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - prio));


#elif (OS_CFG_PRIO_MAX <= (2u * (CPU_CFG_DATA_SIZE * 8u)))      /* Optimize for    2x the word size nbr of priorities   */
    if (prio < (CPU_CFG_DATA_SIZE * 8u)) {
 8006976:	79fb      	ldrb	r3, [r7, #7]
 8006978:	2b1f      	cmp	r3, #31
 800697a:	d80b      	bhi.n	8006994 <OS_PrioRemove+0x28>
        OSPrioTbl[0] &= ~((CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - prio));
 800697c:	4b0e      	ldr	r3, [pc, #56]	@ (80069b8 <OS_PrioRemove+0x4c>)
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	79fb      	ldrb	r3, [r7, #7]
 8006982:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006986:	fa21 f303 	lsr.w	r3, r1, r3
 800698a:	43db      	mvns	r3, r3
 800698c:	4013      	ands	r3, r2
 800698e:	4a0a      	ldr	r2, [pc, #40]	@ (80069b8 <OS_PrioRemove+0x4c>)
 8006990:	6013      	str	r3, [r2, #0]

    ix             =   (OS_PRIO)(prio  /   (CPU_CFG_DATA_SIZE * 8u));
    bit_nbr        =   (CPU_DATA)prio  &  ((CPU_CFG_DATA_SIZE * 8u) - 1u);
    OSPrioTbl[ix] &= ~((CPU_DATA)  1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - bit_nbr));
#endif
}
 8006992:	e00b      	b.n	80069ac <OS_PrioRemove+0x40>
        OSPrioTbl[1] &= ~((CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - (prio - (CPU_CFG_DATA_SIZE * 8u))));
 8006994:	4b08      	ldr	r3, [pc, #32]	@ (80069b8 <OS_PrioRemove+0x4c>)
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	79fb      	ldrb	r3, [r7, #7]
 800699a:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800699e:	2101      	movs	r1, #1
 80069a0:	fa01 f303 	lsl.w	r3, r1, r3
 80069a4:	43db      	mvns	r3, r3
 80069a6:	4013      	ands	r3, r2
 80069a8:	4a03      	ldr	r2, [pc, #12]	@ (80069b8 <OS_PrioRemove+0x4c>)
 80069aa:	6053      	str	r3, [r2, #4]
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	200019dc 	.word	0x200019dc

080069bc <OSStatReset>:
* Note(s)    : none
************************************************************************************************************************
*/

void  OSStatReset (OS_ERR  *p_err)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
#endif
#if (OS_CFG_Q_EN > 0u)
    OS_Q        *p_q;
#endif
#endif
    CPU_SR_ALLOC();
 80069c4:	2300      	movs	r3, #0
 80069c6:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 80069c8:	2040      	movs	r0, #64	@ 0x40
 80069ca:	f7f9 fc13 	bl	80001f4 <CPU_SR_Save>
 80069ce:	60f8      	str	r0, [r7, #12]
#if (OS_CFG_STAT_TASK_EN > 0u)
    OSStatTaskCPUUsageMax = 0u;
 80069d0:	4b33      	ldr	r3, [pc, #204]	@ (8006aa0 <OSStatReset+0xe4>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	801a      	strh	r2, [r3, #0]
#if (OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u)
    OSSchedLockTimeMax    = 0u;                                 /* Reset the maximum scheduler lock time                */
#endif

#if ((OS_MSG_EN > 0u) && (OS_CFG_DBG_EN > 0u))
    OSMsgPool.NbrUsedMax  = 0u;
 80069d6:	4b33      	ldr	r3, [pc, #204]	@ (8006aa4 <OSStatReset+0xe8>)
 80069d8:	2200      	movs	r2, #0
 80069da:	811a      	strh	r2, [r3, #8]
#endif
    CPU_CRITICAL_EXIT();
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f7f9 fc17 	bl	8000210 <CPU_SR_Restore>

#if (OS_CFG_DBG_EN > 0u)
    CPU_CRITICAL_ENTER();
 80069e2:	2040      	movs	r0, #64	@ 0x40
 80069e4:	f7f9 fc06 	bl	80001f4 <CPU_SR_Save>
 80069e8:	60f8      	str	r0, [r7, #12]
    p_tcb = OSTaskDbgListPtr;
 80069ea:	4b2f      	ldr	r3, [pc, #188]	@ (8006aa8 <OSStatReset+0xec>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	617b      	str	r3, [r7, #20]
    CPU_CRITICAL_EXIT();
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f7f9 fc0d 	bl	8000210 <CPU_SR_Restore>
    while (p_tcb != (OS_TCB *)0) {                              /* Reset per-Task statistics                            */
 80069f6:	e02b      	b.n	8006a50 <OSStatReset+0x94>
        CPU_CRITICAL_ENTER();
 80069f8:	2040      	movs	r0, #64	@ 0x40
 80069fa:	f7f9 fbfb 	bl	80001f4 <CPU_SR_Save>
 80069fe:	60f8      	str	r0, [r7, #12]
        p_tcb->SchedLockTimeMax = 0u;
#endif

#if (OS_CFG_TASK_PROFILE_EN > 0u)
#if (OS_CFG_TASK_Q_EN > 0u)
        p_tcb->MsgQPendTimeMax  = 0u;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2200      	movs	r2, #0
 8006a04:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
        p_tcb->SemPendTimeMax   = 0u;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        p_tcb->CtxSwCtr         = 0u;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        p_tcb->CPUUsage         = 0u;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
        p_tcb->CPUUsageMax      = 0u;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
        p_tcb->CyclesTotal      = 0u;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        p_tcb->CyclesTotalPrev  = 0u;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        p_tcb->CyclesStart      = OS_TS_GET();
#endif
#endif

#if (OS_CFG_TASK_Q_EN > 0u)
        p_msg_q                 = &p_tcb->MsgQ;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	3368      	adds	r3, #104	@ 0x68
 8006a3a:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax  = 0u;
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	819a      	strh	r2, [r3, #12]
#endif
        p_tcb                   = p_tcb->DbgNextPtr;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006a48:	617b      	str	r3, [r7, #20]
        CPU_CRITICAL_EXIT();
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f7f9 fbe0 	bl	8000210 <CPU_SR_Restore>
    while (p_tcb != (OS_TCB *)0) {                              /* Reset per-Task statistics                            */
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1d0      	bne.n	80069f8 <OSStatReset+0x3c>
    }
#endif

#if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
    CPU_CRITICAL_ENTER();
 8006a56:	2040      	movs	r0, #64	@ 0x40
 8006a58:	f7f9 fbcc 	bl	80001f4 <CPU_SR_Save>
 8006a5c:	60f8      	str	r0, [r7, #12]
    p_q = OSQDbgListPtr;
 8006a5e:	4b13      	ldr	r3, [pc, #76]	@ (8006aac <OSStatReset+0xf0>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f7f9 fbd3 	bl	8000210 <CPU_SR_Restore>
    while (p_q != (OS_Q *)0) {                                  /* Reset message queues statistics                      */
 8006a6a:	e00f      	b.n	8006a8c <OSStatReset+0xd0>
        CPU_CRITICAL_ENTER();
 8006a6c:	2040      	movs	r0, #64	@ 0x40
 8006a6e:	f7f9 fbc1 	bl	80001f4 <CPU_SR_Save>
 8006a72:	60f8      	str	r0, [r7, #12]
        p_msg_q                = &p_q->MsgQ;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	3320      	adds	r3, #32
 8006a78:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax = 0u;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	819a      	strh	r2, [r3, #12]
        p_q                    = p_q->DbgNextPtr;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	613b      	str	r3, [r7, #16]
        CPU_CRITICAL_EXIT();
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f7f9 fbc2 	bl	8000210 <CPU_SR_Restore>
    while (p_q != (OS_Q *)0) {                                  /* Reset message queues statistics                      */
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1ec      	bne.n	8006a6c <OSStatReset+0xb0>
    }
#endif


   *p_err = OS_ERR_NONE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	801a      	strh	r2, [r3, #0]
}
 8006a98:	bf00      	nop
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20001d02 	.word	0x20001d02
 8006aa4:	200019c8 	.word	0x200019c8
 8006aa8:	20001ddc 	.word	0x20001ddc
 8006aac:	200019e4 	.word	0x200019e4

08006ab0 <OS_StatTask>:
*              4) This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTask (void  *p_arg)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b092      	sub	sp, #72	@ 0x48
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) && (OS_CFG_ISR_STK_SIZE > 0u)
    CPU_STK     *p_stk;
    CPU_INT32U   free_stk;
    CPU_INT32U   size_stk;
#endif
    CPU_SR_ALLOC();
 8006ab8:	2300      	movs	r3, #0
 8006aba:	61bb      	str	r3, [r7, #24]


    (void)p_arg;                                                /* Prevent compiler warning for not using 'p_arg'       */

    while (OSStatTaskRdy != OS_TRUE) {
 8006abc:	e008      	b.n	8006ad0 <OS_StatTask+0x20>
        OSTimeDly(2u * OSCfg_StatTaskRate_Hz,                   /* Wait until statistic task is ready                   */
 8006abe:	4b85      	ldr	r3, [pc, #532]	@ (8006cd4 <OS_StatTask+0x224>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	f107 020e 	add.w	r2, r7, #14
 8006ac8:	2100      	movs	r1, #0
 8006aca:	4618      	mov	r0, r3
 8006acc:	f001 f93c 	bl	8007d48 <OSTimeDly>
    while (OSStatTaskRdy != OS_TRUE) {
 8006ad0:	4b81      	ldr	r3, [pc, #516]	@ (8006cd8 <OS_StatTask+0x228>)
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d1f2      	bne.n	8006abe <OS_StatTask+0xe>
                  OS_OPT_TIME_DLY,
                  &err);
    }
    OSStatReset(&err);                                          /* Reset statistics                                     */
 8006ad8:	f107 030e 	add.w	r3, r7, #14
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff ff6d 	bl	80069bc <OSStatReset>

    dly = (OS_TICK)0;                                           /* Compute statistic task sleep delay                   */
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 8006ae6:	4b7d      	ldr	r3, [pc, #500]	@ (8006cdc <OS_StatTask+0x22c>)
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	4b7a      	ldr	r3, [pc, #488]	@ (8006cd4 <OS_StatTask+0x224>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d906      	bls.n	8006b00 <OS_StatTask+0x50>
        dly = (OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 8006af2:	4b7a      	ldr	r3, [pc, #488]	@ (8006cdc <OS_StatTask+0x22c>)
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	4b77      	ldr	r3, [pc, #476]	@ (8006cd4 <OS_StatTask+0x224>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006afe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    if (dly == 0u) {
 8006b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d106      	bne.n	8006b14 <OS_StatTask+0x64>
        dly =  (OSCfg_TickRate_Hz / 10u);
 8006b06:	4b75      	ldr	r3, [pc, #468]	@ (8006cdc <OS_StatTask+0x22c>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a75      	ldr	r2, [pc, #468]	@ (8006ce0 <OS_StatTask+0x230>)
 8006b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b10:	08db      	lsrs	r3, r3, #3
 8006b12:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef  CPU_CFG_INT_DIS_MEAS_EN
        OSIntDisTimeMax = CPU_IntDisMeasMaxGet();
#endif
#endif

        CPU_CRITICAL_ENTER();                                   /* ---------------- OVERALL CPU USAGE ----------------- */
 8006b14:	2040      	movs	r0, #64	@ 0x40
 8006b16:	f7f9 fb6d 	bl	80001f4 <CPU_SR_Save>
 8006b1a:	61b8      	str	r0, [r7, #24]
        OSStatTaskCtrRun   = OSStatTaskCtr;                     /* Obtain the of the stat counter for the past .1 second*/
 8006b1c:	4b71      	ldr	r3, [pc, #452]	@ (8006ce4 <OS_StatTask+0x234>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a71      	ldr	r2, [pc, #452]	@ (8006ce8 <OS_StatTask+0x238>)
 8006b22:	6013      	str	r3, [r2, #0]
        OSStatTaskCtr      = 0u;                                /* Reset the stat counter for the next .1 second        */
 8006b24:	4b6f      	ldr	r3, [pc, #444]	@ (8006ce4 <OS_StatTask+0x234>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	601a      	str	r2, [r3, #0]
        CPU_CRITICAL_EXIT();
 8006b2a:	69b8      	ldr	r0, [r7, #24]
 8006b2c:	f7f9 fb70 	bl	8000210 <CPU_SR_Restore>

        if (OSStatTaskCtrMax > OSStatTaskCtrRun) {              /* Compute CPU Usage with best resolution               */
 8006b30:	4b6e      	ldr	r3, [pc, #440]	@ (8006cec <OS_StatTask+0x23c>)
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	4b6c      	ldr	r3, [pc, #432]	@ (8006ce8 <OS_StatTask+0x238>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d94f      	bls.n	8006bdc <OS_StatTask+0x12c>
            if (OSStatTaskCtrMax < 400000u) {                   /* 1 to       400,000                                   */
 8006b3c:	4b6b      	ldr	r3, [pc, #428]	@ (8006cec <OS_StatTask+0x23c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a6b      	ldr	r2, [pc, #428]	@ (8006cf0 <OS_StatTask+0x240>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d805      	bhi.n	8006b52 <OS_StatTask+0xa2>
                ctr_mult = 10000u;
 8006b46:	f242 7310 	movw	r3, #10000	@ 0x2710
 8006b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  =     1u;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b50:	e024      	b.n	8006b9c <OS_StatTask+0xec>
            } else if (OSStatTaskCtrMax <   4000000u) {         /* 400,000 to     4,000,000                             */
 8006b52:	4b66      	ldr	r3, [pc, #408]	@ (8006cec <OS_StatTask+0x23c>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a67      	ldr	r2, [pc, #412]	@ (8006cf4 <OS_StatTask+0x244>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d805      	bhi.n	8006b68 <OS_StatTask+0xb8>
                ctr_mult =  1000u;
 8006b5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  =    10u;
 8006b62:	230a      	movs	r3, #10
 8006b64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b66:	e019      	b.n	8006b9c <OS_StatTask+0xec>
            } else if (OSStatTaskCtrMax <  40000000u) {         /* 4,000,000 to    40,000,000                           */
 8006b68:	4b60      	ldr	r3, [pc, #384]	@ (8006cec <OS_StatTask+0x23c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a62      	ldr	r2, [pc, #392]	@ (8006cf8 <OS_StatTask+0x248>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d204      	bcs.n	8006b7c <OS_StatTask+0xcc>
                ctr_mult =   100u;
 8006b72:	2364      	movs	r3, #100	@ 0x64
 8006b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  =   100u;
 8006b76:	2364      	movs	r3, #100	@ 0x64
 8006b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b7a:	e00f      	b.n	8006b9c <OS_StatTask+0xec>
            } else if (OSStatTaskCtrMax < 400000000u) {         /* 40,000,000 to   400,000,000                          */
 8006b7c:	4b5b      	ldr	r3, [pc, #364]	@ (8006cec <OS_StatTask+0x23c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a5e      	ldr	r2, [pc, #376]	@ (8006cfc <OS_StatTask+0x24c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d805      	bhi.n	8006b92 <OS_StatTask+0xe2>
                ctr_mult =    10u;
 8006b86:	230a      	movs	r3, #10
 8006b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  =  1000u;
 8006b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b90:	e004      	b.n	8006b9c <OS_StatTask+0xec>
            } else {                                            /* 400,000,000 and up                                   */
                ctr_mult =     1u;
 8006b92:	2301      	movs	r3, #1
 8006b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  = 10000u;
 8006b96:	f242 7310 	movw	r3, #10000	@ 0x2710
 8006b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
            ctr_max            = OSStatTaskCtrMax / ctr_div;
 8006b9c:	4b53      	ldr	r3, [pc, #332]	@ (8006cec <OS_StatTask+0x23c>)
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba6:	617b      	str	r3, [r7, #20]
            OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ((ctr_mult * OSStatTaskCtrRun) / ctr_max));
 8006ba8:	4b4f      	ldr	r3, [pc, #316]	@ (8006ce8 <OS_StatTask+0x238>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bae:	fb03 f202 	mul.w	r2, r3, r2
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	f5c3 531c 	rsb	r3, r3, #9984	@ 0x2700
 8006bbe:	3310      	adds	r3, #16
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	4b4f      	ldr	r3, [pc, #316]	@ (8006d00 <OS_StatTask+0x250>)
 8006bc4:	801a      	strh	r2, [r3, #0]
            if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
 8006bc6:	4b4f      	ldr	r3, [pc, #316]	@ (8006d04 <OS_StatTask+0x254>)
 8006bc8:	881a      	ldrh	r2, [r3, #0]
 8006bca:	4b4d      	ldr	r3, [pc, #308]	@ (8006d00 <OS_StatTask+0x250>)
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d207      	bcs.n	8006be2 <OS_StatTask+0x132>
                OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
 8006bd2:	4b4b      	ldr	r3, [pc, #300]	@ (8006d00 <OS_StatTask+0x250>)
 8006bd4:	881a      	ldrh	r2, [r3, #0]
 8006bd6:	4b4b      	ldr	r3, [pc, #300]	@ (8006d04 <OS_StatTask+0x254>)
 8006bd8:	801a      	strh	r2, [r3, #0]
 8006bda:	e002      	b.n	8006be2 <OS_StatTask+0x132>
            }
        } else {
            OSStatTaskCPUUsage = 0u;
 8006bdc:	4b48      	ldr	r3, [pc, #288]	@ (8006d00 <OS_StatTask+0x250>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	801a      	strh	r2, [r3, #0]
        }

        OSStatTaskHook();                                       /* Invoke user definable hook                           */
 8006be2:	f7fd fe63 	bl	80048ac <OSStatTaskHook>


#if (OS_CFG_DBG_EN > 0u)
#if (OS_CFG_TASK_PROFILE_EN > 0u)
        cycles_total = 0u;
 8006be6:	2300      	movs	r3, #0
 8006be8:	643b      	str	r3, [r7, #64]	@ 0x40

        CPU_CRITICAL_ENTER();
 8006bea:	2040      	movs	r0, #64	@ 0x40
 8006bec:	f7f9 fb02 	bl	80001f4 <CPU_SR_Save>
 8006bf0:	61b8      	str	r0, [r7, #24]
        p_tcb = OSTaskDbgListPtr;
 8006bf2:	4b45      	ldr	r3, [pc, #276]	@ (8006d08 <OS_StatTask+0x258>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	633b      	str	r3, [r7, #48]	@ 0x30
        CPU_CRITICAL_EXIT();
 8006bf8:	69b8      	ldr	r0, [r7, #24]
 8006bfa:	f7f9 fb09 	bl	8000210 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {                          /* ---------------- TOTAL CYCLES COUNT ---------------- */
 8006bfe:	e021      	b.n	8006c44 <OS_StatTask+0x194>
            CPU_CRITICAL_ENTER();
 8006c00:	2040      	movs	r0, #64	@ 0x40
 8006c02:	f7f9 faf7 	bl	80001f4 <CPU_SR_Save>
 8006c06:	61b8      	str	r0, [r7, #24]
            p_tcb->CyclesTotalPrev = p_tcb->CyclesTotal;        /* Save accumulated # cycles into a temp variable       */
 8006c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c10:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            p_tcb->CyclesTotal     = 0u;                        /* Reset total cycles for task for next run             */
 8006c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c16:	2200      	movs	r2, #0
 8006c18:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
            CPU_CRITICAL_EXIT();
 8006c1c:	69b8      	ldr	r0, [r7, #24]
 8006c1e:	f7f9 faf7 	bl	8000210 <CPU_SR_Restore>

            cycles_total          += p_tcb->CyclesTotalPrev;    /* Perform sum of all task # cycles                     */
 8006c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006c28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c2a:	4413      	add	r3, r2
 8006c2c:	643b      	str	r3, [r7, #64]	@ 0x40

            CPU_CRITICAL_ENTER();
 8006c2e:	2040      	movs	r0, #64	@ 0x40
 8006c30:	f7f9 fae0 	bl	80001f4 <CPU_SR_Save>
 8006c34:	61b8      	str	r0, [r7, #24]
            p_tcb                  = p_tcb->DbgNextPtr;
 8006c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006c3c:	633b      	str	r3, [r7, #48]	@ 0x30
            CPU_CRITICAL_EXIT();
 8006c3e:	69b8      	ldr	r0, [r7, #24]
 8006c40:	f7f9 fae6 	bl	8000210 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {                          /* ---------------- TOTAL CYCLES COUNT ---------------- */
 8006c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1da      	bne.n	8006c00 <OS_StatTask+0x150>
#endif


#if (OS_CFG_TASK_PROFILE_EN > 0u)
                                                                /* ------------ INDIVIDUAL TASK CPU USAGE ------------- */
        if (cycles_total > 0u) {                                /* 'cycles_total' scaling ...                           */
 8006c4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d031      	beq.n	8006cb4 <OS_StatTask+0x204>
            if (cycles_total < 400000u) {                       /* 1 to       400,000                                   */
 8006c50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c52:	4a27      	ldr	r2, [pc, #156]	@ (8006cf0 <OS_StatTask+0x240>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d805      	bhi.n	8006c64 <OS_StatTask+0x1b4>
                cycles_mult = 10000u;
 8006c58:	f242 7310 	movw	r3, #10000	@ 0x2710
 8006c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
                cycles_div  =     1u;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c62:	e021      	b.n	8006ca8 <OS_StatTask+0x1f8>
            } else if (cycles_total <   4000000u) {             /* 400,000 to     4,000,000                             */
 8006c64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c66:	4a23      	ldr	r2, [pc, #140]	@ (8006cf4 <OS_StatTask+0x244>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d805      	bhi.n	8006c78 <OS_StatTask+0x1c8>
                cycles_mult =  1000u;
 8006c6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c70:	63bb      	str	r3, [r7, #56]	@ 0x38
                cycles_div  =    10u;
 8006c72:	230a      	movs	r3, #10
 8006c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c76:	e017      	b.n	8006ca8 <OS_StatTask+0x1f8>
            } else if (cycles_total <  40000000u) {             /* 4,000,000 to    40,000,000                           */
 8006c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c7a:	4a1f      	ldr	r2, [pc, #124]	@ (8006cf8 <OS_StatTask+0x248>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d204      	bcs.n	8006c8a <OS_StatTask+0x1da>
                cycles_mult =   100u;
 8006c80:	2364      	movs	r3, #100	@ 0x64
 8006c82:	63bb      	str	r3, [r7, #56]	@ 0x38
                cycles_div  =   100u;
 8006c84:	2364      	movs	r3, #100	@ 0x64
 8006c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c88:	e00e      	b.n	8006ca8 <OS_StatTask+0x1f8>
            } else if (cycles_total < 400000000u) {             /* 40,000,000 to   400,000,000                          */
 8006c8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8006cfc <OS_StatTask+0x24c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d805      	bhi.n	8006c9e <OS_StatTask+0x1ee>
                cycles_mult =    10u;
 8006c92:	230a      	movs	r3, #10
 8006c94:	63bb      	str	r3, [r7, #56]	@ 0x38
                cycles_div  =  1000u;
 8006c96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c9c:	e004      	b.n	8006ca8 <OS_StatTask+0x1f8>
            } else {                                            /* 400,000,000 and up                                   */
                cycles_mult =     1u;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
                cycles_div  = 10000u;
 8006ca2:	f242 7310 	movw	r3, #10000	@ 0x2710
 8006ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            cycles_max  = cycles_total / cycles_div;
 8006ca8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb2:	e003      	b.n	8006cbc <OS_StatTask+0x20c>
        } else {
            cycles_mult = 0u;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
            cycles_max  = 1u;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
#endif
        CPU_CRITICAL_ENTER();
 8006cbc:	2040      	movs	r0, #64	@ 0x40
 8006cbe:	f7f9 fa99 	bl	80001f4 <CPU_SR_Save>
 8006cc2:	61b8      	str	r0, [r7, #24]
        p_tcb = OSTaskDbgListPtr;
 8006cc4:	4b10      	ldr	r3, [pc, #64]	@ (8006d08 <OS_StatTask+0x258>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	633b      	str	r3, [r7, #48]	@ 0x30
        CPU_CRITICAL_EXIT();
 8006cca:	69b8      	ldr	r0, [r7, #24]
 8006ccc:	f7f9 faa0 	bl	8000210 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {
 8006cd0:	e058      	b.n	8006d84 <OS_StatTask+0x2d4>
 8006cd2:	bf00      	nop
 8006cd4:	080086c4 	.word	0x080086c4
 8006cd8:	20001d10 	.word	0x20001d10
 8006cdc:	080086d8 	.word	0x080086d8
 8006ce0:	cccccccd 	.word	0xcccccccd
 8006ce4:	20001d04 	.word	0x20001d04
 8006ce8:	20001d0c 	.word	0x20001d0c
 8006cec:	20001d08 	.word	0x20001d08
 8006cf0:	00061a7f 	.word	0x00061a7f
 8006cf4:	003d08ff 	.word	0x003d08ff
 8006cf8:	02625a00 	.word	0x02625a00
 8006cfc:	17d783ff 	.word	0x17d783ff
 8006d00:	20001d00 	.word	0x20001d00
 8006d04:	20001d02 	.word	0x20001d02
 8006d08:	20001ddc 	.word	0x20001ddc
#if (OS_CFG_TASK_PROFILE_EN > 0u)                               /* Compute execution time of each task                  */
            usage = (OS_CPU_USAGE)(cycles_mult * p_tcb->CyclesTotalPrev / cycles_max);
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006d12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d14:	fb03 f202 	mul.w	r2, r3, r2
 8006d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            if (usage > 10000u) {
 8006d22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d26:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d903      	bls.n	8006d36 <OS_StatTask+0x286>
                usage = 10000u;
 8006d2e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8006d32:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            }
            p_tcb->CPUUsage = usage;
 8006d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d38:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8006d3c:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
            if (p_tcb->CPUUsageMax < usage) {                   /* Detect peak CPU usage                                */
 8006d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d42:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 8006d46:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d904      	bls.n	8006d58 <OS_StatTask+0x2a8>
                p_tcb->CPUUsageMax = usage;
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8006d54:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
            }
#endif

#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u)
            OSTaskStkChk( p_tcb,                                /* Compute stack usage of active tasks only             */
 8006d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5a:	f103 01b4 	add.w	r1, r3, #180	@ 0xb4
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d60:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8006d64:	f107 030e 	add.w	r3, r7, #14
 8006d68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d6a:	f000 faef 	bl	800734c <OSTaskStkChk>
                         &p_tcb->StkFree,
                         &p_tcb->StkUsed,
                         &err);
#endif

            CPU_CRITICAL_ENTER();
 8006d6e:	2040      	movs	r0, #64	@ 0x40
 8006d70:	f7f9 fa40 	bl	80001f4 <CPU_SR_Save>
 8006d74:	61b8      	str	r0, [r7, #24]
            p_tcb = p_tcb->DbgNextPtr;
 8006d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d78:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006d7c:	633b      	str	r3, [r7, #48]	@ 0x30
            CPU_CRITICAL_EXIT();
 8006d7e:	69b8      	ldr	r0, [r7, #24]
 8006d80:	f7f9 fa46 	bl	8000210 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {
 8006d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1c0      	bne.n	8006d0c <OS_StatTask+0x25c>
        }
#endif

                                                                /*------------------ Check ISR Stack -------------------*/
#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) && (OS_CFG_ISR_STK_SIZE > 0u)
        free_stk  = 0u;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	61fb      	str	r3, [r7, #28]
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
        p_stk     = OSCfg_ISRStkBasePtr;                        /*   Start at the lowest memory and go up               */
 8006d8e:	4b19      	ldr	r3, [pc, #100]	@ (8006df4 <OS_StatTask+0x344>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	623b      	str	r3, [r7, #32]
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
        p_stk    += OS_CFG_TASK_STK_REDZONE_DEPTH;
        size_stk  = OSCfg_ISRStkSize - OS_CFG_TASK_STK_REDZONE_DEPTH;
#else
        size_stk  = OSCfg_ISRStkSize;
 8006d94:	4b18      	ldr	r3, [pc, #96]	@ (8006df8 <OS_StatTask+0x348>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	613b      	str	r3, [r7, #16]
#endif
        while ((*p_stk == 0u) && (free_stk < size_stk)) {       /*   Compute the number of zero entries on the stk      */
 8006d9a:	e005      	b.n	8006da8 <OS_StatTask+0x2f8>
            p_stk++;
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	623b      	str	r3, [r7, #32]
            free_stk++;
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	3301      	adds	r3, #1
 8006da6:	61fb      	str	r3, [r7, #28]
        while ((*p_stk == 0u) && (free_stk < size_stk)) {       /*   Compute the number of zero entries on the stk      */
 8006da8:	6a3b      	ldr	r3, [r7, #32]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d103      	bne.n	8006db8 <OS_StatTask+0x308>
 8006db0:	69fa      	ldr	r2, [r7, #28]
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d3f1      	bcc.n	8006d9c <OS_StatTask+0x2ec>
        while ((*p_stk == 0u) && (free_stk < size_stk)) {       /*   Compute the number of zero entries on the stk      */
            free_stk++;
            p_stk--;
        }
#endif
        OSISRStkFree = free_stk;
 8006db8:	4a10      	ldr	r2, [pc, #64]	@ (8006dfc <OS_StatTask+0x34c>)
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	6013      	str	r3, [r2, #0]
        OSISRStkUsed = OSCfg_ISRStkSize - free_stk;
 8006dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8006df8 <OS_StatTask+0x348>)
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8006e00 <OS_StatTask+0x350>)
 8006dc8:	6013      	str	r3, [r2, #0]
#endif

        if (OSStatResetFlag == OS_TRUE) {                       /* Check if need to reset statistics                    */
 8006dca:	4b0e      	ldr	r3, [pc, #56]	@ (8006e04 <OS_StatTask+0x354>)
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d107      	bne.n	8006de2 <OS_StatTask+0x332>
            OSStatResetFlag  = OS_FALSE;
 8006dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006e04 <OS_StatTask+0x354>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	701a      	strb	r2, [r3, #0]
            OSStatReset(&err);
 8006dd8:	f107 030e 	add.w	r3, r7, #14
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff fded 	bl	80069bc <OSStatReset>
        if (OSStatTaskTimeMax < OSStatTaskTime) {
            OSStatTaskTimeMax = OSStatTaskTime;
        }
#endif

        OSTimeDly(dly,
 8006de2:	f107 030e 	add.w	r3, r7, #14
 8006de6:	461a      	mov	r2, r3
 8006de8:	2100      	movs	r1, #0
 8006dea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006dec:	f000 ffac 	bl	8007d48 <OSTimeDly>
        CPU_CRITICAL_ENTER();                                   /* ---------------- OVERALL CPU USAGE ----------------- */
 8006df0:	e690      	b.n	8006b14 <OS_StatTask+0x64>
 8006df2:	bf00      	nop
 8006df4:	080086b0 	.word	0x080086b0
 8006df8:	080086b4 	.word	0x080086b4
 8006dfc:	200019b0 	.word	0x200019b0
 8006e00:	200019b4 	.word	0x200019b4
 8006e04:	20001cfe 	.word	0x20001cfe

08006e08 <OS_StatTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTaskInit (OS_ERR  *p_err)
{
 8006e08:	b590      	push	{r4, r7, lr}
 8006e0a:	b08d      	sub	sp, #52	@ 0x34
 8006e0c:	af0a      	add	r7, sp, #40	@ 0x28
 8006e0e:	6078      	str	r0, [r7, #4]
    OSStatTaskCtr    = 0u;
 8006e10:	4b28      	ldr	r3, [pc, #160]	@ (8006eb4 <OS_StatTaskInit+0xac>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrRun = 0u;
 8006e16:	4b28      	ldr	r3, [pc, #160]	@ (8006eb8 <OS_StatTaskInit+0xb0>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrMax = 0u;
 8006e1c:	4b27      	ldr	r3, [pc, #156]	@ (8006ebc <OS_StatTaskInit+0xb4>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	601a      	str	r2, [r3, #0]
    OSStatTaskRdy    = OS_STATE_NOT_RDY;                        /* Statistic task is not ready                          */
 8006e22:	4b27      	ldr	r3, [pc, #156]	@ (8006ec0 <OS_StatTaskInit+0xb8>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	701a      	strb	r2, [r3, #0]
    OSStatResetFlag  = OS_FALSE;
 8006e28:	4b26      	ldr	r3, [pc, #152]	@ (8006ec4 <OS_StatTaskInit+0xbc>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	701a      	strb	r2, [r3, #0]

#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) && (OS_CFG_ISR_STK_SIZE > 0u)
    OSISRStkFree     = 0u;
 8006e2e:	4b26      	ldr	r3, [pc, #152]	@ (8006ec8 <OS_StatTaskInit+0xc0>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	601a      	str	r2, [r3, #0]
    OSISRStkUsed     = 0u;
 8006e34:	4b25      	ldr	r3, [pc, #148]	@ (8006ecc <OS_StatTaskInit+0xc4>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	601a      	str	r2, [r3, #0]
#endif
                                                                /* --------------- CREATE THE STAT TASK --------------- */
    if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
 8006e3a:	4b25      	ldr	r3, [pc, #148]	@ (8006ed0 <OS_StatTaskInit+0xc8>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d104      	bne.n	8006e4c <OS_StatTaskInit+0x44>
       *p_err = OS_ERR_STAT_STK_INVALID;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f646 622b 	movw	r2, #28203	@ 0x6e2b
 8006e48:	801a      	strh	r2, [r3, #0]
        return;
 8006e4a:	e02f      	b.n	8006eac <OS_StatTaskInit+0xa4>
    }

    if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
 8006e4c:	4b21      	ldr	r3, [pc, #132]	@ (8006ed4 <OS_StatTaskInit+0xcc>)
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	4b21      	ldr	r3, [pc, #132]	@ (8006ed8 <OS_StatTaskInit+0xd0>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d204      	bcs.n	8006e62 <OS_StatTaskInit+0x5a>
       *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f646 622c 	movw	r2, #28204	@ 0x6e2c
 8006e5e:	801a      	strh	r2, [r3, #0]
        return;
 8006e60:	e024      	b.n	8006eac <OS_StatTaskInit+0xa4>
    }

    if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 8006e62:	4b1e      	ldr	r3, [pc, #120]	@ (8006edc <OS_StatTaskInit+0xd4>)
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e68:	d904      	bls.n	8006e74 <OS_StatTaskInit+0x6c>
       *p_err = OS_ERR_STAT_PRIO_INVALID;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f646 622a 	movw	r2, #28202	@ 0x6e2a
 8006e70:	801a      	strh	r2, [r3, #0]
        return;
 8006e72:	e01b      	b.n	8006eac <OS_StatTaskInit+0xa4>
    }

    OSTaskCreate(&OSStatTaskTCB,
 8006e74:	4b19      	ldr	r3, [pc, #100]	@ (8006edc <OS_StatTaskInit+0xd4>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	4a15      	ldr	r2, [pc, #84]	@ (8006ed0 <OS_StatTaskInit+0xc8>)
 8006e7a:	6812      	ldr	r2, [r2, #0]
 8006e7c:	4918      	ldr	r1, [pc, #96]	@ (8006ee0 <OS_StatTaskInit+0xd8>)
 8006e7e:	6809      	ldr	r1, [r1, #0]
 8006e80:	4814      	ldr	r0, [pc, #80]	@ (8006ed4 <OS_StatTaskInit+0xcc>)
 8006e82:	6800      	ldr	r0, [r0, #0]
 8006e84:	687c      	ldr	r4, [r7, #4]
 8006e86:	9408      	str	r4, [sp, #32]
 8006e88:	2403      	movs	r4, #3
 8006e8a:	9407      	str	r4, [sp, #28]
 8006e8c:	2400      	movs	r4, #0
 8006e8e:	9406      	str	r4, [sp, #24]
 8006e90:	2400      	movs	r4, #0
 8006e92:	9405      	str	r4, [sp, #20]
 8006e94:	2400      	movs	r4, #0
 8006e96:	9404      	str	r4, [sp, #16]
 8006e98:	9003      	str	r0, [sp, #12]
 8006e9a:	9102      	str	r1, [sp, #8]
 8006e9c:	9201      	str	r2, [sp, #4]
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4a10      	ldr	r2, [pc, #64]	@ (8006ee4 <OS_StatTaskInit+0xdc>)
 8006ea4:	4910      	ldr	r1, [pc, #64]	@ (8006ee8 <OS_StatTaskInit+0xe0>)
 8006ea6:	4811      	ldr	r0, [pc, #68]	@ (8006eec <OS_StatTaskInit+0xe4>)
 8006ea8:	f000 f822 	bl	8006ef0 <OSTaskCreate>
                  0u,
                  0u,
                 (void       *)0,
                 (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                  p_err);
}
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd90      	pop	{r4, r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	20001d04 	.word	0x20001d04
 8006eb8:	20001d0c 	.word	0x20001d0c
 8006ebc:	20001d08 	.word	0x20001d08
 8006ec0:	20001d10 	.word	0x20001d10
 8006ec4:	20001cfe 	.word	0x20001cfe
 8006ec8:	200019b0 	.word	0x200019b0
 8006ecc:	200019b4 	.word	0x200019b4
 8006ed0:	080086c8 	.word	0x080086c8
 8006ed4:	080086d0 	.word	0x080086d0
 8006ed8:	080086d4 	.word	0x080086d4
 8006edc:	080086c0 	.word	0x080086c0
 8006ee0:	080086cc 	.word	0x080086cc
 8006ee4:	08006ab1 	.word	0x08006ab1
 8006ee8:	0800863c 	.word	0x0800863c
 8006eec:	20001d14 	.word	0x20001d14

08006ef0 <OSTaskCreate>:
                    OS_MSG_QTY     q_size,
                    OS_TICK        time_quanta,
                    void          *p_ext,
                    OS_OPT         opt,
                    OS_ERR        *p_err)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b08c      	sub	sp, #48	@ 0x30
 8006ef4:	af02      	add	r7, sp, #8
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	603b      	str	r3, [r7, #0]
    OS_TLS_ID      id;
#endif

    CPU_STK       *p_sp;
    CPU_STK       *p_stk_limit;
    CPU_SR_ALLOC();
 8006efe:	2300      	movs	r3, #0
 8006f00:	61bb      	str	r3, [r7, #24]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* --------- CANNOT CREATE A TASK FROM AN ISR --------- */
 8006f02:	4b86      	ldr	r3, [pc, #536]	@ (800711c <OSTaskCreate+0x22c>)
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d004      	beq.n	8006f14 <OSTaskCreate+0x24>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_TASK_CREATE_ISR;
 8006f0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f0c:	f247 124a 	movw	r2, #29002	@ 0x714a
 8006f10:	801a      	strh	r2, [r3, #0]
        return;
 8006f12:	e0ff      	b.n	8007114 <OSTaskCreate+0x224>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)                                    /* ---------------- VALIDATE ARGUMENTS ---------------- */
    if (p_tcb == (OS_TCB *)0) {                                 /* User must supply a valid OS_TCB                      */
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d104      	bne.n	8006f24 <OSTaskCreate+0x34>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_TCB_INVALID;
 8006f1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f1c:	f247 12ad 	movw	r2, #29101	@ 0x71ad
 8006f20:	801a      	strh	r2, [r3, #0]
        return;
 8006f22:	e0f7      	b.n	8007114 <OSTaskCreate+0x224>
    }
    if (p_task == (OS_TASK_PTR)0u) {                            /* User must supply a valid task                        */
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d104      	bne.n	8006f34 <OSTaskCreate+0x44>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_TASK_INVALID;
 8006f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f2c:	f247 124f 	movw	r2, #29007	@ 0x714f
 8006f30:	801a      	strh	r2, [r3, #0]
        return;
 8006f32:	e0ef      	b.n	8007114 <OSTaskCreate+0x224>
    }
    if (p_stk_base == (CPU_STK *)0) {                           /* User must supply a valid stack base address          */
 8006f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d104      	bne.n	8006f44 <OSTaskCreate+0x54>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_STK_INVALID;
 8006f3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f3c:	f646 622f 	movw	r2, #28207	@ 0x6e2f
 8006f40:	801a      	strh	r2, [r3, #0]
        return;
 8006f42:	e0e7      	b.n	8007114 <OSTaskCreate+0x224>
    }
    if (stk_size < OSCfg_StkSizeMin) {                          /* User must supply a valid minimum stack size          */
 8006f44:	4b76      	ldr	r3, [pc, #472]	@ (8007120 <OSTaskCreate+0x230>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d204      	bcs.n	8006f58 <OSTaskCreate+0x68>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_STK_SIZE_INVALID;
 8006f4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f50:	f646 6230 	movw	r2, #28208	@ 0x6e30
 8006f54:	801a      	strh	r2, [r3, #0]
        return;
 8006f56:	e0dd      	b.n	8007114 <OSTaskCreate+0x224>
    }
    if (stk_limit >= stk_size) {                                /* User must supply a valid stack limit                 */
 8006f58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d304      	bcc.n	8006f6a <OSTaskCreate+0x7a>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_STK_LIMIT_INVALID;
 8006f60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f62:	f646 6231 	movw	r2, #28209	@ 0x6e31
 8006f66:	801a      	strh	r2, [r3, #0]
        return;
 8006f68:	e0d4      	b.n	8007114 <OSTaskCreate+0x224>
    }
    if ((prio  > (OS_CFG_PRIO_MAX - 2u)) &&                     /* Priority must be within 0 and OS_CFG_PRIO_MAX-1      */
 8006f6a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006f6e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f70:	d908      	bls.n	8006f84 <OSTaskCreate+0x94>
 8006f72:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006f76:	2b3f      	cmp	r3, #63	@ 0x3f
 8006f78:	d004      	beq.n	8006f84 <OSTaskCreate+0x94>
        (prio != (OS_CFG_PRIO_MAX - 1u))) {
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_PRIO_INVALID;
 8006f7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f7c:	f246 2273 	movw	r2, #25203	@ 0x6273
 8006f80:	801a      	strh	r2, [r3, #0]
        return;
 8006f82:	e0c7      	b.n	8007114 <OSTaskCreate+0x224>
    }
#endif

    if (prio == (OS_CFG_PRIO_MAX - 1u)) {
 8006f84:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006f88:	2b3f      	cmp	r3, #63	@ 0x3f
 8006f8a:	d108      	bne.n	8006f9e <OSTaskCreate+0xae>
#if (OS_CFG_TASK_IDLE_EN > 0u)
        if (p_tcb != &OSIdleTaskTCB) {
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4a65      	ldr	r2, [pc, #404]	@ (8007124 <OSTaskCreate+0x234>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d004      	beq.n	8006f9e <OSTaskCreate+0xae>
            OS_TRACE_TASK_CREATE_FAILED(p_tcb);
           *p_err = OS_ERR_PRIO_INVALID;                        /* Not allowed to use same priority as idle task        */
 8006f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f96:	f246 2273 	movw	r2, #25203	@ 0x6273
 8006f9a:	801a      	strh	r2, [r3, #0]
            return;
 8006f9c:	e0ba      	b.n	8007114 <OSTaskCreate+0x224>
       *p_err = OS_ERR_PRIO_INVALID;                            /* Not allowed to use same priority as idle task        */
        return;
#endif
    }

    OS_TaskInitTCB(p_tcb);                                      /* Initialize the TCB to default values                 */
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f000 fad8 	bl	8007554 <OS_TaskInitTCB>

   *p_err = OS_ERR_NONE;
 8006fa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	801a      	strh	r2, [r3, #0]
                                                                /* -------------- CLEAR THE TASK'S STACK -------------- */
    if (((opt & OS_OPT_TASK_STK_CHK) != 0u) ||                  /* See if stack checking has been enabled               */
 8006faa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d105      	bne.n	8006fc2 <OSTaskCreate+0xd2>
        ((opt & OS_OPT_TASK_STK_CLR) != 0u)) {                  /* See if stack needs to be cleared                     */
 8006fb6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006fba:	f003 0302 	and.w	r3, r3, #2
    if (((opt & OS_OPT_TASK_STK_CHK) != 0u) ||                  /* See if stack checking has been enabled               */
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d017      	beq.n	8006ff2 <OSTaskCreate+0x102>
        if ((opt & OS_OPT_TASK_STK_CLR) != 0u) {
 8006fc2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d011      	beq.n	8006ff2 <OSTaskCreate+0x102>
            p_sp = p_stk_base;
 8006fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd0:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {                   /* Stack grows from HIGH to LOW memory                  */
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fd6:	e008      	b.n	8006fea <OSTaskCreate+0xfa>
               *p_sp = 0u;                                      /* Clear from bottom of stack and up!                   */
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	601a      	str	r2, [r3, #0]
                p_sp++;
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {                   /* Stack grows from HIGH to LOW memory                  */
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d3f2      	bcc.n	8006fd8 <OSTaskCreate+0xe8>
            }
        }
    }
                                                                /* ------ INITIALIZE THE STACK FRAME OF THE TASK ------ */
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    p_stk_limit = p_stk_base + stk_limit;
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ff8:	4413      	add	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]
#else
    p_stk_limit = p_stk_base + (stk_size - 1u) - stk_limit;
#endif

    p_sp = OSTaskStkInit(p_task,
 8006ffc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7fd fc91 	bl	8004934 <OSTaskStkInit>
 8007012:	61f8      	str	r0, [r7, #28]
                         p_stk_limit,
                         stk_size,
                         opt);

#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)             /* Check if we overflown the stack during init          */
    if (p_sp < p_stk_base) {
 8007014:	69fa      	ldr	r2, [r7, #28]
 8007016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007018:	429a      	cmp	r2, r3
 800701a:	d204      	bcs.n	8007026 <OSTaskCreate+0x136>
       *p_err = OS_ERR_STK_OVF;
 800701c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800701e:	f646 6232 	movw	r2, #28210	@ 0x6e32
 8007022:	801a      	strh	r2, [r3, #0]
        return;
 8007024:	e076      	b.n	8007114 <OSTaskCreate+0x224>
    OS_TaskStkRedzoneInit(p_stk_base, stk_size);
#endif

                                                                /* ------------ INITIALIZE THE TCB FIELDS ------------- */
#if (OS_CFG_DBG_EN > 0u)
    p_tcb->TaskEntryAddr = p_task;                              /* Save task entry point address                        */
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	625a      	str	r2, [r3, #36]	@ 0x24
    p_tcb->TaskEntryArg  = p_arg;                               /* Save task entry argument                             */
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

#if (OS_CFG_DBG_EN > 0u)
    p_tcb->NamePtr       = p_name;                              /* Save task name                                       */
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	60da      	str	r2, [r3, #12]
#else
    (void)p_name;
#endif

    p_tcb->Prio          = prio;                                /* Save the task's priority                             */
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800703e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

#if (OS_CFG_MUTEX_EN > 0u)
    p_tcb->BasePrio      = prio;                                /* Set the base priority                                */
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8007048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
#endif

    p_tcb->StkPtr        = p_sp;                                /* Save the new top-of-stack pointer                    */
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	69fa      	ldr	r2, [r7, #28]
 8007050:	601a      	str	r2, [r3, #0]
    p_tcb->StkLimitPtr   = p_stk_limit;                         /* Save the stack limit pointer                         */
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	609a      	str	r2, [r3, #8]

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
    p_tcb->TimeQuanta    = time_quanta;                         /* Save the #ticks for time slice (0 means not sliced)  */
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800705c:	659a      	str	r2, [r3, #88]	@ 0x58
    if (time_quanta == 0u) {
 800705e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007060:	2b00      	cmp	r3, #0
 8007062:	d104      	bne.n	800706e <OSTaskCreate+0x17e>
        p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta;
 8007064:	4b30      	ldr	r3, [pc, #192]	@ (8007128 <OSTaskCreate+0x238>)
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800706c:	e002      	b.n	8007074 <OSTaskCreate+0x184>
    } else {
        p_tcb->TimeQuantaCtr = time_quanta;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007072:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
#else
    (void)time_quanta;
#endif

    p_tcb->ExtPtr        = p_ext;                               /* Save pointer to TCB extension                        */
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007078:	605a      	str	r2, [r3, #4]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) || (OS_CFG_TASK_STK_REDZONE_EN > 0u))
    p_tcb->StkBasePtr    = p_stk_base;                          /* Save pointer to the base address of the stack        */
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800707e:	621a      	str	r2, [r3, #32]
    p_tcb->StkSize       = stk_size;                            /* Save the stack size (in number of CPU_STK elements)  */
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007084:	645a      	str	r2, [r3, #68]	@ 0x44
#endif
    p_tcb->Opt           = opt;                                 /* Save task options                                    */
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800708c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

#if (OS_CFG_TASK_REG_TBL_SIZE > 0u)
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 8007090:	2300      	movs	r3, #0
 8007092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007096:	e00b      	b.n	80070b0 <OSTaskCreate+0x1c0>
        p_tcb->RegTbl[reg_nbr] = 0u;
 8007098:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	3220      	adds	r2, #32
 80070a0:	2100      	movs	r1, #0
 80070a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 80070a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070aa:	3301      	adds	r3, #1
 80070ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0ef      	beq.n	8007098 <OSTaskCreate+0x1a8>
    }
#endif

#if (OS_CFG_TASK_Q_EN > 0u)
    OS_MsgQInit(&p_tcb->MsgQ,                                   /* Initialize the task's message queue                  */
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	3368      	adds	r3, #104	@ 0x68
 80070bc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80070c0:	4611      	mov	r1, r2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7ff f9d0 	bl	8006468 <OS_MsgQInit>
                q_size);
#else
    (void)q_size;
#endif

    OSTaskCreateHook(p_tcb);                                    /* Call user defined hook                               */
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f7fd fbfd 	bl	80048c8 <OSTaskCreateHook>
        p_tcb->TLS_Tbl[id] = 0u;
    }
    OS_TLS_TaskCreate(p_tcb);                                   /* Call TLS hook                                        */
#endif
                                                                /* -------------- ADD TASK TO READY LIST -------------- */
    CPU_CRITICAL_ENTER();
 80070ce:	2040      	movs	r0, #64	@ 0x40
 80070d0:	f7f9 f890 	bl	80001f4 <CPU_SR_Save>
 80070d4:	61b8      	str	r0, [r7, #24]
    OS_PrioInsert(p_tcb->Prio);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80070dc:	4618      	mov	r0, r3
 80070de:	f7ff fc1f 	bl	8006920 <OS_PrioInsert>
    OS_RdyListInsertTail(p_tcb);
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7fe fa26 	bl	8005534 <OS_RdyListInsertTail>

#if (OS_CFG_DBG_EN > 0u)
    OS_TaskDbgListAdd(p_tcb);
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 f9af 	bl	800744c <OS_TaskDbgListAdd>
#endif

    OSTaskQty++;                                                /* Increment the #tasks counter                         */
 80070ee:	4b0f      	ldr	r3, [pc, #60]	@ (800712c <OSTaskCreate+0x23c>)
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	3301      	adds	r3, #1
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	4b0d      	ldr	r3, [pc, #52]	@ (800712c <OSTaskCreate+0x23c>)
 80070f8:	801a      	strh	r2, [r3, #0]

    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Return if multitasking has not started               */
 80070fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007130 <OSTaskCreate+0x240>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d003      	beq.n	800710a <OSTaskCreate+0x21a>
        CPU_CRITICAL_EXIT();
 8007102:	69b8      	ldr	r0, [r7, #24]
 8007104:	f7f9 f884 	bl	8000210 <CPU_SR_Restore>
        return;
 8007108:	e004      	b.n	8007114 <OSTaskCreate+0x224>
    }

    CPU_CRITICAL_EXIT();
 800710a:	69b8      	ldr	r0, [r7, #24]
 800710c:	f7f9 f880 	bl	8000210 <CPU_SR_Restore>

    OSSched();
 8007110:	f7fd fe80 	bl	8004e14 <OSSched>
}
 8007114:	3728      	adds	r7, #40	@ 0x28
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	200019ac 	.word	0x200019ac
 8007120:	080086d4 	.word	0x080086d4
 8007124:	200018e8 	.word	0x200018e8
 8007128:	20001cf0 	.word	0x20001cf0
 800712c:	20001de0 	.word	0x20001de0
 8007130:	200019ad 	.word	0x200019ad

08007134 <OSTaskDel>:
*/

#if (OS_CFG_TASK_DEL_EN > 0u)
void  OSTaskDel (OS_TCB  *p_tcb,
                 OS_ERR  *p_err)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
#if (OS_CFG_MUTEX_EN > 0u)
    OS_TCB   *p_tcb_owner;
    OS_PRIO   prio_new;
#endif
    CPU_SR_ALLOC();
 800713e:	2300      	movs	r3, #0
 8007140:	613b      	str	r3, [r7, #16]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* See if trying to delete from ISR                     */
 8007142:	4b7d      	ldr	r3, [pc, #500]	@ (8007338 <OSTaskDel+0x204>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d004      	beq.n	8007154 <OSTaskDel+0x20>
       *p_err = OS_ERR_TASK_DEL_ISR;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	f247 124e 	movw	r2, #29006	@ 0x714e
 8007150:	801a      	strh	r2, [r3, #0]
        return;
 8007152:	e0ed      	b.n	8007330 <OSTaskDel+0x1fc>
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 8007154:	4b79      	ldr	r3, [pc, #484]	@ (800733c <OSTaskDel+0x208>)
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d004      	beq.n	8007166 <OSTaskDel+0x32>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	f645 6289 	movw	r2, #24201	@ 0x5e89
 8007162:	801a      	strh	r2, [r3, #0]
        return;
 8007164:	e0e4      	b.n	8007330 <OSTaskDel+0x1fc>
    }
#endif

#if (OS_CFG_TASK_IDLE_EN > 0u)
    if (p_tcb == &OSIdleTaskTCB) {                              /* Not allowed to delete the idle task                  */
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a75      	ldr	r2, [pc, #468]	@ (8007340 <OSTaskDel+0x20c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d104      	bne.n	8007178 <OSTaskDel+0x44>
       *p_err = OS_ERR_TASK_DEL_IDLE;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	f247 124c 	movw	r2, #29004	@ 0x714c
 8007174:	801a      	strh	r2, [r3, #0]
        return;
 8007176:	e0db      	b.n	8007330 <OSTaskDel+0x1fc>
    }
#endif

    if (p_tcb == (OS_TCB *)0) {                                 /* Delete 'Self'?                                       */
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d109      	bne.n	8007192 <OSTaskDel+0x5e>
        CPU_CRITICAL_ENTER();
 800717e:	2040      	movs	r0, #64	@ 0x40
 8007180:	f7f9 f838 	bl	80001f4 <CPU_SR_Save>
 8007184:	6138      	str	r0, [r7, #16]
        p_tcb  = OSTCBCurPtr;                                   /* Yes.                                                 */
 8007186:	4b6f      	ldr	r3, [pc, #444]	@ (8007344 <OSTaskDel+0x210>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	607b      	str	r3, [r7, #4]
        CPU_CRITICAL_EXIT();
 800718c:	6938      	ldr	r0, [r7, #16]
 800718e:	f7f9 f83f 	bl	8000210 <CPU_SR_Restore>
    }

    CPU_CRITICAL_ENTER();
 8007192:	2040      	movs	r0, #64	@ 0x40
 8007194:	f7f9 f82e 	bl	80001f4 <CPU_SR_Save>
 8007198:	6138      	str	r0, [r7, #16]
    switch (p_tcb->TaskState) {
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80071a0:	2b07      	cmp	r3, #7
 80071a2:	f200 8093 	bhi.w	80072cc <OSTaskDel+0x198>
 80071a6:	a201      	add	r2, pc, #4	@ (adr r2, 80071ac <OSTaskDel+0x78>)
 80071a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ac:	080071cd 	.word	0x080071cd
 80071b0:	080071d5 	.word	0x080071d5
 80071b4:	080071dd 	.word	0x080071dd
 80071b8:	080071dd 	.word	0x080071dd
 80071bc:	080072dd 	.word	0x080072dd
 80071c0:	080071d5 	.word	0x080071d5
 80071c4:	080071dd 	.word	0x080071dd
 80071c8:	080071dd 	.word	0x080071dd
        case OS_TASK_STATE_RDY:
             OS_RdyListRemove(p_tcb);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7fe fa3d 	bl	800564c <OS_RdyListRemove>
             break;
 80071d2:	e086      	b.n	80072e2 <OSTaskDel+0x1ae>
             break;

        case OS_TASK_STATE_DLY:                                 /* Task is only delayed, not on any wait list           */
        case OS_TASK_STATE_DLY_SUSPENDED:
#if (OS_CFG_TICK_EN > 0u)
             OS_TickListRemove(p_tcb);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fc85 	bl	8007ae4 <OS_TickListRemove>
#endif
             break;
 80071da:	e082      	b.n	80072e2 <OSTaskDel+0x1ae>

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             switch (p_tcb->PendOn) {                           /* See what we are pending on                           */
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80071e2:	2b07      	cmp	r3, #7
 80071e4:	bf8c      	ite	hi
 80071e6:	2201      	movhi	r2, #1
 80071e8:	2200      	movls	r2, #0
 80071ea:	b2d2      	uxtb	r2, r2
 80071ec:	2a00      	cmp	r2, #0
 80071ee:	d15a      	bne.n	80072a6 <OSTaskDel+0x172>
 80071f0:	2201      	movs	r2, #1
 80071f2:	fa02 f303 	lsl.w	r3, r2, r3
 80071f6:	f003 0262 	and.w	r2, r3, #98	@ 0x62
 80071fa:	2a00      	cmp	r2, #0
 80071fc:	bf14      	ite	ne
 80071fe:	2201      	movne	r2, #1
 8007200:	2200      	moveq	r2, #0
 8007202:	b2d2      	uxtb	r2, r2
 8007204:	2a00      	cmp	r2, #0
 8007206:	d112      	bne.n	800722e <OSTaskDel+0xfa>
 8007208:	f003 0285 	and.w	r2, r3, #133	@ 0x85
 800720c:	2a00      	cmp	r2, #0
 800720e:	bf14      	ite	ne
 8007210:	2201      	movne	r2, #1
 8007212:	2200      	moveq	r2, #0
 8007214:	b2d2      	uxtb	r2, r2
 8007216:	2a00      	cmp	r2, #0
 8007218:	d147      	bne.n	80072aa <OSTaskDel+0x176>
 800721a:	f003 0310 	and.w	r3, r3, #16
 800721e:	2b00      	cmp	r3, #0
 8007220:	bf14      	ite	ne
 8007222:	2301      	movne	r3, #1
 8007224:	2300      	moveq	r3, #0
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	d104      	bne.n	8007236 <OSTaskDel+0x102>
                      break;
#endif

                 default:
                                                                /* Default case.                                        */
                      break;
 800722c:	e03b      	b.n	80072a6 <OSTaskDel+0x172>
                      OS_PendListRemove(p_tcb);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7fe f830 	bl	8005294 <OS_PendListRemove>
                      break;
 8007234:	e03c      	b.n	80072b0 <OSTaskDel+0x17c>
                      p_tcb_owner = ((OS_MUTEX *)((void *)p_tcb->PendObjPtr))->OwnerTCBPtr;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800723a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723c:	60fb      	str	r3, [r7, #12]
                      prio_new = p_tcb_owner->Prio;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007244:	75fb      	strb	r3, [r7, #23]
                      OS_PendListRemove(p_tcb);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7fe f824 	bl	8005294 <OS_PendListRemove>
                      if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007258:	429a      	cmp	r2, r3
 800725a:	d014      	beq.n	8007286 <OSTaskDel+0x152>
                          (p_tcb_owner->Prio == p_tcb->Prio)) { /* Has the owner inherited a priority?                  */
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
                      if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8007268:	429a      	cmp	r2, r3
 800726a:	d10c      	bne.n	8007286 <OSTaskDel+0x152>
                          prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f7ff fab6 	bl	80067de <OS_MutexGrpPrioFindHighest>
 8007272:	4603      	mov	r3, r0
 8007274:	75fb      	strb	r3, [r7, #23]
                          prio_new = (prio_new > p_tcb_owner->BasePrio) ? p_tcb_owner->BasePrio : prio_new;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800727c:	7dfa      	ldrb	r2, [r7, #23]
 800727e:	4293      	cmp	r3, r2
 8007280:	bf28      	it	cs
 8007282:	4613      	movcs	r3, r2
 8007284:	75fb      	strb	r3, [r7, #23]
                      p_tcb->PendOn = OS_TASK_PEND_ON_NOTHING;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                      if (prio_new != p_tcb_owner->Prio) {
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007294:	7dfa      	ldrb	r2, [r7, #23]
 8007296:	429a      	cmp	r2, r3
 8007298:	d009      	beq.n	80072ae <OSTaskDel+0x17a>
                          OS_TaskChangePrio(p_tcb_owner, prio_new);
 800729a:	7dfb      	ldrb	r3, [r7, #23]
 800729c:	4619      	mov	r1, r3
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 fa36 	bl	8007710 <OS_TaskChangePrio>
                      break;
 80072a4:	e003      	b.n	80072ae <OSTaskDel+0x17a>
                      break;
 80072a6:	bf00      	nop
 80072a8:	e002      	b.n	80072b0 <OSTaskDel+0x17c>
                      break;
 80072aa:	bf00      	nop
 80072ac:	e000      	b.n	80072b0 <OSTaskDel+0x17c>
                      break;
 80072ae:	bf00      	nop
             }
#if (OS_CFG_TICK_EN > 0u)
             if ((p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) ||
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d004      	beq.n	80072c4 <OSTaskDel+0x190>
                 (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED)) {
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
             if ((p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) ||
 80072c0:	2b07      	cmp	r3, #7
 80072c2:	d10d      	bne.n	80072e0 <OSTaskDel+0x1ac>
                 OS_TickListRemove(p_tcb);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fc0d 	bl	8007ae4 <OS_TickListRemove>
             }
#endif
             break;
 80072ca:	e009      	b.n	80072e0 <OSTaskDel+0x1ac>

        default:
            CPU_CRITICAL_EXIT();
 80072cc:	6938      	ldr	r0, [r7, #16]
 80072ce:	f7f8 ff9f 	bl	8000210 <CPU_SR_Restore>
           *p_err = OS_ERR_STATE_INVALID;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	f646 622d 	movw	r2, #28205	@ 0x6e2d
 80072d8:	801a      	strh	r2, [r3, #0]
            return;
 80072da:	e029      	b.n	8007330 <OSTaskDel+0x1fc>
             break;
 80072dc:	bf00      	nop
 80072de:	e000      	b.n	80072e2 <OSTaskDel+0x1ae>
             break;
 80072e0:	bf00      	nop
    }

#if (OS_CFG_MUTEX_EN > 0u)
    if(p_tcb->MutexGrpHeadPtr != (OS_MUTEX *)0) {
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <OSTaskDel+0x1bc>
        OS_MutexGrpPostAll(p_tcb);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7ff faa1 	bl	8006832 <OS_MutexGrpPostAll>
    }
#endif

#if (OS_CFG_TASK_Q_EN > 0u)
    (void)OS_MsgQFreeAll(&p_tcb->MsgQ);                         /* Free task's message queue messages                   */
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	3368      	adds	r3, #104	@ 0x68
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff f87b 	bl	80063f0 <OS_MsgQFreeAll>
#endif

    OSTaskDelHook(p_tcb);                                       /* Call user defined hook                               */
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7fd faf6 	bl	80048ec <OSTaskDelHook>
#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskDel(p_tcb);                                      /* Call TLS hook                                        */
#endif

#if (OS_CFG_DBG_EN > 0u)
    OS_TaskDbgListRemove(p_tcb);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f8c9 	bl	8007498 <OS_TaskDbgListRemove>
#endif

    OSTaskQty--;                                                /* One less task being managed                          */
 8007306:	4b10      	ldr	r3, [pc, #64]	@ (8007348 <OSTaskDel+0x214>)
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	3b01      	subs	r3, #1
 800730c:	b29a      	uxth	r2, r3
 800730e:	4b0e      	ldr	r3, [pc, #56]	@ (8007348 <OSTaskDel+0x214>)
 8007310:	801a      	strh	r2, [r3, #0]

    OS_TRACE_TASK_DEL(p_tcb);

#if (OS_CFG_TASK_STK_REDZONE_EN == 0u)                          /* Don't clear the TCB before checking the red-zone     */
    OS_TaskInitTCB(p_tcb);                                      /* Initialize the TCB to default values                 */
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f91e 	bl	8007554 <OS_TaskInitTCB>
#endif
    p_tcb->TaskState = (OS_STATE)OS_TASK_STATE_DEL;             /* Indicate that the task was deleted                   */
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	22ff      	movs	r2, #255	@ 0xff
 800731c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

   *p_err = OS_ERR_NONE;                                        /* See Note #1.                                         */
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	2200      	movs	r2, #0
 8007324:	801a      	strh	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 8007326:	6938      	ldr	r0, [r7, #16]
 8007328:	f7f8 ff72 	bl	8000210 <CPU_SR_Restore>

    OSSched();                                                  /* Find new highest priority task                       */
 800732c:	f7fd fd72 	bl	8004e14 <OSSched>
}
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	200019ac 	.word	0x200019ac
 800733c:	200019ad 	.word	0x200019ad
 8007340:	200018e8 	.word	0x200018e8
 8007344:	20001f1c 	.word	0x20001f1c
 8007348:	20001de0 	.word	0x20001de0

0800734c <OSTaskStkChk>:
#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u)
void  OSTaskStkChk (OS_TCB        *p_tcb,
                    CPU_STK_SIZE  *p_free,
                    CPU_STK_SIZE  *p_used,
                    OS_ERR        *p_err)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b088      	sub	sp, #32
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	603b      	str	r3, [r7, #0]
    CPU_STK_SIZE  free_stk;
    CPU_STK_SIZE  stk_size;
    CPU_STK      *p_stk;
    CPU_SR_ALLOC();
 800735a:	2300      	movs	r3, #0
 800735c:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* See if trying to check stack from ISR                */
 800735e:	4b39      	ldr	r3, [pc, #228]	@ (8007444 <OSTaskStkChk+0xf8>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d004      	beq.n	8007370 <OSTaskStkChk+0x24>
       *p_err = OS_ERR_TASK_STK_CHK_ISR;
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	f247 1259 	movw	r2, #29017	@ 0x7159
 800736c:	801a      	strh	r2, [r3, #0]
        return;
 800736e:	e065      	b.n	800743c <OSTaskStkChk+0xf0>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_free == (CPU_STK_SIZE *)0) {                          /* User must specify valid destinations for the sizes   */
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d104      	bne.n	8007380 <OSTaskStkChk+0x34>
       *p_err = OS_ERR_PTR_INVALID;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	f246 22d5 	movw	r2, #25301	@ 0x62d5
 800737c:	801a      	strh	r2, [r3, #0]
        return;
 800737e:	e05d      	b.n	800743c <OSTaskStkChk+0xf0>
    }

    if (p_used == (CPU_STK_SIZE *)0) {
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d104      	bne.n	8007390 <OSTaskStkChk+0x44>
       *p_err = OS_ERR_PTR_INVALID;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	f246 22d5 	movw	r2, #25301	@ 0x62d5
 800738c:	801a      	strh	r2, [r3, #0]
        return;
 800738e:	e055      	b.n	800743c <OSTaskStkChk+0xf0>
    }
#endif

    CPU_CRITICAL_ENTER();
 8007390:	2040      	movs	r0, #64	@ 0x40
 8007392:	f7f8 ff2f 	bl	80001f4 <CPU_SR_Save>
 8007396:	6178      	str	r0, [r7, #20]
    if (p_tcb == (OS_TCB *)0) {                                 /* Check the stack of the current task?                 */
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d102      	bne.n	80073a4 <OSTaskStkChk+0x58>
        p_tcb = OSTCBCurPtr;                                    /* Yes                                                  */
 800739e:	4b2a      	ldr	r3, [pc, #168]	@ (8007448 <OSTaskStkChk+0xfc>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	60fb      	str	r3, [r7, #12]
    }

    if (p_tcb->StkPtr == (CPU_STK *)0) {                        /* Make sure task exist                                 */
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10d      	bne.n	80073c8 <OSTaskStkChk+0x7c>
        CPU_CRITICAL_EXIT();
 80073ac:	6978      	ldr	r0, [r7, #20]
 80073ae:	f7f8 ff2f 	bl	8000210 <CPU_SR_Restore>
       *p_free = 0u;
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2200      	movs	r2, #0
 80073b6:	601a      	str	r2, [r3, #0]
       *p_used = 0u;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	601a      	str	r2, [r3, #0]
       *p_err  = OS_ERR_TASK_NOT_EXIST;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	f247 1252 	movw	r2, #29010	@ 0x7152
 80073c4:	801a      	strh	r2, [r3, #0]
        return;
 80073c6:	e039      	b.n	800743c <OSTaskStkChk+0xf0>
    }

    if ((p_tcb->Opt & OS_OPT_TASK_STK_CHK) == 0u) {             /* Make sure stack checking option is set               */
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10d      	bne.n	80073f2 <OSTaskStkChk+0xa6>
        CPU_CRITICAL_EXIT();
 80073d6:	6978      	ldr	r0, [r7, #20]
 80073d8:	f7f8 ff1a 	bl	8000210 <CPU_SR_Restore>
       *p_free = 0u;
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2200      	movs	r2, #0
 80073e0:	601a      	str	r2, [r3, #0]
       *p_used = 0u;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	601a      	str	r2, [r3, #0]
       *p_err  = OS_ERR_TASK_OPT;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	f247 1254 	movw	r2, #29012	@ 0x7154
 80073ee:	801a      	strh	r2, [r3, #0]
        return;
 80073f0:	e024      	b.n	800743c <OSTaskStkChk+0xf0>
    }

#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    p_stk = p_tcb->StkBasePtr;                                  /* Start at the lowest memory and go up                 */
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	61bb      	str	r3, [r7, #24]
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
    p_stk -= OS_CFG_TASK_STK_REDZONE_DEPTH;
#endif
#endif

    stk_size = p_tcb->StkSize;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073fc:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 80073fe:	6978      	ldr	r0, [r7, #20]
 8007400:	f7f8 ff06 	bl	8000210 <CPU_SR_Restore>

    free_stk = 0u;
 8007404:	2300      	movs	r3, #0
 8007406:	61fb      	str	r3, [r7, #28]
                                                                /* Compute the number of zero entries on the stk        */
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    while ((free_stk  < stk_size) &&
 8007408:	e005      	b.n	8007416 <OSTaskStkChk+0xca>
           (*p_stk   ==       0u)) {
        p_stk++;
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	3304      	adds	r3, #4
 800740e:	61bb      	str	r3, [r7, #24]
        free_stk++;
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	3301      	adds	r3, #1
 8007414:	61fb      	str	r3, [r7, #28]
    while ((free_stk  < stk_size) &&
 8007416:	69fa      	ldr	r2, [r7, #28]
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	429a      	cmp	r2, r3
 800741c:	d203      	bcs.n	8007426 <OSTaskStkChk+0xda>
           (*p_stk   ==       0u)) {
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	681b      	ldr	r3, [r3, #0]
    while ((free_stk  < stk_size) &&
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0f1      	beq.n	800740a <OSTaskStkChk+0xbe>
           (*p_stk   ==       0u)) {
        free_stk++;
        p_stk--;
    }
#endif
   *p_free = free_stk;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	69fa      	ldr	r2, [r7, #28]
 800742a:	601a      	str	r2, [r3, #0]
   *p_used = (stk_size - free_stk);                             /* Compute number of entries used on the stack          */
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	1ad2      	subs	r2, r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	601a      	str	r2, [r3, #0]
   *p_err  = OS_ERR_NONE;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2200      	movs	r2, #0
 800743a:	801a      	strh	r2, [r3, #0]
}
 800743c:	3720      	adds	r7, #32
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	200019ac 	.word	0x200019ac
 8007448:	20001f1c 	.word	0x20001f1c

0800744c <OS_TaskDbgListAdd>:
************************************************************************************************************************
*/

#if (OS_CFG_DBG_EN > 0u)
void  OS_TaskDbgListAdd (OS_TCB  *p_tcb)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
    p_tcb->DbgPrevPtr                = (OS_TCB *)0;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
    if (OSTaskDbgListPtr == (OS_TCB *)0) {
 800745c:	4b0d      	ldr	r3, [pc, #52]	@ (8007494 <OS_TaskDbgListAdd+0x48>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d104      	bne.n	800746e <OS_TaskDbgListAdd+0x22>
        p_tcb->DbgNextPtr            = (OS_TCB *)0;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 800746c:	e009      	b.n	8007482 <OS_TaskDbgListAdd+0x36>
    } else {
        p_tcb->DbgNextPtr            =  OSTaskDbgListPtr;
 800746e:	4b09      	ldr	r3, [pc, #36]	@ (8007494 <OS_TaskDbgListAdd+0x48>)
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        OSTaskDbgListPtr->DbgPrevPtr =  p_tcb;
 8007478:	4b06      	ldr	r3, [pc, #24]	@ (8007494 <OS_TaskDbgListAdd+0x48>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
    }
    OSTaskDbgListPtr                 =  p_tcb;
 8007482:	4a04      	ldr	r2, [pc, #16]	@ (8007494 <OS_TaskDbgListAdd+0x48>)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6013      	str	r3, [r2, #0]
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	20001ddc 	.word	0x20001ddc

08007498 <OS_TaskDbgListRemove>:



void  OS_TaskDbgListRemove (OS_TCB  *p_tcb)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
    OS_TCB  *p_tcb_next;
    OS_TCB  *p_tcb_prev;


    p_tcb_prev = p_tcb->DbgPrevPtr;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80074a6:	60fb      	str	r3, [r7, #12]
    p_tcb_next = p_tcb->DbgNextPtr;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80074ae:	60bb      	str	r3, [r7, #8]

    if (p_tcb_prev == (OS_TCB *)0) {
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10e      	bne.n	80074d4 <OS_TaskDbgListRemove+0x3c>
        OSTaskDbgListPtr = p_tcb_next;
 80074b6:	4a18      	ldr	r2, [pc, #96]	@ (8007518 <OS_TaskDbgListRemove+0x80>)
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	6013      	str	r3, [r2, #0]
        if (p_tcb_next != (OS_TCB *)0) {
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <OS_TaskDbgListRemove+0x32>
            p_tcb_next->DbgPrevPtr = (OS_TCB *)0;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        }
        p_tcb->DbgNextPtr = (OS_TCB *)0;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        p_tcb_prev->DbgNextPtr =  p_tcb_next;
        p_tcb_next->DbgPrevPtr =  p_tcb_prev;
        p_tcb->DbgNextPtr      = (OS_TCB *)0;
        p_tcb->DbgPrevPtr      = (OS_TCB *)0;
    }
}
 80074d2:	e01b      	b.n	800750c <OS_TaskDbgListRemove+0x74>
    } else if (p_tcb_next == (OS_TCB *)0) {
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d108      	bne.n	80074ec <OS_TaskDbgListRemove+0x54>
        p_tcb_prev->DbgNextPtr = (OS_TCB *)0;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        p_tcb->DbgPrevPtr      = (OS_TCB *)0;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 80074ea:	e00f      	b.n	800750c <OS_TaskDbgListRemove+0x74>
        p_tcb_prev->DbgNextPtr =  p_tcb_next;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        p_tcb_next->DbgPrevPtr =  p_tcb_prev;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        p_tcb->DbgNextPtr      = (OS_TCB *)0;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        p_tcb->DbgPrevPtr      = (OS_TCB *)0;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 800750c:	bf00      	nop
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	20001ddc 	.word	0x20001ddc

0800751c <OS_TaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInit (OS_ERR  *p_err)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
#if (OS_CFG_DBG_EN > 0u)
    OSTaskDbgListPtr = (OS_TCB *)0;
 8007524:	4b08      	ldr	r3, [pc, #32]	@ (8007548 <OS_TaskInit+0x2c>)
 8007526:	2200      	movs	r2, #0
 8007528:	601a      	str	r2, [r3, #0]
#endif

    OSTaskQty        = 0u;                                      /* Clear the number of tasks                            */
 800752a:	4b08      	ldr	r3, [pc, #32]	@ (800754c <OS_TaskInit+0x30>)
 800752c:	2200      	movs	r2, #0
 800752e:	801a      	strh	r2, [r3, #0]

#if ((OS_CFG_TASK_PROFILE_EN > 0u) || (OS_CFG_DBG_EN > 0u))
    OSTaskCtxSwCtr   = 0u;                                      /* Clear the context switch counter                     */
 8007530:	4b07      	ldr	r3, [pc, #28]	@ (8007550 <OS_TaskInit+0x34>)
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]
#endif

   *p_err            = OS_ERR_NONE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	801a      	strh	r2, [r3, #0]
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	20001ddc 	.word	0x20001ddc
 800754c:	20001de0 	.word	0x20001de0
 8007550:	20001dd8 	.word	0x20001dd8

08007554 <OS_TaskInitTCB>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInitTCB (OS_TCB  *p_tcb)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_ID   id;
#endif


    p_tcb->StkPtr               = (CPU_STK          *)0;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	601a      	str	r2, [r3, #0]
    p_tcb->StkLimitPtr          = (CPU_STK          *)0;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	609a      	str	r2, [r3, #8]

    p_tcb->ExtPtr               = (void             *)0;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	605a      	str	r2, [r3, #4]

    p_tcb->NextPtr              = (OS_TCB           *)0;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	611a      	str	r2, [r3, #16]
    p_tcb->PrevPtr              = (OS_TCB           *)0;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	615a      	str	r2, [r3, #20]

#if (OS_CFG_TICK_EN > 0u)
    p_tcb->TickNextPtr          = (OS_TCB           *)0;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	619a      	str	r2, [r3, #24]
    p_tcb->TickPrevPtr          = (OS_TCB           *)0;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	61da      	str	r2, [r3, #28]
#endif

#if (OS_CFG_DBG_EN > 0u)
    p_tcb->NamePtr              = (CPU_CHAR *)((void *)"?Task");
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a55      	ldr	r2, [pc, #340]	@ (80076e0 <OS_TaskInitTCB+0x18c>)
 800758a:	60da      	str	r2, [r3, #12]
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkBasePtr           = (CPU_STK          *)0;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	621a      	str	r2, [r3, #32]
#endif

#if (OS_CFG_DBG_EN > 0u)
    p_tcb->TaskEntryAddr        = (OS_TASK_PTR       )0;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	625a      	str	r2, [r3, #36]	@ 0x24
    p_tcb->TaskEntryArg         = (void             *)0;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	629a      	str	r2, [r3, #40]	@ 0x28
#if (OS_CFG_TS_EN > 0u)
    p_tcb->TS                   =                     0u;
#endif

#if (OS_MSG_EN > 0u)
    p_tcb->MsgPtr               = (void             *)0;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	661a      	str	r2, [r3, #96]	@ 0x60
    p_tcb->MsgSize              =                     0u;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif

#if (OS_CFG_TASK_Q_EN > 0u)
    OS_MsgQInit(&p_tcb->MsgQ,
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	3368      	adds	r3, #104	@ 0x68
 80075b0:	2100      	movs	r1, #0
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe ff58 	bl	8006468 <OS_MsgQInit>
                 0u);
#if (OS_CFG_TASK_PROFILE_EN > 0u)
    p_tcb->MsgQPendTime         =                     0u;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	679a      	str	r2, [r3, #120]	@ 0x78
    p_tcb->MsgQPendTimeMax      =                     0u;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
#endif

#if (OS_CFG_FLAG_EN > 0u)
    p_tcb->FlagsPend            =                     0u;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    p_tcb->FlagsOpt             =                     0u;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
    p_tcb->FlagsRdy             =                     0u;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif

#if (OS_CFG_TASK_REG_TBL_SIZE > 0u)
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 80075dc:	2300      	movs	r3, #0
 80075de:	73fb      	strb	r3, [r7, #15]
 80075e0:	e008      	b.n	80075f4 <OS_TaskInitTCB+0xa0>
        p_tcb->RegTbl[reg_id]   =                     0u;
 80075e2:	7bfa      	ldrb	r2, [r7, #15]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3220      	adds	r2, #32
 80075e8:	2100      	movs	r1, #0
 80075ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
 80075f0:	3301      	adds	r3, #1
 80075f2:	73fb      	strb	r3, [r7, #15]
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d0f3      	beq.n	80075e2 <OS_TaskInitTCB+0x8e>
    for (id = 0u; id < OS_CFG_TLS_TBL_SIZE; id++) {
        p_tcb->TLS_Tbl[id]      =                     0u;
    }
#endif

    p_tcb->SemCtr               =                     0u;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	64da      	str	r2, [r3, #76]	@ 0x4c
#if (OS_CFG_TASK_PROFILE_EN > 0u)
    p_tcb->SemPendTime          =                     0u;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    p_tcb->SemPendTimeMax       =                     0u;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkSize              =                     0u;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	645a      	str	r2, [r3, #68]	@ 0x44
#endif


#if (OS_CFG_TASK_SUSPEND_EN > 0u)
    p_tcb->SuspendCtr           =                     0u;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
#endif

#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u)
    p_tcb->StkFree              =                     0u;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    p_tcb->StkUsed              =                     0u;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif

    p_tcb->Opt                  =                     0u;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

#if (OS_CFG_TICK_EN > 0u)
    p_tcb->TickRemain           =                     0u;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	651a      	str	r2, [r3, #80]	@ 0x50
    p_tcb->TickCtrPrev          =                     0u;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
    p_tcb->TimeQuanta           =                     0u;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	659a      	str	r2, [r3, #88]	@ 0x58
    p_tcb->TimeQuantaCtr        =                     0u;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif

#if (OS_CFG_TASK_PROFILE_EN > 0u)
    p_tcb->CPUUsage             =                     0u;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
    p_tcb->CPUUsageMax          =                     0u;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
    p_tcb->CtxSwCtr             =                     0u;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    p_tcb->CyclesDelta          =                     0u;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (OS_CFG_TS_EN > 0u)
    p_tcb->CyclesStart          =  OS_TS_GET();                 /* Read the current timestamp and save                  */
#else
    p_tcb->CyclesStart          =                     0u;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
#endif
    p_tcb->CyclesTotal          =                     0u;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
#endif
#if (OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u)
    p_tcb->SchedLockTimeMax     =                     0u;
#endif

    p_tcb->PendNextPtr          = (OS_TCB           *)0;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	62da      	str	r2, [r3, #44]	@ 0x2c
    p_tcb->PendPrevPtr          = (OS_TCB           *)0;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	631a      	str	r2, [r3, #48]	@ 0x30
    p_tcb->PendObjPtr           = (OS_PEND_OBJ      *)0;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	635a      	str	r2, [r3, #52]	@ 0x34
    p_tcb->PendOn               =  OS_TASK_PEND_ON_NOTHING;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    p_tcb->PendStatus           =  OS_STATUS_PEND_OK;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    p_tcb->TaskState            =  OS_TASK_STATE_RDY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    p_tcb->Prio                 =  OS_PRIO_INIT;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2240      	movs	r2, #64	@ 0x40
 80076ac:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
#if (OS_CFG_MUTEX_EN > 0u)
    p_tcb->BasePrio             =  OS_PRIO_INIT;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2240      	movs	r2, #64	@ 0x40
 80076b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    p_tcb->MutexGrpHeadPtr      = (OS_MUTEX         *)0;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	641a      	str	r2, [r3, #64]	@ 0x40
#endif

#if (OS_CFG_DBG_EN > 0u)
    p_tcb->DbgPrevPtr           = (OS_TCB           *)0;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
    p_tcb->DbgNextPtr           = (OS_TCB           *)0;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    p_tcb->DbgNamePtr           = (CPU_CHAR *)((void *)" ");
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a04      	ldr	r2, [pc, #16]	@ (80076e4 <OS_TaskInitTCB+0x190>)
 80076d2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
#endif
}
 80076d6:	bf00      	nop
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	08008650 	.word	0x08008650
 80076e4:	08008658 	.word	0x08008658

080076e8 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
    OS_ERR  err;



    OSTaskReturnHook(OSTCBCurPtr);                              /* Call hook to let user decide on what to do           */
 80076ee:	4b07      	ldr	r3, [pc, #28]	@ (800770c <OS_TaskReturn+0x24>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fd f90c 	bl	8004910 <OSTaskReturnHook>
#if (OS_CFG_TASK_DEL_EN > 0u)
    OSTaskDel((OS_TCB *)0,                                      /* Delete task if it accidentally returns!              */
 80076f8:	1dbb      	adds	r3, r7, #6
 80076fa:	4619      	mov	r1, r3
 80076fc:	2000      	movs	r0, #0
 80076fe:	f7ff fd19 	bl	8007134 <OSTaskDel>
        OSTimeDly(OSCfg_TickRate_Hz,
                  OS_OPT_TIME_DLY,
                  &err);
    }
#endif
}
 8007702:	bf00      	nop
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	20001f1c 	.word	0x20001f1c

08007710 <OS_TaskChangePrio>:
************************************************************************************************************************
*/

void  OS_TaskChangePrio(OS_TCB  *p_tcb,
                        OS_PRIO  prio_new)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
    OS_PRIO  prio_cur;
#endif


    do {
        p_tcb_owner = (OS_TCB *)0;
 800771c:	2300      	movs	r3, #0
 800771e:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_MUTEX_EN > 0u)
        prio_cur    =  p_tcb->Prio;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007726:	72fb      	strb	r3, [r7, #11]
#endif
        switch (p_tcb->TaskState) {
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800772e:	2b07      	cmp	r3, #7
 8007730:	f200 8085 	bhi.w	800783e <OS_TaskChangePrio+0x12e>
 8007734:	a201      	add	r2, pc, #4	@ (adr r2, 800773c <OS_TaskChangePrio+0x2c>)
 8007736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773a:	bf00      	nop
 800773c:	0800775d 	.word	0x0800775d
 8007740:	08007791 	.word	0x08007791
 8007744:	0800779b 	.word	0x0800779b
 8007748:	0800779b 	.word	0x0800779b
 800774c:	08007791 	.word	0x08007791
 8007750:	08007791 	.word	0x08007791
 8007754:	0800779b 	.word	0x0800779b
 8007758:	0800779b 	.word	0x0800779b
            case OS_TASK_STATE_RDY:
                 OS_RdyListRemove(p_tcb);                       /* Remove from current priority                         */
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7fd ff75 	bl	800564c <OS_RdyListRemove>
                 p_tcb->Prio = prio_new;                        /* Set new task priority                                */
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	78fa      	ldrb	r2, [r7, #3]
 8007766:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
                 OS_PrioInsert(p_tcb->Prio);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007770:	4618      	mov	r0, r3
 8007772:	f7ff f8d5 	bl	8006920 <OS_PrioInsert>
                 if (p_tcb == OSTCBCurPtr) {
 8007776:	4b34      	ldr	r3, [pc, #208]	@ (8007848 <OS_TaskChangePrio+0x138>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	429a      	cmp	r2, r3
 800777e:	d103      	bne.n	8007788 <OS_TaskChangePrio+0x78>
                     OS_RdyListInsertHead(p_tcb);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7fd fe95 	bl	80054b0 <OS_RdyListInsertHead>
                 } else {
                     OS_RdyListInsertTail(p_tcb);
                 }
                 break;
 8007786:	e053      	b.n	8007830 <OS_TaskChangePrio+0x120>
                     OS_RdyListInsertTail(p_tcb);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7fd fed3 	bl	8005534 <OS_RdyListInsertTail>
                 break;
 800778e:	e04f      	b.n	8007830 <OS_TaskChangePrio+0x120>

            case OS_TASK_STATE_DLY:                             /* Nothing to do except change the priority in the OS_TCB*/
            case OS_TASK_STATE_SUSPENDED:
            case OS_TASK_STATE_DLY_SUSPENDED:
                 p_tcb->Prio = prio_new;                        /* Set new task priority                                */
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	78fa      	ldrb	r2, [r7, #3]
 8007794:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
                 break;
 8007798:	e04a      	b.n	8007830 <OS_TaskChangePrio+0x120>

            case OS_TASK_STATE_PEND:
            case OS_TASK_STATE_PEND_TIMEOUT:
            case OS_TASK_STATE_PEND_SUSPENDED:
            case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                 p_tcb->Prio = prio_new;                        /* Set new task priority                                */
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	78fa      	ldrb	r2, [r7, #3]
 800779e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
                 switch (p_tcb->PendOn) {                       /* What to do depends on what we are pending on         */
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80077a8:	2b06      	cmp	r3, #6
 80077aa:	dc3d      	bgt.n	8007828 <OS_TaskChangePrio+0x118>
 80077ac:	2b05      	cmp	r3, #5
 80077ae:	da04      	bge.n	80077ba <OS_TaskChangePrio+0xaa>
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d002      	beq.n	80077ba <OS_TaskChangePrio+0xaa>
 80077b4:	2b04      	cmp	r3, #4
 80077b6:	d004      	beq.n	80077c2 <OS_TaskChangePrio+0xb2>

                     case OS_TASK_PEND_ON_TASK_Q:
                     case OS_TASK_PEND_ON_TASK_SEM:
                     default:
                                                                /* Default case.                                        */
                          break;
 80077b8:	e036      	b.n	8007828 <OS_TaskChangePrio+0x118>
                          OS_PendListChangePrio(p_tcb);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7fd fcce 	bl	800515c <OS_PendListChangePrio>
                          break;
 80077c0:	e035      	b.n	800782e <OS_TaskChangePrio+0x11e>
                          OS_PendListChangePrio(p_tcb);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7fd fcca 	bl	800515c <OS_PendListChangePrio>
                          p_tcb_owner = ((OS_MUTEX *)((void *)p_tcb->PendObjPtr))->OwnerTCBPtr;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ce:	60fb      	str	r3, [r7, #12]
                          if (prio_cur > prio_new) {            /* Are we increasing the priority?                      */
 80077d0:	7afa      	ldrb	r2, [r7, #11]
 80077d2:	78fb      	ldrb	r3, [r7, #3]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d908      	bls.n	80077ea <OS_TaskChangePrio+0xda>
                              if (p_tcb_owner->Prio <= prio_new) { /* Yes, do we need to give this prio to the owner?   */
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80077de:	78fa      	ldrb	r2, [r7, #3]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d323      	bcc.n	800782c <OS_TaskChangePrio+0x11c>
                                  p_tcb_owner = (OS_TCB *)0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	60fb      	str	r3, [r7, #12]
                          break;
 80077e8:	e020      	b.n	800782c <OS_TaskChangePrio+0x11c>
                              if (p_tcb_owner->Prio == prio_cur) { /* No, is it required to check for a lower prio?     */
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80077f0:	7afa      	ldrb	r2, [r7, #11]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d115      	bne.n	8007822 <OS_TaskChangePrio+0x112>
                                  prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f7fe fff1 	bl	80067de <OS_MutexGrpPrioFindHighest>
 80077fc:	4603      	mov	r3, r0
 80077fe:	70fb      	strb	r3, [r7, #3]
                                  prio_new = (prio_new > p_tcb_owner->BasePrio) ? p_tcb_owner->BasePrio : prio_new;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007806:	78fa      	ldrb	r2, [r7, #3]
 8007808:	4293      	cmp	r3, r2
 800780a:	bf28      	it	cs
 800780c:	4613      	movcs	r3, r2
 800780e:	70fb      	strb	r3, [r7, #3]
                                  if (prio_new == p_tcb_owner->Prio) {
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007816:	78fa      	ldrb	r2, [r7, #3]
 8007818:	429a      	cmp	r2, r3
 800781a:	d107      	bne.n	800782c <OS_TaskChangePrio+0x11c>
                                      p_tcb_owner = (OS_TCB *)0;
 800781c:	2300      	movs	r3, #0
 800781e:	60fb      	str	r3, [r7, #12]
                          break;
 8007820:	e004      	b.n	800782c <OS_TaskChangePrio+0x11c>
                                  p_tcb_owner = (OS_TCB *)0;
 8007822:	2300      	movs	r3, #0
 8007824:	60fb      	str	r3, [r7, #12]
                          break;
 8007826:	e001      	b.n	800782c <OS_TaskChangePrio+0x11c>
                          break;
 8007828:	bf00      	nop
 800782a:	e000      	b.n	800782e <OS_TaskChangePrio+0x11e>
                          break;
 800782c:	bf00      	nop
                 }
                 break;
 800782e:	bf00      	nop

            default:
                 return;
        }
        p_tcb = p_tcb_owner;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	607b      	str	r3, [r7, #4]
    } while (p_tcb != (OS_TCB *)0);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	f47f af70 	bne.w	800771c <OS_TaskChangePrio+0xc>
 800783c:	e000      	b.n	8007840 <OS_TaskChangePrio+0x130>
                 return;
 800783e:	bf00      	nop
}
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	20001f1c 	.word	0x20001f1c

0800784c <OS_TickInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickInit (OS_ERR  *p_err)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
    *p_err                = OS_ERR_NONE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	801a      	strh	r2, [r3, #0]

    OSTickCtr             = 0u;                               /* Clear the tick counter                               */
 800785a:	4b09      	ldr	r3, [pc, #36]	@ (8007880 <OS_TickInit+0x34>)
 800785c:	2200      	movs	r2, #0
 800785e:	601a      	str	r2, [r3, #0]

#if (OS_CFG_DYN_TICK_EN > 0u)
    OSTickCtrStep         = 0u;
#endif

    OSTickList.TCB_Ptr    = (OS_TCB *)0;
 8007860:	4b08      	ldr	r3, [pc, #32]	@ (8007884 <OS_TickInit+0x38>)
 8007862:	2200      	movs	r2, #0
 8007864:	601a      	str	r2, [r3, #0]

#if (OS_CFG_DBG_EN > 0u)
    OSTickList.NbrEntries = 0u;
 8007866:	4b07      	ldr	r3, [pc, #28]	@ (8007884 <OS_TickInit+0x38>)
 8007868:	2200      	movs	r2, #0
 800786a:	809a      	strh	r2, [r3, #4]
    OSTickList.NbrUpdated = 0u;
 800786c:	4b05      	ldr	r3, [pc, #20]	@ (8007884 <OS_TickInit+0x38>)
 800786e:	2200      	movs	r2, #0
 8007870:	80da      	strh	r2, [r3, #6]
#endif
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	20001de4 	.word	0x20001de4
 8007884:	20001de8 	.word	0x20001de8

08007888 <OS_TickUpdate>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickUpdate (OS_TICK  ticks)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
#if (OS_CFG_TS_EN > 0u)
    CPU_TS  ts_start;
#endif
    CPU_SR_ALLOC();
 8007890:	2300      	movs	r3, #0
 8007892:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 8007894:	2040      	movs	r0, #64	@ 0x40
 8007896:	f7f8 fcad 	bl	80001f4 <CPU_SR_Save>
 800789a:	60f8      	str	r0, [r7, #12]

    OSTickCtr += ticks;                                         /* Keep track of the number of ticks                    */
 800789c:	4b07      	ldr	r3, [pc, #28]	@ (80078bc <OS_TickUpdate+0x34>)
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4413      	add	r3, r2
 80078a4:	4a05      	ldr	r2, [pc, #20]	@ (80078bc <OS_TickUpdate+0x34>)
 80078a6:	6013      	str	r3, [r2, #0]
    OSTickTime = OS_TS_GET() - ts_start;
    if (OSTickTimeMax < OSTickTime) {
        OSTickTimeMax = OSTickTime;
    }
#else
    OS_TickListUpdate(ticks);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f979 	bl	8007ba0 <OS_TickListUpdate>
        OSTickCtrStep = 0u;
    }

    OS_DynTickSet(OSTickCtrStep);
#endif
    CPU_CRITICAL_EXIT();
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f7f8 fcae 	bl	8000210 <CPU_SR_Restore>
}
 80078b4:	bf00      	nop
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	20001de4 	.word	0x20001de4

080078c0 <OS_TickListInsert>:

CPU_BOOLEAN  OS_TickListInsert (OS_TCB   *p_tcb,
                                OS_TICK   elapsed,
                                OS_TICK   tick_base,
                                OS_TICK   time)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b08b      	sub	sp, #44	@ 0x2c
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
 80078cc:	603b      	str	r3, [r7, #0]
    OS_TICK_LIST  *p_list;
    OS_TICK        delta;
    OS_TICK        remain;


    delta = (time + tick_base) - (OSTickCtr + elapsed);         /* How many ticks until our delay expires?              */
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	441a      	add	r2, r3
 80078d4:	4b4d      	ldr	r3, [pc, #308]	@ (8007a0c <OS_TickListInsert+0x14c>)
 80078d6:	6819      	ldr	r1, [r3, #0]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	440b      	add	r3, r1
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	61fb      	str	r3, [r7, #28]

    if (delta == 0u) {
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d104      	bne.n	80078f0 <OS_TickListInsert+0x30>
        p_tcb->TickRemain = 0u;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	651a      	str	r2, [r3, #80]	@ 0x50
        return (OS_FALSE);
 80078ec:	2300      	movs	r3, #0
 80078ee:	e087      	b.n	8007a00 <OS_TickListInsert+0x140>
    }

    OS_TRACE_TASK_DLY(delta);

    p_list = &OSTickList;
 80078f0:	4b47      	ldr	r3, [pc, #284]	@ (8007a10 <OS_TickListInsert+0x150>)
 80078f2:	61bb      	str	r3, [r7, #24]
    if (p_list->TCB_Ptr == (OS_TCB *)0) {                       /* Is the list empty?                                   */
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d110      	bne.n	800791e <OS_TickListInsert+0x5e>
        p_tcb->TickRemain   = delta;                            /* Yes, Store time in TCB                               */
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	69fa      	ldr	r2, [r7, #28]
 8007900:	651a      	str	r2, [r3, #80]	@ 0x50
        p_tcb->TickNextPtr  = (OS_TCB *)0;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	619a      	str	r2, [r3, #24]
        p_tcb->TickPrevPtr  = (OS_TCB *)0;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	61da      	str	r2, [r3, #28]
        p_list->TCB_Ptr     = p_tcb;                            /* Point to TCB of task to place in the list            */
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	601a      	str	r2, [r3, #0]

        OSTickCtrStep       = delta;
        OS_DynTickSet(OSTickCtrStep);
#endif
#if (OS_CFG_DBG_EN > 0u)
        p_list->NbrEntries  = 1u;                               /* List contains 1 entry                                */
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	2201      	movs	r2, #1
 8007918:	809a      	strh	r2, [r3, #4]
#endif
        return (OS_TRUE);
 800791a:	2301      	movs	r3, #1
 800791c:	e070      	b.n	8007a00 <OS_TickListInsert+0x140>
    }


#if (OS_CFG_DBG_EN > 0u)
    p_list->NbrEntries++;                                       /* Update debug counter to reflect the new entry.       */
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	889b      	ldrh	r3, [r3, #4]
 8007922:	3301      	adds	r3, #1
 8007924:	b29a      	uxth	r2, r3
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	809a      	strh	r2, [r3, #4]
#endif

    p_tcb2 = p_list->TCB_Ptr;
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	623b      	str	r3, [r7, #32]
    remain = p_tcb2->TickRemain - elapsed;                      /* How many ticks until the head's delay expires?       */
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	617b      	str	r3, [r7, #20]

    if ((delta               <   remain) &&                     /* If our entry is the new head of the tick list    ... */
 800793a:	69fa      	ldr	r2, [r7, #28]
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	429a      	cmp	r2, r3
 8007940:	d219      	bcs.n	8007976 <OS_TickListInsert+0xb6>
        (p_tcb2->TickPrevPtr == (OS_TCB *)0)) {
 8007942:	6a3b      	ldr	r3, [r7, #32]
 8007944:	69db      	ldr	r3, [r3, #28]
    if ((delta               <   remain) &&                     /* If our entry is the new head of the tick list    ... */
 8007946:	2b00      	cmp	r3, #0
 8007948:	d115      	bne.n	8007976 <OS_TickListInsert+0xb6>
        p_tcb->TickRemain    =  delta;                          /* ... the delta is equivalent to the full delay    ... */
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	69fa      	ldr	r2, [r7, #28]
 800794e:	651a      	str	r2, [r3, #80]	@ 0x50
        p_tcb2->TickRemain   =  remain - delta;                 /* ... the previous head's delta is now relative to it. */
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	1ad2      	subs	r2, r2, r3
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	651a      	str	r2, [r3, #80]	@ 0x50

        p_tcb->TickPrevPtr   = (OS_TCB *)0;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	61da      	str	r2, [r3, #28]
        p_tcb->TickNextPtr   =  p_tcb2;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6a3a      	ldr	r2, [r7, #32]
 8007964:	619a      	str	r2, [r3, #24]
        p_tcb2->TickPrevPtr  =  p_tcb;
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	61da      	str	r2, [r3, #28]
        p_list->TCB_Ptr      =  p_tcb;
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	601a      	str	r2, [r3, #0]
                                                                /* In DTM, a new list head must update the tick     ... */
        OSTickCtrStep        =  delta;                          /* ... timer to interrupt at the new delay value.       */
        OS_DynTickSet(OSTickCtrStep);
#endif

        return (OS_TRUE);
 8007972:	2301      	movs	r3, #1
 8007974:	e044      	b.n	8007a00 <OS_TickListInsert+0x140>
    }

                                                                /* Our entry comes after the current list head.         */
    delta  -= remain;                                           /* Make delta relative to the head.                     */
 8007976:	69fa      	ldr	r2, [r7, #28]
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	61fb      	str	r3, [r7, #28]
    p_tcb1  = p_tcb2;
 800797e:	6a3b      	ldr	r3, [r7, #32]
 8007980:	627b      	str	r3, [r7, #36]	@ 0x24
    p_tcb2  = p_tcb1->TickNextPtr;
 8007982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	623b      	str	r3, [r7, #32]

    while ((p_tcb2 !=        (OS_TCB *)0) &&                    /* Find the appropriate position in the delta list.     */
 8007988:	e009      	b.n	800799e <OS_TickListInsert+0xde>
           (delta  >= p_tcb2->TickRemain)) {
        delta  -= p_tcb2->TickRemain;
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	61fb      	str	r3, [r7, #28]
        p_tcb1  = p_tcb2;
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	627b      	str	r3, [r7, #36]	@ 0x24
        p_tcb2  = p_tcb2->TickNextPtr;
 8007998:	6a3b      	ldr	r3, [r7, #32]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	623b      	str	r3, [r7, #32]
    while ((p_tcb2 !=        (OS_TCB *)0) &&                    /* Find the appropriate position in the delta list.     */
 800799e:	6a3b      	ldr	r3, [r7, #32]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d004      	beq.n	80079ae <OS_TickListInsert+0xee>
           (delta  >= p_tcb2->TickRemain)) {
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    while ((p_tcb2 !=        (OS_TCB *)0) &&                    /* Find the appropriate position in the delta list.     */
 80079a8:	69fa      	ldr	r2, [r7, #28]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d2ed      	bcs.n	800798a <OS_TickListInsert+0xca>
    }

    if (p_tcb2 != (OS_TCB *)0) {                                /* Our entry is not the last element in the list.       */
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d018      	beq.n	80079e6 <OS_TickListInsert+0x126>
        p_tcb1               = p_tcb2->TickPrevPtr;
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	69db      	ldr	r3, [r3, #28]
 80079b8:	627b      	str	r3, [r7, #36]	@ 0x24
        p_tcb->TickRemain    = delta;                           /* Store remaining time                                 */
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	69fa      	ldr	r2, [r7, #28]
 80079be:	651a      	str	r2, [r3, #80]	@ 0x50
        p_tcb->TickPrevPtr   = p_tcb1;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079c4:	61da      	str	r2, [r3, #28]
        p_tcb->TickNextPtr   = p_tcb2;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6a3a      	ldr	r2, [r7, #32]
 80079ca:	619a      	str	r2, [r3, #24]
        p_tcb2->TickRemain  -= delta;                           /* Reduce time of next entry in the list                */
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	1ad2      	subs	r2, r2, r3
 80079d4:	6a3b      	ldr	r3, [r7, #32]
 80079d6:	651a      	str	r2, [r3, #80]	@ 0x50
        p_tcb2->TickPrevPtr  = p_tcb;
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	61da      	str	r2, [r3, #28]
        p_tcb1->TickNextPtr  = p_tcb;
 80079de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	619a      	str	r2, [r3, #24]
 80079e4:	e00b      	b.n	80079fe <OS_TickListInsert+0x13e>

    } else {                                                    /* Our entry belongs at the end of the list.            */
        p_tcb->TickRemain    = delta;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	69fa      	ldr	r2, [r7, #28]
 80079ea:	651a      	str	r2, [r3, #80]	@ 0x50
        p_tcb->TickPrevPtr   = p_tcb1;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079f0:	61da      	str	r2, [r3, #28]
        p_tcb->TickNextPtr   = (OS_TCB *)0;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	619a      	str	r2, [r3, #24]
        p_tcb1->TickNextPtr  = p_tcb;
 80079f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	619a      	str	r2, [r3, #24]
    }

    return (OS_TRUE);
 80079fe:	2301      	movs	r3, #1
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	372c      	adds	r7, #44	@ 0x2c
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	20001de4 	.word	0x20001de4
 8007a10:	20001de8 	.word	0x20001de8

08007a14 <OS_TickListInsertDly>:

void  OS_TickListInsertDly (OS_TCB   *p_tcb,
                            OS_TICK   time,
                            OS_OPT    opt,
                            OS_ERR   *p_err)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b088      	sub	sp, #32
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	603b      	str	r3, [r7, #0]
 8007a20:	4613      	mov	r3, r2
 8007a22:	80fb      	strh	r3, [r7, #6]


#if (OS_CFG_DYN_TICK_EN > 0u)
    elapsed  = OS_DynTickGet();
#else
    elapsed  = 0u;
 8007a24:	2300      	movs	r3, #0
 8007a26:	61bb      	str	r3, [r7, #24]
#endif

    if (opt == OS_OPT_TIME_MATCH) {                             /* MATCH to absolute tick ctr value mode                */
 8007a28:	88fb      	ldrh	r3, [r7, #6]
 8007a2a:	2b04      	cmp	r3, #4
 8007a2c:	d102      	bne.n	8007a34 <OS_TickListInsertDly+0x20>
        tick_base = 0u;                                         /* tick_base + time == time                             */
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61fb      	str	r3, [r7, #28]
 8007a32:	e03b      	b.n	8007aac <OS_TickListInsertDly+0x98>

    } else if (opt == OS_OPT_TIME_PERIODIC) {                   /* PERIODIC mode.                                       */
 8007a34:	88fb      	ldrh	r3, [r7, #6]
 8007a36:	2b08      	cmp	r3, #8
 8007a38:	d135      	bne.n	8007aa6 <OS_TickListInsertDly+0x92>
        if (time == 0u) {
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d104      	bne.n	8007a4a <OS_TickListInsertDly+0x36>
           *p_err = OS_ERR_TIME_ZERO_DLY;                       /* Infinite frequency is invalid.                       */
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	f247 227e 	movw	r2, #29310	@ 0x727e
 8007a46:	801a      	strh	r2, [r3, #0]
            return;
 8007a48:	e047      	b.n	8007ada <OS_TickListInsertDly+0xc6>
        }

        tick_base = p_tcb->TickCtrPrev;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a4e:	61fb      	str	r3, [r7, #28]

#if (OS_CFG_DYN_TICK_EN > 0u)                                   /* How far is our tick-base from the system time?       */
        base_offset = OSTickCtr + elapsed - tick_base;
#else
        base_offset = OSTickCtr - tick_base;
 8007a50:	4b23      	ldr	r3, [pc, #140]	@ (8007ae0 <OS_TickListInsertDly+0xcc>)
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	617b      	str	r3, [r7, #20]
#endif

        if (base_offset >= time) {                              /* If our task missed the last period, move         ... */
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d31a      	bcc.n	8007a98 <OS_TickListInsertDly+0x84>
            tick_base += time * (base_offset / time);           /* ... tick_base up to the next one.                    */
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	fb02 f303 	mul.w	r3, r2, r3
 8007a70:	69fa      	ldr	r2, [r7, #28]
 8007a72:	4413      	add	r3, r2
 8007a74:	61fb      	str	r3, [r7, #28]
            if ((base_offset % time) != 0u) {
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a7e:	68b9      	ldr	r1, [r7, #8]
 8007a80:	fb01 f202 	mul.w	r2, r1, r2
 8007a84:	1a9b      	subs	r3, r3, r2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <OS_TickListInsertDly+0x7e>
                tick_base += time;                              /* Account for rounding errors with integer division    */
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	4413      	add	r3, r2
 8007a90:	61fb      	str	r3, [r7, #28]
            }

            p_tcb->TickCtrPrev = tick_base;                     /* Adjust the periodic tick base                        */
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	69fa      	ldr	r2, [r7, #28]
 8007a96:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        p_tcb->TickCtrPrev += time;                             /* Update for the next time we perform a periodic dly.  */
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	441a      	add	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	655a      	str	r2, [r3, #84]	@ 0x54
 8007aa4:	e002      	b.n	8007aac <OS_TickListInsertDly+0x98>

    } else {                                                    /* RELATIVE time delay mode                             */
#if (OS_CFG_DYN_TICK_EN > 0u)                                   /* Our base is always the current system time.          */
        tick_base = OSTickCtr + elapsed;
#else
        tick_base = OSTickCtr;
 8007aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8007ae0 <OS_TickListInsertDly+0xcc>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	61fb      	str	r3, [r7, #28]
#endif
    }

    valid_dly = OS_TickListInsert(p_tcb, elapsed, tick_base, time);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	69b9      	ldr	r1, [r7, #24]
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f7ff ff04 	bl	80078c0 <OS_TickListInsert>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	74fb      	strb	r3, [r7, #19]

    if (valid_dly == OS_TRUE) {
 8007abc:	7cfb      	ldrb	r3, [r7, #19]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d107      	bne.n	8007ad2 <OS_TickListInsertDly+0xbe>
        p_tcb->TaskState = OS_TASK_STATE_DLY;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
       *p_err            = OS_ERR_NONE;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2200      	movs	r2, #0
 8007ace:	801a      	strh	r2, [r3, #0]
 8007ad0:	e003      	b.n	8007ada <OS_TickListInsertDly+0xc6>
    } else {
       *p_err = OS_ERR_TIME_ZERO_DLY;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	f247 227e 	movw	r2, #29310	@ 0x727e
 8007ad8:	801a      	strh	r2, [r3, #0]
    }
}
 8007ada:	3720      	adds	r7, #32
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	20001de4 	.word	0x20001de4

08007ae4 <OS_TickListRemove>:
*              2) This function is assumed to be called with interrupts disabled.
************************************************************************************************************************
*/

void  OS_TickListRemove (OS_TCB  *p_tcb)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]

#if (OS_CFG_DYN_TICK_EN > 0u)
    elapsed = OS_DynTickGet();
#endif

    p_tcb1 = p_tcb->TickPrevPtr;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	69db      	ldr	r3, [r3, #28]
 8007af0:	617b      	str	r3, [r7, #20]
    p_tcb2 = p_tcb->TickNextPtr;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	613b      	str	r3, [r7, #16]
    p_list = &OSTickList;
 8007af8:	4b28      	ldr	r3, [pc, #160]	@ (8007b9c <OS_TickListRemove+0xb8>)
 8007afa:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d126      	bne.n	8007b50 <OS_TickListRemove+0x6c>
        if (p_tcb2 == (OS_TCB *)0) {                            /* Remove the ONLY entry in the list?                   */
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d109      	bne.n	8007b1c <OS_TickListRemove+0x38>
            p_list->TCB_Ptr      = (OS_TCB *)0;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	601a      	str	r2, [r3, #0]
#if (OS_CFG_DBG_EN > 0u)
            p_list->NbrEntries   =           0u;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	809a      	strh	r2, [r3, #4]
#endif
            p_tcb->TickRemain    =           0u;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	651a      	str	r2, [r3, #80]	@ 0x50
        p_list->NbrEntries--;
#endif
        p_tcb->TickNextPtr       = (OS_TCB *)0;
        p_tcb->TickRemain        =           0u;
    }
}
 8007b1a:	e038      	b.n	8007b8e <OS_TickListRemove+0xaa>
            p_tcb2->TickPrevPtr  = (OS_TCB *)0;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	61da      	str	r2, [r3, #28]
            p_tcb2->TickRemain  += p_tcb->TickRemain;           /* Add back the ticks to the delta                      */
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b2a:	441a      	add	r2, r3
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	651a      	str	r2, [r3, #80]	@ 0x50
            p_list->TCB_Ptr      = p_tcb2;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	601a      	str	r2, [r3, #0]
            p_list->NbrEntries--;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	889b      	ldrh	r3, [r3, #4]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	809a      	strh	r2, [r3, #4]
            p_tcb->TickNextPtr          = (OS_TCB *)0;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	619a      	str	r2, [r3, #24]
            p_tcb->TickRemain           =           0u;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007b4e:	e01e      	b.n	8007b8e <OS_TickListRemove+0xaa>
        p_tcb1->TickNextPtr = p_tcb2;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	619a      	str	r2, [r3, #24]
        if (p_tcb2 != (OS_TCB *)0) {
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d009      	beq.n	8007b70 <OS_TickListRemove+0x8c>
            p_tcb2->TickPrevPtr  = p_tcb1;
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	61da      	str	r2, [r3, #28]
            p_tcb2->TickRemain  += p_tcb->TickRemain;            /* Add back the ticks to the delta list                 */
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b6a:	441a      	add	r2, r3
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	651a      	str	r2, [r3, #80]	@ 0x50
        p_tcb->TickPrevPtr       = (OS_TCB *)0;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	61da      	str	r2, [r3, #28]
        p_list->NbrEntries--;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	889b      	ldrh	r3, [r3, #4]
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	809a      	strh	r2, [r3, #4]
        p_tcb->TickNextPtr       = (OS_TCB *)0;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	619a      	str	r2, [r3, #24]
        p_tcb->TickRemain        =           0u;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007b8e:	bf00      	nop
 8007b90:	371c      	adds	r7, #28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	20001de8 	.word	0x20001de8

08007ba0 <OS_TickListUpdate>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TickListUpdate (OS_TICK  ticks)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
#endif



#if (OS_CFG_DBG_EN > 0u)
    nbr_updated = 0u;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	837b      	strh	r3, [r7, #26]
#endif
    p_list      = &OSTickList;
 8007bac:	4b65      	ldr	r3, [pc, #404]	@ (8007d44 <OS_TickListUpdate+0x1a4>)
 8007bae:	613b      	str	r3, [r7, #16]
    p_tcb       = p_list->TCB_Ptr;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	61fb      	str	r3, [r7, #28]
    if (p_tcb != (OS_TCB *)0) {
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 80bb 	beq.w	8007d34 <OS_TickListUpdate+0x194>
        if (p_tcb->TickRemain <= ticks) {
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d308      	bcc.n	8007bda <OS_TickListUpdate+0x3a>
            ticks              = ticks - p_tcb->TickRemain;
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	607b      	str	r3, [r7, #4]
            p_tcb->TickRemain  = 0u;
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	651a      	str	r2, [r3, #80]	@ 0x50
 8007bd8:	e0a7      	b.n	8007d2a <OS_TickListUpdate+0x18a>
        } else {
            p_tcb->TickRemain -= ticks;
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	1ad2      	subs	r2, r2, r3
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        while (p_tcb->TickRemain == 0u) {
 8007be6:	e0a0      	b.n	8007d2a <OS_TickListUpdate+0x18a>
#if (OS_CFG_DBG_EN > 0u)
            nbr_updated++;
 8007be8:	8b7b      	ldrh	r3, [r7, #26]
 8007bea:	3301      	adds	r3, #1
 8007bec:	837b      	strh	r3, [r7, #26]
#endif

            switch (p_tcb->TaskState) {
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d002      	beq.n	8007bfe <OS_TickListUpdate+0x5e>
 8007bf8:	2b05      	cmp	r3, #5
 8007bfa:	d008      	beq.n	8007c0e <OS_TickListUpdate+0x6e>
 8007bfc:	e00c      	b.n	8007c18 <OS_TickListUpdate+0x78>
                case OS_TASK_STATE_DLY:
                     p_tcb->TaskState = OS_TASK_STATE_RDY;
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                     OS_RdyListInsert(p_tcb);                            /* Insert the task in the ready list                    */
 8007c06:	69f8      	ldr	r0, [r7, #28]
 8007c08:	f7fd fc34 	bl	8005474 <OS_RdyListInsert>
                     break;
 8007c0c:	e062      	b.n	8007cd4 <OS_TickListUpdate+0x134>

                case OS_TASK_STATE_DLY_SUSPENDED:
                     p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	2204      	movs	r2, #4
 8007c12:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                     break;
 8007c16:	e05d      	b.n	8007cd4 <OS_TickListUpdate+0x134>

                default:
#if (OS_CFG_MUTEX_EN > 0u)
                     p_tcb_owner = (OS_TCB *)0;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	617b      	str	r3, [r7, #20]
                     if (p_tcb->PendOn == OS_TASK_PEND_ON_MUTEX) {
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	d103      	bne.n	8007c2e <OS_TickListUpdate+0x8e>
                         p_tcb_owner = (OS_TCB *)((OS_MUTEX *)((void *)p_tcb->PendObjPtr))->OwnerTCBPtr;
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c2c:	617b      	str	r3, [r7, #20]
                     }
#endif

#if (OS_MSG_EN > 0u)
                     p_tcb->MsgPtr  = (void *)0;
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	2200      	movs	r2, #0
 8007c32:	661a      	str	r2, [r3, #96]	@ 0x60
                     p_tcb->MsgSize = 0u;
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif
#if (OS_CFG_TS_EN > 0u)
                     p_tcb->TS      = OS_TS_GET();
#endif
                     OS_PendListRemove(p_tcb);                           /* Remove task from pend list                           */
 8007c3c:	69f8      	ldr	r0, [r7, #28]
 8007c3e:	f7fd fb29 	bl	8005294 <OS_PendListRemove>

                     switch (p_tcb->TaskState) {
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	d002      	beq.n	8007c52 <OS_TickListUpdate+0xb2>
 8007c4c:	2b07      	cmp	r3, #7
 8007c4e:	d008      	beq.n	8007c62 <OS_TickListUpdate+0xc2>
                         case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                              p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
                              break;

                         default:
                              break;
 8007c50:	e00c      	b.n	8007c6c <OS_TickListUpdate+0xcc>
                              OS_RdyListInsert(p_tcb);                   /* Insert the task in the ready list                    */
 8007c52:	69f8      	ldr	r0, [r7, #28]
 8007c54:	f7fd fc0e 	bl	8005474 <OS_RdyListInsert>
                              p_tcb->TaskState  = OS_TASK_STATE_RDY;
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                              break;
 8007c60:	e004      	b.n	8007c6c <OS_TickListUpdate+0xcc>
                              p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	2204      	movs	r2, #4
 8007c66:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                              break;
 8007c6a:	bf00      	nop
                     }
                     p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;         /* Indicate pend timed out                              */
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	2203      	movs	r2, #3
 8007c70:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                     p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                           */
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

#if (OS_CFG_MUTEX_EN > 0u)
                     if (p_tcb_owner != (OS_TCB *)0) {
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d027      	beq.n	8007cd2 <OS_TickListUpdate+0x132>
                         if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d01f      	beq.n	8007cd2 <OS_TickListUpdate+0x132>
                             (p_tcb_owner->Prio == p_tcb->Prio)) {       /* Has the owner inherited a priority?                  */
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
                         if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d117      	bne.n	8007cd2 <OS_TickListUpdate+0x132>
                             prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 8007ca2:	6978      	ldr	r0, [r7, #20]
 8007ca4:	f7fe fd9b 	bl	80067de <OS_MutexGrpPrioFindHighest>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	73fb      	strb	r3, [r7, #15]
                             prio_new = (prio_new > p_tcb_owner->BasePrio) ? p_tcb_owner->BasePrio : prio_new;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cb2:	7bfa      	ldrb	r2, [r7, #15]
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	bf28      	it	cs
 8007cb8:	4613      	movcs	r3, r2
 8007cba:	73fb      	strb	r3, [r7, #15]
                             if (prio_new != p_tcb_owner->Prio) {
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007cc2:	7bfa      	ldrb	r2, [r7, #15]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d004      	beq.n	8007cd2 <OS_TickListUpdate+0x132>
                                 OS_TaskChangePrio(p_tcb_owner, prio_new);
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6978      	ldr	r0, [r7, #20]
 8007cce:	f7ff fd1f 	bl	8007710 <OS_TaskChangePrio>
                                 OS_TRACE_MUTEX_TASK_PRIO_DISINHERIT(p_tcb_owner, p_tcb_owner->Prio);
                             }
                         }
                     }
#endif
                     break;
 8007cd2:	bf00      	nop
            }

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	699a      	ldr	r2, [r3, #24]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	601a      	str	r2, [r3, #0]
            p_tcb           = p_list->TCB_Ptr;                           /* Get 'p_tcb' again for loop                           */
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	61fb      	str	r3, [r7, #28]
            if (p_tcb == (OS_TCB *)0) {
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d103      	bne.n	8007cf0 <OS_TickListUpdate+0x150>
#if (OS_CFG_DBG_EN > 0u)
                p_list->NbrEntries = 0u;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	2200      	movs	r2, #0
 8007cec:	809a      	strh	r2, [r3, #4]
#endif
                break;
 8007cee:	e021      	b.n	8007d34 <OS_TickListUpdate+0x194>
            } else {
#if (OS_CFG_DBG_EN > 0u)
                p_list->NbrEntries--;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	889b      	ldrh	r3, [r3, #4]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	809a      	strh	r2, [r3, #4]
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	61da      	str	r2, [r3, #28]
                if (p_tcb->TickRemain <= ticks) {
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d308      	bcc.n	8007d1e <OS_TickListUpdate+0x17e>
                    ticks              = ticks - p_tcb->TickRemain;
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	607b      	str	r3, [r7, #4]
                    p_tcb->TickRemain  = 0u;
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	651a      	str	r2, [r3, #80]	@ 0x50
 8007d1c:	e005      	b.n	8007d2a <OS_TickListUpdate+0x18a>
                } else {
                    p_tcb->TickRemain -= ticks;
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	1ad2      	subs	r2, r2, r3
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	651a      	str	r2, [r3, #80]	@ 0x50
        while (p_tcb->TickRemain == 0u) {
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f43f af5a 	beq.w	8007be8 <OS_TickListUpdate+0x48>
                }
            }
        }
    }
#if (OS_CFG_DBG_EN > 0u)
    p_list->NbrUpdated = nbr_updated;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	8b7a      	ldrh	r2, [r7, #26]
 8007d38:	80da      	strh	r2, [r3, #6]
#endif
}
 8007d3a:	bf00      	nop
 8007d3c:	3720      	adds	r7, #32
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20001de8 	.word	0x20001de8

08007d48 <OSTimeDly>:
*/

void  OSTimeDly (OS_TICK   dly,
                 OS_OPT    opt,
                 OS_ERR   *p_err)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	460b      	mov	r3, r1
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	817b      	strh	r3, [r7, #10]
#if (OS_CFG_TICK_EN > 0u)
    CPU_SR_ALLOC();
 8007d56:	2300      	movs	r3, #0
 8007d58:	617b      	str	r3, [r7, #20]
    *p_err = OS_ERR_TICK_DISABLED;
    return;
#else

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
 8007d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8007e08 <OSTimeDly+0xc0>)
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d004      	beq.n	8007d6c <OSTimeDly+0x24>
       *p_err = OS_ERR_TIME_DLY_ISR;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f247 2275 	movw	r2, #29301	@ 0x7275
 8007d68:	801a      	strh	r2, [r3, #0]
        return;
 8007d6a:	e049      	b.n	8007e00 <OSTimeDly+0xb8>
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 8007d6c:	4b27      	ldr	r3, [pc, #156]	@ (8007e0c <OSTimeDly+0xc4>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d004      	beq.n	8007d7e <OSTimeDly+0x36>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f645 6289 	movw	r2, #24201	@ 0x5e89
 8007d7a:	801a      	strh	r2, [r3, #0]
        return;
 8007d7c:	e040      	b.n	8007e00 <OSTimeDly+0xb8>
    }
#endif

    if (OSSchedLockNestingCtr > 0u) {                           /* Can't delay when the scheduler is locked             */
 8007d7e:	4b24      	ldr	r3, [pc, #144]	@ (8007e10 <OSTimeDly+0xc8>)
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d004      	beq.n	8007d90 <OSTimeDly+0x48>
       *p_err = OS_ERR_SCHED_LOCKED;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f646 5263 	movw	r2, #28003	@ 0x6d63
 8007d8c:	801a      	strh	r2, [r3, #0]
        return;
 8007d8e:	e037      	b.n	8007e00 <OSTimeDly+0xb8>
    }

    switch (opt) {
 8007d90:	897b      	ldrh	r3, [r7, #10]
 8007d92:	2b08      	cmp	r3, #8
 8007d94:	bf8c      	ite	hi
 8007d96:	2201      	movhi	r2, #1
 8007d98:	2200      	movls	r2, #0
 8007d9a:	b2d2      	uxtb	r2, r2
 8007d9c:	2a00      	cmp	r2, #0
 8007d9e:	d10c      	bne.n	8007dba <OSTimeDly+0x72>
 8007da0:	f240 1215 	movw	r2, #277	@ 0x115
 8007da4:	fa22 f303 	lsr.w	r3, r2, r3
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	bf14      	ite	ne
 8007db0:	2301      	movne	r3, #1
 8007db2:	2300      	moveq	r3, #0
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d104      	bne.n	8007dc4 <OSTimeDly+0x7c>
        case OS_OPT_TIME_PERIODIC:
        case OS_OPT_TIME_MATCH:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f645 6225 	movw	r2, #24101	@ 0x5e25
 8007dc0:	801a      	strh	r2, [r3, #0]
             return;
 8007dc2:	e01d      	b.n	8007e00 <OSTimeDly+0xb8>
             break;
 8007dc4:	bf00      	nop
    }

#if (OS_CFG_TICK_EN > 0u)
    CPU_CRITICAL_ENTER();
 8007dc6:	2040      	movs	r0, #64	@ 0x40
 8007dc8:	f7f8 fa14 	bl	80001f4 <CPU_SR_Save>
 8007dcc:	6178      	str	r0, [r7, #20]
    OS_TickListInsertDly(OSTCBCurPtr,
 8007dce:	4b11      	ldr	r3, [pc, #68]	@ (8007e14 <OSTimeDly+0xcc>)
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	897a      	ldrh	r2, [r7, #10]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	68f9      	ldr	r1, [r7, #12]
 8007dd8:	f7ff fe1c 	bl	8007a14 <OS_TickListInsertDly>
                         dly,
                         opt,
                         p_err);
    if (*p_err != OS_ERR_NONE) {
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d003      	beq.n	8007dec <OSTimeDly+0xa4>
         CPU_CRITICAL_EXIT();
 8007de4:	6978      	ldr	r0, [r7, #20]
 8007de6:	f7f8 fa13 	bl	8000210 <CPU_SR_Restore>
         return;
 8007dea:	e009      	b.n	8007e00 <OSTimeDly+0xb8>
    }

    OS_RdyListRemove(OSTCBCurPtr);                              /* Remove current task from ready list                  */
 8007dec:	4b09      	ldr	r3, [pc, #36]	@ (8007e14 <OSTimeDly+0xcc>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7fd fc2b 	bl	800564c <OS_RdyListRemove>
    CPU_CRITICAL_EXIT();
 8007df6:	6978      	ldr	r0, [r7, #20]
 8007df8:	f7f8 fa0a 	bl	8000210 <CPU_SR_Restore>
    OSSched();                                                  /* Find next task to run!                               */
 8007dfc:	f7fd f80a 	bl	8004e14 <OSSched>
#endif
#endif
}
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	200019ac 	.word	0x200019ac
 8007e0c:	200019ad 	.word	0x200019ad
 8007e10:	20001cec 	.word	0x20001cec
 8007e14:	20001f1c 	.word	0x20001f1c

08007e18 <OSTimeTick>:
* Note(s)    : none
************************************************************************************************************************
*/

void  OSTimeTick (void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	af00      	add	r7, sp, #0
    if (OSRunning != OS_STATE_OS_RUNNING) {
 8007e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e4c <OSTimeTick+0x34>)
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d111      	bne.n	8007e48 <OSTimeTick+0x30>
        return;
    }

    OSTimeTickHook();                                           /* Call user definable hook                             */
 8007e24:	f7fc fe4a 	bl	8004abc <OSTimeTickHook>

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
    OS_SchedRoundRobin(&OSRdyList[OSPrioCur]);                  /* Update quanta ctr for the task which just ran        */
 8007e28:	4b09      	ldr	r3, [pc, #36]	@ (8007e50 <OSTimeTick+0x38>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	4613      	mov	r3, r2
 8007e30:	005b      	lsls	r3, r3, #1
 8007e32:	4413      	add	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4a07      	ldr	r2, [pc, #28]	@ (8007e54 <OSTimeTick+0x3c>)
 8007e38:	4413      	add	r3, r2
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fd fc5e 	bl	80056fc <OS_SchedRoundRobin>
#endif

#if (OS_CFG_TICK_EN > 0u)
    OS_TickUpdate(1u);                                          /* Update from the ISR                                  */
 8007e40:	2001      	movs	r0, #1
 8007e42:	f7ff fd21 	bl	8007888 <OS_TickUpdate>
 8007e46:	e000      	b.n	8007e4a <OSTimeTick+0x32>
        return;
 8007e48:	bf00      	nop
#endif
}
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	200019ad 	.word	0x200019ad
 8007e50:	200019da 	.word	0x200019da
 8007e54:	200019ec 	.word	0x200019ec

08007e58 <OS_TmrInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrInit (OS_ERR  *p_err)
{
 8007e58:	b590      	push	{r4, r7, lr}
 8007e5a:	b08d      	sub	sp, #52	@ 0x34
 8007e5c:	af0a      	add	r7, sp, #40	@ 0x28
 8007e5e:	6078      	str	r0, [r7, #4]
#if (OS_CFG_DBG_EN > 0u)
    OSTmrQty             =           0u;                        /* Keep track of the number of timers created           */
 8007e60:	4b2e      	ldr	r3, [pc, #184]	@ (8007f1c <OS_TmrInit+0xc4>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	801a      	strh	r2, [r3, #0]
    OSTmrDbgListPtr      = (OS_TMR *)0;
 8007e66:	4b2e      	ldr	r3, [pc, #184]	@ (8007f20 <OS_TmrInit+0xc8>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	601a      	str	r2, [r3, #0]
#endif

    OSTmrListPtr         = (OS_TMR *)0;                         /* Create an empty timer list                           */
 8007e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8007f24 <OS_TmrInit+0xcc>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	601a      	str	r2, [r3, #0]
#if (OS_CFG_DBG_EN > 0u)
    OSTmrListEntries     =           0u;
 8007e72:	4b2d      	ldr	r3, [pc, #180]	@ (8007f28 <OS_TmrInit+0xd0>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	801a      	strh	r2, [r3, #0]
#endif
                                                                /* Calculate Timer to Ticks multiplier                  */
    OSTmrToTicksMult = OSCfg_TickRate_Hz / OSCfg_TmrTaskRate_Hz;
 8007e78:	4b2c      	ldr	r3, [pc, #176]	@ (8007f2c <OS_TmrInit+0xd4>)
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	4b2c      	ldr	r3, [pc, #176]	@ (8007f30 <OS_TmrInit+0xd8>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e84:	4a2b      	ldr	r2, [pc, #172]	@ (8007f34 <OS_TmrInit+0xdc>)
 8007e86:	6013      	str	r3, [r2, #0]
#if (OS_CFG_TS_EN > 0u)
    OSTmrTaskTime        =           0u;
    OSTmrTaskTimeMax     =           0u;
#endif

    OSMutexCreate(&OSTmrMutex,                                  /* Use a mutex to protect the timers                    */
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	492b      	ldr	r1, [pc, #172]	@ (8007f38 <OS_TmrInit+0xe0>)
 8007e8c:	482b      	ldr	r0, [pc, #172]	@ (8007f3c <OS_TmrInit+0xe4>)
 8007e8e:	f7fe fb07 	bl	80064a0 <OSMutexCreate>
                  (CPU_CHAR *)0,
#else
                  (CPU_CHAR *)"OS Tmr Mutex",
#endif
                  p_err);
    if (*p_err != OS_ERR_NONE) {
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	881b      	ldrh	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d13b      	bne.n	8007f12 <OS_TmrInit+0xba>
        return;
    }

    OS_TmrCondCreate();
 8007e9a:	f000 fa4d 	bl	8008338 <OS_TmrCondCreate>
                                                                /* -------------- CREATE THE TIMER TASK --------------- */
    if (OSCfg_TmrTaskStkBasePtr == (CPU_STK *)0) {
 8007e9e:	4b28      	ldr	r3, [pc, #160]	@ (8007f40 <OS_TmrInit+0xe8>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d104      	bne.n	8007eb0 <OS_TmrInit+0x58>
       *p_err = OS_ERR_TMR_STK_INVALID;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f247 3247 	movw	r2, #29511	@ 0x7347
 8007eac:	801a      	strh	r2, [r3, #0]
        return;
 8007eae:	e031      	b.n	8007f14 <OS_TmrInit+0xbc>
    }

    if (OSCfg_TmrTaskStkSize < OSCfg_StkSizeMin) {
 8007eb0:	4b24      	ldr	r3, [pc, #144]	@ (8007f44 <OS_TmrInit+0xec>)
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	4b24      	ldr	r3, [pc, #144]	@ (8007f48 <OS_TmrInit+0xf0>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d204      	bcs.n	8007ec6 <OS_TmrInit+0x6e>
       *p_err = OS_ERR_TMR_STK_SIZE_INVALID;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f247 3248 	movw	r2, #29512	@ 0x7348
 8007ec2:	801a      	strh	r2, [r3, #0]
        return;
 8007ec4:	e026      	b.n	8007f14 <OS_TmrInit+0xbc>
    }

    if (OSCfg_TmrTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 8007ec6:	4b21      	ldr	r3, [pc, #132]	@ (8007f4c <OS_TmrInit+0xf4>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ecc:	d904      	bls.n	8007ed8 <OS_TmrInit+0x80>
       *p_err = OS_ERR_TMR_PRIO_INVALID;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f247 3246 	movw	r2, #29510	@ 0x7346
 8007ed4:	801a      	strh	r2, [r3, #0]
        return;
 8007ed6:	e01d      	b.n	8007f14 <OS_TmrInit+0xbc>
    }

    OSTaskCreate(&OSTmrTaskTCB,
 8007ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8007f4c <OS_TmrInit+0xf4>)
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	4a18      	ldr	r2, [pc, #96]	@ (8007f40 <OS_TmrInit+0xe8>)
 8007ede:	6812      	ldr	r2, [r2, #0]
 8007ee0:	491b      	ldr	r1, [pc, #108]	@ (8007f50 <OS_TmrInit+0xf8>)
 8007ee2:	6809      	ldr	r1, [r1, #0]
 8007ee4:	4817      	ldr	r0, [pc, #92]	@ (8007f44 <OS_TmrInit+0xec>)
 8007ee6:	6800      	ldr	r0, [r0, #0]
 8007ee8:	687c      	ldr	r4, [r7, #4]
 8007eea:	9408      	str	r4, [sp, #32]
 8007eec:	240b      	movs	r4, #11
 8007eee:	9407      	str	r4, [sp, #28]
 8007ef0:	2400      	movs	r4, #0
 8007ef2:	9406      	str	r4, [sp, #24]
 8007ef4:	2400      	movs	r4, #0
 8007ef6:	9405      	str	r4, [sp, #20]
 8007ef8:	2400      	movs	r4, #0
 8007efa:	9404      	str	r4, [sp, #16]
 8007efc:	9003      	str	r0, [sp, #12]
 8007efe:	9102      	str	r1, [sp, #8]
 8007f00:	9201      	str	r2, [sp, #4]
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	2300      	movs	r3, #0
 8007f06:	4a13      	ldr	r2, [pc, #76]	@ (8007f54 <OS_TmrInit+0xfc>)
 8007f08:	4913      	ldr	r1, [pc, #76]	@ (8007f58 <OS_TmrInit+0x100>)
 8007f0a:	4814      	ldr	r0, [pc, #80]	@ (8007f5c <OS_TmrInit+0x104>)
 8007f0c:	f7fe fff0 	bl	8006ef0 <OSTaskCreate>
 8007f10:	e000      	b.n	8007f14 <OS_TmrInit+0xbc>
        return;
 8007f12:	bf00      	nop
                  0u,
                  0u,
                 (void     *)0,
                 (OS_OPT_TASK_STK_CHK | (OS_OPT)(OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS)),
                  p_err);
}
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd90      	pop	{r4, r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20001e4c 	.word	0x20001e4c
 8007f20:	20001df0 	.word	0x20001df0
 8007f24:	20001df8 	.word	0x20001df8
 8007f28:	20001df4 	.word	0x20001df4
 8007f2c:	080086d8 	.word	0x080086d8
 8007f30:	080086e0 	.word	0x080086e0
 8007f34:	20001f18 	.word	0x20001f18
 8007f38:	08008664 	.word	0x08008664
 8007f3c:	20001e20 	.word	0x20001e20
 8007f40:	080086e4 	.word	0x080086e4
 8007f44:	080086ec 	.word	0x080086ec
 8007f48:	080086d4 	.word	0x080086d4
 8007f4c:	080086dc 	.word	0x080086dc
 8007f50:	080086e8 	.word	0x080086e8
 8007f54:	080081d1 	.word	0x080081d1
 8007f58:	08008674 	.word	0x08008674
 8007f5c:	20001e50 	.word	0x20001e50

08007f60 <OS_TmrLink>:
************************************************************************************************************************
*/

void OS_TmrLink (OS_TMR   *p_tmr,
                 OS_TICK   time)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
    OS_TMR   *p_tmr2;
    OS_TICK   remain;
    OS_TICK   delta;


    if (OSTmrListPtr == (OS_TMR *)0) {                          /* Is the list empty?                                   */
 8007f6a:	4b48      	ldr	r3, [pc, #288]	@ (800808c <OS_TmrLink+0x12c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d111      	bne.n	8007f96 <OS_TmrLink+0x36>
        p_tmr->NextPtr    = (OS_TMR *)0;                        /* Yes, this is the first entry                         */
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	611a      	str	r2, [r3, #16]
        p_tmr->PrevPtr    = (OS_TMR *)0;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	615a      	str	r2, [r3, #20]
        OSTmrListPtr      = p_tmr;
 8007f7e:	4a43      	ldr	r2, [pc, #268]	@ (800808c <OS_TmrLink+0x12c>)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6013      	str	r3, [r2, #0]
#if (OS_CFG_DBG_EN > 0u)
        OSTmrListEntries  = 1u;
 8007f84:	4b42      	ldr	r3, [pc, #264]	@ (8008090 <OS_TmrLink+0x130>)
 8007f86:	2201      	movs	r2, #1
 8007f88:	801a      	strh	r2, [r3, #0]
#endif
        OSTmrTaskTickBase = time;
 8007f8a:	4a42      	ldr	r2, [pc, #264]	@ (8008094 <OS_TmrLink+0x134>)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	6013      	str	r3, [r2, #0]
        OS_TmrCondSignal();
 8007f90:	f000 fa88 	bl	80084a4 <OS_TmrCondSignal>

        return;
 8007f94:	e076      	b.n	8008084 <OS_TmrLink+0x124>
    }

#if (OS_CFG_DBG_EN > 0u)
    OSTmrListEntries++;
 8007f96:	4b3e      	ldr	r3, [pc, #248]	@ (8008090 <OS_TmrLink+0x130>)
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	4b3c      	ldr	r3, [pc, #240]	@ (8008090 <OS_TmrLink+0x130>)
 8007fa0:	801a      	strh	r2, [r3, #0]
#endif

    delta = (time + p_tmr->Remain) - OSTmrTaskTickBase;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	699a      	ldr	r2, [r3, #24]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	441a      	add	r2, r3
 8007faa:	4b3a      	ldr	r3, [pc, #232]	@ (8008094 <OS_TmrLink+0x134>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	60fb      	str	r3, [r7, #12]

    p_tmr2 = OSTmrListPtr;                                      /* No,  Insert somewhere in the list in delta order     */
 8007fb2:	4b36      	ldr	r3, [pc, #216]	@ (800808c <OS_TmrLink+0x12c>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	613b      	str	r3, [r7, #16]
    remain = p_tmr2->Remain;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	60bb      	str	r3, [r7, #8]

    if ((delta           <     remain) &&
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d21a      	bcs.n	8007ffc <OS_TmrLink+0x9c>
        (p_tmr2->PrevPtr == (OS_TMR *)0)) {                     /* Are we the new head of the list?                     */
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	695b      	ldr	r3, [r3, #20]
    if ((delta           <     remain) &&
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d116      	bne.n	8007ffc <OS_TmrLink+0x9c>
        p_tmr2->Remain    =  remain - delta;
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	1ad2      	subs	r2, r2, r3
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	619a      	str	r2, [r3, #24]
        p_tmr->PrevPtr    = (OS_TMR *)0;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	615a      	str	r2, [r3, #20]
        p_tmr->NextPtr    =  p_tmr2;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	611a      	str	r2, [r3, #16]
        p_tmr2->PrevPtr   =  p_tmr;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	615a      	str	r2, [r3, #20]
        OSTmrListPtr      =  p_tmr;
 8007fea:	4a28      	ldr	r2, [pc, #160]	@ (800808c <OS_TmrLink+0x12c>)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6013      	str	r3, [r2, #0]

        OSTmrTaskTickBase = time;
 8007ff0:	4a28      	ldr	r2, [pc, #160]	@ (8008094 <OS_TmrLink+0x134>)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	6013      	str	r3, [r2, #0]
        OS_TmrCondSignal();
 8007ff6:	f000 fa55 	bl	80084a4 <OS_TmrCondSignal>

        return;
 8007ffa:	e043      	b.n	8008084 <OS_TmrLink+0x124>
    }

                                                                /* No                                                   */
    delta  -= remain;                                           /* Make delta relative to the current head.             */
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	60fb      	str	r3, [r7, #12]
    p_tmr1  = p_tmr2;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	617b      	str	r3, [r7, #20]
    p_tmr2  = p_tmr1->NextPtr;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	613b      	str	r3, [r7, #16]


    while ((p_tmr2 !=        (OS_TMR *)0) &&                    /* Find the appropriate position in the delta list.     */
 800800e:	e009      	b.n	8008024 <OS_TmrLink+0xc4>
           (delta  >= p_tmr2->Remain)) {
        delta  -= p_tmr2->Remain;                               /* Update our delta as we traverse the list.            */
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	60fb      	str	r3, [r7, #12]
        p_tmr1  = p_tmr2;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	617b      	str	r3, [r7, #20]
        p_tmr2  = p_tmr2->NextPtr;
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	613b      	str	r3, [r7, #16]
    while ((p_tmr2 !=        (OS_TMR *)0) &&                    /* Find the appropriate position in the delta list.     */
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d004      	beq.n	8008034 <OS_TmrLink+0xd4>
           (delta  >= p_tmr2->Remain)) {
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	699b      	ldr	r3, [r3, #24]
    while ((p_tmr2 !=        (OS_TMR *)0) &&                    /* Find the appropriate position in the delta list.     */
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	429a      	cmp	r2, r3
 8008032:	d2ed      	bcs.n	8008010 <OS_TmrLink+0xb0>
    }


    if (p_tmr2 != (OS_TMR *)0) {                                /* Our entry is not the last element in the list.       */
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d018      	beq.n	800806c <OS_TmrLink+0x10c>
        p_tmr1           = p_tmr2->PrevPtr;
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	617b      	str	r3, [r7, #20]
        p_tmr->Remain    = delta;                               /* Store remaining time                                 */
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	619a      	str	r2, [r3, #24]
        p_tmr->PrevPtr   = p_tmr1;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	615a      	str	r2, [r3, #20]
        p_tmr->NextPtr   = p_tmr2;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	611a      	str	r2, [r3, #16]
        p_tmr2->Remain  -= delta;                               /* Reduce time of next entry in the list                */
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	699a      	ldr	r2, [r3, #24]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	1ad2      	subs	r2, r2, r3
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	619a      	str	r2, [r3, #24]
        p_tmr2->PrevPtr  = p_tmr;
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	615a      	str	r2, [r3, #20]
        p_tmr1->NextPtr  = p_tmr;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	611a      	str	r2, [r3, #16]
 800806a:	e00b      	b.n	8008084 <OS_TmrLink+0x124>

    } else {                                                    /* Our entry belongs at the end of the list.            */
        p_tmr->Remain    = delta;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	619a      	str	r2, [r3, #24]
        p_tmr->PrevPtr   = p_tmr1;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	615a      	str	r2, [r3, #20]
        p_tmr->NextPtr   = (OS_TMR *)0;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	611a      	str	r2, [r3, #16]
        p_tmr1->NextPtr  = p_tmr;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	611a      	str	r2, [r3, #16]
    }
}
 8008084:	3718      	adds	r7, #24
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20001df8 	.word	0x20001df8
 8008090:	20001df4 	.word	0x20001df4
 8008094:	20001f14 	.word	0x20001f14

08008098 <OS_TmrUnlink>:
************************************************************************************************************************
*/

void  OS_TmrUnlink (OS_TMR   *p_tmr,
                    OS_TICK   time)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
    OS_TMR   *p_tmr1;
    OS_TMR   *p_tmr2;
    OS_TICK   elapsed;


    p_tmr1                          = p_tmr->PrevPtr;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	60fb      	str	r3, [r7, #12]
    p_tmr2                          = p_tmr->NextPtr;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	617b      	str	r3, [r7, #20]
    if (p_tmr1 == (OS_TMR *)0) {
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d163      	bne.n	800817c <OS_TmrUnlink+0xe4>
        if (p_tmr2 == (OS_TMR *)0) {                            /* Remove the ONLY entry in the list?                   */
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10e      	bne.n	80080d8 <OS_TmrUnlink+0x40>
            OSTmrListPtr            = (OS_TMR *)0;
 80080ba:	4b42      	ldr	r3, [pc, #264]	@ (80081c4 <OS_TmrUnlink+0x12c>)
 80080bc:	2200      	movs	r2, #0
 80080be:	601a      	str	r2, [r3, #0]
#if (OS_CFG_DBG_EN > 0u)
            OSTmrListEntries        = 0u;
 80080c0:	4b41      	ldr	r3, [pc, #260]	@ (80081c8 <OS_TmrUnlink+0x130>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	801a      	strh	r2, [r3, #0]
#endif
            p_tmr->Remain           = 0u;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	619a      	str	r2, [r3, #24]

            OSTmrTaskTickBase       = time;
 80080cc:	4a3f      	ldr	r2, [pc, #252]	@ (80081cc <OS_TmrUnlink+0x134>)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	6013      	str	r3, [r2, #0]
            OS_TmrCondSignal();
 80080d2:	f000 f9e7 	bl	80084a4 <OS_TmrCondSignal>
        }
        p_tmr->PrevPtr              = (OS_TMR *)0;
        p_tmr->NextPtr              = (OS_TMR *)0;
        p_tmr->Remain               =           0u;
    }
}
 80080d6:	e070      	b.n	80081ba <OS_TmrUnlink+0x122>
            OSTmrListEntries--;
 80080d8:	4b3b      	ldr	r3, [pc, #236]	@ (80081c8 <OS_TmrUnlink+0x130>)
 80080da:	881b      	ldrh	r3, [r3, #0]
 80080dc:	3b01      	subs	r3, #1
 80080de:	b29a      	uxth	r2, r3
 80080e0:	4b39      	ldr	r3, [pc, #228]	@ (80081c8 <OS_TmrUnlink+0x130>)
 80080e2:	801a      	strh	r2, [r3, #0]
            elapsed                 = time - OSTmrTaskTickBase;
 80080e4:	4b39      	ldr	r3, [pc, #228]	@ (80081cc <OS_TmrUnlink+0x134>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	613b      	str	r3, [r7, #16]
            p_tmr2->PrevPtr         = (OS_TMR *)0;
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2200      	movs	r2, #0
 80080f2:	615a      	str	r2, [r3, #20]
            p_tmr2->Remain         += p_tmr->Remain;            /* Add back the ticks to the delta                      */
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	699a      	ldr	r2, [r3, #24]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	441a      	add	r2, r3
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	619a      	str	r2, [r3, #24]
            OSTmrListPtr            = p_tmr2;
 8008102:	4a30      	ldr	r2, [pc, #192]	@ (80081c4 <OS_TmrUnlink+0x12c>)
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	6013      	str	r3, [r2, #0]
            while ((elapsed >           0u) &&
 8008108:	e01a      	b.n	8008140 <OS_TmrUnlink+0xa8>
                if (elapsed > p_tmr2->Remain) {
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	429a      	cmp	r2, r3
 8008112:	d908      	bls.n	8008126 <OS_TmrUnlink+0x8e>
                    elapsed        -= p_tmr2->Remain;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	613b      	str	r3, [r7, #16]
                    p_tmr2->Remain  = 0u;
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	2200      	movs	r2, #0
 8008122:	619a      	str	r2, [r3, #24]
 8008124:	e007      	b.n	8008136 <OS_TmrUnlink+0x9e>
                    p_tmr2->Remain -= elapsed;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	699a      	ldr	r2, [r3, #24]
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	1ad2      	subs	r2, r2, r3
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	619a      	str	r2, [r3, #24]
                    elapsed         = 0u;
 8008132:	2300      	movs	r3, #0
 8008134:	613b      	str	r3, [r7, #16]
                p_tmr1              = p_tmr2;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	60fb      	str	r3, [r7, #12]
                p_tmr2              = p_tmr1->NextPtr;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	617b      	str	r3, [r7, #20]
            while ((elapsed >           0u) &&
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d002      	beq.n	800814c <OS_TmrUnlink+0xb4>
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1de      	bne.n	800810a <OS_TmrUnlink+0x72>
            if ((OSTmrListPtr->Remain != p_tmr->Remain) ||      /* Reload if new head has a different delay         ... */
 800814c:	4b1d      	ldr	r3, [pc, #116]	@ (80081c4 <OS_TmrUnlink+0x12c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	699a      	ldr	r2, [r3, #24]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	429a      	cmp	r2, r3
 8008158:	d104      	bne.n	8008164 <OS_TmrUnlink+0xcc>
                (OSTmrListPtr->Remain ==            0u)) {      /* ... or has already timed out.                        */
 800815a:	4b1a      	ldr	r3, [pc, #104]	@ (80081c4 <OS_TmrUnlink+0x12c>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	699b      	ldr	r3, [r3, #24]
            if ((OSTmrListPtr->Remain != p_tmr->Remain) ||      /* Reload if new head has a different delay         ... */
 8008160:	2b00      	cmp	r3, #0
 8008162:	d104      	bne.n	800816e <OS_TmrUnlink+0xd6>
                OSTmrTaskTickBase   = time;
 8008164:	4a19      	ldr	r2, [pc, #100]	@ (80081cc <OS_TmrUnlink+0x134>)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	6013      	str	r3, [r2, #0]
                OS_TmrCondSignal();
 800816a:	f000 f99b 	bl	80084a4 <OS_TmrCondSignal>
            p_tmr->NextPtr          = (OS_TMR *)0;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	611a      	str	r2, [r3, #16]
            p_tmr->Remain           =           0u;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	619a      	str	r2, [r3, #24]
}
 800817a:	e01e      	b.n	80081ba <OS_TmrUnlink+0x122>
        OSTmrListEntries--;
 800817c:	4b12      	ldr	r3, [pc, #72]	@ (80081c8 <OS_TmrUnlink+0x130>)
 800817e:	881b      	ldrh	r3, [r3, #0]
 8008180:	3b01      	subs	r3, #1
 8008182:	b29a      	uxth	r2, r3
 8008184:	4b10      	ldr	r3, [pc, #64]	@ (80081c8 <OS_TmrUnlink+0x130>)
 8008186:	801a      	strh	r2, [r3, #0]
        p_tmr1->NextPtr             = p_tmr2;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	611a      	str	r2, [r3, #16]
        if (p_tmr2 != (OS_TMR *)0) {
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d009      	beq.n	80081a8 <OS_TmrUnlink+0x110>
            p_tmr2->PrevPtr         = p_tmr1;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	615a      	str	r2, [r3, #20]
            p_tmr2->Remain         += p_tmr->Remain;            /* Add back the ticks to the delta list                 */
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	699a      	ldr	r2, [r3, #24]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	441a      	add	r2, r3
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	619a      	str	r2, [r3, #24]
        p_tmr->PrevPtr              = (OS_TMR *)0;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	615a      	str	r2, [r3, #20]
        p_tmr->NextPtr              = (OS_TMR *)0;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	611a      	str	r2, [r3, #16]
        p_tmr->Remain               =           0u;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	619a      	str	r2, [r3, #24]
}
 80081ba:	bf00      	nop
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20001df8 	.word	0x20001df8
 80081c8:	20001df4 	.word	0x20001df4
 80081cc:	20001f14 	.word	0x20001f14

080081d0 <OS_TmrTask>:
*              3) Timer callbacks are allowed to make calls to the Timer APIs.
************************************************************************************************************************
*/

void  OS_TmrTask (void  *p_arg)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b088      	sub	sp, #32
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
    OS_TICK               elapsed;
    OS_TICK               time;
#if (OS_CFG_TS_EN > 0u)
    CPU_TS                ts_start;
#endif
    CPU_SR_ALLOC();
 80081d8:	2300      	movs	r3, #0
 80081da:	613b      	str	r3, [r7, #16]


    (void)p_arg;                                                /* Not using 'p_arg', prevent compiler warning          */

    OS_TmrLock();
 80081dc:	f000 f89a 	bl	8008314 <OS_TmrLock>

    for (;;) {
        if (OSTmrListPtr == (OS_TMR *)0) {
 80081e0:	4b49      	ldr	r3, [pc, #292]	@ (8008308 <OS_TmrTask+0x138>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d102      	bne.n	80081ee <OS_TmrTask+0x1e>
            timeout                = 0u;
 80081e8:	2300      	movs	r3, #0
 80081ea:	61bb      	str	r3, [r7, #24]
 80081ec:	e003      	b.n	80081f6 <OS_TmrTask+0x26>
        } else {
            timeout                = OSTmrListPtr->Remain;
 80081ee:	4b46      	ldr	r3, [pc, #280]	@ (8008308 <OS_TmrTask+0x138>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	61bb      	str	r3, [r7, #24]
        }

        OS_TmrCondWait(timeout);                                /* Suspend the timer task until it needs to process ... */
 80081f6:	69b8      	ldr	r0, [r7, #24]
 80081f8:	f000 f8c0 	bl	800837c <OS_TmrCondWait>
                                                                /* ... the timer list again. Also release the mutex ... */
                                                                /* ... so that application tasks can add/remove timers. */

        if (OSTmrListPtr == (OS_TMR *)0) {                      /* Suppresses static analyzer warnings.                 */
 80081fc:	4b42      	ldr	r3, [pc, #264]	@ (8008308 <OS_TmrTask+0x138>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d07f      	beq.n	8008304 <OS_TmrTask+0x134>

#if (OS_CFG_TS_EN > 0u)
        ts_start = OS_TS_GET();
#endif

        CPU_CRITICAL_ENTER();
 8008204:	2040      	movs	r0, #64	@ 0x40
 8008206:	f7f7 fff5 	bl	80001f4 <CPU_SR_Save>
 800820a:	6138      	str	r0, [r7, #16]
#if (OS_CFG_DYN_TICK_EN > 0u)
        time                       = OSTickCtr + OS_DynTickGet();
#else
        time                       = OSTickCtr;
 800820c:	4b3f      	ldr	r3, [pc, #252]	@ (800830c <OS_TmrTask+0x13c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	60fb      	str	r3, [r7, #12]
#endif
        CPU_CRITICAL_EXIT();
 8008212:	6938      	ldr	r0, [r7, #16]
 8008214:	f7f7 fffc 	bl	8000210 <CPU_SR_Restore>
        elapsed                    = time - OSTmrTaskTickBase;
 8008218:	4b3d      	ldr	r3, [pc, #244]	@ (8008310 <OS_TmrTask+0x140>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	617b      	str	r3, [r7, #20]
        OSTmrTaskTickBase          = time;
 8008222:	4a3b      	ldr	r2, [pc, #236]	@ (8008310 <OS_TmrTask+0x140>)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6013      	str	r3, [r2, #0]

                                                                /* Update the delta values.                             */
        p_tmr = OSTmrListPtr;
 8008228:	4b37      	ldr	r3, [pc, #220]	@ (8008308 <OS_TmrTask+0x138>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	61fb      	str	r3, [r7, #28]
        while ((elapsed !=          0u) &&
 800822e:	e018      	b.n	8008262 <OS_TmrTask+0x92>
               (p_tmr   != (OS_TMR *)0)) {

            if (elapsed > p_tmr->Remain) {
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	429a      	cmp	r2, r3
 8008238:	d908      	bls.n	800824c <OS_TmrTask+0x7c>
                elapsed           -= p_tmr->Remain;
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	617b      	str	r3, [r7, #20]
                p_tmr->Remain      = 0u;
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	2200      	movs	r2, #0
 8008248:	619a      	str	r2, [r3, #24]
 800824a:	e007      	b.n	800825c <OS_TmrTask+0x8c>
            } else {
                p_tmr->Remain     -= elapsed;
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	699a      	ldr	r2, [r3, #24]
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	1ad2      	subs	r2, r2, r3
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	619a      	str	r2, [r3, #24]
                elapsed            = 0u;
 8008258:	2300      	movs	r3, #0
 800825a:	617b      	str	r3, [r7, #20]
            }

            p_tmr                  = p_tmr->NextPtr;
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	61fb      	str	r3, [r7, #28]
        while ((elapsed !=          0u) &&
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <OS_TmrTask+0x9e>
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1e0      	bne.n	8008230 <OS_TmrTask+0x60>
        }

                                                                /* Process timers that have expired.                    */
        p_tmr                      = OSTmrListPtr;
 800826e:	4b26      	ldr	r3, [pc, #152]	@ (8008308 <OS_TmrTask+0x138>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	61fb      	str	r3, [r7, #28]

        while ((p_tmr         != (OS_TMR *)0) &&
 8008274:	e03d      	b.n	80082f2 <OS_TmrTask+0x122>
               (p_tmr->Remain ==          0u)) {
            p_tmr->State           = OS_TMR_STATE_TIMEOUT;
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	2204      	movs	r2, #4
 800827a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                                                                /* Execute callback function if available               */
            p_fnct                 = p_tmr->CallbackPtr;
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	60bb      	str	r3, [r7, #8]
            if (p_fnct != (OS_TMR_CALLBACK_PTR)0u) {
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d005      	beq.n	8008296 <OS_TmrTask+0xc6>
                (*p_fnct)(p_tmr, p_tmr->CallbackPtrArg);
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	68da      	ldr	r2, [r3, #12]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	4611      	mov	r1, r2
 8008292:	69f8      	ldr	r0, [r7, #28]
 8008294:	4798      	blx	r3
            }

            if (p_tmr->State == OS_TMR_STATE_TIMEOUT) {
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800829c:	2b04      	cmp	r3, #4
 800829e:	d125      	bne.n	80082ec <OS_TmrTask+0x11c>
                OS_TmrUnlink(p_tmr, OSTmrTaskTickBase);
 80082a0:	4b1b      	ldr	r3, [pc, #108]	@ (8008310 <OS_TmrTask+0x140>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4619      	mov	r1, r3
 80082a6:	69f8      	ldr	r0, [r7, #28]
 80082a8:	f7ff fef6 	bl	8008098 <OS_TmrUnlink>

                if (p_tmr->Opt == OS_OPT_TMR_PERIODIC) {
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d10e      	bne.n	80082d2 <OS_TmrTask+0x102>
                    p_tmr->State   = OS_TMR_STATE_RUNNING;
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	2202      	movs	r2, #2
 80082b8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                    p_tmr->Remain  = p_tmr->Period;
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	6a1a      	ldr	r2, [r3, #32]
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	619a      	str	r2, [r3, #24]
                    OS_TmrLink(p_tmr, OSTmrTaskTickBase);
 80082c4:	4b12      	ldr	r3, [pc, #72]	@ (8008310 <OS_TmrTask+0x140>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4619      	mov	r1, r3
 80082ca:	69f8      	ldr	r0, [r7, #28]
 80082cc:	f7ff fe48 	bl	8007f60 <OS_TmrLink>
 80082d0:	e00c      	b.n	80082ec <OS_TmrTask+0x11c>
                } else {
                    p_tmr->PrevPtr = (OS_TMR *)0;
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	2200      	movs	r2, #0
 80082d6:	615a      	str	r2, [r3, #20]
                    p_tmr->NextPtr = (OS_TMR *)0;
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	2200      	movs	r2, #0
 80082dc:	611a      	str	r2, [r3, #16]
                    p_tmr->Remain  = 0u;
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	2200      	movs	r2, #0
 80082e2:	619a      	str	r2, [r3, #24]
                    p_tmr->State   = OS_TMR_STATE_COMPLETED;
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	2203      	movs	r2, #3
 80082e8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                }
            }

            p_tmr                  = OSTmrListPtr;
 80082ec:	4b06      	ldr	r3, [pc, #24]	@ (8008308 <OS_TmrTask+0x138>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	61fb      	str	r3, [r7, #28]
        while ((p_tmr         != (OS_TMR *)0) &&
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f43f af73 	beq.w	80081e0 <OS_TmrTask+0x10>
               (p_tmr->Remain ==          0u)) {
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	699b      	ldr	r3, [r3, #24]
        while ((p_tmr         != (OS_TMR *)0) &&
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d0b9      	beq.n	8008276 <OS_TmrTask+0xa6>
 8008302:	e76d      	b.n	80081e0 <OS_TmrTask+0x10>
            continue;
 8008304:	bf00      	nop
        if (OSTmrListPtr == (OS_TMR *)0) {
 8008306:	e76b      	b.n	80081e0 <OS_TmrTask+0x10>
 8008308:	20001df8 	.word	0x20001df8
 800830c:	20001de4 	.word	0x20001de4
 8008310:	20001f14 	.word	0x20001f14

08008314 <OS_TmrLock>:
* Note(s)    : 1) These functions are INTERNAL to uC/OS-III and your application MUST NOT call them.
************************************************************************************************************************
*/

static  void  OS_TmrLock (void)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af02      	add	r7, sp, #8
    OS_ERR  err;


    OSMutexPend(&OSTmrMutex, 0u, OS_OPT_PEND_BLOCKING, (CPU_TS *)0, &err);
 800831a:	1dbb      	adds	r3, r7, #6
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	2300      	movs	r3, #0
 8008320:	2200      	movs	r2, #0
 8008322:	2100      	movs	r1, #0
 8008324:	4803      	ldr	r0, [pc, #12]	@ (8008334 <OS_TmrLock+0x20>)
 8008326:	f7fe f913 	bl	8006550 <OSMutexPend>
}
 800832a:	bf00      	nop
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	20001e20 	.word	0x20001e20

08008338 <OS_TmrCondCreate>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrCondCreate (void)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 800833e:	2300      	movs	r3, #0
 8008340:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 8008342:	2040      	movs	r0, #64	@ 0x40
 8008344:	f7f7 ff56 	bl	80001f4 <CPU_SR_Save>
 8008348:	6078      	str	r0, [r7, #4]
#if (OS_OBJ_TYPE_REQ > 0u)
    OSTmrCond.Type  = OS_OBJ_TYPE_COND;                         /* Mark the data structure as a condition variable.     */
 800834a:	4b08      	ldr	r3, [pc, #32]	@ (800836c <OS_TmrCondCreate+0x34>)
 800834c:	4a08      	ldr	r2, [pc, #32]	@ (8008370 <OS_TmrCondCreate+0x38>)
 800834e:	601a      	str	r2, [r3, #0]
#endif
    OSTmrCond.Mutex = &OSTmrMutex;                              /* Bind the timer mutex to the condition variable.      */
 8008350:	4b06      	ldr	r3, [pc, #24]	@ (800836c <OS_TmrCondCreate+0x34>)
 8008352:	4a08      	ldr	r2, [pc, #32]	@ (8008374 <OS_TmrCondCreate+0x3c>)
 8008354:	621a      	str	r2, [r3, #32]
    OS_PendListInit(&OSTmrCond.PendList);                       /* Initialize the waiting list                          */
 8008356:	4808      	ldr	r0, [pc, #32]	@ (8008378 <OS_TmrCondCreate+0x40>)
 8008358:	f7fc ff1d 	bl	8005196 <OS_PendListInit>
    CPU_CRITICAL_EXIT();
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f7f7 ff57 	bl	8000210 <CPU_SR_Restore>
}
 8008362:	bf00      	nop
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	20001dfc 	.word	0x20001dfc
 8008370:	444e4f43 	.word	0x444e4f43
 8008374:	20001e20 	.word	0x20001e20
 8008378:	20001e04 	.word	0x20001e04

0800837c <OS_TmrCondWait>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrCondWait (OS_TICK  timeout)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b088      	sub	sp, #32
 8008380:	af02      	add	r7, sp, #8
 8008382:	6078      	str	r0, [r7, #4]
    OS_TCB        *p_tcb;
    OS_PEND_LIST  *p_pend_list;
    CPU_TS         ts;
    CPU_SR_ALLOC();
 8008384:	2300      	movs	r3, #0
 8008386:	617b      	str	r3, [r7, #20]


    CPU_CRITICAL_ENTER();
 8008388:	2040      	movs	r0, #64	@ 0x40
 800838a:	f7f7 ff33 	bl	80001f4 <CPU_SR_Save>
 800838e:	6178      	str	r0, [r7, #20]
#if (OS_CFG_TS_EN > 0u)
    ts             = OS_TS_GET();                               /* Get timestamp                                        */
    OSTmrMutex.TS  = ts;
#else
    ts             = 0u;
 8008390:	2300      	movs	r3, #0
 8008392:	613b      	str	r3, [r7, #16]
#endif
                                                                /* Release mutex to other tasks.                        */
    OS_MutexGrpRemove(&OSTmrTaskTCB, &OSTmrMutex);
 8008394:	493e      	ldr	r1, [pc, #248]	@ (8008490 <OS_TmrCondWait+0x114>)
 8008396:	483f      	ldr	r0, [pc, #252]	@ (8008494 <OS_TmrCondWait+0x118>)
 8008398:	f7fe fa04 	bl	80067a4 <OS_MutexGrpRemove>
    p_pend_list                    = &OSTmrMutex.PendList;
 800839c:	4b3e      	ldr	r3, [pc, #248]	@ (8008498 <OS_TmrCondWait+0x11c>)
 800839e:	60fb      	str	r3, [r7, #12]

    if (OSTmrTaskTCB.Prio != OSTmrTaskTCB.BasePrio) {           /* Restore our original prio.                           */
 80083a0:	4b3c      	ldr	r3, [pc, #240]	@ (8008494 <OS_TmrCondWait+0x118>)
 80083a2:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 80083a6:	4b3b      	ldr	r3, [pc, #236]	@ (8008494 <OS_TmrCondWait+0x118>)
 80083a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d00a      	beq.n	80083c6 <OS_TmrCondWait+0x4a>
        OS_TRACE_MUTEX_TASK_PRIO_DISINHERIT(&OSTmrTaskTCB, OSTmrTaskTCB.Prio);
        OSTmrTaskTCB.Prio          = OSTmrTaskTCB.BasePrio;
 80083b0:	4b38      	ldr	r3, [pc, #224]	@ (8008494 <OS_TmrCondWait+0x118>)
 80083b2:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 80083b6:	4b37      	ldr	r3, [pc, #220]	@ (8008494 <OS_TmrCondWait+0x118>)
 80083b8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        OSPrioCur                  = OSTmrTaskTCB.BasePrio;
 80083bc:	4b35      	ldr	r3, [pc, #212]	@ (8008494 <OS_TmrCondWait+0x118>)
 80083be:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 80083c2:	4b36      	ldr	r3, [pc, #216]	@ (800849c <OS_TmrCondWait+0x120>)
 80083c4:	701a      	strb	r2, [r3, #0]
    }

    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* Any task waiting on mutex?                           */
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d107      	bne.n	80083de <OS_TmrCondWait+0x62>
        OSTmrMutex.OwnerTCBPtr     = (OS_TCB *)0;               /* No                                                   */
 80083ce:	4b30      	ldr	r3, [pc, #192]	@ (8008490 <OS_TmrCondWait+0x114>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	625a      	str	r2, [r3, #36]	@ 0x24
        OSTmrMutex.OwnerNestingCtr =           0u;
 80083d4:	4b2e      	ldr	r3, [pc, #184]	@ (8008490 <OS_TmrCondWait+0x114>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80083dc:	e015      	b.n	800840a <OS_TmrCondWait+0x8e>
    } else {
        p_tcb                      = p_pend_list->HeadPtr;      /* Yes, give mutex to new owner                         */
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	60bb      	str	r3, [r7, #8]
        OSTmrMutex.OwnerTCBPtr     = p_tcb;
 80083e4:	4a2a      	ldr	r2, [pc, #168]	@ (8008490 <OS_TmrCondWait+0x114>)
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	6253      	str	r3, [r2, #36]	@ 0x24
        OSTmrMutex.OwnerNestingCtr =           1u;
 80083ea:	4b29      	ldr	r3, [pc, #164]	@ (8008490 <OS_TmrCondWait+0x114>)
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        OS_MutexGrpAdd(p_tcb, &OSTmrMutex);
 80083f2:	4927      	ldr	r1, [pc, #156]	@ (8008490 <OS_TmrCondWait+0x114>)
 80083f4:	68b8      	ldr	r0, [r7, #8]
 80083f6:	f7fe f9c3 	bl	8006780 <OS_MutexGrpAdd>
                                                                /* Post to mutex                                        */
        OS_Post((OS_PEND_OBJ *)((void *)&OSTmrMutex),
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	2300      	movs	r3, #0
 8008400:	2200      	movs	r2, #0
 8008402:	68b9      	ldr	r1, [r7, #8]
 8008404:	4822      	ldr	r0, [pc, #136]	@ (8008490 <OS_TmrCondWait+0x114>)
 8008406:	f7fc ff9b 	bl	8005340 <OS_Post>
                                (void *) 0,
                                         0u,
                                         ts);
    }

    OS_Pend((OS_PEND_OBJ *)((void *)&OSTmrCond),                /* Pend on the condition variable.                      */
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2203      	movs	r2, #3
 800840e:	4921      	ldr	r1, [pc, #132]	@ (8008494 <OS_TmrCondWait+0x118>)
 8008410:	4823      	ldr	r0, [pc, #140]	@ (80084a0 <OS_TmrCondWait+0x124>)
 8008412:	f7fc fe13 	bl	800503c <OS_Pend>
                                   &OSTmrTaskTCB,
                                    OS_TASK_PEND_ON_COND,
                                    timeout);
    CPU_CRITICAL_EXIT();
 8008416:	6978      	ldr	r0, [r7, #20]
 8008418:	f7f7 fefa 	bl	8000210 <CPU_SR_Restore>

    OSSched();
 800841c:	f7fc fcfa 	bl	8004e14 <OSSched>

    CPU_CRITICAL_ENTER();                                       /* Either we timed out, or were signaled.               */
 8008420:	2040      	movs	r0, #64	@ 0x40
 8008422:	f7f7 fee7 	bl	80001f4 <CPU_SR_Save>
 8008426:	6178      	str	r0, [r7, #20]

    if (OSTmrMutex.OwnerTCBPtr == (OS_TCB *)0) {                /* Can we grab the mutex?                               */
 8008428:	4b19      	ldr	r3, [pc, #100]	@ (8008490 <OS_TmrCondWait+0x114>)
 800842a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10e      	bne.n	800844e <OS_TmrCondWait+0xd2>
        OS_MutexGrpAdd(&OSTmrTaskTCB, &OSTmrMutex);             /* Yes, no-one else pending.                            */
 8008430:	4917      	ldr	r1, [pc, #92]	@ (8008490 <OS_TmrCondWait+0x114>)
 8008432:	4818      	ldr	r0, [pc, #96]	@ (8008494 <OS_TmrCondWait+0x118>)
 8008434:	f7fe f9a4 	bl	8006780 <OS_MutexGrpAdd>
        OSTmrMutex.OwnerTCBPtr     = &OSTmrTaskTCB;
 8008438:	4b15      	ldr	r3, [pc, #84]	@ (8008490 <OS_TmrCondWait+0x114>)
 800843a:	4a16      	ldr	r2, [pc, #88]	@ (8008494 <OS_TmrCondWait+0x118>)
 800843c:	625a      	str	r2, [r3, #36]	@ 0x24
        OSTmrMutex.OwnerNestingCtr = 1u;
 800843e:	4b14      	ldr	r3, [pc, #80]	@ (8008490 <OS_TmrCondWait+0x114>)
 8008440:	2201      	movs	r2, #1
 8008442:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        CPU_CRITICAL_EXIT();
 8008446:	6978      	ldr	r0, [r7, #20]
 8008448:	f7f7 fee2 	bl	8000210 <CPU_SR_Restore>
                                         0u);
        CPU_CRITICAL_EXIT();

        OSSched();
    }
}
 800844c:	e01c      	b.n	8008488 <OS_TmrCondWait+0x10c>
        p_tcb = OSTmrMutex.OwnerTCBPtr;                         /* No, we need to wait for it.                          */
 800844e:	4b10      	ldr	r3, [pc, #64]	@ (8008490 <OS_TmrCondWait+0x114>)
 8008450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008452:	60bb      	str	r3, [r7, #8]
        if (p_tcb->Prio > OSTmrTaskTCB.Prio) {                  /* See if mutex owner has a lower priority than TmrTask.*/
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800845a:	4b0e      	ldr	r3, [pc, #56]	@ (8008494 <OS_TmrCondWait+0x118>)
 800845c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8008460:	429a      	cmp	r2, r3
 8008462:	d906      	bls.n	8008472 <OS_TmrCondWait+0xf6>
            OS_TaskChangePrio(p_tcb, OSTmrTaskTCB.Prio);
 8008464:	4b0b      	ldr	r3, [pc, #44]	@ (8008494 <OS_TmrCondWait+0x118>)
 8008466:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800846a:	4619      	mov	r1, r3
 800846c:	68b8      	ldr	r0, [r7, #8]
 800846e:	f7ff f94f 	bl	8007710 <OS_TaskChangePrio>
        OS_Pend((OS_PEND_OBJ *)((void *)&OSTmrMutex),           /* Block TmrTask until it gets the Mutex.               */
 8008472:	2300      	movs	r3, #0
 8008474:	2204      	movs	r2, #4
 8008476:	4907      	ldr	r1, [pc, #28]	@ (8008494 <OS_TmrCondWait+0x118>)
 8008478:	4805      	ldr	r0, [pc, #20]	@ (8008490 <OS_TmrCondWait+0x114>)
 800847a:	f7fc fddf 	bl	800503c <OS_Pend>
        CPU_CRITICAL_EXIT();
 800847e:	6978      	ldr	r0, [r7, #20]
 8008480:	f7f7 fec6 	bl	8000210 <CPU_SR_Restore>
        OSSched();
 8008484:	f7fc fcc6 	bl	8004e14 <OSSched>
}
 8008488:	bf00      	nop
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	20001e20 	.word	0x20001e20
 8008494:	20001e50 	.word	0x20001e50
 8008498:	20001e28 	.word	0x20001e28
 800849c:	200019da 	.word	0x200019da
 80084a0:	20001dfc 	.word	0x20001dfc

080084a4 <OS_TmrCondSignal>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrCondSignal (void)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af02      	add	r7, sp, #8
    OS_PEND_LIST  *p_pend_list;
    CPU_TS         ts;
    CPU_SR_ALLOC();
 80084aa:	2300      	movs	r3, #0
 80084ac:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 80084ae:	2040      	movs	r0, #64	@ 0x40
 80084b0:	f7f7 fea0 	bl	80001f4 <CPU_SR_Save>
 80084b4:	60f8      	str	r0, [r7, #12]
#if (OS_CFG_TS_EN > 0u)
    ts             = OS_TS_GET();                               /* Get timestamp                                        */
    OSTmrMutex.TS  = ts;
#else
    ts             = 0u;
 80084b6:	2300      	movs	r3, #0
 80084b8:	60bb      	str	r3, [r7, #8]
#endif

    p_pend_list    = &OSTmrCond.PendList;
 80084ba:	4b0c      	ldr	r3, [pc, #48]	@ (80084ec <OS_TmrCondSignal+0x48>)
 80084bc:	607b      	str	r3, [r7, #4]

    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* Timer task waiting on cond?                          */
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d103      	bne.n	80084ce <OS_TmrCondSignal+0x2a>
        CPU_CRITICAL_EXIT();
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f7f7 fea2 	bl	8000210 <CPU_SR_Restore>
        return;                                                 /* No, nothing to signal.                               */
 80084cc:	e00a      	b.n	80084e4 <OS_TmrCondSignal+0x40>
    } else {
                                                                /* Yes, signal the timer task.                          */
        OS_Post((OS_PEND_OBJ *)((void *)&OSTmrCond),
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	2300      	movs	r3, #0
 80084d4:	2200      	movs	r2, #0
 80084d6:	4906      	ldr	r1, [pc, #24]	@ (80084f0 <OS_TmrCondSignal+0x4c>)
 80084d8:	4806      	ldr	r0, [pc, #24]	@ (80084f4 <OS_TmrCondSignal+0x50>)
 80084da:	f7fc ff31 	bl	8005340 <OS_Post>
                                (void *) 0,
                                         0u,
                                         ts);
    }

    CPU_CRITICAL_EXIT();
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f7f7 fe96 	bl	8000210 <CPU_SR_Restore>
}
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	20001e04 	.word	0x20001e04
 80084f0:	20001e50 	.word	0x20001e50
 80084f4:	20001dfc 	.word	0x20001dfc

080084f8 <memset>:
 80084f8:	4402      	add	r2, r0
 80084fa:	4603      	mov	r3, r0
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d100      	bne.n	8008502 <memset+0xa>
 8008500:	4770      	bx	lr
 8008502:	f803 1b01 	strb.w	r1, [r3], #1
 8008506:	e7f9      	b.n	80084fc <memset+0x4>

08008508 <__libc_init_array>:
 8008508:	b570      	push	{r4, r5, r6, lr}
 800850a:	4d0d      	ldr	r5, [pc, #52]	@ (8008540 <__libc_init_array+0x38>)
 800850c:	4c0d      	ldr	r4, [pc, #52]	@ (8008544 <__libc_init_array+0x3c>)
 800850e:	1b64      	subs	r4, r4, r5
 8008510:	10a4      	asrs	r4, r4, #2
 8008512:	2600      	movs	r6, #0
 8008514:	42a6      	cmp	r6, r4
 8008516:	d109      	bne.n	800852c <__libc_init_array+0x24>
 8008518:	4d0b      	ldr	r5, [pc, #44]	@ (8008548 <__libc_init_array+0x40>)
 800851a:	4c0c      	ldr	r4, [pc, #48]	@ (800854c <__libc_init_array+0x44>)
 800851c:	f000 f818 	bl	8008550 <_init>
 8008520:	1b64      	subs	r4, r4, r5
 8008522:	10a4      	asrs	r4, r4, #2
 8008524:	2600      	movs	r6, #0
 8008526:	42a6      	cmp	r6, r4
 8008528:	d105      	bne.n	8008536 <__libc_init_array+0x2e>
 800852a:	bd70      	pop	{r4, r5, r6, pc}
 800852c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008530:	4798      	blx	r3
 8008532:	3601      	adds	r6, #1
 8008534:	e7ee      	b.n	8008514 <__libc_init_array+0xc>
 8008536:	f855 3b04 	ldr.w	r3, [r5], #4
 800853a:	4798      	blx	r3
 800853c:	3601      	adds	r6, #1
 800853e:	e7f2      	b.n	8008526 <__libc_init_array+0x1e>
 8008540:	08008854 	.word	0x08008854
 8008544:	08008854 	.word	0x08008854
 8008548:	08008854 	.word	0x08008854
 800854c:	08008858 	.word	0x08008858

08008550 <_init>:
 8008550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008552:	bf00      	nop
 8008554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008556:	bc08      	pop	{r3}
 8008558:	469e      	mov	lr, r3
 800855a:	4770      	bx	lr

0800855c <_fini>:
 800855c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855e:	bf00      	nop
 8008560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008562:	bc08      	pop	{r3}
 8008564:	469e      	mov	lr, r3
 8008566:	4770      	bx	lr
