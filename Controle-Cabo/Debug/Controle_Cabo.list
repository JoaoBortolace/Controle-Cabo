
Controle_Cabo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000040  081e0000  081e0000  0000c000  2**2
                  ALLOC
  1 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008c24  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002ec  08008dd4  08008dd4  00009dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080090c0  080090c0  0000b00c  2**0
                  CONTENTS
  5 .ARM          00000008  080090c0  080090c0  0000a0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080090c8  080090c8  0000b00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080090c8  080090c8  0000a0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  080090cc  080090cc  0000a0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000000c  20000000  080090d0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  0000b00c  2**0
                  CONTENTS
 11 .bss          00001f18  2000000c  2000000c  0000b00c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20001f24  20001f24  0000b00c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000b00c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d7b0  00000000  00000000  0000b03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004496  00000000  00000000  000287ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001408  00000000  00000000  0002cc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ef6  00000000  00000000  0002e090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026b6b  00000000  00000000  0002ef86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a6b2  00000000  00000000  00055af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f7645  00000000  00000000  000701a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001677e8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004f70  00000000  00000000  0016782c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000c3  00000000  00000000  0016c79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008dbc 	.word	0x08008dbc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08008dbc 	.word	0x08008dbc

080001f0 <CPU_IntDis>:
@               void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 80001f0:	b672      	cpsid	i
        BX      LR
 80001f2:	4770      	bx	lr

080001f4 <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 80001f4:	b662      	cpsie	i
        BX      LR
 80001f6:	4770      	bx	lr

080001f8 <CPU_SR_Save>:
@                       CPSIE i
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 80001f8:	b672      	cpsid	i
        PUSH   {R1}
 80001fa:	b402      	push	{r1}
        MRS     R1, BASEPRI
 80001fc:	f3ef 8111 	mrs	r1, BASEPRI
        MSR     BASEPRI, R0
 8000200:	f380 8811 	msr	BASEPRI, r0
        DSB
 8000204:	f3bf 8f4f 	dsb	sy
        ISB
 8000208:	f3bf 8f6f 	isb	sy
        MOV     R0, R1
 800020c:	4608      	mov	r0, r1
        POP    {R1}
 800020e:	bc02      	pop	{r1}
        CPSIE   I
 8000210:	b662      	cpsie	i
        BX      LR
 8000212:	4770      	bx	lr

08000214 <CPU_SR_Restore>:


.thumb_func
CPU_SR_Restore:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 8000214:	b672      	cpsid	i
        MSR     BASEPRI, R0
 8000216:	f380 8811 	msr	BASEPRI, r0
        DSB
 800021a:	f3bf 8f4f 	dsb	sy
        ISB
 800021e:	f3bf 8f6f 	isb	sy
        CPSIE   I
 8000222:	b662      	cpsie	i
        BX      LR
 8000224:	4770      	bx	lr

08000226 <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 8000226:	bf30      	wfi
        BX      LR
 8000228:	4770      	bx	lr

0800022a <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 800022a:	bf20      	wfe
        BX      LR
 800022c:	4770      	bx	lr

0800022e <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 800022e:	fab0 f080 	clz	r0, r0
        BX      LR
 8000232:	4770      	bx	lr

08000234 <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 8000234:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 8000238:	fab0 f080 	clz	r0, r0
        BX      LR
 800023c:	4770      	bx	lr

0800023e <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 800023e:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 8000242:	4770      	bx	lr

08000244 <OSStartHighRdy>:
@              h) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000244:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 8000246:	f64e 5022 	movw	r0, #60706	@ 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 800024a:	f2ce 0000 	movt	r0, #57344	@ 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 800024e:	f240 01ff 	movw	r1, #255	@ 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 8000252:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 8000256:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 8000258:	2000      	movs	r0, #0
    MSR     PSP, R0
 800025a:	f380 8809 	msr	PSP, r0

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 800025e:	f241 00b0 	movw	r0, #4272	@ 0x10b0
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 8000262:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    LDR     R1, [R0]
 8000266:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 8000268:	f381 8808 	msr	MSP, r1

    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 800026c:	f005 f824 	bl	80052b8 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000270:	f641 10da 	movw	r0, #6618	@ 0x19da
    MOVT    R0, #:upper16:OSPrioCur
 8000274:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 8000278:	f641 11db 	movw	r1, #6619	@ 0x19db
    MOVT    R1, #:upper16:OSPrioHighRdy
 800027c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 8000280:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000282:	7002      	strb	r2, [r0, #0]

    MOVW    R0, #:lower16:OSTCBCurPtr                           @ OSTCBCurPtr = OSTCBHighRdyPtr;
 8000284:	f641 701c 	movw	r0, #7964	@ 0x1f1c
    MOVT    R0, #:upper16:OSTCBCurPtr
 8000288:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdyPtr
 800028c:	f641 7120 	movw	r1, #7968	@ 0x1f20
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 8000290:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 8000294:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 8000296:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 8000298:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 800029a:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 800029e:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 80002a2:	f040 0002 	orr.w	r0, r0, #2
    BIC     R0, R0, #4                                          @ Clear FPCA bit to indicate FPU is not in use
 80002a6:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, R0
 80002aa:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 80002ae:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11, LR}                                  @ Restore r4-11, lr from new process stack
 80002b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 80002b6:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 80002b8:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 80002bc:	bc06      	pop	{r1, r2}
    CPSIE    I
 80002be:	b662      	cpsie	i
    BX       R1
 80002c0:	4708      	bx	r1

080002c2 <OSCtxSw>:

.thumb_func
OSCtxSw:
.thumb_func
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80002c2:	4825      	ldr	r0, [pc, #148]	@ (8000358 <OS_CPU_PendSVHandler+0x8c>)
    LDR     R1, =NVIC_PENDSVSET
 80002c4:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
    STR     R1, [R0]
 80002c8:	6001      	str	r1, [r0, #0]
    BX      LR
 80002ca:	4770      	bx	lr

080002cc <OS_CPU_PendSVHandler>:
@                  CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 80002cc:	b672      	cpsid	i
    MOVW    R2, #:lower16:OS_KA_BASEPRI_Boundary                @ Set BASEPRI priority level required for exception preemption
 80002ce:	f241 02b4 	movw	r2, #4276	@ 0x10b4
    MOVT    R2, #:upper16:OS_KA_BASEPRI_Boundary
 80002d2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
    LDR     R1, [R2]
 80002d6:	6811      	ldr	r1, [r2, #0]
    MSR     BASEPRI, R1
 80002d8:	f381 8811 	msr	BASEPRI, r1
    DSB
 80002dc:	f3bf 8f4f 	dsb	sy
    ISB
 80002e0:	f3bf 8f6f 	isb	sy
    CPSIE   I
 80002e4:	b662      	cpsie	i

    MRS     R0, PSP                                             @ PSP is process stack pointer
 80002e6:	f3ef 8009 	mrs	r0, PSP
#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
                                                                @ Push high vfp registers if the task is using the FPU context
    TST       R14, #0x10
 80002ea:	f01e 0f10 	tst.w	lr, #16
    IT        EQ
 80002ee:	bf08      	it	eq
    VSTMDBEQ  R0!, {S16-S31}
 80002f0:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
#endif

    STMFD   R0!, {R4-R11, R14}                                  @ Save remaining regs r4-11, R14 on process stack
 80002f4:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    MOVW    R5, #:lower16:OSTCBCurPtr                           @ OSTCBCurPtr->StkPtr = SP;
 80002f8:	f641 751c 	movw	r5, #7964	@ 0x1f1c
    MOVT    R5, #:upper16:OSTCBCurPtr
 80002fc:	f2c2 0500 	movt	r5, #8192	@ 0x2000
    LDR     R1, [R5]
 8000300:	6829      	ldr	r1, [r5, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 8000302:	6008      	str	r0, [r1, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 8000304:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 8000306:	f004 ffd7 	bl	80052b8 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 800030a:	f641 10da 	movw	r0, #6618	@ 0x19da
    MOVT    R0, #:upper16:OSPrioCur
 800030e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 8000312:	f641 11db 	movw	r1, #6619	@ 0x19db
    MOVT    R1, #:upper16:OSPrioHighRdy
 8000316:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 800031a:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 800031c:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdyPtr                       @ OSTCBCurPtr = OSTCBHighRdyPtr;
 800031e:	f641 7120 	movw	r1, #7968	@ 0x1f20
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 8000322:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 8000326:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 8000328:	602a      	str	r2, [r5, #0]

    ORR     LR,  R4, #0x04                                      @ Ensure exception return uses process stack
 800032a:	f044 0e04 	orr.w	lr, r4, #4
    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 800032e:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11, R14}                                  @ Restore r4-11, R14 from new process stack
 8000330:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
                                                                @ Pop the high vfp registers if the next task is using the FPU context
    TST       R14, #0x10
 8000334:	f01e 0f10 	tst.w	lr, #16
    IT        EQ
 8000338:	bf08      	it	eq
    VLDMIAEQ  R0!, {S16-S31}
 800033a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
#endif

    MSR     PSP, R0                                             @ Load PSP with new process SP
 800033e:	f380 8809 	msr	PSP, r0

    MOV     R2, #0                                              @ Restore BASEPRI priority level to 0
 8000342:	f04f 0200 	mov.w	r2, #0
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 8000346:	b672      	cpsid	i
    MSR     BASEPRI, R2
 8000348:	f382 8811 	msr	BASEPRI, r2
    DSB
 800034c:	f3bf 8f4f 	dsb	sy
    ISB
 8000350:	f3bf 8f6f 	isb	sy
    CPSIE   I
 8000354:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 8000356:	4770      	bx	lr
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000358:	e000ed04 	.word	0xe000ed04

0800035c <__aeabi_dmul>:
 800035c:	b570      	push	{r4, r5, r6, lr}
 800035e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000362:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000366:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800036a:	bf1d      	ittte	ne
 800036c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000370:	ea94 0f0c 	teqne	r4, ip
 8000374:	ea95 0f0c 	teqne	r5, ip
 8000378:	f000 f8de 	bleq	8000538 <__aeabi_dmul+0x1dc>
 800037c:	442c      	add	r4, r5
 800037e:	ea81 0603 	eor.w	r6, r1, r3
 8000382:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000386:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800038a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800038e:	bf18      	it	ne
 8000390:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800039c:	d038      	beq.n	8000410 <__aeabi_dmul+0xb4>
 800039e:	fba0 ce02 	umull	ip, lr, r0, r2
 80003a2:	f04f 0500 	mov.w	r5, #0
 80003a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80003aa:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80003ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80003b2:	f04f 0600 	mov.w	r6, #0
 80003b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80003ba:	f09c 0f00 	teq	ip, #0
 80003be:	bf18      	it	ne
 80003c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80003c4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80003c8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80003cc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80003d0:	d204      	bcs.n	80003dc <__aeabi_dmul+0x80>
 80003d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80003d6:	416d      	adcs	r5, r5
 80003d8:	eb46 0606 	adc.w	r6, r6, r6
 80003dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80003e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80003e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80003e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80003ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80003f0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80003f4:	bf88      	it	hi
 80003f6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80003fa:	d81e      	bhi.n	800043a <__aeabi_dmul+0xde>
 80003fc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000400:	bf08      	it	eq
 8000402:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000406:	f150 0000 	adcs.w	r0, r0, #0
 800040a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040e:	bd70      	pop	{r4, r5, r6, pc}
 8000410:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000414:	ea46 0101 	orr.w	r1, r6, r1
 8000418:	ea40 0002 	orr.w	r0, r0, r2
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000424:	bfc2      	ittt	gt
 8000426:	ebd4 050c 	rsbsgt	r5, r4, ip
 800042a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800042e:	bd70      	popgt	{r4, r5, r6, pc}
 8000430:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000434:	f04f 0e00 	mov.w	lr, #0
 8000438:	3c01      	subs	r4, #1
 800043a:	f300 80ab 	bgt.w	8000594 <__aeabi_dmul+0x238>
 800043e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000442:	bfde      	ittt	le
 8000444:	2000      	movle	r0, #0
 8000446:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800044a:	bd70      	pople	{r4, r5, r6, pc}
 800044c:	f1c4 0400 	rsb	r4, r4, #0
 8000450:	3c20      	subs	r4, #32
 8000452:	da35      	bge.n	80004c0 <__aeabi_dmul+0x164>
 8000454:	340c      	adds	r4, #12
 8000456:	dc1b      	bgt.n	8000490 <__aeabi_dmul+0x134>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0520 	rsb	r5, r4, #32
 8000460:	fa00 f305 	lsl.w	r3, r0, r5
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f205 	lsl.w	r2, r1, r5
 800046c:	ea40 0002 	orr.w	r0, r0, r2
 8000470:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000478:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800047c:	fa21 f604 	lsr.w	r6, r1, r4
 8000480:	eb42 0106 	adc.w	r1, r2, r6
 8000484:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000488:	bf08      	it	eq
 800048a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800048e:	bd70      	pop	{r4, r5, r6, pc}
 8000490:	f1c4 040c 	rsb	r4, r4, #12
 8000494:	f1c4 0520 	rsb	r5, r4, #32
 8000498:	fa00 f304 	lsl.w	r3, r0, r4
 800049c:	fa20 f005 	lsr.w	r0, r0, r5
 80004a0:	fa01 f204 	lsl.w	r2, r1, r4
 80004a4:	ea40 0002 	orr.w	r0, r0, r2
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80004b0:	f141 0100 	adc.w	r1, r1, #0
 80004b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80004b8:	bf08      	it	eq
 80004ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004be:	bd70      	pop	{r4, r5, r6, pc}
 80004c0:	f1c4 0520 	rsb	r5, r4, #32
 80004c4:	fa00 f205 	lsl.w	r2, r0, r5
 80004c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80004cc:	fa20 f304 	lsr.w	r3, r0, r4
 80004d0:	fa01 f205 	lsl.w	r2, r1, r5
 80004d4:	ea43 0302 	orr.w	r3, r3, r2
 80004d8:	fa21 f004 	lsr.w	r0, r1, r4
 80004dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	fa21 f204 	lsr.w	r2, r1, r4
 80004e4:	ea20 0002 	bic.w	r0, r0, r2
 80004e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80004ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80004f0:	bf08      	it	eq
 80004f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004f6:	bd70      	pop	{r4, r5, r6, pc}
 80004f8:	f094 0f00 	teq	r4, #0
 80004fc:	d10f      	bne.n	800051e <__aeabi_dmul+0x1c2>
 80004fe:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000502:	0040      	lsls	r0, r0, #1
 8000504:	eb41 0101 	adc.w	r1, r1, r1
 8000508:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800050c:	bf08      	it	eq
 800050e:	3c01      	subeq	r4, #1
 8000510:	d0f7      	beq.n	8000502 <__aeabi_dmul+0x1a6>
 8000512:	ea41 0106 	orr.w	r1, r1, r6
 8000516:	f095 0f00 	teq	r5, #0
 800051a:	bf18      	it	ne
 800051c:	4770      	bxne	lr
 800051e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000522:	0052      	lsls	r2, r2, #1
 8000524:	eb43 0303 	adc.w	r3, r3, r3
 8000528:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800052c:	bf08      	it	eq
 800052e:	3d01      	subeq	r5, #1
 8000530:	d0f7      	beq.n	8000522 <__aeabi_dmul+0x1c6>
 8000532:	ea43 0306 	orr.w	r3, r3, r6
 8000536:	4770      	bx	lr
 8000538:	ea94 0f0c 	teq	r4, ip
 800053c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000540:	bf18      	it	ne
 8000542:	ea95 0f0c 	teqne	r5, ip
 8000546:	d00c      	beq.n	8000562 <__aeabi_dmul+0x206>
 8000548:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800054c:	bf18      	it	ne
 800054e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000552:	d1d1      	bne.n	80004f8 <__aeabi_dmul+0x19c>
 8000554:	ea81 0103 	eor.w	r1, r1, r3
 8000558:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800055c:	f04f 0000 	mov.w	r0, #0
 8000560:	bd70      	pop	{r4, r5, r6, pc}
 8000562:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000566:	bf06      	itte	eq
 8000568:	4610      	moveq	r0, r2
 800056a:	4619      	moveq	r1, r3
 800056c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000570:	d019      	beq.n	80005a6 <__aeabi_dmul+0x24a>
 8000572:	ea94 0f0c 	teq	r4, ip
 8000576:	d102      	bne.n	800057e <__aeabi_dmul+0x222>
 8000578:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800057c:	d113      	bne.n	80005a6 <__aeabi_dmul+0x24a>
 800057e:	ea95 0f0c 	teq	r5, ip
 8000582:	d105      	bne.n	8000590 <__aeabi_dmul+0x234>
 8000584:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000588:	bf1c      	itt	ne
 800058a:	4610      	movne	r0, r2
 800058c:	4619      	movne	r1, r3
 800058e:	d10a      	bne.n	80005a6 <__aeabi_dmul+0x24a>
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800059c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005a0:	f04f 0000 	mov.w	r0, #0
 80005a4:	bd70      	pop	{r4, r5, r6, pc}
 80005a6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80005aa:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80005ae:	bd70      	pop	{r4, r5, r6, pc}

080005b0 <__aeabi_drsub>:
 80005b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80005b4:	e002      	b.n	80005bc <__adddf3>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dsub>:
 80005b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080005bc <__adddf3>:
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80005c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	bf1f      	itttt	ne
 80005d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80005d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80005da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80005de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e2:	f000 80e2 	beq.w	80007aa <__adddf3+0x1ee>
 80005e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80005ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80005ee:	bfb8      	it	lt
 80005f0:	426d      	neglt	r5, r5
 80005f2:	dd0c      	ble.n	800060e <__adddf3+0x52>
 80005f4:	442c      	add	r4, r5
 80005f6:	ea80 0202 	eor.w	r2, r0, r2
 80005fa:	ea81 0303 	eor.w	r3, r1, r3
 80005fe:	ea82 0000 	eor.w	r0, r2, r0
 8000602:	ea83 0101 	eor.w	r1, r3, r1
 8000606:	ea80 0202 	eor.w	r2, r0, r2
 800060a:	ea81 0303 	eor.w	r3, r1, r3
 800060e:	2d36      	cmp	r5, #54	@ 0x36
 8000610:	bf88      	it	hi
 8000612:	bd30      	pophi	{r4, r5, pc}
 8000614:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000618:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800061c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000620:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000624:	d002      	beq.n	800062c <__adddf3+0x70>
 8000626:	4240      	negs	r0, r0
 8000628:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800062c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000630:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000634:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000638:	d002      	beq.n	8000640 <__adddf3+0x84>
 800063a:	4252      	negs	r2, r2
 800063c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000640:	ea94 0f05 	teq	r4, r5
 8000644:	f000 80a7 	beq.w	8000796 <__adddf3+0x1da>
 8000648:	f1a4 0401 	sub.w	r4, r4, #1
 800064c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000650:	db0d      	blt.n	800066e <__adddf3+0xb2>
 8000652:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000656:	fa22 f205 	lsr.w	r2, r2, r5
 800065a:	1880      	adds	r0, r0, r2
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	fa03 f20e 	lsl.w	r2, r3, lr
 8000664:	1880      	adds	r0, r0, r2
 8000666:	fa43 f305 	asr.w	r3, r3, r5
 800066a:	4159      	adcs	r1, r3
 800066c:	e00e      	b.n	800068c <__adddf3+0xd0>
 800066e:	f1a5 0520 	sub.w	r5, r5, #32
 8000672:	f10e 0e20 	add.w	lr, lr, #32
 8000676:	2a01      	cmp	r2, #1
 8000678:	fa03 fc0e 	lsl.w	ip, r3, lr
 800067c:	bf28      	it	cs
 800067e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000682:	fa43 f305 	asr.w	r3, r3, r5
 8000686:	18c0      	adds	r0, r0, r3
 8000688:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800068c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000690:	d507      	bpl.n	80006a2 <__adddf3+0xe6>
 8000692:	f04f 0e00 	mov.w	lr, #0
 8000696:	f1dc 0c00 	rsbs	ip, ip, #0
 800069a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800069e:	eb6e 0101 	sbc.w	r1, lr, r1
 80006a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80006a6:	d31b      	bcc.n	80006e0 <__adddf3+0x124>
 80006a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80006ac:	d30c      	bcc.n	80006c8 <__adddf3+0x10c>
 80006ae:	0849      	lsrs	r1, r1, #1
 80006b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80006b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80006b8:	f104 0401 	add.w	r4, r4, #1
 80006bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80006c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80006c4:	f080 809a 	bcs.w	80007fc <__adddf3+0x240>
 80006c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	ea41 0105 	orr.w	r1, r1, r5
 80006de:	bd30      	pop	{r4, r5, pc}
 80006e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80006e4:	4140      	adcs	r0, r0
 80006e6:	eb41 0101 	adc.w	r1, r1, r1
 80006ea:	3c01      	subs	r4, #1
 80006ec:	bf28      	it	cs
 80006ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80006f2:	d2e9      	bcs.n	80006c8 <__adddf3+0x10c>
 80006f4:	f091 0f00 	teq	r1, #0
 80006f8:	bf04      	itt	eq
 80006fa:	4601      	moveq	r1, r0
 80006fc:	2000      	moveq	r0, #0
 80006fe:	fab1 f381 	clz	r3, r1
 8000702:	bf08      	it	eq
 8000704:	3320      	addeq	r3, #32
 8000706:	f1a3 030b 	sub.w	r3, r3, #11
 800070a:	f1b3 0220 	subs.w	r2, r3, #32
 800070e:	da0c      	bge.n	800072a <__adddf3+0x16e>
 8000710:	320c      	adds	r2, #12
 8000712:	dd08      	ble.n	8000726 <__adddf3+0x16a>
 8000714:	f102 0c14 	add.w	ip, r2, #20
 8000718:	f1c2 020c 	rsb	r2, r2, #12
 800071c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000720:	fa21 f102 	lsr.w	r1, r1, r2
 8000724:	e00c      	b.n	8000740 <__adddf3+0x184>
 8000726:	f102 0214 	add.w	r2, r2, #20
 800072a:	bfd8      	it	le
 800072c:	f1c2 0c20 	rsble	ip, r2, #32
 8000730:	fa01 f102 	lsl.w	r1, r1, r2
 8000734:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000738:	bfdc      	itt	le
 800073a:	ea41 010c 	orrle.w	r1, r1, ip
 800073e:	4090      	lslle	r0, r2
 8000740:	1ae4      	subs	r4, r4, r3
 8000742:	bfa2      	ittt	ge
 8000744:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000748:	4329      	orrge	r1, r5
 800074a:	bd30      	popge	{r4, r5, pc}
 800074c:	ea6f 0404 	mvn.w	r4, r4
 8000750:	3c1f      	subs	r4, #31
 8000752:	da1c      	bge.n	800078e <__adddf3+0x1d2>
 8000754:	340c      	adds	r4, #12
 8000756:	dc0e      	bgt.n	8000776 <__adddf3+0x1ba>
 8000758:	f104 0414 	add.w	r4, r4, #20
 800075c:	f1c4 0220 	rsb	r2, r4, #32
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f302 	lsl.w	r3, r1, r2
 8000768:	ea40 0003 	orr.w	r0, r0, r3
 800076c:	fa21 f304 	lsr.w	r3, r1, r4
 8000770:	ea45 0103 	orr.w	r1, r5, r3
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	f1c4 040c 	rsb	r4, r4, #12
 800077a:	f1c4 0220 	rsb	r2, r4, #32
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 f304 	lsl.w	r3, r1, r4
 8000786:	ea40 0003 	orr.w	r0, r0, r3
 800078a:	4629      	mov	r1, r5
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	fa21 f004 	lsr.w	r0, r1, r4
 8000792:	4629      	mov	r1, r5
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	f094 0f00 	teq	r4, #0
 800079a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800079e:	bf06      	itte	eq
 80007a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80007a4:	3401      	addeq	r4, #1
 80007a6:	3d01      	subne	r5, #1
 80007a8:	e74e      	b.n	8000648 <__adddf3+0x8c>
 80007aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007ae:	bf18      	it	ne
 80007b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80007b4:	d029      	beq.n	800080a <__adddf3+0x24e>
 80007b6:	ea94 0f05 	teq	r4, r5
 80007ba:	bf08      	it	eq
 80007bc:	ea90 0f02 	teqeq	r0, r2
 80007c0:	d005      	beq.n	80007ce <__adddf3+0x212>
 80007c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80007c6:	bf04      	itt	eq
 80007c8:	4619      	moveq	r1, r3
 80007ca:	4610      	moveq	r0, r2
 80007cc:	bd30      	pop	{r4, r5, pc}
 80007ce:	ea91 0f03 	teq	r1, r3
 80007d2:	bf1e      	ittt	ne
 80007d4:	2100      	movne	r1, #0
 80007d6:	2000      	movne	r0, #0
 80007d8:	bd30      	popne	{r4, r5, pc}
 80007da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80007de:	d105      	bne.n	80007ec <__adddf3+0x230>
 80007e0:	0040      	lsls	r0, r0, #1
 80007e2:	4149      	adcs	r1, r1
 80007e4:	bf28      	it	cs
 80007e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80007ea:	bd30      	pop	{r4, r5, pc}
 80007ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80007f0:	bf3c      	itt	cc
 80007f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80007f6:	bd30      	popcc	{r4, r5, pc}
 80007f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd30      	pop	{r4, r5, pc}
 800080a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800080e:	bf1a      	itte	ne
 8000810:	4619      	movne	r1, r3
 8000812:	4610      	movne	r0, r2
 8000814:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000818:	bf1c      	itt	ne
 800081a:	460b      	movne	r3, r1
 800081c:	4602      	movne	r2, r0
 800081e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000822:	bf06      	itte	eq
 8000824:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000828:	ea91 0f03 	teqeq	r1, r3
 800082c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000830:	bd30      	pop	{r4, r5, pc}
 8000832:	bf00      	nop

08000834 <__aeabi_ui2d>:
 8000834:	f090 0f00 	teq	r0, #0
 8000838:	bf04      	itt	eq
 800083a:	2100      	moveq	r1, #0
 800083c:	4770      	bxeq	lr
 800083e:	b530      	push	{r4, r5, lr}
 8000840:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000844:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000848:	f04f 0500 	mov.w	r5, #0
 800084c:	f04f 0100 	mov.w	r1, #0
 8000850:	e750      	b.n	80006f4 <__adddf3+0x138>
 8000852:	bf00      	nop

08000854 <__aeabi_i2d>:
 8000854:	f090 0f00 	teq	r0, #0
 8000858:	bf04      	itt	eq
 800085a:	2100      	moveq	r1, #0
 800085c:	4770      	bxeq	lr
 800085e:	b530      	push	{r4, r5, lr}
 8000860:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000864:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000868:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800086c:	bf48      	it	mi
 800086e:	4240      	negmi	r0, r0
 8000870:	f04f 0100 	mov.w	r1, #0
 8000874:	e73e      	b.n	80006f4 <__adddf3+0x138>
 8000876:	bf00      	nop

08000878 <__aeabi_f2d>:
 8000878:	0042      	lsls	r2, r0, #1
 800087a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800087e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000882:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000886:	bf1f      	itttt	ne
 8000888:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800088c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000890:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000894:	4770      	bxne	lr
 8000896:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800089a:	bf08      	it	eq
 800089c:	4770      	bxeq	lr
 800089e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80008a2:	bf04      	itt	eq
 80008a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80008a8:	4770      	bxeq	lr
 80008aa:	b530      	push	{r4, r5, lr}
 80008ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80008b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80008b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80008b8:	e71c      	b.n	80006f4 <__adddf3+0x138>
 80008ba:	bf00      	nop

080008bc <__aeabi_ul2d>:
 80008bc:	ea50 0201 	orrs.w	r2, r0, r1
 80008c0:	bf08      	it	eq
 80008c2:	4770      	bxeq	lr
 80008c4:	b530      	push	{r4, r5, lr}
 80008c6:	f04f 0500 	mov.w	r5, #0
 80008ca:	e00a      	b.n	80008e2 <__aeabi_l2d+0x16>

080008cc <__aeabi_l2d>:
 80008cc:	ea50 0201 	orrs.w	r2, r0, r1
 80008d0:	bf08      	it	eq
 80008d2:	4770      	bxeq	lr
 80008d4:	b530      	push	{r4, r5, lr}
 80008d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80008da:	d502      	bpl.n	80008e2 <__aeabi_l2d+0x16>
 80008dc:	4240      	negs	r0, r0
 80008de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80008e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80008ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80008ee:	f43f aed8 	beq.w	80006a2 <__adddf3+0xe6>
 80008f2:	f04f 0203 	mov.w	r2, #3
 80008f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008fa:	bf18      	it	ne
 80008fc:	3203      	addne	r2, #3
 80008fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000902:	bf18      	it	ne
 8000904:	3203      	addne	r2, #3
 8000906:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800090a:	f1c2 0320 	rsb	r3, r2, #32
 800090e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000912:	fa20 f002 	lsr.w	r0, r0, r2
 8000916:	fa01 fe03 	lsl.w	lr, r1, r3
 800091a:	ea40 000e 	orr.w	r0, r0, lr
 800091e:	fa21 f102 	lsr.w	r1, r1, r2
 8000922:	4414      	add	r4, r2
 8000924:	e6bd      	b.n	80006a2 <__adddf3+0xe6>
 8000926:	bf00      	nop

08000928 <__aeabi_d2f>:
 8000928:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800092c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000930:	bf24      	itt	cs
 8000932:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000936:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800093a:	d90d      	bls.n	8000958 <__aeabi_d2f+0x30>
 800093c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000940:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000944:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000948:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800094c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000950:	bf08      	it	eq
 8000952:	f020 0001 	biceq.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800095c:	d121      	bne.n	80009a2 <__aeabi_d2f+0x7a>
 800095e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000962:	bfbc      	itt	lt
 8000964:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000968:	4770      	bxlt	lr
 800096a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800096e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000972:	f1c2 0218 	rsb	r2, r2, #24
 8000976:	f1c2 0c20 	rsb	ip, r2, #32
 800097a:	fa10 f30c 	lsls.w	r3, r0, ip
 800097e:	fa20 f002 	lsr.w	r0, r0, r2
 8000982:	bf18      	it	ne
 8000984:	f040 0001 	orrne.w	r0, r0, #1
 8000988:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000990:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000994:	ea40 000c 	orr.w	r0, r0, ip
 8000998:	fa23 f302 	lsr.w	r3, r3, r2
 800099c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a0:	e7cc      	b.n	800093c <__aeabi_d2f+0x14>
 80009a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009a6:	d107      	bne.n	80009b8 <__aeabi_d2f+0x90>
 80009a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009ac:	bf1e      	ittt	ne
 80009ae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009b2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009b6:	4770      	bxne	lr
 80009b8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <__aeabi_uldivmod>:
 80009c8:	b953      	cbnz	r3, 80009e0 <__aeabi_uldivmod+0x18>
 80009ca:	b94a      	cbnz	r2, 80009e0 <__aeabi_uldivmod+0x18>
 80009cc:	2900      	cmp	r1, #0
 80009ce:	bf08      	it	eq
 80009d0:	2800      	cmpeq	r0, #0
 80009d2:	bf1c      	itt	ne
 80009d4:	f04f 31ff 	movne.w	r1, #4294967295
 80009d8:	f04f 30ff 	movne.w	r0, #4294967295
 80009dc:	f000 b96a 	b.w	8000cb4 <__aeabi_idiv0>
 80009e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e8:	f000 f806 	bl	80009f8 <__udivmoddi4>
 80009ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f4:	b004      	add	sp, #16
 80009f6:	4770      	bx	lr

080009f8 <__udivmoddi4>:
 80009f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009fc:	9d08      	ldr	r5, [sp, #32]
 80009fe:	460c      	mov	r4, r1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d14e      	bne.n	8000aa2 <__udivmoddi4+0xaa>
 8000a04:	4694      	mov	ip, r2
 8000a06:	458c      	cmp	ip, r1
 8000a08:	4686      	mov	lr, r0
 8000a0a:	fab2 f282 	clz	r2, r2
 8000a0e:	d962      	bls.n	8000ad6 <__udivmoddi4+0xde>
 8000a10:	b14a      	cbz	r2, 8000a26 <__udivmoddi4+0x2e>
 8000a12:	f1c2 0320 	rsb	r3, r2, #32
 8000a16:	4091      	lsls	r1, r2
 8000a18:	fa20 f303 	lsr.w	r3, r0, r3
 8000a1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a20:	4319      	orrs	r1, r3
 8000a22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a2a:	fa1f f68c 	uxth.w	r6, ip
 8000a2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a36:	fb07 1114 	mls	r1, r7, r4, r1
 8000a3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a3e:	fb04 f106 	mul.w	r1, r4, r6
 8000a42:	4299      	cmp	r1, r3
 8000a44:	d90a      	bls.n	8000a5c <__udivmoddi4+0x64>
 8000a46:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a4e:	f080 8112 	bcs.w	8000c76 <__udivmoddi4+0x27e>
 8000a52:	4299      	cmp	r1, r3
 8000a54:	f240 810f 	bls.w	8000c76 <__udivmoddi4+0x27e>
 8000a58:	3c02      	subs	r4, #2
 8000a5a:	4463      	add	r3, ip
 8000a5c:	1a59      	subs	r1, r3, r1
 8000a5e:	fa1f f38e 	uxth.w	r3, lr
 8000a62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a66:	fb07 1110 	mls	r1, r7, r0, r1
 8000a6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a6e:	fb00 f606 	mul.w	r6, r0, r6
 8000a72:	429e      	cmp	r6, r3
 8000a74:	d90a      	bls.n	8000a8c <__udivmoddi4+0x94>
 8000a76:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a7e:	f080 80fc 	bcs.w	8000c7a <__udivmoddi4+0x282>
 8000a82:	429e      	cmp	r6, r3
 8000a84:	f240 80f9 	bls.w	8000c7a <__udivmoddi4+0x282>
 8000a88:	4463      	add	r3, ip
 8000a8a:	3802      	subs	r0, #2
 8000a8c:	1b9b      	subs	r3, r3, r6
 8000a8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a92:	2100      	movs	r1, #0
 8000a94:	b11d      	cbz	r5, 8000a9e <__udivmoddi4+0xa6>
 8000a96:	40d3      	lsrs	r3, r2
 8000a98:	2200      	movs	r2, #0
 8000a9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	428b      	cmp	r3, r1
 8000aa4:	d905      	bls.n	8000ab2 <__udivmoddi4+0xba>
 8000aa6:	b10d      	cbz	r5, 8000aac <__udivmoddi4+0xb4>
 8000aa8:	e9c5 0100 	strd	r0, r1, [r5]
 8000aac:	2100      	movs	r1, #0
 8000aae:	4608      	mov	r0, r1
 8000ab0:	e7f5      	b.n	8000a9e <__udivmoddi4+0xa6>
 8000ab2:	fab3 f183 	clz	r1, r3
 8000ab6:	2900      	cmp	r1, #0
 8000ab8:	d146      	bne.n	8000b48 <__udivmoddi4+0x150>
 8000aba:	42a3      	cmp	r3, r4
 8000abc:	d302      	bcc.n	8000ac4 <__udivmoddi4+0xcc>
 8000abe:	4290      	cmp	r0, r2
 8000ac0:	f0c0 80f0 	bcc.w	8000ca4 <__udivmoddi4+0x2ac>
 8000ac4:	1a86      	subs	r6, r0, r2
 8000ac6:	eb64 0303 	sbc.w	r3, r4, r3
 8000aca:	2001      	movs	r0, #1
 8000acc:	2d00      	cmp	r5, #0
 8000ace:	d0e6      	beq.n	8000a9e <__udivmoddi4+0xa6>
 8000ad0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ad4:	e7e3      	b.n	8000a9e <__udivmoddi4+0xa6>
 8000ad6:	2a00      	cmp	r2, #0
 8000ad8:	f040 8090 	bne.w	8000bfc <__udivmoddi4+0x204>
 8000adc:	eba1 040c 	sub.w	r4, r1, ip
 8000ae0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae4:	fa1f f78c 	uxth.w	r7, ip
 8000ae8:	2101      	movs	r1, #1
 8000aea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000af2:	fb08 4416 	mls	r4, r8, r6, r4
 8000af6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000afa:	fb07 f006 	mul.w	r0, r7, r6
 8000afe:	4298      	cmp	r0, r3
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x11c>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b0a:	d202      	bcs.n	8000b12 <__udivmoddi4+0x11a>
 8000b0c:	4298      	cmp	r0, r3
 8000b0e:	f200 80cd 	bhi.w	8000cac <__udivmoddi4+0x2b4>
 8000b12:	4626      	mov	r6, r4
 8000b14:	1a1c      	subs	r4, r3, r0
 8000b16:	fa1f f38e 	uxth.w	r3, lr
 8000b1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000b22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b26:	fb00 f707 	mul.w	r7, r0, r7
 8000b2a:	429f      	cmp	r7, r3
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0x148>
 8000b2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x146>
 8000b38:	429f      	cmp	r7, r3
 8000b3a:	f200 80b0 	bhi.w	8000c9e <__udivmoddi4+0x2a6>
 8000b3e:	4620      	mov	r0, r4
 8000b40:	1bdb      	subs	r3, r3, r7
 8000b42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b46:	e7a5      	b.n	8000a94 <__udivmoddi4+0x9c>
 8000b48:	f1c1 0620 	rsb	r6, r1, #32
 8000b4c:	408b      	lsls	r3, r1
 8000b4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000b52:	431f      	orrs	r7, r3
 8000b54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b58:	fa04 f301 	lsl.w	r3, r4, r1
 8000b5c:	ea43 030c 	orr.w	r3, r3, ip
 8000b60:	40f4      	lsrs	r4, r6
 8000b62:	fa00 f801 	lsl.w	r8, r0, r1
 8000b66:	0c38      	lsrs	r0, r7, #16
 8000b68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000b70:	fa1f fc87 	uxth.w	ip, r7
 8000b74:	fb00 441e 	mls	r4, r0, lr, r4
 8000b78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000b80:	45a1      	cmp	r9, r4
 8000b82:	fa02 f201 	lsl.w	r2, r2, r1
 8000b86:	d90a      	bls.n	8000b9e <__udivmoddi4+0x1a6>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b8e:	f080 8084 	bcs.w	8000c9a <__udivmoddi4+0x2a2>
 8000b92:	45a1      	cmp	r9, r4
 8000b94:	f240 8081 	bls.w	8000c9a <__udivmoddi4+0x2a2>
 8000b98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b9c:	443c      	add	r4, r7
 8000b9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ba2:	fa1f f983 	uxth.w	r9, r3
 8000ba6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000baa:	fb00 4413 	mls	r4, r0, r3, r4
 8000bae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bb6:	45a4      	cmp	ip, r4
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x1d2>
 8000bba:	193c      	adds	r4, r7, r4
 8000bbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bc0:	d267      	bcs.n	8000c92 <__udivmoddi4+0x29a>
 8000bc2:	45a4      	cmp	ip, r4
 8000bc4:	d965      	bls.n	8000c92 <__udivmoddi4+0x29a>
 8000bc6:	3b02      	subs	r3, #2
 8000bc8:	443c      	add	r4, r7
 8000bca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bce:	fba0 9302 	umull	r9, r3, r0, r2
 8000bd2:	eba4 040c 	sub.w	r4, r4, ip
 8000bd6:	429c      	cmp	r4, r3
 8000bd8:	46ce      	mov	lr, r9
 8000bda:	469c      	mov	ip, r3
 8000bdc:	d351      	bcc.n	8000c82 <__udivmoddi4+0x28a>
 8000bde:	d04e      	beq.n	8000c7e <__udivmoddi4+0x286>
 8000be0:	b155      	cbz	r5, 8000bf8 <__udivmoddi4+0x200>
 8000be2:	ebb8 030e 	subs.w	r3, r8, lr
 8000be6:	eb64 040c 	sbc.w	r4, r4, ip
 8000bea:	fa04 f606 	lsl.w	r6, r4, r6
 8000bee:	40cb      	lsrs	r3, r1
 8000bf0:	431e      	orrs	r6, r3
 8000bf2:	40cc      	lsrs	r4, r1
 8000bf4:	e9c5 6400 	strd	r6, r4, [r5]
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	e750      	b.n	8000a9e <__udivmoddi4+0xa6>
 8000bfc:	f1c2 0320 	rsb	r3, r2, #32
 8000c00:	fa20 f103 	lsr.w	r1, r0, r3
 8000c04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c08:	fa24 f303 	lsr.w	r3, r4, r3
 8000c0c:	4094      	lsls	r4, r2
 8000c0e:	430c      	orrs	r4, r1
 8000c10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c18:	fa1f f78c 	uxth.w	r7, ip
 8000c1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c20:	fb08 3110 	mls	r1, r8, r0, r3
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2a:	fb00 f107 	mul.w	r1, r0, r7
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x24c>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c3a:	d22c      	bcs.n	8000c96 <__udivmoddi4+0x29e>
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	d92a      	bls.n	8000c96 <__udivmoddi4+0x29e>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	1a5b      	subs	r3, r3, r1
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000c50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c54:	fb01 f307 	mul.w	r3, r1, r7
 8000c58:	42a3      	cmp	r3, r4
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x276>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c64:	d213      	bcs.n	8000c8e <__udivmoddi4+0x296>
 8000c66:	42a3      	cmp	r3, r4
 8000c68:	d911      	bls.n	8000c8e <__udivmoddi4+0x296>
 8000c6a:	3902      	subs	r1, #2
 8000c6c:	4464      	add	r4, ip
 8000c6e:	1ae4      	subs	r4, r4, r3
 8000c70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c74:	e739      	b.n	8000aea <__udivmoddi4+0xf2>
 8000c76:	4604      	mov	r4, r0
 8000c78:	e6f0      	b.n	8000a5c <__udivmoddi4+0x64>
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	e706      	b.n	8000a8c <__udivmoddi4+0x94>
 8000c7e:	45c8      	cmp	r8, r9
 8000c80:	d2ae      	bcs.n	8000be0 <__udivmoddi4+0x1e8>
 8000c82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c8a:	3801      	subs	r0, #1
 8000c8c:	e7a8      	b.n	8000be0 <__udivmoddi4+0x1e8>
 8000c8e:	4631      	mov	r1, r6
 8000c90:	e7ed      	b.n	8000c6e <__udivmoddi4+0x276>
 8000c92:	4603      	mov	r3, r0
 8000c94:	e799      	b.n	8000bca <__udivmoddi4+0x1d2>
 8000c96:	4630      	mov	r0, r6
 8000c98:	e7d4      	b.n	8000c44 <__udivmoddi4+0x24c>
 8000c9a:	46d6      	mov	lr, sl
 8000c9c:	e77f      	b.n	8000b9e <__udivmoddi4+0x1a6>
 8000c9e:	4463      	add	r3, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	e74d      	b.n	8000b40 <__udivmoddi4+0x148>
 8000ca4:	4606      	mov	r6, r0
 8000ca6:	4623      	mov	r3, r4
 8000ca8:	4608      	mov	r0, r1
 8000caa:	e70f      	b.n	8000acc <__udivmoddi4+0xd4>
 8000cac:	3e02      	subs	r6, #2
 8000cae:	4463      	add	r3, ip
 8000cb0:	e730      	b.n	8000b14 <__udivmoddi4+0x11c>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <HAL_ADC_ConvCpltCallback>:

/* Functions prototypes ------------------------------------------------------*/

/* Interrupções --------------------------------------------------------------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC2) {
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a06      	ldr	r2, [pc, #24]	@ (8000ce0 <HAL_ADC_ConvCpltCallback+0x28>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d106      	bne.n	8000cd8 <HAL_ADC_ConvCpltCallback+0x20>
		OS_ERR err;

		OSFlagPost(
 8000cca:	f107 030e 	add.w	r3, r7, #14
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4804      	ldr	r0, [pc, #16]	@ (8000ce4 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000cd4:	f005 fdac 	bl	8006830 <OSFlagPost>
			(OS_FLAGS     )MOTOR_BOBINA_ADC_RDY,
			(OS_OPT       )OS_OPT_POST_FLAG_SET,
			(OS_ERR      *)&err
		);
	}
}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40012100 	.word	0x40012100
 8000ce4:	200009b8 	.word	0x200009b8

08000ce8 <motorBobinaTask>:

/* Task ----------------------------------------------------------------------*/
static void motorBobinaTask(void *p_arg)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	@ 0x30
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	6078      	str	r0, [r7, #4]
	CPU_TS ts;

	(void)p_arg;

	/* Inicializa a amostragem e conversão a/d e d/a */
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) &motorBobinaTensaoRead, 1);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4943      	ldr	r1, [pc, #268]	@ (8000e00 <motorBobinaTask+0x118>)
 8000cf4:	4843      	ldr	r0, [pc, #268]	@ (8000e04 <motorBobinaTask+0x11c>)
 8000cf6:	f001 f981 	bl	8001ffc <HAL_ADC_Start_DMA>
	HAL_DAC_Start_DMA(&hdac, MOTOR_BOBINA_VEL_DAC_CHANNEL, (const uint32_t *) &motorBobinaVel, 1, DAC_ALIGN_12B_R);
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	2301      	movs	r3, #1
 8000d00:	4a41      	ldr	r2, [pc, #260]	@ (8000e08 <motorBobinaTask+0x120>)
 8000d02:	2100      	movs	r1, #0
 8000d04:	4841      	ldr	r0, [pc, #260]	@ (8000e0c <motorBobinaTask+0x124>)
 8000d06:	f001 fe81 	bl	8002a0c <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim2); /* 6.4 kHz */
 8000d0a:	4841      	ldr	r0, [pc, #260]	@ (8000e10 <motorBobinaTask+0x128>)
 8000d0c:	f003 fa8c 	bl	8004228 <HAL_TIM_Base_Start>

	int32_t kp = 15;
 8000d10:	230f      	movs	r3, #15
 8000d12:	623b      	str	r3, [r7, #32]
	int32_t motorBobinaTensaoRef;

	/* Lê o valor salvo na flash da referência */
	if (Read_HALFWORD_Config(0, (uint16_t *) &motorBobinaTensaoRef) != FLASH_OK) {
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	4619      	mov	r1, r3
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 fabc 	bl	8001298 <Read_HALFWORD_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d002      	beq.n	8000d2c <motorBobinaTask+0x44>
		motorBobinaTensaoRef = ADC_REF_STD;
 8000d26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d2a:	60fb      	str	r3, [r7, #12]
	}

	/* Infinite loop */
	while (DEF_TRUE) {
		OSFlagPend(
 8000d2c:	f107 0316 	add.w	r3, r7, #22
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2101      	movs	r1, #1
 8000d40:	4834      	ldr	r0, [pc, #208]	@ (8000e14 <motorBobinaTask+0x12c>)
 8000d42:	f005 fb0b 	bl	800635c <OSFlagPend>
			(OS_OPT       )(OS_OPT_PEND_FLAG_SET_ANY + OS_OPT_PEND_FLAG_CONSUME),
			(CPU_TS      *)&ts,
			(OS_ERR      *)&err
		);

		int32_t erro = motorBobinaTensaoRef - (int32_t) motorBobinaTensaoRead;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4a2d      	ldr	r2, [pc, #180]	@ (8000e00 <motorBobinaTask+0x118>)
 8000d4a:	8812      	ldrh	r2, [r2, #0]
 8000d4c:	b292      	uxth	r2, r2
 8000d4e:	1a9b      	subs	r3, r3, r2
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Desliga o motor caso pressionado o switch e também aplica uma zona morta */
		if (abs(erro) <= ERRO_DEATHZONE || (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == SW_ON)) {
 8000d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	bfb8      	it	lt
 8000d58:	425b      	neglt	r3, r3
 8000d5a:	2b19      	cmp	r3, #25
 8000d5c:	d907      	bls.n	8000d6e <motorBobinaTask+0x86>
 8000d5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d62:	482d      	ldr	r0, [pc, #180]	@ (8000e18 <motorBobinaTask+0x130>)
 8000d64:	f002 fd32 	bl	80037cc <HAL_GPIO_ReadPin>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d108      	bne.n	8000d80 <motorBobinaTask+0x98>
			HAL_GPIO_WritePin(MOTOR_BOBINA_EN_GPIO_Port, MOTOR_BOBINA_EN_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d74:	4829      	ldr	r0, [pc, #164]	@ (8000e1c <motorBobinaTask+0x134>)
 8000d76:	f002 fd41 	bl	80037fc <HAL_GPIO_WritePin>
			erro = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d7e:	e00e      	b.n	8000d9e <motorBobinaTask+0xb6>
		}
		else {
			HAL_GPIO_WritePin(MOTOR_BOBINA_EN_GPIO_Port, MOTOR_BOBINA_EN_Pin, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d86:	4825      	ldr	r0, [pc, #148]	@ (8000e1c <motorBobinaTask+0x134>)
 8000d88:	f002 fd38 	bl	80037fc <HAL_GPIO_WritePin>
			erro = (erro >= 0 ? erro - ERRO_DEATHZONE : erro + ERRO_DEATHZONE); /* Retira o degrau devido a zona morta */
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db02      	blt.n	8000d98 <motorBobinaTask+0xb0>
 8000d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d94:	3b19      	subs	r3, #25
 8000d96:	e001      	b.n	8000d9c <motorBobinaTask+0xb4>
 8000d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9a:	3319      	adds	r3, #25
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		/* Controle P */
		int32_t controle = kp*erro;
 8000d9e:	6a3b      	ldr	r3, [r7, #32]
 8000da0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000da2:	fb02 f303 	mul.w	r3, r2, r3
 8000da6:	61fb      	str	r3, [r7, #28]
		int32_t vel_dac = abs(controle);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	bfb8      	it	lt
 8000dae:	425b      	neglt	r3, r3
 8000db0:	61bb      	str	r3, [r7, #24]

		/* Limita o valor para o máximo do DAC */
		motorBobinaVel = vel_dac > DAC_MAX ? DAC_MAX : vel_dac;
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000db8:	4293      	cmp	r3, r2
 8000dba:	bfa8      	it	ge
 8000dbc:	4613      	movge	r3, r2
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <motorBobinaTask+0x120>)
 8000dc2:	801a      	strh	r2, [r3, #0]

		/* Caso o valor seja positivo, seta a direção CLOCK_WISE */
		if (controle >= 0) {
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db06      	blt.n	8000dd8 <motorBobinaTask+0xf0>
			HAL_GPIO_WritePin(MOTOR_BOBINA_DIR_GPIO_Port, MOTOR_BOBINA_DIR_Pin, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dd0:	4812      	ldr	r0, [pc, #72]	@ (8000e1c <motorBobinaTask+0x134>)
 8000dd2:	f002 fd13 	bl	80037fc <HAL_GPIO_WritePin>
 8000dd6:	e005      	b.n	8000de4 <motorBobinaTask+0xfc>
		}
		else {
			HAL_GPIO_WritePin(MOTOR_BOBINA_DIR_GPIO_Port, MOTOR_BOBINA_DIR_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dde:	480f      	ldr	r0, [pc, #60]	@ (8000e1c <motorBobinaTask+0x134>)
 8000de0:	f002 fd0c 	bl	80037fc <HAL_GPIO_WritePin>
		}

		/* Ajuste do ponto de referência */
		if (HAL_GPIO_ReadPin(SW0_GPIO_Port, SW0_Pin) == SW_ON) {
 8000de4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000de8:	480b      	ldr	r0, [pc, #44]	@ (8000e18 <motorBobinaTask+0x130>)
 8000dea:	f002 fcef 	bl	80037cc <HAL_GPIO_ReadPin>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d19b      	bne.n	8000d2c <motorBobinaTask+0x44>
			motorBobinaTensaoRef = motorBobinaTensaoRead;
 8000df4:	4b02      	ldr	r3, [pc, #8]	@ (8000e00 <motorBobinaTask+0x118>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	60fb      	str	r3, [r7, #12]
	while (DEF_TRUE) {
 8000dfc:	e796      	b.n	8000d2c <motorBobinaTask+0x44>
 8000dfe:	bf00      	nop
 8000e00:	200004ec 	.word	0x200004ec
 8000e04:	20000ea0 	.word	0x20000ea0
 8000e08:	200004ee 	.word	0x200004ee
 8000e0c:	20000f48 	.word	0x20000f48
 8000e10:	20001064 	.word	0x20001064
 8000e14:	200009b8 	.word	0x200009b8
 8000e18:	40020c00 	.word	0x40020c00
 8000e1c:	40021400 	.word	0x40021400

08000e20 <motorBobinaCreateTask>:
	}
}

/* Functions -----------------------------------------------------------------*/
void motorBobinaCreateTask(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	@ 0x30
 8000e24:	af0a      	add	r7, sp, #40	@ 0x28
    OS_ERR err;

	OSTaskCreate(
 8000e26:	1dbb      	adds	r3, r7, #6
 8000e28:	9308      	str	r3, [sp, #32]
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	9307      	str	r3, [sp, #28]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	9306      	str	r3, [sp, #24]
 8000e32:	2300      	movs	r3, #0
 8000e34:	9305      	str	r3, [sp, #20]
 8000e36:	2300      	movs	r3, #0
 8000e38:	9304      	str	r3, [sp, #16]
 8000e3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e3e:	9303      	str	r3, [sp, #12]
 8000e40:	2300      	movs	r3, #0
 8000e42:	9302      	str	r3, [sp, #8]
 8000e44:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <motorBobinaCreateTask+0x4c>)
 8000e46:	9301      	str	r3, [sp, #4]
 8000e48:	2303      	movs	r3, #3
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	4a08      	ldr	r2, [pc, #32]	@ (8000e70 <motorBobinaCreateTask+0x50>)
 8000e50:	4908      	ldr	r1, [pc, #32]	@ (8000e74 <motorBobinaCreateTask+0x54>)
 8000e52:	4809      	ldr	r0, [pc, #36]	@ (8000e78 <motorBobinaCreateTask+0x58>)
 8000e54:	f006 fc82 	bl	800775c <OSTaskCreate>
        (void         *)0u,
        (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
        (OS_ERR       *)&err
	);

	if (err != OS_ERR_NONE) {
 8000e58:	88fb      	ldrh	r3, [r7, #6]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <motorBobinaCreateTask+0x42>
		Error_Handler();
 8000e5e:	f000 facb 	bl	80013f8 <Error_Handler>
	}
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200000ec 	.word	0x200000ec
 8000e70:	08000ce9 	.word	0x08000ce9
 8000e74:	08008dd4 	.word	0x08008dd4
 8000e78:	20000028 	.word	0x20000028

08000e7c <HAL_GPIO_EXTI_Callback>:
static void carroTransversalDir(CARRO_TRANSVERSAL_DIR ctrl);
static void carroTransversalSetDuty(float duty); /* duty -> 0 a 1.0 */

/* Interrupções --------------------------------------------------------------*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000e8c:	d02c      	beq.n	8000ee8 <HAL_GPIO_EXTI_Callback+0x6c>
 8000e8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000e92:	dc64      	bgt.n	8000f5e <HAL_GPIO_EXTI_Callback+0xe2>
 8000e94:	2b08      	cmp	r3, #8
 8000e96:	d04c      	beq.n	8000f32 <HAL_GPIO_EXTI_Callback+0xb6>
 8000e98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000e9c:	d15f      	bne.n	8000f5e <HAL_GPIO_EXTI_Callback+0xe2>
		case OPTO_1_Pin:
			if (HAL_GPIO_ReadPin(OPTO_2_GPIO_Port, OPTO_2_Pin) == OPTO_OFF) {
 8000e9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ea2:	4834      	ldr	r0, [pc, #208]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000ea4:	f002 fc92 	bl	80037cc <HAL_GPIO_ReadPin>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d159      	bne.n	8000f62 <HAL_GPIO_EXTI_Callback+0xe6>
				bobinaTick++;
 8000eae:	4b32      	ldr	r3, [pc, #200]	@ (8000f78 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000eb0:	f993 3000 	ldrsb.w	r3, [r3]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	b25a      	sxtb	r2, r3
 8000ebc:	4b2e      	ldr	r3, [pc, #184]	@ (8000f78 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000ebe:	701a      	strb	r2, [r3, #0]

				if (bobinaTick > BOBINA_TICK_VOLTA) {
 8000ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f78 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000ec2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b08      	cmp	r3, #8
 8000eca:	d94a      	bls.n	8000f62 <HAL_GPIO_EXTI_Callback+0xe6>
					bobinaTick = 0;
 8000ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8000f78 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
					carroTransversalAndar = true;
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f7c <HAL_GPIO_EXTI_Callback+0x100>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]

					OS_ERR err;
					OSFlagPost(
 8000ed8:	f107 030e 	add.w	r3, r7, #14
 8000edc:	2200      	movs	r2, #0
 8000ede:	2102      	movs	r1, #2
 8000ee0:	4827      	ldr	r0, [pc, #156]	@ (8000f80 <HAL_GPIO_EXTI_Callback+0x104>)
 8000ee2:	f005 fca5 	bl	8006830 <OSFlagPost>
						(OS_OPT       )OS_OPT_POST_FLAG_SET,
						(OS_ERR      *)&err
					);
				}
			}
			break;
 8000ee6:	e03c      	b.n	8000f62 <HAL_GPIO_EXTI_Callback+0xe6>

		case OPTO_2_Pin:
			if (HAL_GPIO_ReadPin(OPTO_1_GPIO_Port, OPTO_1_Pin) == OPTO_OFF) {
 8000ee8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000eec:	4821      	ldr	r0, [pc, #132]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000eee:	f002 fc6d 	bl	80037cc <HAL_GPIO_ReadPin>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d136      	bne.n	8000f66 <HAL_GPIO_EXTI_Callback+0xea>
				bobinaTick--;
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f78 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000efa:	f993 3000 	ldrsb.w	r3, [r3]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	3b01      	subs	r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	b25a      	sxtb	r2, r3
 8000f06:	4b1c      	ldr	r3, [pc, #112]	@ (8000f78 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000f08:	701a      	strb	r2, [r3, #0]

				if (bobinaTick < -1*BOBINA_TICK_VOLTA) {
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000f0c:	f993 3000 	ldrsb.w	r3, [r3]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2bf7      	cmp	r3, #247	@ 0xf7
 8000f14:	d827      	bhi.n	8000f66 <HAL_GPIO_EXTI_Callback+0xea>
					bobinaTick = 0;
 8000f16:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
					carroTransversalAndar = true;
 8000f1c:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <HAL_GPIO_EXTI_Callback+0x100>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]

					OS_ERR err;
					OSFlagPost(
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	2200      	movs	r2, #0
 8000f28:	2103      	movs	r1, #3
 8000f2a:	4815      	ldr	r0, [pc, #84]	@ (8000f80 <HAL_GPIO_EXTI_Callback+0x104>)
 8000f2c:	f005 fc80 	bl	8006830 <OSFlagPost>
						(OS_OPT       )OS_OPT_POST_FLAG_SET,
						(OS_ERR      *)&err
					);
				}
			}
			break;
 8000f30:	e019      	b.n	8000f66 <HAL_GPIO_EXTI_Callback+0xea>

		case OPTO_3_Pin:
			carroTransversalTick++;
 8000f32:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x108>)
 8000f34:	f993 3000 	ldrsb.w	r3, [r3]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	b25a      	sxtb	r2, r3
 8000f40:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x108>)
 8000f42:	701a      	strb	r2, [r3, #0]

			/* Assim que deu uma volta no eixo do carro transversal, mande o carro parar */
			if (carroTransversalTick > CARRO_TRANSVERSAL_TICK_VOLTA) {
 8000f44:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x108>)
 8000f46:	f993 3000 	ldrsb.w	r3, [r3]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b14      	cmp	r3, #20
 8000f4e:	d90c      	bls.n	8000f6a <HAL_GPIO_EXTI_Callback+0xee>
				carroTransversalTick = 0;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x108>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
				carroTransversalAndar = false;
 8000f56:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <HAL_GPIO_EXTI_Callback+0x100>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000f5c:	e005      	b.n	8000f6a <HAL_GPIO_EXTI_Callback+0xee>

		default:
			__NOP();
 8000f5e:	bf00      	nop
			break;
 8000f60:	e004      	b.n	8000f6c <HAL_GPIO_EXTI_Callback+0xf0>
			break;
 8000f62:	bf00      	nop
 8000f64:	e002      	b.n	8000f6c <HAL_GPIO_EXTI_Callback+0xf0>
			break;
 8000f66:	bf00      	nop
 8000f68:	e000      	b.n	8000f6c <HAL_GPIO_EXTI_Callback+0xf0>
			break;
 8000f6a:	bf00      	nop
	}
}
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	200009b4 	.word	0x200009b4
 8000f7c:	200009b6 	.word	0x200009b6
 8000f80:	200009b8 	.word	0x200009b8
 8000f84:	200009b5 	.word	0x200009b5

08000f88 <carroTransversalTask>:

/* Task ----------------------------------------------------------------------*/
static void carroTransversalTask(void *p_arg)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	@ 0x28
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	6078      	str	r0, [r7, #4]
	CPU_TS ts;

	(void)p_arg;

	/* PWM de controle da velocidade do carro transversal */
	HAL_TIM_PWM_Start(&htim1, MOTOR_CARRO_TRANSVERSAL_PWM_Channel);
 8000f90:	210c      	movs	r1, #12
 8000f92:	484b      	ldr	r0, [pc, #300]	@ (80010c0 <carroTransversalTask+0x138>)
 8000f94:	f003 fa0a 	bl	80043ac <HAL_TIM_PWM_Start>

	/* Trás o carro transversal para posição inicial */
	carroTransversalHome();
 8000f98:	f000 f8d2 	bl	8001140 <carroTransversalHome>
	carroTransversalSetDuty(0.0);
 8000f9c:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 80010c4 <carroTransversalTask+0x13c>
 8000fa0:	f000 f93c 	bl	800121c <carroTransversalSetDuty>

	bobinaTick = 0;
 8000fa4:	4b48      	ldr	r3, [pc, #288]	@ (80010c8 <carroTransversalTask+0x140>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
	carroTransversalTick = 0;
 8000faa:	4b48      	ldr	r3, [pc, #288]	@ (80010cc <carroTransversalTask+0x144>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
	carroTransversalAndar = false;
 8000fb0:	4b47      	ldr	r3, [pc, #284]	@ (80010d0 <carroTransversalTask+0x148>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]

	OS_FLAGS comandoPrev = MOTOR_BOBINA_LIBERANDO;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61fb      	str	r3, [r7, #28]
	CARRO_TRANSVERSAL_DIR carroDir = PARADO;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	76fb      	strb	r3, [r7, #27]

	/* Infinite loop */
	while (DEF_TRUE) {
		/* Espera o comando para andar */
		comando = OSFlagPend(
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2105      	movs	r1, #5
 8000fd2:	4840      	ldr	r0, [pc, #256]	@ (80010d4 <carroTransversalTask+0x14c>)
 8000fd4:	f005 f9c2 	bl	800635c <OSFlagPend>
 8000fd8:	6178      	str	r0, [r7, #20]
					(OS_OPT       )(OS_OPT_PEND_FLAG_SET_ANY + OS_OPT_PEND_FLAG_CONSUME),
					(CPU_TS      *)&ts,
					(OS_ERR      *)&err
				);

		while (carroTransversalAndar) {
 8000fda:	e05e      	b.n	800109a <carroTransversalTask+0x112>
			GPIO_PinState fimCurso_1 = HAL_GPIO_ReadPin(FIM_CURSO_1_GPIO_Port, FIM_CURSO_1_Pin);
 8000fdc:	2108      	movs	r1, #8
 8000fde:	483e      	ldr	r0, [pc, #248]	@ (80010d8 <carroTransversalTask+0x150>)
 8000fe0:	f002 fbf4 	bl	80037cc <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	74fb      	strb	r3, [r7, #19]
			GPIO_PinState fimCurso_2 = HAL_GPIO_ReadPin(FIM_CURSO_2_GPIO_Port, FIM_CURSO_2_Pin);
 8000fe8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fec:	483b      	ldr	r0, [pc, #236]	@ (80010dc <carroTransversalTask+0x154>)
 8000fee:	f002 fbed 	bl	80037cc <HAL_GPIO_ReadPin>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	74bb      	strb	r3, [r7, #18]
			/*
			 * Para evitar que o carro passe do ponto
			 * Quando o passo atinge o valor 14, desacelera até linearmente 40% de duty
			 * 40% para evitar que o carro trave sem conseguir andar
			 */
			if (carroTransversalTick < 14) {
 8000ff6:	4b35      	ldr	r3, [pc, #212]	@ (80010cc <carroTransversalTask+0x144>)
 8000ff8:	f993 3000 	ldrsb.w	r3, [r3]
 8000ffc:	2b0d      	cmp	r3, #13
 8000ffe:	dc04      	bgt.n	800100a <carroTransversalTask+0x82>
				carroTransversalSetDuty(1.0);
 8001000:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001004:	f000 f90a 	bl	800121c <carroTransversalSetDuty>
 8001008:	e01d      	b.n	8001046 <carroTransversalTask+0xbe>
			}
			else {
				carroTransversalSetDuty(1.0 - 0.1*(carroTransversalTick - 14));
 800100a:	4b30      	ldr	r3, [pc, #192]	@ (80010cc <carroTransversalTask+0x144>)
 800100c:	f993 3000 	ldrsb.w	r3, [r3]
 8001010:	3b0e      	subs	r3, #14
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fc1e 	bl	8000854 <__aeabi_i2d>
 8001018:	a327      	add	r3, pc, #156	@ (adr r3, 80010b8 <carroTransversalTask+0x130>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff f99d 	bl	800035c <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	f04f 0000 	mov.w	r0, #0
 800102a:	492d      	ldr	r1, [pc, #180]	@ (80010e0 <carroTransversalTask+0x158>)
 800102c:	f7ff fac4 	bl	80005b8 <__aeabi_dsub>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f7ff fc76 	bl	8000928 <__aeabi_d2f>
 800103c:	4603      	mov	r3, r0
 800103e:	ee00 3a10 	vmov	s0, r3
 8001042:	f000 f8eb 	bl	800121c <carroTransversalSetDuty>
			}

			if ((fimCurso_1 == GPIO_PIN_SET) && (fimCurso_2 == GPIO_PIN_SET)) { /* Ambas fim de cursos acionado -> impossível */
 8001046:	7cfb      	ldrb	r3, [r7, #19]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d108      	bne.n	800105e <carroTransversalTask+0xd6>
 800104c:	7cbb      	ldrb	r3, [r7, #18]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d105      	bne.n	800105e <carroTransversalTask+0xd6>
				carroTransversalAndar = 0;
 8001052:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <carroTransversalTask+0x148>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
				carroDir = PARADO;
 8001058:	2303      	movs	r3, #3
 800105a:	76fb      	strb	r3, [r7, #27]
 800105c:	e019      	b.n	8001092 <carroTransversalTask+0x10a>
			}
			else if (fimCurso_1 == GPIO_PIN_SET) {
 800105e:	7cfb      	ldrb	r3, [r7, #19]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d102      	bne.n	800106a <carroTransversalTask+0xe2>
				carroDir = DIREITA;
 8001064:	2301      	movs	r3, #1
 8001066:	76fb      	strb	r3, [r7, #27]
 8001068:	e013      	b.n	8001092 <carroTransversalTask+0x10a>
			}
			else if (fimCurso_2 == GPIO_PIN_SET) {
 800106a:	7cbb      	ldrb	r3, [r7, #18]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d102      	bne.n	8001076 <carroTransversalTask+0xee>
				carroDir = ESQUERDA;
 8001070:	2300      	movs	r3, #0
 8001072:	76fb      	strb	r3, [r7, #27]
 8001074:	e00d      	b.n	8001092 <carroTransversalTask+0x10a>
			}
			else {
				/* A bobina mudou de direção? -> Sim, também mude o carro */
				if (comando != comandoPrev) {
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	429a      	cmp	r2, r3
 800107c:	d009      	beq.n	8001092 <carroTransversalTask+0x10a>
					comandoPrev = comando;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	61fb      	str	r3, [r7, #28]

					if (carroDir == ESQUERDA) {
 8001082:	7efb      	ldrb	r3, [r7, #27]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <carroTransversalTask+0x106>
						carroDir = DIREITA;
 8001088:	2301      	movs	r3, #1
 800108a:	76fb      	strb	r3, [r7, #27]
 800108c:	e001      	b.n	8001092 <carroTransversalTask+0x10a>
					}
					else {
						carroDir = ESQUERDA;
 800108e:	2300      	movs	r3, #0
 8001090:	76fb      	strb	r3, [r7, #27]
					}
				}
			}

			carroTransversalDir(carroDir);
 8001092:	7efb      	ldrb	r3, [r7, #27]
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f87f 	bl	8001198 <carroTransversalDir>
		while (carroTransversalAndar) {
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <carroTransversalTask+0x148>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d19c      	bne.n	8000fdc <carroTransversalTask+0x54>
		}

		/* Freia e para o carro */
		carroTransversalSetDuty(1.0);
 80010a2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80010a6:	f000 f8b9 	bl	800121c <carroTransversalSetDuty>
		carroTransversalDir(FREIO);
 80010aa:	2002      	movs	r0, #2
 80010ac:	f000 f874 	bl	8001198 <carroTransversalDir>
		comando = OSFlagPend(
 80010b0:	e785      	b.n	8000fbe <carroTransversalTask+0x36>
 80010b2:	bf00      	nop
 80010b4:	f3af 8000 	nop.w
 80010b8:	9999999a 	.word	0x9999999a
 80010bc:	3fb99999 	.word	0x3fb99999
 80010c0:	2000101c 	.word	0x2000101c
 80010c4:	00000000 	.word	0x00000000
 80010c8:	200009b4 	.word	0x200009b4
 80010cc:	200009b5 	.word	0x200009b5
 80010d0:	200009b6 	.word	0x200009b6
 80010d4:	200009b8 	.word	0x200009b8
 80010d8:	40020400 	.word	0x40020400
 80010dc:	40020000 	.word	0x40020000
 80010e0:	3ff00000 	.word	0x3ff00000

080010e4 <carroTransversalCreateTask>:
	}
}

/* Functions -----------------------------------------------------------------*/
void carroTransversalCreateTask(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08c      	sub	sp, #48	@ 0x30
 80010e8:	af0a      	add	r7, sp, #40	@ 0x28
    OS_ERR err;

	OSTaskCreate(
 80010ea:	1dbb      	adds	r3, r7, #6
 80010ec:	9308      	str	r3, [sp, #32]
 80010ee:	2303      	movs	r3, #3
 80010f0:	9307      	str	r3, [sp, #28]
 80010f2:	2300      	movs	r3, #0
 80010f4:	9306      	str	r3, [sp, #24]
 80010f6:	2300      	movs	r3, #0
 80010f8:	9305      	str	r3, [sp, #20]
 80010fa:	2300      	movs	r3, #0
 80010fc:	9304      	str	r3, [sp, #16]
 80010fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001102:	9303      	str	r3, [sp, #12]
 8001104:	2300      	movs	r3, #0
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <carroTransversalCreateTask+0x4c>)
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	2304      	movs	r3, #4
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2300      	movs	r3, #0
 8001112:	4a08      	ldr	r2, [pc, #32]	@ (8001134 <carroTransversalCreateTask+0x50>)
 8001114:	4908      	ldr	r1, [pc, #32]	@ (8001138 <carroTransversalCreateTask+0x54>)
 8001116:	4809      	ldr	r0, [pc, #36]	@ (800113c <carroTransversalCreateTask+0x58>)
 8001118:	f006 fb20 	bl	800775c <OSTaskCreate>
        (void         *)0u,
        (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
        (OS_ERR       *)&err
	);

	if (err != OS_ERR_NONE) {
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <carroTransversalCreateTask+0x42>
		Error_Handler();
 8001122:	f000 f969 	bl	80013f8 <Error_Handler>
	}
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200005b4 	.word	0x200005b4
 8001134:	08000f89 	.word	0x08000f89
 8001138:	08008dfc 	.word	0x08008dfc
 800113c:	200004f0 	.word	0x200004f0

08001140 <carroTransversalHome>:

static void carroTransversalHome(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
	#define HOME_TIMEOUT	25000000

	uint32_t homeTimeout = HOME_TIMEOUT;
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <carroTransversalHome+0x4c>)
 8001148:	607b      	str	r3, [r7, #4]

	while (homeTimeout > 0 && (HAL_GPIO_ReadPin(FIM_CURSO_2_GPIO_Port, FIM_CURSO_2_Pin) == GPIO_PIN_RESET)) {
 800114a:	e009      	b.n	8001160 <carroTransversalHome+0x20>
		carroTransversalDir(DIREITA);
 800114c:	2001      	movs	r0, #1
 800114e:	f000 f823 	bl	8001198 <carroTransversalDir>
		carroTransversalSetDuty(1.0);
 8001152:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001156:	f000 f861 	bl	800121c <carroTransversalSetDuty>
		homeTimeout--;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3b01      	subs	r3, #1
 800115e:	607b      	str	r3, [r7, #4]
	while (homeTimeout > 0 && (HAL_GPIO_ReadPin(FIM_CURSO_2_GPIO_Port, FIM_CURSO_2_Pin) == GPIO_PIN_RESET)) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d007      	beq.n	8001176 <carroTransversalHome+0x36>
 8001166:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800116a:	4809      	ldr	r0, [pc, #36]	@ (8001190 <carroTransversalHome+0x50>)
 800116c:	f002 fb2e 	bl	80037cc <HAL_GPIO_ReadPin>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0ea      	beq.n	800114c <carroTransversalHome+0xc>
	}

	carroTransversalDir(PARADO);
 8001176:	2003      	movs	r0, #3
 8001178:	f000 f80e 	bl	8001198 <carroTransversalDir>
	carroTransversalSetDuty(0.0);
 800117c:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8001194 <carroTransversalHome+0x54>
 8001180:	f000 f84c 	bl	800121c <carroTransversalSetDuty>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	017d7840 	.word	0x017d7840
 8001190:	40020000 	.word	0x40020000
 8001194:	00000000 	.word	0x00000000

08001198 <carroTransversalDir>:

static void carroTransversalDir(CARRO_TRANSVERSAL_DIR ctrl)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	switch(ctrl) {
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d01c      	beq.n	80011e2 <carroTransversalDir+0x4a>
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	dc25      	bgt.n	80011f8 <carroTransversalDir+0x60>
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <carroTransversalDir+0x1e>
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d00b      	beq.n	80011cc <carroTransversalDir+0x34>
 80011b4:	e020      	b.n	80011f8 <carroTransversalDir+0x60>
		case ESQUERDA:
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR1_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin, GPIO_PIN_SET);
 80011b6:	2201      	movs	r2, #1
 80011b8:	2120      	movs	r1, #32
 80011ba:	4817      	ldr	r0, [pc, #92]	@ (8001218 <carroTransversalDir+0x80>)
 80011bc:	f002 fb1e 	bl	80037fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR2_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2140      	movs	r1, #64	@ 0x40
 80011c4:	4814      	ldr	r0, [pc, #80]	@ (8001218 <carroTransversalDir+0x80>)
 80011c6:	f002 fb19 	bl	80037fc <HAL_GPIO_WritePin>
			break;
 80011ca:	e020      	b.n	800120e <carroTransversalDir+0x76>

		case DIREITA:
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR1_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2120      	movs	r1, #32
 80011d0:	4811      	ldr	r0, [pc, #68]	@ (8001218 <carroTransversalDir+0x80>)
 80011d2:	f002 fb13 	bl	80037fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR2_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin, GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2140      	movs	r1, #64	@ 0x40
 80011da:	480f      	ldr	r0, [pc, #60]	@ (8001218 <carroTransversalDir+0x80>)
 80011dc:	f002 fb0e 	bl	80037fc <HAL_GPIO_WritePin>
			break;
 80011e0:	e015      	b.n	800120e <carroTransversalDir+0x76>

		case FREIO:
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR1_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin, GPIO_PIN_SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	2120      	movs	r1, #32
 80011e6:	480c      	ldr	r0, [pc, #48]	@ (8001218 <carroTransversalDir+0x80>)
 80011e8:	f002 fb08 	bl	80037fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR2_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin, GPIO_PIN_SET);
 80011ec:	2201      	movs	r2, #1
 80011ee:	2140      	movs	r1, #64	@ 0x40
 80011f0:	4809      	ldr	r0, [pc, #36]	@ (8001218 <carroTransversalDir+0x80>)
 80011f2:	f002 fb03 	bl	80037fc <HAL_GPIO_WritePin>
			break;
 80011f6:	e00a      	b.n	800120e <carroTransversalDir+0x76>

		case PARADO:
		default:
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR1_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2120      	movs	r1, #32
 80011fc:	4806      	ldr	r0, [pc, #24]	@ (8001218 <carroTransversalDir+0x80>)
 80011fe:	f002 fafd 	bl	80037fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_CARRO_TRANSVERSAL_DIR2_GPIO_Port, MOTOR_CARRO_TRANSVERSAL_DIR2_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2140      	movs	r1, #64	@ 0x40
 8001206:	4804      	ldr	r0, [pc, #16]	@ (8001218 <carroTransversalDir+0x80>)
 8001208:	f002 faf8 	bl	80037fc <HAL_GPIO_WritePin>
			break;
 800120c:	bf00      	nop
	}
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000

0800121c <carroTransversalSetDuty>:

static void carroTransversalSetDuty(float duty)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	ed87 0a01 	vstr	s0, [r7, #4]
	if (duty > 0 && duty < 1) {
 8001226:	edd7 7a01 	vldr	s15, [r7, #4]
 800122a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800122e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001232:	dd19      	ble.n	8001268 <carroTransversalSetDuty+0x4c>
 8001234:	edd7 7a01 	vldr	s15, [r7, #4]
 8001238:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800123c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001244:	d510      	bpl.n	8001268 <carroTransversalSetDuty+0x4c>
		MOTOR_CARRO_TRANSVERSAL_PWM_TIM->CCR4 = (uint32_t) (((float) MOTOR_CARRO_TRANSVERSAL_PWM_TIM->ARR) * duty);
 8001246:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <carroTransversalSetDuty+0x78>)
 8001248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001252:	edd7 7a01 	vldr	s15, [r7, #4]
 8001256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <carroTransversalSetDuty+0x78>)
 800125c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001260:	ee17 2a90 	vmov	r2, s15
 8001264:	641a      	str	r2, [r3, #64]	@ 0x40
		MOTOR_CARRO_TRANSVERSAL_PWM_TIM->CCR4 = 0;
	}
	else {
		MOTOR_CARRO_TRANSVERSAL_PWM_TIM->CCR4 = MOTOR_CARRO_TRANSVERSAL_PWM_TIM->ARR;
	}
}
 8001266:	e00e      	b.n	8001286 <carroTransversalSetDuty+0x6a>
	else if (duty < 0) {
 8001268:	edd7 7a01 	vldr	s15, [r7, #4]
 800126c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001274:	d503      	bpl.n	800127e <carroTransversalSetDuty+0x62>
		MOTOR_CARRO_TRANSVERSAL_PWM_TIM->CCR4 = 0;
 8001276:	4b07      	ldr	r3, [pc, #28]	@ (8001294 <carroTransversalSetDuty+0x78>)
 8001278:	2200      	movs	r2, #0
 800127a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800127c:	e003      	b.n	8001286 <carroTransversalSetDuty+0x6a>
		MOTOR_CARRO_TRANSVERSAL_PWM_TIM->CCR4 = MOTOR_CARRO_TRANSVERSAL_PWM_TIM->ARR;
 800127e:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <carroTransversalSetDuty+0x78>)
 8001280:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <carroTransversalSetDuty+0x78>)
 8001282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001284:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40010000 	.word	0x40010000

08001298 <Read_HALFWORD_Config>:

	return FLASH_ERRO;
}

FLASH_STATUS Read_HALFWORD_Config(uint32_t addr, uint16_t *data)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
	uint32_t flash_addr = addr + userConfig_start;
 80012a2:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <Read_HALFWORD_Config+0x54>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]

	if (flash_addr+1 <= userConfig_end) {
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <Read_HALFWORD_Config+0x58>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d811      	bhi.n	80012dc <Read_HALFWORD_Config+0x44>
		*data = (userConfig[flash_addr+1] << 8) | userConfig[flash_addr];
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3301      	adds	r3, #1
 80012bc:	4a0d      	ldr	r2, [pc, #52]	@ (80012f4 <Read_HALFWORD_Config+0x5c>)
 80012be:	5cd3      	ldrb	r3, [r2, r3]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	490b      	ldr	r1, [pc, #44]	@ (80012f4 <Read_HALFWORD_Config+0x5c>)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	440b      	add	r3, r1
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	801a      	strh	r2, [r3, #0]

		return FLASH_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	e000      	b.n	80012de <Read_HALFWORD_Config+0x46>
	}

	return FLASH_ERRO;
 80012dc:	2301      	movs	r3, #1
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	08008ef8 	.word	0x08008ef8
 80012f0:	08008efc 	.word	0x08008efc
 80012f4:	081e0000 	.word	0x081e0000

080012f8 <main>:
/* Task prototypes -----------------------------------------------------------*/
static void programStartTask(void *p_arg);

/* Main ----------------------------------------------------------------------*/
int main(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	@ 0x30
 80012fc:	af0a      	add	r7, sp, #40	@ 0x28
	/* MCU Configuration -----------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012fe:	f000 fddb 	bl	8001eb8 <HAL_Init>

	/* Configura o CLock da CPU para 160MHz */
	SystemClock_Config();
 8001302:	f000 f88b 	bl	800141c <SystemClock_Config>

	/* Inicializa o sistema */
	OS_ERR err;

	OSInit(&err);
 8001306:	1dbb      	adds	r3, r7, #6
 8001308:	4618      	mov	r0, r3
 800130a:	f004 f839 	bl	8005380 <OSInit>

	if (err != OS_ERR_NONE) {
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <main+0x20>
		Error_Handler();
 8001314:	f000 f870 	bl	80013f8 <Error_Handler>
	}

	OSFlagCreate(
 8001318:	1dbb      	adds	r3, r7, #6
 800131a:	2200      	movs	r2, #0
 800131c:	4919      	ldr	r1, [pc, #100]	@ (8001384 <main+0x8c>)
 800131e:	481a      	ldr	r0, [pc, #104]	@ (8001388 <main+0x90>)
 8001320:	f004 ffca 	bl	80062b8 <OSFlagCreate>
		(CPU_CHAR    *)"Grupo de flags",
		(OS_FLAGS     )0,
		(OS_ERR      *)&err
	);

	if (err != OS_ERR_NONE) {
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <main+0x36>
		Error_Handler();
 800132a:	f000 f865 	bl	80013f8 <Error_Handler>
        (CPU_CHAR     *)"Tarefa de Inicializar o programa",
        (OS_TASK_PTR   )programStartTask,
        (void         *)0u,
        (OS_PRIO       )PROGRAM_START_TASK_PRIO,
        (CPU_STK      *)&programStartTaskStk[0u],
        (CPU_STK_SIZE  )programStartTaskStk[PROGRAM_START_TASK_STK_SIZE / 10u],
 800132e:	4b17      	ldr	r3, [pc, #92]	@ (800138c <main+0x94>)
 8001330:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    OSTaskCreate(
 8001332:	1dba      	adds	r2, r7, #6
 8001334:	9208      	str	r2, [sp, #32]
 8001336:	2203      	movs	r2, #3
 8001338:	9207      	str	r2, [sp, #28]
 800133a:	2200      	movs	r2, #0
 800133c:	9206      	str	r2, [sp, #24]
 800133e:	2200      	movs	r2, #0
 8001340:	9205      	str	r2, [sp, #20]
 8001342:	2200      	movs	r2, #0
 8001344:	9204      	str	r2, [sp, #16]
 8001346:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800134a:	9203      	str	r2, [sp, #12]
 800134c:	9302      	str	r3, [sp, #8]
 800134e:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <main+0x94>)
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	2305      	movs	r3, #5
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2300      	movs	r3, #0
 8001358:	4a0d      	ldr	r2, [pc, #52]	@ (8001390 <main+0x98>)
 800135a:	490e      	ldr	r1, [pc, #56]	@ (8001394 <main+0x9c>)
 800135c:	480e      	ldr	r0, [pc, #56]	@ (8001398 <main+0xa0>)
 800135e:	f006 f9fd 	bl	800775c <OSTaskCreate>
        (void         *)0u,
        (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
        (OS_ERR       *)&err
	);

	if (err != OS_ERR_NONE) {
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <main+0x74>
		Error_Handler();
 8001368:	f000 f846 	bl	80013f8 <Error_Handler>
	}

    OSStart(&err);
 800136c:	1dbb      	adds	r3, r7, #6
 800136e:	4618      	mov	r0, r3
 8001370:	f004 f9e4 	bl	800573c <OSStart>

	if (err != OS_ERR_NONE) {
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <main+0x88>
		Error_Handler();
 800137a:	f000 f83d 	bl	80013f8 <Error_Handler>
	}

	/* Infinite loop */
	while (DEF_TRUE) {
 800137e:	bf00      	nop
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <main+0x88>
 8001384:	08008e30 	.word	0x08008e30
 8001388:	200009b8 	.word	0x200009b8
 800138c:	20000aa0 	.word	0x20000aa0
 8001390:	0800139d 	.word	0x0800139d
 8001394:	08008e40 	.word	0x08008e40
 8001398:	200009dc 	.word	0x200009dc

0800139c <programStartTask>:
	return 0;
}

/* Task ----------------------------------------------------------------------*/
static void programStartTask(void *p_arg)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	OS_ERR err;
	(void)p_arg;

	/* Inicializa todos os periféricos configurados */
	MX_GPIO_Init();
 80013a4:	f000 fa48 	bl	8001838 <MX_GPIO_Init>
	MX_DMA_Init();
 80013a8:	f000 fa18 	bl	80017dc <MX_DMA_Init>
	MX_ADC2_Init();
 80013ac:	f000 f8a2 	bl	80014f4 <MX_ADC2_Init>
	MX_DAC_Init();
 80013b0:	f000 f8f6 	bl	80015a0 <MX_DAC_Init>
	MX_TIM1_Init();
 80013b4:	f000 f928 	bl	8001608 <MX_TIM1_Init>
	MX_TIM2_Init();
 80013b8:	f000 f9c4 	bl	8001744 <MX_TIM2_Init>

	/* Habilita as saídas digitais */
	HAL_GPIO_WritePin(ENAOUT03_GPIO_Port, ENAOUT03_Pin | ENAOUT04_Pin, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 80013c2:	480b      	ldr	r0, [pc, #44]	@ (80013f0 <programStartTask+0x54>)
 80013c4:	f002 fa1a 	bl	80037fc <HAL_GPIO_WritePin>

	/* Cria a tarefa de controle do motor do carro transversal */
	carroTransversalCreateTask();
 80013c8:	f7ff fe8c 	bl	80010e4 <carroTransversalCreateTask>

	/* Cria a tarefa de controle do motor da bobina */
	motorBobinaCreateTask();
 80013cc:	f7ff fd28 	bl	8000e20 <motorBobinaCreateTask>

	/* Infinite loop */
	while (DEF_TRUE) {
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80013d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013d4:	4807      	ldr	r0, [pc, #28]	@ (80013f4 <programStartTask+0x58>)
 80013d6:	f002 fa2a 	bl	800382e <HAL_GPIO_TogglePin>
		OSTimeDly(500, OS_OPT_TIME_DLY, &err);
 80013da:	f107 030e 	add.w	r3, r7, #14
 80013de:	461a      	mov	r2, r3
 80013e0:	2100      	movs	r1, #0
 80013e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013e6:	f007 f8e5 	bl	80085b4 <OSTimeDly>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80013ea:	bf00      	nop
 80013ec:	e7f0      	b.n	80013d0 <programStartTask+0x34>
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40021400 	.word	0x40021400

080013f8 <Error_Handler>:
	}
}

/* Error ---------------------------------------------------------------------*/
void Error_Handler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	HAL_GPIO_WritePin(LED_ERRO_GPIO_Port, LED_ERRO_Pin, LED_ON);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001406:	4804      	ldr	r0, [pc, #16]	@ (8001418 <Error_Handler+0x20>)
 8001408:	f002 f9f8 	bl	80037fc <HAL_GPIO_WritePin>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800140c:	2101      	movs	r1, #1
 800140e:	2001      	movs	r0, #1
 8001410:	f002 fa40 	bl	8003894 <HAL_PWR_EnterSTOPMode>

	while (1) {
		__WFI();
 8001414:	bf30      	wfi
 8001416:	e7fd      	b.n	8001414 <Error_Handler+0x1c>
 8001418:	40021400 	.word	0x40021400

0800141c <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b094      	sub	sp, #80	@ 0x50
 8001420:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001422:	f107 0320 	add.w	r3, r7, #32
 8001426:	2230      	movs	r2, #48	@ 0x30
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f007 fc9a 	bl	8008d64 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]

	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	4b29      	ldr	r3, [pc, #164]	@ (80014ec <SystemClock_Config+0xd0>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001448:	4a28      	ldr	r2, [pc, #160]	@ (80014ec <SystemClock_Config+0xd0>)
 800144a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800144e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001450:	4b26      	ldr	r3, [pc, #152]	@ (80014ec <SystemClock_Config+0xd0>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	4b23      	ldr	r3, [pc, #140]	@ (80014f0 <SystemClock_Config+0xd4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a22      	ldr	r2, [pc, #136]	@ (80014f0 <SystemClock_Config+0xd4>)
 8001466:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <SystemClock_Config+0xd4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001478:	2301      	movs	r3, #1
 800147a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800147c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001482:	2302      	movs	r3, #2
 8001484:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001486:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800148a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 15;
 800148c:	230f      	movs	r3, #15
 800148e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 8001490:	23c0      	movs	r3, #192	@ 0xc0
 8001492:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001494:	2302      	movs	r3, #2
 8001496:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001498:	2304      	movs	r3, #4
 800149a:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800149c:	f107 0320 	add.w	r3, r7, #32
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 fa27 	bl	80038f4 <HAL_RCC_OscConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0x94>
		Error_Handler();
 80014ac:	f7ff ffa4 	bl	80013f8 <Error_Handler>
	}

	/* Initializes the CPU, AHB and APB buses clocks */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b0:	230f      	movs	r3, #15
 80014b2:	60fb      	str	r3, [r7, #12]
								 |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b4:	2302      	movs	r3, #2
 80014b6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014c0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014c6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	2105      	movs	r1, #5
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 fc88 	bl	8003de4 <HAL_RCC_ClockConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0xc2>
		Error_Handler();
 80014da:	f7ff ff8d 	bl	80013f8 <Error_Handler>
	}

	/* Enables the Clock Security System */
	HAL_RCC_EnableCSS();
 80014de:	f002 fd67 	bl	8003fb0 <HAL_RCC_EnableCSS>
}
 80014e2:	bf00      	nop
 80014e4:	3750      	adds	r7, #80	@ 0x50
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40007000 	.word	0x40007000

080014f4 <MX_ADC2_Init>:

void MX_ADC2_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80014fa:	463b      	mov	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]

	/* Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) */
	hadc2.Instance = ADC2;
 8001506:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <MX_ADC2_Init+0xa4>)
 8001508:	4a24      	ldr	r2, [pc, #144]	@ (800159c <MX_ADC2_Init+0xa8>)
 800150a:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800150c:	4b22      	ldr	r3, [pc, #136]	@ (8001598 <MX_ADC2_Init+0xa4>)
 800150e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001512:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001514:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <MX_ADC2_Init+0xa4>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = ENABLE;
 800151a:	4b1f      	ldr	r3, [pc, #124]	@ (8001598 <MX_ADC2_Init+0xa4>)
 800151c:	2201      	movs	r2, #1
 800151e:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8001520:	4b1d      	ldr	r3, [pc, #116]	@ (8001598 <MX_ADC2_Init+0xa4>)
 8001522:	2200      	movs	r2, #0
 8001524:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = ENABLE;
 8001526:	4b1c      	ldr	r3, [pc, #112]	@ (8001598 <MX_ADC2_Init+0xa4>)
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.NbrOfDiscConversion = 1;
 800152e:	4b1a      	ldr	r3, [pc, #104]	@ (8001598 <MX_ADC2_Init+0xa4>)
 8001530:	2201      	movs	r2, #1
 8001532:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001534:	4b18      	ldr	r3, [pc, #96]	@ (8001598 <MX_ADC2_Init+0xa4>)
 8001536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800153a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800153c:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <MX_ADC2_Init+0xa4>)
 800153e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001542:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001544:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <MX_ADC2_Init+0xa4>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 800154a:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <MX_ADC2_Init+0xa4>)
 800154c:	2201      	movs	r2, #1
 800154e:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8001550:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <MX_ADC2_Init+0xa4>)
 8001552:	2201      	movs	r2, #1
 8001554:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001558:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <MX_ADC2_Init+0xa4>)
 800155a:	2200      	movs	r2, #0
 800155c:	615a      	str	r2, [r3, #20]

	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 800155e:	480e      	ldr	r0, [pc, #56]	@ (8001598 <MX_ADC2_Init+0xa4>)
 8001560:	f000 fd08 	bl	8001f74 <HAL_ADC_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_ADC2_Init+0x7a>
		Error_Handler();
 800156a:	f7ff ff45 	bl	80013f8 <Error_Handler>
	}

  /* Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. */
	sConfig.Channel = ADC_CHANNEL_6;
 800156e:	2306      	movs	r3, #6
 8001570:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001572:	2301      	movs	r3, #1
 8001574:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001576:	2306      	movs	r3, #6
 8001578:	60bb      	str	r3, [r7, #8]

	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 800157a:	463b      	mov	r3, r7
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	@ (8001598 <MX_ADC2_Init+0xa4>)
 8001580:	f000 fe60 	bl	8002244 <HAL_ADC_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_ADC2_Init+0x9a>
		Error_Handler();
 800158a:	f7ff ff35 	bl	80013f8 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000ea0 	.word	0x20000ea0
 800159c:	40012100 	.word	0x40012100

080015a0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
void MX_DAC_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015a6:	463b      	mov	r3, r7
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80015ae:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <MX_DAC_Init+0x60>)
 80015b0:	4a14      	ldr	r2, [pc, #80]	@ (8001604 <MX_DAC_Init+0x64>)
 80015b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80015b4:	4812      	ldr	r0, [pc, #72]	@ (8001600 <MX_DAC_Init+0x60>)
 80015b6:	f001 fa06 	bl	80029c6 <HAL_DAC_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80015c0:	f7ff ff1a 	bl	80013f8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80015c4:	2324      	movs	r3, #36	@ 0x24
 80015c6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	4619      	mov	r1, r3
 80015d2:	480b      	ldr	r0, [pc, #44]	@ (8001600 <MX_DAC_Init+0x60>)
 80015d4:	f001 fafa 	bl	8002bcc <HAL_DAC_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80015de:	f7ff ff0b 	bl	80013f8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80015e2:	463b      	mov	r3, r7
 80015e4:	2210      	movs	r2, #16
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	@ (8001600 <MX_DAC_Init+0x60>)
 80015ea:	f001 faef 	bl	8002bcc <HAL_DAC_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80015f4:	f7ff ff00 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000f48 	.word	0x20000f48
 8001604:	40007400 	.word	0x40007400

08001608 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b096      	sub	sp, #88	@ 0x58
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]
 8001636:	615a      	str	r2, [r3, #20]
 8001638:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2220      	movs	r2, #32
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f007 fb8f 	bl	8008d64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001646:	4b3d      	ldr	r3, [pc, #244]	@ (800173c <MX_TIM1_Init+0x134>)
 8001648:	4a3d      	ldr	r2, [pc, #244]	@ (8001740 <MX_TIM1_Init+0x138>)
 800164a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 800164c:	4b3b      	ldr	r3, [pc, #236]	@ (800173c <MX_TIM1_Init+0x134>)
 800164e:	224f      	movs	r2, #79	@ 0x4f
 8001650:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001652:	4b3a      	ldr	r3, [pc, #232]	@ (800173c <MX_TIM1_Init+0x134>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001658:	4b38      	ldr	r3, [pc, #224]	@ (800173c <MX_TIM1_Init+0x134>)
 800165a:	2263      	movs	r2, #99	@ 0x63
 800165c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165e:	4b37      	ldr	r3, [pc, #220]	@ (800173c <MX_TIM1_Init+0x134>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001664:	4b35      	ldr	r3, [pc, #212]	@ (800173c <MX_TIM1_Init+0x134>)
 8001666:	2200      	movs	r2, #0
 8001668:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166a:	4b34      	ldr	r3, [pc, #208]	@ (800173c <MX_TIM1_Init+0x134>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001670:	4832      	ldr	r0, [pc, #200]	@ (800173c <MX_TIM1_Init+0x134>)
 8001672:	f002 fd8a 	bl	800418a <HAL_TIM_Base_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800167c:	f7ff febc 	bl	80013f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001680:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001684:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001686:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800168a:	4619      	mov	r1, r3
 800168c:	482b      	ldr	r0, [pc, #172]	@ (800173c <MX_TIM1_Init+0x134>)
 800168e:	f003 f817 	bl	80046c0 <HAL_TIM_ConfigClockSource>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001698:	f7ff feae 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800169c:	4827      	ldr	r0, [pc, #156]	@ (800173c <MX_TIM1_Init+0x134>)
 800169e:	f002 fe2b 	bl	80042f8 <HAL_TIM_PWM_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80016a8:	f7ff fea6 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016b8:	4619      	mov	r1, r3
 80016ba:	4820      	ldr	r0, [pc, #128]	@ (800173c <MX_TIM1_Init+0x134>)
 80016bc:	f003 fbe4 	bl	8004e88 <HAL_TIMEx_MasterConfigSynchronization>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80016c6:	f7ff fe97 	bl	80013f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ca:	2360      	movs	r3, #96	@ 0x60
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d2:	2300      	movs	r3, #0
 80016d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016e6:	220c      	movs	r2, #12
 80016e8:	4619      	mov	r1, r3
 80016ea:	4814      	ldr	r0, [pc, #80]	@ (800173c <MX_TIM1_Init+0x134>)
 80016ec:	f002 ff26 	bl	800453c <HAL_TIM_PWM_ConfigChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80016f6:	f7ff fe7f 	bl	80013f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800170e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001712:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4619      	mov	r1, r3
 800171c:	4807      	ldr	r0, [pc, #28]	@ (800173c <MX_TIM1_Init+0x134>)
 800171e:	f003 fc2f 	bl	8004f80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8001728:	f7ff fe66 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800172c:	4803      	ldr	r0, [pc, #12]	@ (800173c <MX_TIM1_Init+0x134>)
 800172e:	f000 fb47 	bl	8001dc0 <HAL_TIM_MspPostInit>

}
 8001732:	bf00      	nop
 8001734:	3758      	adds	r7, #88	@ 0x58
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000101c 	.word	0x2000101c
 8001740:	40010000 	.word	0x40010000

08001744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001758:	463b      	mov	r3, r7
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001760:	4b1d      	ldr	r3, [pc, #116]	@ (80017d8 <MX_TIM2_Init+0x94>)
 8001762:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001766:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <MX_TIM2_Init+0x94>)
 800176a:	2263      	movs	r2, #99	@ 0x63
 800176c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176e:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <MX_TIM2_Init+0x94>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250-1;
 8001774:	4b18      	ldr	r3, [pc, #96]	@ (80017d8 <MX_TIM2_Init+0x94>)
 8001776:	22f9      	movs	r2, #249	@ 0xf9
 8001778:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177a:	4b17      	ldr	r3, [pc, #92]	@ (80017d8 <MX_TIM2_Init+0x94>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001780:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <MX_TIM2_Init+0x94>)
 8001782:	2280      	movs	r2, #128	@ 0x80
 8001784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001786:	4814      	ldr	r0, [pc, #80]	@ (80017d8 <MX_TIM2_Init+0x94>)
 8001788:	f002 fcff 	bl	800418a <HAL_TIM_Base_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001792:	f7ff fe31 	bl	80013f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001796:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800179a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800179c:	f107 0308 	add.w	r3, r7, #8
 80017a0:	4619      	mov	r1, r3
 80017a2:	480d      	ldr	r0, [pc, #52]	@ (80017d8 <MX_TIM2_Init+0x94>)
 80017a4:	f002 ff8c 	bl	80046c0 <HAL_TIM_ConfigClockSource>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80017ae:	f7ff fe23 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017b2:	2320      	movs	r3, #32
 80017b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ba:	463b      	mov	r3, r7
 80017bc:	4619      	mov	r1, r3
 80017be:	4806      	ldr	r0, [pc, #24]	@ (80017d8 <MX_TIM2_Init+0x94>)
 80017c0:	f003 fb62 	bl	8004e88 <HAL_TIMEx_MasterConfigSynchronization>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80017ca:	f7ff fe15 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20001064 	.word	0x20001064

080017dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	4b13      	ldr	r3, [pc, #76]	@ (8001834 <MX_DMA_Init+0x58>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	4a12      	ldr	r2, [pc, #72]	@ (8001834 <MX_DMA_Init+0x58>)
 80017ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f2:	4b10      	ldr	r3, [pc, #64]	@ (8001834 <MX_DMA_Init+0x58>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <MX_DMA_Init+0x58>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	4a0b      	ldr	r2, [pc, #44]	@ (8001834 <MX_DMA_Init+0x58>)
 8001808:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800180c:	6313      	str	r3, [r2, #48]	@ 0x30
 800180e:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <MX_DMA_Init+0x58>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	203a      	movs	r0, #58	@ 0x3a
 8001820:	f001 f89b 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001824:	203a      	movs	r0, #58	@ 0x3a
 8001826:	f001 f8b4 	bl	8002992 <HAL_NVIC_EnableIRQ>

}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800

08001838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08e      	sub	sp, #56	@ 0x38
 800183c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
 8001852:	4b84      	ldr	r3, [pc, #528]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a83      	ldr	r2, [pc, #524]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 8001858:	f043 0310 	orr.w	r3, r3, #16
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b81      	ldr	r3, [pc, #516]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0310 	and.w	r3, r3, #16
 8001866:	623b      	str	r3, [r7, #32]
 8001868:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	4b7d      	ldr	r3, [pc, #500]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a7c      	ldr	r2, [pc, #496]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	4b76      	ldr	r3, [pc, #472]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	4a75      	ldr	r2, [pc, #468]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 8001890:	f043 0320 	orr.w	r3, r3, #32
 8001894:	6313      	str	r3, [r2, #48]	@ 0x30
 8001896:	4b73      	ldr	r3, [pc, #460]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	f003 0320 	and.w	r3, r3, #32
 800189e:	61bb      	str	r3, [r7, #24]
 80018a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	4a6e      	ldr	r2, [pc, #440]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 80018ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	4b68      	ldr	r3, [pc, #416]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	4a67      	ldr	r2, [pc, #412]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ce:	4b65      	ldr	r3, [pc, #404]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b61      	ldr	r3, [pc, #388]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	4a60      	ldr	r2, [pc, #384]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 80018e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ea:	4b5e      	ldr	r3, [pc, #376]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	4b5a      	ldr	r3, [pc, #360]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	4a59      	ldr	r2, [pc, #356]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 8001900:	f043 0308 	orr.w	r3, r3, #8
 8001904:	6313      	str	r3, [r2, #48]	@ 0x30
 8001906:	4b57      	ldr	r3, [pc, #348]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	4b53      	ldr	r3, [pc, #332]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a52      	ldr	r2, [pc, #328]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b50      	ldr	r3, [pc, #320]	@ (8001a64 <MX_GPIO_Init+0x22c>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MOTOR_CARRO_TRANSVERSAL_DIR1_Pin|MOTOR_CARRO_TRANSVERSAL_DIR2_Pin|MOTOR_POLIA_EN_Pin|ENAOUT03_Pin
 800192e:	2200      	movs	r2, #0
 8001930:	f44f 51f3 	mov.w	r1, #7776	@ 0x1e60
 8001934:	484c      	ldr	r0, [pc, #304]	@ (8001a68 <MX_GPIO_Init+0x230>)
 8001936:	f001 ff61 	bl	80037fc <HAL_GPIO_WritePin>
                          |MOTOR_POLIA_DIR_Pin|ENAOUT04_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MOTOR_BOBINA_EN_Pin|MOTOR_BOBINA_DIR_Pin|LED0_Pin|LED1_Pin
 800193a:	2200      	movs	r2, #0
 800193c:	f44f 4163 	mov.w	r1, #58112	@ 0xe300
 8001940:	484a      	ldr	r0, [pc, #296]	@ (8001a6c <MX_GPIO_Init+0x234>)
 8001942:	f001 ff5b 	bl	80037fc <HAL_GPIO_WritePin>
                          |LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_SET);
 8001946:	2201      	movs	r2, #1
 8001948:	2103      	movs	r1, #3
 800194a:	4849      	ldr	r0, [pc, #292]	@ (8001a70 <MX_GPIO_Init+0x238>)
 800194c:	f001 ff56 	bl	80037fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001956:	4845      	ldr	r0, [pc, #276]	@ (8001a6c <MX_GPIO_Init+0x234>)
 8001958:	f001 ff50 	bl	80037fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOTOR_CARRO_TRANSVERSAL_DIR1_Pin MOTOR_CARRO_TRANSVERSAL_DIR2_Pin MOTOR_POLIA_EN_Pin ENAOUT03_Pin
                           MOTOR_POLIA_DIR_Pin ENAOUT04_Pin */
  GPIO_InitStruct.Pin = MOTOR_CARRO_TRANSVERSAL_DIR1_Pin|MOTOR_CARRO_TRANSVERSAL_DIR2_Pin|MOTOR_POLIA_EN_Pin|ENAOUT03_Pin
 800195c:	f44f 53f3 	mov.w	r3, #7776	@ 0x1e60
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
                          |MOTOR_POLIA_DIR_Pin|ENAOUT04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001962:	2301      	movs	r3, #1
 8001964:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800196e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001972:	4619      	mov	r1, r3
 8001974:	483c      	ldr	r0, [pc, #240]	@ (8001a68 <MX_GPIO_Init+0x230>)
 8001976:	f001 fd7d 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_BOBINA_EN_Pin MOTOR_BOBINA_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_BOBINA_EN_Pin|MOTOR_BOBINA_DIR_Pin;
 800197a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001980:	2301      	movs	r3, #1
 8001982:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800198c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001990:	4619      	mov	r1, r3
 8001992:	4836      	ldr	r0, [pc, #216]	@ (8001a6c <MX_GPIO_Init+0x234>)
 8001994:	f001 fd6e 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 8001998:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800199e:	2311      	movs	r3, #17
 80019a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ae:	4619      	mov	r1, r3
 80019b0:	482e      	ldr	r0, [pc, #184]	@ (8001a6c <MX_GPIO_Init+0x234>)
 80019b2:	f001 fd5f 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 80019b6:	2303      	movs	r3, #3
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80019ba:	2311      	movs	r3, #17
 80019bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ca:	4619      	mov	r1, r3
 80019cc:	4828      	ldr	r0, [pc, #160]	@ (8001a70 <MX_GPIO_Init+0x238>)
 80019ce:	f001 fd51 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW0_Pin SW1_Pin SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW0_Pin|SW1_Pin|SW2_Pin|SW3_Pin;
 80019d2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d8:	2300      	movs	r3, #0
 80019da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019e4:	4619      	mov	r1, r3
 80019e6:	4823      	ldr	r0, [pc, #140]	@ (8001a74 <MX_GPIO_Init+0x23c>)
 80019e8:	f001 fd44 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pins : OPTO_1_Pin OPTO_2_Pin OPTO_3_Pin */
  GPIO_InitStruct.Pin = OPTO_1_Pin|OPTO_2_Pin|OPTO_3_Pin;
 80019ec:	f24c 0308 	movw	r3, #49160	@ 0xc008
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f8:	2301      	movs	r3, #1
 80019fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a00:	4619      	mov	r1, r3
 8001a02:	481c      	ldr	r0, [pc, #112]	@ (8001a74 <MX_GPIO_Init+0x23c>)
 8001a04:	f001 fd36 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pin : FIM_CURSO_2_Pin */
  GPIO_InitStruct.Pin = FIM_CURSO_2_Pin;
 8001a08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(FIM_CURSO_2_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4816      	ldr	r0, [pc, #88]	@ (8001a78 <MX_GPIO_Init+0x240>)
 8001a1e:	f001 fd29 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pin : FIM_CURSO_1_Pin */
  GPIO_InitStruct.Pin = FIM_CURSO_1_Pin;
 8001a22:	2308      	movs	r3, #8
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(FIM_CURSO_1_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a32:	4619      	mov	r1, r3
 8001a34:	4811      	ldr	r0, [pc, #68]	@ (8001a7c <MX_GPIO_Init+0x244>)
 8001a36:	f001 fd1d 	bl	8003474 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2009      	movs	r0, #9
 8001a40:	f000 ff8b 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001a44:	2009      	movs	r0, #9
 8001a46:	f000 ffa4 	bl	8002992 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2028      	movs	r0, #40	@ 0x28
 8001a50:	f000 ff83 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a54:	2028      	movs	r0, #40	@ 0x28
 8001a56:	f000 ff9c 	bl	8002992 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a5a:	bf00      	nop
 8001a5c:	3738      	adds	r7, #56	@ 0x38
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40021400 	.word	0x40021400
 8001a70:	40021800 	.word	0x40021800
 8001a74:	40020c00 	.word	0x40020c00
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40020400 	.word	0x40020400

08001a80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <HAL_MspInit+0x4c>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	4a0f      	ldr	r2, [pc, #60]	@ (8001acc <HAL_MspInit+0x4c>)
 8001a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a96:	4b0d      	ldr	r3, [pc, #52]	@ (8001acc <HAL_MspInit+0x4c>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <HAL_MspInit+0x4c>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	4a08      	ldr	r2, [pc, #32]	@ (8001acc <HAL_MspInit+0x4c>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <HAL_MspInit+0x4c>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800

08001ad0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	@ 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a3c      	ldr	r2, [pc, #240]	@ (8001be0 <HAL_ADC_MspInit+0x110>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d172      	bne.n	8001bd8 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	4b3b      	ldr	r3, [pc, #236]	@ (8001be4 <HAL_ADC_MspInit+0x114>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	4a3a      	ldr	r2, [pc, #232]	@ (8001be4 <HAL_ADC_MspInit+0x114>)
 8001afc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b02:	4b38      	ldr	r3, [pc, #224]	@ (8001be4 <HAL_ADC_MspInit+0x114>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b34      	ldr	r3, [pc, #208]	@ (8001be4 <HAL_ADC_MspInit+0x114>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	4a33      	ldr	r2, [pc, #204]	@ (8001be4 <HAL_ADC_MspInit+0x114>)
 8001b18:	f043 0304 	orr.w	r3, r3, #4
 8001b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1e:	4b31      	ldr	r3, [pc, #196]	@ (8001be4 <HAL_ADC_MspInit+0x114>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001be4 <HAL_ADC_MspInit+0x114>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	4a2c      	ldr	r2, [pc, #176]	@ (8001be4 <HAL_ADC_MspInit+0x114>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001be4 <HAL_ADC_MspInit+0x114>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_IN10
    PA6     ------> ADC2_IN6
    */
    GPIO_InitStruct.Pin = MOTOR_BOBINA_TENSAO_Pin;
 8001b46:	2340      	movs	r3, #64	@ 0x40
 8001b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_BOBINA_TENSAO_GPIO_Port, &GPIO_InitStruct);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	4823      	ldr	r0, [pc, #140]	@ (8001be8 <HAL_ADC_MspInit+0x118>)
 8001b5a:	f001 fc8b 	bl	8003474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_POLIA_TENSAO_Pin;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b62:	2303      	movs	r3, #3
 8001b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_POLIA_TENSAO_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	4619      	mov	r1, r3
 8001b70:	481e      	ldr	r0, [pc, #120]	@ (8001bec <HAL_ADC_MspInit+0x11c>)
 8001b72:	f001 fc7f 	bl	8003474 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8001b76:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf0 <HAL_ADC_MspInit+0x120>)
 8001b78:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf4 <HAL_ADC_MspInit+0x124>)
 8001b7a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf0 <HAL_ADC_MspInit+0x120>)
 8001b7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b82:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b84:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf0 <HAL_ADC_MspInit+0x120>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b8a:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <HAL_ADC_MspInit+0x120>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001b90:	4b17      	ldr	r3, [pc, #92]	@ (8001bf0 <HAL_ADC_MspInit+0x120>)
 8001b92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b96:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b98:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <HAL_ADC_MspInit+0x120>)
 8001b9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b9e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ba0:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <HAL_ADC_MspInit+0x120>)
 8001ba2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ba6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <HAL_ADC_MspInit+0x120>)
 8001baa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bae:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <HAL_ADC_MspInit+0x120>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <HAL_ADC_MspInit+0x120>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001bbc:	480c      	ldr	r0, [pc, #48]	@ (8001bf0 <HAL_ADC_MspInit+0x120>)
 8001bbe:	f001 f8e9 	bl	8002d94 <HAL_DMA_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8001bc8:	f7ff fc16 	bl	80013f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a08      	ldr	r2, [pc, #32]	@ (8001bf0 <HAL_ADC_MspInit+0x120>)
 8001bd0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bd2:	4a07      	ldr	r2, [pc, #28]	@ (8001bf0 <HAL_ADC_MspInit+0x120>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC2_MspInit 1 */

  }

}
 8001bd8:	bf00      	nop
 8001bda:	3728      	adds	r7, #40	@ 0x28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40012100 	.word	0x40012100
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020000 	.word	0x40020000
 8001bec:	40020800 	.word	0x40020800
 8001bf0:	20000ee8 	.word	0x20000ee8
 8001bf4:	40026440 	.word	0x40026440

08001bf8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	@ 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a48      	ldr	r2, [pc, #288]	@ (8001d38 <HAL_DAC_MspInit+0x140>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	f040 808a 	bne.w	8001d30 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	4b46      	ldr	r3, [pc, #280]	@ (8001d3c <HAL_DAC_MspInit+0x144>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	4a45      	ldr	r2, [pc, #276]	@ (8001d3c <HAL_DAC_MspInit+0x144>)
 8001c26:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001c2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c2c:	4b43      	ldr	r3, [pc, #268]	@ (8001d3c <HAL_DAC_MspInit+0x144>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d3c <HAL_DAC_MspInit+0x144>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c40:	4a3e      	ldr	r2, [pc, #248]	@ (8001d3c <HAL_DAC_MspInit+0x144>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c48:	4b3c      	ldr	r3, [pc, #240]	@ (8001d3c <HAL_DAC_MspInit+0x144>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = MOTOR_BOBINA_VEL_Pin|MOTOR_POLIA_VEL_Pin;
 8001c54:	2330      	movs	r3, #48	@ 0x30
 8001c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4619      	mov	r1, r3
 8001c66:	4836      	ldr	r0, [pc, #216]	@ (8001d40 <HAL_DAC_MspInit+0x148>)
 8001c68:	f001 fc04 	bl	8003474 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001c6c:	4b35      	ldr	r3, [pc, #212]	@ (8001d44 <HAL_DAC_MspInit+0x14c>)
 8001c6e:	4a36      	ldr	r2, [pc, #216]	@ (8001d48 <HAL_DAC_MspInit+0x150>)
 8001c70:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001c72:	4b34      	ldr	r3, [pc, #208]	@ (8001d44 <HAL_DAC_MspInit+0x14c>)
 8001c74:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001c78:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c7a:	4b32      	ldr	r3, [pc, #200]	@ (8001d44 <HAL_DAC_MspInit+0x14c>)
 8001c7c:	2240      	movs	r2, #64	@ 0x40
 8001c7e:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c80:	4b30      	ldr	r3, [pc, #192]	@ (8001d44 <HAL_DAC_MspInit+0x14c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001c86:	4b2f      	ldr	r3, [pc, #188]	@ (8001d44 <HAL_DAC_MspInit+0x14c>)
 8001c88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c8c:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d44 <HAL_DAC_MspInit+0x14c>)
 8001c90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c94:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c96:	4b2b      	ldr	r3, [pc, #172]	@ (8001d44 <HAL_DAC_MspInit+0x14c>)
 8001c98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c9c:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001c9e:	4b29      	ldr	r3, [pc, #164]	@ (8001d44 <HAL_DAC_MspInit+0x14c>)
 8001ca0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ca4:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001ca6:	4b27      	ldr	r3, [pc, #156]	@ (8001d44 <HAL_DAC_MspInit+0x14c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cac:	4b25      	ldr	r3, [pc, #148]	@ (8001d44 <HAL_DAC_MspInit+0x14c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001cb2:	4824      	ldr	r0, [pc, #144]	@ (8001d44 <HAL_DAC_MspInit+0x14c>)
 8001cb4:	f001 f86e 	bl	8002d94 <HAL_DMA_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001cbe:	f7ff fb9b 	bl	80013f8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8001d44 <HAL_DAC_MspInit+0x14c>)
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	4a1e      	ldr	r2, [pc, #120]	@ (8001d44 <HAL_DAC_MspInit+0x14c>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8001cce:	4b1f      	ldr	r3, [pc, #124]	@ (8001d4c <HAL_DAC_MspInit+0x154>)
 8001cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d50 <HAL_DAC_MspInit+0x158>)
 8001cd2:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <HAL_DAC_MspInit+0x154>)
 8001cd6:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001cda:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d4c <HAL_DAC_MspInit+0x154>)
 8001cde:	2240      	movs	r2, #64	@ 0x40
 8001ce0:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <HAL_DAC_MspInit+0x154>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <HAL_DAC_MspInit+0x154>)
 8001cea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cee:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cf0:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <HAL_DAC_MspInit+0x154>)
 8001cf2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cf6:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cf8:	4b14      	ldr	r3, [pc, #80]	@ (8001d4c <HAL_DAC_MspInit+0x154>)
 8001cfa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cfe:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8001d00:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <HAL_DAC_MspInit+0x154>)
 8001d02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d06:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 8001d08:	4b10      	ldr	r3, [pc, #64]	@ (8001d4c <HAL_DAC_MspInit+0x154>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d4c <HAL_DAC_MspInit+0x154>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8001d14:	480d      	ldr	r0, [pc, #52]	@ (8001d4c <HAL_DAC_MspInit+0x154>)
 8001d16:	f001 f83d 	bl	8002d94 <HAL_DMA_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8001d20:	f7ff fb6a 	bl	80013f8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a09      	ldr	r2, [pc, #36]	@ (8001d4c <HAL_DAC_MspInit+0x154>)
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	4a08      	ldr	r2, [pc, #32]	@ (8001d4c <HAL_DAC_MspInit+0x154>)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001d30:	bf00      	nop
 8001d32:	3728      	adds	r7, #40	@ 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40007400 	.word	0x40007400
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40020000 	.word	0x40020000
 8001d44:	20000f5c 	.word	0x20000f5c
 8001d48:	40026088 	.word	0x40026088
 8001d4c:	20000fbc 	.word	0x20000fbc
 8001d50:	400260a0 	.word	0x400260a0

08001d54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a15      	ldr	r2, [pc, #84]	@ (8001db8 <HAL_TIM_Base_MspInit+0x64>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d10e      	bne.n	8001d84 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	4b14      	ldr	r3, [pc, #80]	@ (8001dbc <HAL_TIM_Base_MspInit+0x68>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6e:	4a13      	ldr	r2, [pc, #76]	@ (8001dbc <HAL_TIM_Base_MspInit+0x68>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d76:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <HAL_TIM_Base_MspInit+0x68>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d82:	e012      	b.n	8001daa <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d8c:	d10d      	bne.n	8001daa <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	4b0a      	ldr	r3, [pc, #40]	@ (8001dbc <HAL_TIM_Base_MspInit+0x68>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	4a09      	ldr	r2, [pc, #36]	@ (8001dbc <HAL_TIM_Base_MspInit+0x68>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9e:	4b07      	ldr	r3, [pc, #28]	@ (8001dbc <HAL_TIM_Base_MspInit+0x68>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40010000 	.word	0x40010000
 8001dbc:	40023800 	.word	0x40023800

08001dc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 030c 	add.w	r3, r7, #12
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a12      	ldr	r2, [pc, #72]	@ (8001e28 <HAL_TIM_MspPostInit+0x68>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d11e      	bne.n	8001e20 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <HAL_TIM_MspPostInit+0x6c>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	4a10      	ldr	r2, [pc, #64]	@ (8001e2c <HAL_TIM_MspPostInit+0x6c>)
 8001dec:	f043 0310 	orr.w	r3, r3, #16
 8001df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <HAL_TIM_MspPostInit+0x6c>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_CARRO_TRANSVERSAL_PWM_Pin;
 8001dfe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e10:	2301      	movs	r3, #1
 8001e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_CARRO_TRANSVERSAL_PWM_GPIO_Port, &GPIO_InitStruct);
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4805      	ldr	r0, [pc, #20]	@ (8001e30 <HAL_TIM_MspPostInit+0x70>)
 8001e1c:	f001 fb2a 	bl	8003474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e20:	bf00      	nop
 8001e22:	3720      	adds	r7, #32
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40010000 	.word	0x40010000
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40021000 	.word	0x40021000

08001e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001e38:	f002 f98c 	bl	8004154 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <NMI_Handler+0x8>

08001e40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <HardFault_Handler+0x4>

08001e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <MemManage_Handler+0x4>

08001e50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <BusFault_Handler+0x4>

08001e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <UsageFault_Handler+0x4>

08001e60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPTO_3_Pin);
 8001e80:	2008      	movs	r0, #8
 8001e82:	f001 fcef 	bl	8003864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPTO_1_Pin);
 8001e8e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001e92:	f001 fce7 	bl	8003864 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPTO_2_Pin);
 8001e96:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001e9a:	f001 fce3 	bl	8003864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001ea8:	4802      	ldr	r0, [pc, #8]	@ (8001eb4 <DMA2_Stream2_IRQHandler+0x10>)
 8001eaa:	f001 f879 	bl	8002fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000ee8 	.word	0x20000ee8

08001eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef8 <HAL_Init+0x40>)
 8001ec2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef8 <HAL_Init+0x40>)
 8001ece:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed4:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <HAL_Init+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a07      	ldr	r2, [pc, #28]	@ (8001ef8 <HAL_Init+0x40>)
 8001eda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f000 fd2f 	bl	8002944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee6:	200f      	movs	r0, #15
 8001ee8:	f000 f808 	bl	8001efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eec:	f7ff fdc8 	bl	8001a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023c00 	.word	0x40023c00

08001efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f04:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <HAL_InitTick+0x54>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <HAL_InitTick+0x58>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 fd47 	bl	80029ae <HAL_SYSTICK_Config>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00e      	b.n	8001f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b0f      	cmp	r3, #15
 8001f2e:	d80a      	bhi.n	8001f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f30:	2200      	movs	r2, #0
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295
 8001f38:	f000 fd0f 	bl	800295a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f3c:	4a06      	ldr	r2, [pc, #24]	@ (8001f58 <HAL_InitTick+0x5c>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e000      	b.n	8001f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000008 	.word	0x20000008
 8001f54:	20000004 	.word	0x20000004
 8001f58:	20000000 	.word	0x20000000

08001f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f60:	4b03      	ldr	r3, [pc, #12]	@ (8001f70 <HAL_GetTick+0x14>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	200010ac 	.word	0x200010ac

08001f74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e033      	b.n	8001ff2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d109      	bne.n	8001fa6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff fd9c 	bl	8001ad0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d118      	bne.n	8001fe4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001fba:	f023 0302 	bic.w	r3, r3, #2
 8001fbe:	f043 0202 	orr.w	r2, r3, #2
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 fa6e 	bl	80024a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	f023 0303 	bic.w	r3, r3, #3
 8001fda:	f043 0201 	orr.w	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fe2:	e001      	b.n	8001fe8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_ADC_Start_DMA+0x1e>
 8002016:	2302      	movs	r3, #2
 8002018:	e0e9      	b.n	80021ee <HAL_ADC_Start_DMA+0x1f2>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	d018      	beq.n	8002062 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002040:	4b6d      	ldr	r3, [pc, #436]	@ (80021f8 <HAL_ADC_Start_DMA+0x1fc>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a6d      	ldr	r2, [pc, #436]	@ (80021fc <HAL_ADC_Start_DMA+0x200>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	0c9a      	lsrs	r2, r3, #18
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002054:	e002      	b.n	800205c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	3b01      	subs	r3, #1
 800205a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f9      	bne.n	8002056 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002070:	d107      	bne.n	8002082 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002080:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b01      	cmp	r3, #1
 800208e:	f040 80a1 	bne.w	80021d4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020bc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020d0:	d106      	bne.n	80020e0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	f023 0206 	bic.w	r2, r3, #6
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	645a      	str	r2, [r3, #68]	@ 0x44
 80020de:	e002      	b.n	80020e6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ee:	4b44      	ldr	r3, [pc, #272]	@ (8002200 <HAL_ADC_Start_DMA+0x204>)
 80020f0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f6:	4a43      	ldr	r2, [pc, #268]	@ (8002204 <HAL_ADC_Start_DMA+0x208>)
 80020f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020fe:	4a42      	ldr	r2, [pc, #264]	@ (8002208 <HAL_ADC_Start_DMA+0x20c>)
 8002100:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002106:	4a41      	ldr	r2, [pc, #260]	@ (800220c <HAL_ADC_Start_DMA+0x210>)
 8002108:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002112:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002122:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002132:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	334c      	adds	r3, #76	@ 0x4c
 800213e:	4619      	mov	r1, r3
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f000 fed4 	bl	8002ef0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	2b00      	cmp	r3, #0
 8002152:	d12a      	bne.n	80021aa <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a2d      	ldr	r2, [pc, #180]	@ (8002210 <HAL_ADC_Start_DMA+0x214>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d015      	beq.n	800218a <HAL_ADC_Start_DMA+0x18e>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a2c      	ldr	r2, [pc, #176]	@ (8002214 <HAL_ADC_Start_DMA+0x218>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d105      	bne.n	8002174 <HAL_ADC_Start_DMA+0x178>
 8002168:	4b25      	ldr	r3, [pc, #148]	@ (8002200 <HAL_ADC_Start_DMA+0x204>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00a      	beq.n	800218a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a27      	ldr	r2, [pc, #156]	@ (8002218 <HAL_ADC_Start_DMA+0x21c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d136      	bne.n	80021ec <HAL_ADC_Start_DMA+0x1f0>
 800217e:	4b20      	ldr	r3, [pc, #128]	@ (8002200 <HAL_ADC_Start_DMA+0x204>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	2b00      	cmp	r3, #0
 8002188:	d130      	bne.n	80021ec <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d129      	bne.n	80021ec <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	e020      	b.n	80021ec <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a18      	ldr	r2, [pc, #96]	@ (8002210 <HAL_ADC_Start_DMA+0x214>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d11b      	bne.n	80021ec <HAL_ADC_Start_DMA+0x1f0>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d114      	bne.n	80021ec <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	e00b      	b.n	80021ec <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d8:	f043 0210 	orr.w	r2, r3, #16
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e4:	f043 0201 	orr.w	r2, r3, #1
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000008 	.word	0x20000008
 80021fc:	431bde83 	.word	0x431bde83
 8002200:	40012300 	.word	0x40012300
 8002204:	080026a1 	.word	0x080026a1
 8002208:	0800275b 	.word	0x0800275b
 800220c:	08002777 	.word	0x08002777
 8002210:	40012000 	.word	0x40012000
 8002214:	40012100 	.word	0x40012100
 8002218:	40012200 	.word	0x40012200

0800221c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x1c>
 800225c:	2302      	movs	r3, #2
 800225e:	e113      	b.n	8002488 <HAL_ADC_ConfigChannel+0x244>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b09      	cmp	r3, #9
 800226e:	d925      	bls.n	80022bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68d9      	ldr	r1, [r3, #12]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	3b1e      	subs	r3, #30
 8002286:	2207      	movs	r2, #7
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43da      	mvns	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	400a      	ands	r2, r1
 8002294:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68d9      	ldr	r1, [r3, #12]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	4603      	mov	r3, r0
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4403      	add	r3, r0
 80022ae:	3b1e      	subs	r3, #30
 80022b0:	409a      	lsls	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	e022      	b.n	8002302 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6919      	ldr	r1, [r3, #16]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	2207      	movs	r2, #7
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43da      	mvns	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	400a      	ands	r2, r1
 80022de:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6919      	ldr	r1, [r3, #16]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	4618      	mov	r0, r3
 80022f2:	4603      	mov	r3, r0
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4403      	add	r3, r0
 80022f8:	409a      	lsls	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b06      	cmp	r3, #6
 8002308:	d824      	bhi.n	8002354 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	3b05      	subs	r3, #5
 800231c:	221f      	movs	r2, #31
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	400a      	ands	r2, r1
 800232a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	4618      	mov	r0, r3
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	3b05      	subs	r3, #5
 8002346:	fa00 f203 	lsl.w	r2, r0, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	635a      	str	r2, [r3, #52]	@ 0x34
 8002352:	e04c      	b.n	80023ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b0c      	cmp	r3, #12
 800235a:	d824      	bhi.n	80023a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	3b23      	subs	r3, #35	@ 0x23
 800236e:	221f      	movs	r2, #31
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43da      	mvns	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	400a      	ands	r2, r1
 800237c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	b29b      	uxth	r3, r3
 800238a:	4618      	mov	r0, r3
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	3b23      	subs	r3, #35	@ 0x23
 8002398:	fa00 f203 	lsl.w	r2, r0, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80023a4:	e023      	b.n	80023ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	3b41      	subs	r3, #65	@ 0x41
 80023b8:	221f      	movs	r2, #31
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43da      	mvns	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	400a      	ands	r2, r1
 80023c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	4618      	mov	r0, r3
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	3b41      	subs	r3, #65	@ 0x41
 80023e2:	fa00 f203 	lsl.w	r2, r0, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023ee:	4b29      	ldr	r3, [pc, #164]	@ (8002494 <HAL_ADC_ConfigChannel+0x250>)
 80023f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a28      	ldr	r2, [pc, #160]	@ (8002498 <HAL_ADC_ConfigChannel+0x254>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d10f      	bne.n	800241c <HAL_ADC_ConfigChannel+0x1d8>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b12      	cmp	r3, #18
 8002402:	d10b      	bne.n	800241c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1d      	ldr	r2, [pc, #116]	@ (8002498 <HAL_ADC_ConfigChannel+0x254>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d12b      	bne.n	800247e <HAL_ADC_ConfigChannel+0x23a>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a1c      	ldr	r2, [pc, #112]	@ (800249c <HAL_ADC_ConfigChannel+0x258>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d003      	beq.n	8002438 <HAL_ADC_ConfigChannel+0x1f4>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b11      	cmp	r3, #17
 8002436:	d122      	bne.n	800247e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a11      	ldr	r2, [pc, #68]	@ (800249c <HAL_ADC_ConfigChannel+0x258>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d111      	bne.n	800247e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800245a:	4b11      	ldr	r3, [pc, #68]	@ (80024a0 <HAL_ADC_ConfigChannel+0x25c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a11      	ldr	r2, [pc, #68]	@ (80024a4 <HAL_ADC_ConfigChannel+0x260>)
 8002460:	fba2 2303 	umull	r2, r3, r2, r3
 8002464:	0c9a      	lsrs	r2, r3, #18
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002470:	e002      	b.n	8002478 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	3b01      	subs	r3, #1
 8002476:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f9      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	40012300 	.word	0x40012300
 8002498:	40012000 	.word	0x40012000
 800249c:	10000012 	.word	0x10000012
 80024a0:	20000008 	.word	0x20000008
 80024a4:	431bde83 	.word	0x431bde83

080024a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024b0:	4b79      	ldr	r3, [pc, #484]	@ (8002698 <ADC_Init+0x1f0>)
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	431a      	orrs	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	021a      	lsls	r2, r3, #8
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002500:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002522:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6899      	ldr	r1, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253a:	4a58      	ldr	r2, [pc, #352]	@ (800269c <ADC_Init+0x1f4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d022      	beq.n	8002586 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800254e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6899      	ldr	r1, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002570:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6899      	ldr	r1, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	e00f      	b.n	80025a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002594:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0202 	bic.w	r2, r2, #2
 80025b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6899      	ldr	r1, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	7e1b      	ldrb	r3, [r3, #24]
 80025c0:	005a      	lsls	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01b      	beq.n	800260c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025e2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80025f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	3b01      	subs	r3, #1
 8002600:	035a      	lsls	r2, r3, #13
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	e007      	b.n	800261c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800261a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800262a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	3b01      	subs	r3, #1
 8002638:	051a      	lsls	r2, r3, #20
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002650:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6899      	ldr	r1, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800265e:	025a      	lsls	r2, r3, #9
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002676:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6899      	ldr	r1, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	029a      	lsls	r2, r3, #10
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	609a      	str	r2, [r3, #8]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	40012300 	.word	0x40012300
 800269c:	0f000001 	.word	0x0f000001

080026a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d13c      	bne.n	8002734 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d12b      	bne.n	800272c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d127      	bne.n	800272c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d006      	beq.n	80026f8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d119      	bne.n	800272c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0220 	bic.w	r2, r2, #32
 8002706:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002718:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d105      	bne.n	800272c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	f043 0201 	orr.w	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f7fe fac3 	bl	8000cb8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002732:	e00e      	b.n	8002752 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f7ff fd75 	bl	8002230 <HAL_ADC_ErrorCallback>
}
 8002746:	e004      	b.n	8002752 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	4798      	blx	r3
}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002766:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f7ff fd57 	bl	800221c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002782:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2240      	movs	r2, #64	@ 0x40
 8002788:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278e:	f043 0204 	orr.w	r2, r3, #4
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f7ff fd4a 	bl	8002230 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800279c:	bf00      	nop
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b4:	4b0c      	ldr	r3, [pc, #48]	@ (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027c0:	4013      	ands	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d6:	4a04      	ldr	r2, [pc, #16]	@ (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	60d3      	str	r3, [r2, #12]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f0:	4b04      	ldr	r3, [pc, #16]	@ (8002804 <__NVIC_GetPriorityGrouping+0x18>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	f003 0307 	and.w	r3, r3, #7
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	2b00      	cmp	r3, #0
 8002818:	db0b      	blt.n	8002832 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	f003 021f 	and.w	r2, r3, #31
 8002820:	4907      	ldr	r1, [pc, #28]	@ (8002840 <__NVIC_EnableIRQ+0x38>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	2001      	movs	r0, #1
 800282a:	fa00 f202 	lsl.w	r2, r0, r2
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000e100 	.word	0xe000e100

08002844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	2b00      	cmp	r3, #0
 8002856:	db0a      	blt.n	800286e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	490c      	ldr	r1, [pc, #48]	@ (8002890 <__NVIC_SetPriority+0x4c>)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	0112      	lsls	r2, r2, #4
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	440b      	add	r3, r1
 8002868:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800286c:	e00a      	b.n	8002884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4908      	ldr	r1, [pc, #32]	@ (8002894 <__NVIC_SetPriority+0x50>)
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	3b04      	subs	r3, #4
 800287c:	0112      	lsls	r2, r2, #4
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	440b      	add	r3, r1
 8002882:	761a      	strb	r2, [r3, #24]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000e100 	.word	0xe000e100
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	@ 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f1c3 0307 	rsb	r3, r3, #7
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	bf28      	it	cs
 80028b6:	2304      	movcs	r3, #4
 80028b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3304      	adds	r3, #4
 80028be:	2b06      	cmp	r3, #6
 80028c0:	d902      	bls.n	80028c8 <NVIC_EncodePriority+0x30>
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3b03      	subs	r3, #3
 80028c6:	e000      	b.n	80028ca <NVIC_EncodePriority+0x32>
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	f04f 32ff 	mov.w	r2, #4294967295
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	401a      	ands	r2, r3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e0:	f04f 31ff 	mov.w	r1, #4294967295
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	43d9      	mvns	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	4313      	orrs	r3, r2
         );
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3724      	adds	r7, #36	@ 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3b01      	subs	r3, #1
 800290c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002910:	d301      	bcc.n	8002916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002912:	2301      	movs	r3, #1
 8002914:	e00f      	b.n	8002936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002916:	4a0a      	ldr	r2, [pc, #40]	@ (8002940 <SysTick_Config+0x40>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3b01      	subs	r3, #1
 800291c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800291e:	210f      	movs	r1, #15
 8002920:	f04f 30ff 	mov.w	r0, #4294967295
 8002924:	f7ff ff8e 	bl	8002844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002928:	4b05      	ldr	r3, [pc, #20]	@ (8002940 <SysTick_Config+0x40>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800292e:	4b04      	ldr	r3, [pc, #16]	@ (8002940 <SysTick_Config+0x40>)
 8002930:	2207      	movs	r2, #7
 8002932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	e000e010 	.word	0xe000e010

08002944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff ff29 	bl	80027a4 <__NVIC_SetPriorityGrouping>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af00      	add	r7, sp, #0
 8002960:	4603      	mov	r3, r0
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800296c:	f7ff ff3e 	bl	80027ec <__NVIC_GetPriorityGrouping>
 8002970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	6978      	ldr	r0, [r7, #20]
 8002978:	f7ff ff8e 	bl	8002898 <NVIC_EncodePriority>
 800297c:	4602      	mov	r2, r0
 800297e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff5d 	bl	8002844 <__NVIC_SetPriority>
}
 800298a:	bf00      	nop
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800299c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff31 	bl	8002808 <__NVIC_EnableIRQ>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ffa2 	bl	8002900 <SysTick_Config>
 80029bc:	4603      	mov	r3, r0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e014      	b.n	8002a02 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	791b      	ldrb	r3, [r3, #4]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d105      	bne.n	80029ee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff f905 	bl	8001bf8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2202      	movs	r2, #2
 80029f2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0a2      	b.n	8002b6e <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	795b      	ldrb	r3, [r3, #5]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_DAC_Start_DMA+0x28>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e09c      	b.n	8002b6e <HAL_DAC_Start_DMA+0x162>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d129      	bne.n	8002a9a <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	4a4b      	ldr	r2, [pc, #300]	@ (8002b78 <HAL_DAC_Start_DMA+0x16c>)
 8002a4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	4a4a      	ldr	r2, [pc, #296]	@ (8002b7c <HAL_DAC_Start_DMA+0x170>)
 8002a54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	4a49      	ldr	r2, [pc, #292]	@ (8002b80 <HAL_DAC_Start_DMA+0x174>)
 8002a5c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a6c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_DAC_Start_DMA+0x70>
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d005      	beq.n	8002a86 <HAL_DAC_Start_DMA+0x7a>
 8002a7a:	e009      	b.n	8002a90 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3308      	adds	r3, #8
 8002a82:	613b      	str	r3, [r7, #16]
        break;
 8002a84:	e033      	b.n	8002aee <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	330c      	adds	r3, #12
 8002a8c:	613b      	str	r3, [r7, #16]
        break;
 8002a8e:	e02e      	b.n	8002aee <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	3310      	adds	r3, #16
 8002a96:	613b      	str	r3, [r7, #16]
        break;
 8002a98:	e029      	b.n	8002aee <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	4a39      	ldr	r2, [pc, #228]	@ (8002b84 <HAL_DAC_Start_DMA+0x178>)
 8002aa0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	4a38      	ldr	r2, [pc, #224]	@ (8002b88 <HAL_DAC_Start_DMA+0x17c>)
 8002aa8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	4a37      	ldr	r2, [pc, #220]	@ (8002b8c <HAL_DAC_Start_DMA+0x180>)
 8002ab0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002ac0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_DAC_Start_DMA+0xc4>
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d005      	beq.n	8002ada <HAL_DAC_Start_DMA+0xce>
 8002ace:	e009      	b.n	8002ae4 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3314      	adds	r3, #20
 8002ad6:	613b      	str	r3, [r7, #16]
        break;
 8002ad8:	e009      	b.n	8002aee <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	3318      	adds	r3, #24
 8002ae0:	613b      	str	r3, [r7, #16]
        break;
 8002ae2:	e004      	b.n	8002aee <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	331c      	adds	r3, #28
 8002aea:	613b      	str	r3, [r7, #16]
        break;
 8002aec:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d111      	bne.n	8002b18 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b02:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6898      	ldr	r0, [r3, #8]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	f000 f9ef 	bl	8002ef0 <HAL_DMA_Start_IT>
 8002b12:	4603      	mov	r3, r0
 8002b14:	75fb      	strb	r3, [r7, #23]
 8002b16:	e010      	b.n	8002b3a <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002b26:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	68d8      	ldr	r0, [r3, #12]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	f000 f9dd 	bl	8002ef0 <HAL_DMA_Start_IT>
 8002b36:	4603      	mov	r3, r0
 8002b38:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10c      	bne.n	8002b60 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6819      	ldr	r1, [r3, #0]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2201      	movs	r2, #1
 8002b54:	409a      	lsls	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e005      	b.n	8002b6c <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	f043 0204 	orr.w	r2, r3, #4
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	08002c7f 	.word	0x08002c7f
 8002b7c:	08002ca1 	.word	0x08002ca1
 8002b80:	08002cbd 	.word	0x08002cbd
 8002b84:	08002d27 	.word	0x08002d27
 8002b88:	08002d49 	.word	0x08002d49
 8002b8c:	08002d65 	.word	0x08002d65

08002b90 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	@ 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <HAL_DAC_ConfigChannel+0x1c>
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e042      	b.n	8002c72 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	795b      	ldrb	r3, [r3, #5]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_DAC_ConfigChannel+0x2c>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e03c      	b.n	8002c72 <HAL_DAC_ConfigChannel+0xa6>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2202      	movs	r2, #2
 8002c02:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6819      	ldr	r1, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	22c0      	movs	r2, #192	@ 0xc0
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	400a      	ands	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002c70:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3724      	adds	r7, #36	@ 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f7ff ff7f 	bl	8002b90 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	711a      	strb	r2, [r3, #4]
}
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cac:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7ff ff78 	bl	8002ba4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f043 0204 	orr.w	r2, r3, #4
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f7ff ff6e 	bl	8002bb8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	711a      	strb	r2, [r3, #4]
}
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d32:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f7ff ffd8 	bl	8002cea <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	711a      	strb	r2, [r3, #4]
}
 8002d40:	bf00      	nop
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d54:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f7ff ffd1 	bl	8002cfe <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002d5c:	bf00      	nop
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f043 0204 	orr.w	r2, r3, #4
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f7ff ffc7 	bl	8002d12 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	711a      	strb	r2, [r3, #4]
}
 8002d8a:	bf00      	nop
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002da0:	f7ff f8dc 	bl	8001f5c <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e099      	b.n	8002ee4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0201 	bic.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dd0:	e00f      	b.n	8002df2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dd2:	f7ff f8c3 	bl	8001f5c <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	d908      	bls.n	8002df2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2203      	movs	r2, #3
 8002dea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e078      	b.n	8002ee4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1e8      	bne.n	8002dd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4b38      	ldr	r3, [pc, #224]	@ (8002eec <HAL_DMA_Init+0x158>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d107      	bne.n	8002e5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e54:	4313      	orrs	r3, r2
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f023 0307 	bic.w	r3, r3, #7
 8002e72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d117      	bne.n	8002eb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00e      	beq.n	8002eb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 fa6f 	bl	800337c <DMA_CheckFifoParam>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2240      	movs	r2, #64	@ 0x40
 8002ea8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e016      	b.n	8002ee4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fa26 	bl	8003310 <DMA_CalcBaseAndBitshift>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ecc:	223f      	movs	r2, #63	@ 0x3f
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	f010803f 	.word	0xf010803f

08002ef0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_DMA_Start_IT+0x26>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e040      	b.n	8002f98 <HAL_DMA_Start_IT+0xa8>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d12f      	bne.n	8002f8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f9b8 	bl	80032b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f48:	223f      	movs	r2, #63	@ 0x3f
 8002f4a:	409a      	lsls	r2, r3
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0216 	orr.w	r2, r2, #22
 8002f5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d007      	beq.n	8002f78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0208 	orr.w	r2, r2, #8
 8002f76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	e005      	b.n	8002f96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f92:	2302      	movs	r3, #2
 8002f94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fac:	4b8e      	ldr	r3, [pc, #568]	@ (80031e8 <HAL_DMA_IRQHandler+0x248>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a8e      	ldr	r2, [pc, #568]	@ (80031ec <HAL_DMA_IRQHandler+0x24c>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	0a9b      	lsrs	r3, r3, #10
 8002fb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fca:	2208      	movs	r2, #8
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d01a      	beq.n	800300c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d013      	beq.n	800300c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0204 	bic.w	r2, r2, #4
 8002ff2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff8:	2208      	movs	r2, #8
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003004:	f043 0201 	orr.w	r2, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003010:	2201      	movs	r2, #1
 8003012:	409a      	lsls	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4013      	ands	r3, r2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d012      	beq.n	8003042 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00b      	beq.n	8003042 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302e:	2201      	movs	r2, #1
 8003030:	409a      	lsls	r2, r3
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800303a:	f043 0202 	orr.w	r2, r3, #2
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003046:	2204      	movs	r2, #4
 8003048:	409a      	lsls	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d012      	beq.n	8003078 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00b      	beq.n	8003078 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003064:	2204      	movs	r2, #4
 8003066:	409a      	lsls	r2, r3
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003070:	f043 0204 	orr.w	r2, r3, #4
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307c:	2210      	movs	r2, #16
 800307e:	409a      	lsls	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d043      	beq.n	8003110 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d03c      	beq.n	8003110 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309a:	2210      	movs	r2, #16
 800309c:	409a      	lsls	r2, r3
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d018      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d108      	bne.n	80030d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d024      	beq.n	8003110 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	4798      	blx	r3
 80030ce:	e01f      	b.n	8003110 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d01b      	beq.n	8003110 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	4798      	blx	r3
 80030e0:	e016      	b.n	8003110 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d107      	bne.n	8003100 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0208 	bic.w	r2, r2, #8
 80030fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003114:	2220      	movs	r2, #32
 8003116:	409a      	lsls	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4013      	ands	r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 808f 	beq.w	8003240 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 8087 	beq.w	8003240 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003136:	2220      	movs	r2, #32
 8003138:	409a      	lsls	r2, r3
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b05      	cmp	r3, #5
 8003148:	d136      	bne.n	80031b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0216 	bic.w	r2, r2, #22
 8003158:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003168:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d103      	bne.n	800317a <HAL_DMA_IRQHandler+0x1da>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0208 	bic.w	r2, r2, #8
 8003188:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318e:	223f      	movs	r2, #63	@ 0x3f
 8003190:	409a      	lsls	r2, r3
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d07e      	beq.n	80032ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	4798      	blx	r3
        }
        return;
 80031b6:	e079      	b.n	80032ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d01d      	beq.n	8003202 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10d      	bne.n	80031f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d031      	beq.n	8003240 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	4798      	blx	r3
 80031e4:	e02c      	b.n	8003240 <HAL_DMA_IRQHandler+0x2a0>
 80031e6:	bf00      	nop
 80031e8:	20000008 	.word	0x20000008
 80031ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d023      	beq.n	8003240 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	4798      	blx	r3
 8003200:	e01e      	b.n	8003240 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10f      	bne.n	8003230 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0210 	bic.w	r2, r2, #16
 800321e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003244:	2b00      	cmp	r3, #0
 8003246:	d032      	beq.n	80032ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d022      	beq.n	800329a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2205      	movs	r2, #5
 8003258:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	3301      	adds	r3, #1
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	429a      	cmp	r2, r3
 8003276:	d307      	bcc.n	8003288 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f2      	bne.n	800326c <HAL_DMA_IRQHandler+0x2cc>
 8003286:	e000      	b.n	800328a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003288:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d005      	beq.n	80032ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4798      	blx	r3
 80032aa:	e000      	b.n	80032ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80032ac:	bf00      	nop
    }
  }
}
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80032d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b40      	cmp	r3, #64	@ 0x40
 80032e0:	d108      	bne.n	80032f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032f2:	e007      	b.n	8003304 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	60da      	str	r2, [r3, #12]
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	3b10      	subs	r3, #16
 8003320:	4a14      	ldr	r2, [pc, #80]	@ (8003374 <DMA_CalcBaseAndBitshift+0x64>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800332a:	4a13      	ldr	r2, [pc, #76]	@ (8003378 <DMA_CalcBaseAndBitshift+0x68>)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4413      	add	r3, r2
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b03      	cmp	r3, #3
 800333c:	d909      	bls.n	8003352 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003346:	f023 0303 	bic.w	r3, r3, #3
 800334a:	1d1a      	adds	r2, r3, #4
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003350:	e007      	b.n	8003362 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800335a:	f023 0303 	bic.w	r3, r3, #3
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	aaaaaaab 	.word	0xaaaaaaab
 8003378:	08008f00 	.word	0x08008f00

0800337c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d11f      	bne.n	80033d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b03      	cmp	r3, #3
 800339a:	d856      	bhi.n	800344a <DMA_CheckFifoParam+0xce>
 800339c:	a201      	add	r2, pc, #4	@ (adr r2, 80033a4 <DMA_CheckFifoParam+0x28>)
 800339e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a2:	bf00      	nop
 80033a4:	080033b5 	.word	0x080033b5
 80033a8:	080033c7 	.word	0x080033c7
 80033ac:	080033b5 	.word	0x080033b5
 80033b0:	0800344b 	.word	0x0800344b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d046      	beq.n	800344e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c4:	e043      	b.n	800344e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033ce:	d140      	bne.n	8003452 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033d4:	e03d      	b.n	8003452 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033de:	d121      	bne.n	8003424 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d837      	bhi.n	8003456 <DMA_CheckFifoParam+0xda>
 80033e6:	a201      	add	r2, pc, #4	@ (adr r2, 80033ec <DMA_CheckFifoParam+0x70>)
 80033e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ec:	080033fd 	.word	0x080033fd
 80033f0:	08003403 	.word	0x08003403
 80033f4:	080033fd 	.word	0x080033fd
 80033f8:	08003415 	.word	0x08003415
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003400:	e030      	b.n	8003464 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003406:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d025      	beq.n	800345a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003412:	e022      	b.n	800345a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003418:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800341c:	d11f      	bne.n	800345e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003422:	e01c      	b.n	800345e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d903      	bls.n	8003432 <DMA_CheckFifoParam+0xb6>
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b03      	cmp	r3, #3
 800342e:	d003      	beq.n	8003438 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003430:	e018      	b.n	8003464 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	73fb      	strb	r3, [r7, #15]
      break;
 8003436:	e015      	b.n	8003464 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00e      	beq.n	8003462 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
      break;
 8003448:	e00b      	b.n	8003462 <DMA_CheckFifoParam+0xe6>
      break;
 800344a:	bf00      	nop
 800344c:	e00a      	b.n	8003464 <DMA_CheckFifoParam+0xe8>
      break;
 800344e:	bf00      	nop
 8003450:	e008      	b.n	8003464 <DMA_CheckFifoParam+0xe8>
      break;
 8003452:	bf00      	nop
 8003454:	e006      	b.n	8003464 <DMA_CheckFifoParam+0xe8>
      break;
 8003456:	bf00      	nop
 8003458:	e004      	b.n	8003464 <DMA_CheckFifoParam+0xe8>
      break;
 800345a:	bf00      	nop
 800345c:	e002      	b.n	8003464 <DMA_CheckFifoParam+0xe8>
      break;   
 800345e:	bf00      	nop
 8003460:	e000      	b.n	8003464 <DMA_CheckFifoParam+0xe8>
      break;
 8003462:	bf00      	nop
    }
  } 
  
  return status; 
 8003464:	7bfb      	ldrb	r3, [r7, #15]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop

08003474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003474:	b480      	push	{r7}
 8003476:	b089      	sub	sp, #36	@ 0x24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003486:	2300      	movs	r3, #0
 8003488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	e177      	b.n	8003780 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003490:	2201      	movs	r2, #1
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4013      	ands	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	f040 8166 	bne.w	800377a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d005      	beq.n	80034c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d130      	bne.n	8003528 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	2203      	movs	r2, #3
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4013      	ands	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034fc:	2201      	movs	r2, #1
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f003 0201 	and.w	r2, r3, #1
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4313      	orrs	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 0303 	and.w	r3, r3, #3
 8003530:	2b03      	cmp	r3, #3
 8003532:	d017      	beq.n	8003564 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	2203      	movs	r2, #3
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d123      	bne.n	80035b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	08da      	lsrs	r2, r3, #3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3208      	adds	r2, #8
 8003578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800357c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	220f      	movs	r2, #15
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	08da      	lsrs	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3208      	adds	r2, #8
 80035b2:	69b9      	ldr	r1, [r7, #24]
 80035b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	2203      	movs	r2, #3
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0203 	and.w	r2, r3, #3
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80c0 	beq.w	800377a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	4b66      	ldr	r3, [pc, #408]	@ (8003798 <HAL_GPIO_Init+0x324>)
 8003600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003602:	4a65      	ldr	r2, [pc, #404]	@ (8003798 <HAL_GPIO_Init+0x324>)
 8003604:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003608:	6453      	str	r3, [r2, #68]	@ 0x44
 800360a:	4b63      	ldr	r3, [pc, #396]	@ (8003798 <HAL_GPIO_Init+0x324>)
 800360c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003616:	4a61      	ldr	r2, [pc, #388]	@ (800379c <HAL_GPIO_Init+0x328>)
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	089b      	lsrs	r3, r3, #2
 800361c:	3302      	adds	r3, #2
 800361e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	220f      	movs	r2, #15
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43db      	mvns	r3, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4013      	ands	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a58      	ldr	r2, [pc, #352]	@ (80037a0 <HAL_GPIO_Init+0x32c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d037      	beq.n	80036b2 <HAL_GPIO_Init+0x23e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a57      	ldr	r2, [pc, #348]	@ (80037a4 <HAL_GPIO_Init+0x330>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d031      	beq.n	80036ae <HAL_GPIO_Init+0x23a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a56      	ldr	r2, [pc, #344]	@ (80037a8 <HAL_GPIO_Init+0x334>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d02b      	beq.n	80036aa <HAL_GPIO_Init+0x236>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a55      	ldr	r2, [pc, #340]	@ (80037ac <HAL_GPIO_Init+0x338>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d025      	beq.n	80036a6 <HAL_GPIO_Init+0x232>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a54      	ldr	r2, [pc, #336]	@ (80037b0 <HAL_GPIO_Init+0x33c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d01f      	beq.n	80036a2 <HAL_GPIO_Init+0x22e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a53      	ldr	r2, [pc, #332]	@ (80037b4 <HAL_GPIO_Init+0x340>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d019      	beq.n	800369e <HAL_GPIO_Init+0x22a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a52      	ldr	r2, [pc, #328]	@ (80037b8 <HAL_GPIO_Init+0x344>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <HAL_GPIO_Init+0x226>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a51      	ldr	r2, [pc, #324]	@ (80037bc <HAL_GPIO_Init+0x348>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00d      	beq.n	8003696 <HAL_GPIO_Init+0x222>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a50      	ldr	r2, [pc, #320]	@ (80037c0 <HAL_GPIO_Init+0x34c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d007      	beq.n	8003692 <HAL_GPIO_Init+0x21e>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a4f      	ldr	r2, [pc, #316]	@ (80037c4 <HAL_GPIO_Init+0x350>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d101      	bne.n	800368e <HAL_GPIO_Init+0x21a>
 800368a:	2309      	movs	r3, #9
 800368c:	e012      	b.n	80036b4 <HAL_GPIO_Init+0x240>
 800368e:	230a      	movs	r3, #10
 8003690:	e010      	b.n	80036b4 <HAL_GPIO_Init+0x240>
 8003692:	2308      	movs	r3, #8
 8003694:	e00e      	b.n	80036b4 <HAL_GPIO_Init+0x240>
 8003696:	2307      	movs	r3, #7
 8003698:	e00c      	b.n	80036b4 <HAL_GPIO_Init+0x240>
 800369a:	2306      	movs	r3, #6
 800369c:	e00a      	b.n	80036b4 <HAL_GPIO_Init+0x240>
 800369e:	2305      	movs	r3, #5
 80036a0:	e008      	b.n	80036b4 <HAL_GPIO_Init+0x240>
 80036a2:	2304      	movs	r3, #4
 80036a4:	e006      	b.n	80036b4 <HAL_GPIO_Init+0x240>
 80036a6:	2303      	movs	r3, #3
 80036a8:	e004      	b.n	80036b4 <HAL_GPIO_Init+0x240>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e002      	b.n	80036b4 <HAL_GPIO_Init+0x240>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <HAL_GPIO_Init+0x240>
 80036b2:	2300      	movs	r3, #0
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	f002 0203 	and.w	r2, r2, #3
 80036ba:	0092      	lsls	r2, r2, #2
 80036bc:	4093      	lsls	r3, r2
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036c4:	4935      	ldr	r1, [pc, #212]	@ (800379c <HAL_GPIO_Init+0x328>)
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	089b      	lsrs	r3, r3, #2
 80036ca:	3302      	adds	r3, #2
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036d2:	4b3d      	ldr	r3, [pc, #244]	@ (80037c8 <HAL_GPIO_Init+0x354>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	43db      	mvns	r3, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4013      	ands	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036f6:	4a34      	ldr	r2, [pc, #208]	@ (80037c8 <HAL_GPIO_Init+0x354>)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036fc:	4b32      	ldr	r3, [pc, #200]	@ (80037c8 <HAL_GPIO_Init+0x354>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003720:	4a29      	ldr	r2, [pc, #164]	@ (80037c8 <HAL_GPIO_Init+0x354>)
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003726:	4b28      	ldr	r3, [pc, #160]	@ (80037c8 <HAL_GPIO_Init+0x354>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	43db      	mvns	r3, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4013      	ands	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800374a:	4a1f      	ldr	r2, [pc, #124]	@ (80037c8 <HAL_GPIO_Init+0x354>)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003750:	4b1d      	ldr	r3, [pc, #116]	@ (80037c8 <HAL_GPIO_Init+0x354>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003774:	4a14      	ldr	r2, [pc, #80]	@ (80037c8 <HAL_GPIO_Init+0x354>)
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3301      	adds	r3, #1
 800377e:	61fb      	str	r3, [r7, #28]
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	2b0f      	cmp	r3, #15
 8003784:	f67f ae84 	bls.w	8003490 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003788:	bf00      	nop
 800378a:	bf00      	nop
 800378c:	3724      	adds	r7, #36	@ 0x24
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800
 800379c:	40013800 	.word	0x40013800
 80037a0:	40020000 	.word	0x40020000
 80037a4:	40020400 	.word	0x40020400
 80037a8:	40020800 	.word	0x40020800
 80037ac:	40020c00 	.word	0x40020c00
 80037b0:	40021000 	.word	0x40021000
 80037b4:	40021400 	.word	0x40021400
 80037b8:	40021800 	.word	0x40021800
 80037bc:	40021c00 	.word	0x40021c00
 80037c0:	40022000 	.word	0x40022000
 80037c4:	40022400 	.word	0x40022400
 80037c8:	40013c00 	.word	0x40013c00

080037cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	887b      	ldrh	r3, [r7, #2]
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
 80037e8:	e001      	b.n	80037ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037ea:	2300      	movs	r3, #0
 80037ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	807b      	strh	r3, [r7, #2]
 8003808:	4613      	mov	r3, r2
 800380a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800380c:	787b      	ldrb	r3, [r7, #1]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003812:	887a      	ldrh	r2, [r7, #2]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003818:	e003      	b.n	8003822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800381a:	887b      	ldrh	r3, [r7, #2]
 800381c:	041a      	lsls	r2, r3, #16
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	619a      	str	r2, [r3, #24]
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800382e:	b480      	push	{r7}
 8003830:	b085      	sub	sp, #20
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	460b      	mov	r3, r1
 8003838:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003840:	887a      	ldrh	r2, [r7, #2]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4013      	ands	r3, r2
 8003846:	041a      	lsls	r2, r3, #16
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	43d9      	mvns	r1, r3
 800384c:	887b      	ldrh	r3, [r7, #2]
 800384e:	400b      	ands	r3, r1
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	619a      	str	r2, [r3, #24]
}
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800386e:	4b08      	ldr	r3, [pc, #32]	@ (8003890 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003870:	695a      	ldr	r2, [r3, #20]
 8003872:	88fb      	ldrh	r3, [r7, #6]
 8003874:	4013      	ands	r3, r2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d006      	beq.n	8003888 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800387a:	4a05      	ldr	r2, [pc, #20]	@ (8003890 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003880:	88fb      	ldrh	r3, [r7, #6]
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd fafa 	bl	8000e7c <HAL_GPIO_EXTI_Callback>
  }
}
 8003888:	bf00      	nop
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40013c00 	.word	0x40013c00

08003894 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP mode with WFE instruction and
  *                                                  no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 80038a0:	4b12      	ldr	r3, [pc, #72]	@ (80038ec <HAL_PWR_EnterSTOPMode+0x58>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f023 0203 	bic.w	r2, r3, #3
 80038a8:	4910      	ldr	r1, [pc, #64]	@ (80038ec <HAL_PWR_EnterSTOPMode+0x58>)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80038b0:	4b0f      	ldr	r3, [pc, #60]	@ (80038f0 <HAL_PWR_EnterSTOPMode+0x5c>)
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	4a0e      	ldr	r2, [pc, #56]	@ (80038f0 <HAL_PWR_EnterSTOPMode+0x5c>)
 80038b6:	f043 0304 	orr.w	r3, r3, #4
 80038ba:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80038c2:	bf30      	wfi
 80038c4:	e005      	b.n	80038d2 <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 80038c6:	78fb      	ldrb	r3, [r7, #3]
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d001      	beq.n	80038d0 <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
 80038cc:	bf40      	sev
      __WFE();
 80038ce:	bf20      	wfe
    }
    /* Request Wait For Event */
    __WFE();
 80038d0:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 80038d2:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <HAL_PWR_EnterSTOPMode+0x5c>)
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	4a06      	ldr	r2, [pc, #24]	@ (80038f0 <HAL_PWR_EnterSTOPMode+0x5c>)
 80038d8:	f023 0304 	bic.w	r3, r3, #4
 80038dc:	6113      	str	r3, [r2, #16]
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40007000 	.word	0x40007000
 80038f0:	e000ed00 	.word	0xe000ed00

080038f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e267      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d075      	beq.n	80039fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003912:	4b88      	ldr	r3, [pc, #544]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b04      	cmp	r3, #4
 800391c:	d00c      	beq.n	8003938 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800391e:	4b85      	ldr	r3, [pc, #532]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003926:	2b08      	cmp	r3, #8
 8003928:	d112      	bne.n	8003950 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392a:	4b82      	ldr	r3, [pc, #520]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003932:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003936:	d10b      	bne.n	8003950 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003938:	4b7e      	ldr	r3, [pc, #504]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d05b      	beq.n	80039fc <HAL_RCC_OscConfig+0x108>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d157      	bne.n	80039fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e242      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003958:	d106      	bne.n	8003968 <HAL_RCC_OscConfig+0x74>
 800395a:	4b76      	ldr	r3, [pc, #472]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a75      	ldr	r2, [pc, #468]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e01d      	b.n	80039a4 <HAL_RCC_OscConfig+0xb0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003970:	d10c      	bne.n	800398c <HAL_RCC_OscConfig+0x98>
 8003972:	4b70      	ldr	r3, [pc, #448]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a6f      	ldr	r2, [pc, #444]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003978:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	4b6d      	ldr	r3, [pc, #436]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a6c      	ldr	r2, [pc, #432]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	e00b      	b.n	80039a4 <HAL_RCC_OscConfig+0xb0>
 800398c:	4b69      	ldr	r3, [pc, #420]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a68      	ldr	r2, [pc, #416]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4b66      	ldr	r3, [pc, #408]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a65      	ldr	r2, [pc, #404]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 800399e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d013      	beq.n	80039d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fe fad6 	bl	8001f5c <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b4:	f7fe fad2 	bl	8001f5c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	@ 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e207      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0xc0>
 80039d2:	e014      	b.n	80039fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7fe fac2 	bl	8001f5c <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039dc:	f7fe fabe 	bl	8001f5c <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	@ 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e1f3      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ee:	4b51      	ldr	r3, [pc, #324]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0xe8>
 80039fa:	e000      	b.n	80039fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d063      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a0a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a16:	4b47      	ldr	r3, [pc, #284]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d11c      	bne.n	8003a5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a22:	4b44      	ldr	r3, [pc, #272]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d116      	bne.n	8003a5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2e:	4b41      	ldr	r3, [pc, #260]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_RCC_OscConfig+0x152>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d001      	beq.n	8003a46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e1c7      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a46:	4b3b      	ldr	r3, [pc, #236]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4937      	ldr	r1, [pc, #220]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5a:	e03a      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d020      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a64:	4b34      	ldr	r3, [pc, #208]	@ (8003b38 <HAL_RCC_OscConfig+0x244>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fe fa77 	bl	8001f5c <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a72:	f7fe fa73 	bl	8001f5c <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e1a8      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a84:	4b2b      	ldr	r3, [pc, #172]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a90:	4b28      	ldr	r3, [pc, #160]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4925      	ldr	r1, [pc, #148]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	600b      	str	r3, [r1, #0]
 8003aa4:	e015      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa6:	4b24      	ldr	r3, [pc, #144]	@ (8003b38 <HAL_RCC_OscConfig+0x244>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aac:	f7fe fa56 	bl	8001f5c <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab4:	f7fe fa52 	bl	8001f5c <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e187      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d036      	beq.n	8003b4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d016      	beq.n	8003b14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae6:	4b15      	ldr	r3, [pc, #84]	@ (8003b3c <HAL_RCC_OscConfig+0x248>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aec:	f7fe fa36 	bl	8001f5c <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af4:	f7fe fa32 	bl	8001f5c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e167      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b06:	4b0b      	ldr	r3, [pc, #44]	@ (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x200>
 8003b12:	e01b      	b.n	8003b4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b14:	4b09      	ldr	r3, [pc, #36]	@ (8003b3c <HAL_RCC_OscConfig+0x248>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1a:	f7fe fa1f 	bl	8001f5c <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b20:	e00e      	b.n	8003b40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b22:	f7fe fa1b 	bl	8001f5c <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d907      	bls.n	8003b40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e150      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
 8003b34:	40023800 	.word	0x40023800
 8003b38:	42470000 	.word	0x42470000
 8003b3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b40:	4b88      	ldr	r3, [pc, #544]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1ea      	bne.n	8003b22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8097 	beq.w	8003c88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5e:	4b81      	ldr	r3, [pc, #516]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10f      	bne.n	8003b8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	4b7d      	ldr	r3, [pc, #500]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b72:	4a7c      	ldr	r2, [pc, #496]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b7a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b86:	2301      	movs	r3, #1
 8003b88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8a:	4b77      	ldr	r3, [pc, #476]	@ (8003d68 <HAL_RCC_OscConfig+0x474>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d118      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b96:	4b74      	ldr	r3, [pc, #464]	@ (8003d68 <HAL_RCC_OscConfig+0x474>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a73      	ldr	r2, [pc, #460]	@ (8003d68 <HAL_RCC_OscConfig+0x474>)
 8003b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba2:	f7fe f9db 	bl	8001f5c <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003baa:	f7fe f9d7 	bl	8001f5c <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e10c      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbc:	4b6a      	ldr	r3, [pc, #424]	@ (8003d68 <HAL_RCC_OscConfig+0x474>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d106      	bne.n	8003bde <HAL_RCC_OscConfig+0x2ea>
 8003bd0:	4b64      	ldr	r3, [pc, #400]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd4:	4a63      	ldr	r2, [pc, #396]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bdc:	e01c      	b.n	8003c18 <HAL_RCC_OscConfig+0x324>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b05      	cmp	r3, #5
 8003be4:	d10c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x30c>
 8003be6:	4b5f      	ldr	r3, [pc, #380]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bea:	4a5e      	ldr	r2, [pc, #376]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bec:	f043 0304 	orr.w	r3, r3, #4
 8003bf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf2:	4b5c      	ldr	r3, [pc, #368]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf6:	4a5b      	ldr	r2, [pc, #364]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bfe:	e00b      	b.n	8003c18 <HAL_RCC_OscConfig+0x324>
 8003c00:	4b58      	ldr	r3, [pc, #352]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c04:	4a57      	ldr	r2, [pc, #348]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c0c:	4b55      	ldr	r3, [pc, #340]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c10:	4a54      	ldr	r2, [pc, #336]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c12:	f023 0304 	bic.w	r3, r3, #4
 8003c16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d015      	beq.n	8003c4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7fe f99c 	bl	8001f5c <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c28:	f7fe f998 	bl	8001f5c <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e0cb      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3e:	4b49      	ldr	r3, [pc, #292]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0ee      	beq.n	8003c28 <HAL_RCC_OscConfig+0x334>
 8003c4a:	e014      	b.n	8003c76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4c:	f7fe f986 	bl	8001f5c <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c52:	e00a      	b.n	8003c6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c54:	f7fe f982 	bl	8001f5c <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e0b5      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1ee      	bne.n	8003c54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c76:	7dfb      	ldrb	r3, [r7, #23]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d105      	bne.n	8003c88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c7c:	4b39      	ldr	r3, [pc, #228]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c80:	4a38      	ldr	r2, [pc, #224]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80a1 	beq.w	8003dd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c92:	4b34      	ldr	r3, [pc, #208]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d05c      	beq.n	8003d58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d141      	bne.n	8003d2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca6:	4b31      	ldr	r3, [pc, #196]	@ (8003d6c <HAL_RCC_OscConfig+0x478>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fe f956 	bl	8001f5c <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fe f952 	bl	8001f5c <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e087      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	4b27      	ldr	r3, [pc, #156]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69da      	ldr	r2, [r3, #28]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	019b      	lsls	r3, r3, #6
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce8:	085b      	lsrs	r3, r3, #1
 8003cea:	3b01      	subs	r3, #1
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf4:	061b      	lsls	r3, r3, #24
 8003cf6:	491b      	ldr	r1, [pc, #108]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d6c <HAL_RCC_OscConfig+0x478>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d02:	f7fe f92b 	bl	8001f5c <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0a:	f7fe f927 	bl	8001f5c <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e05c      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1c:	4b11      	ldr	r3, [pc, #68]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x416>
 8003d28:	e054      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2a:	4b10      	ldr	r3, [pc, #64]	@ (8003d6c <HAL_RCC_OscConfig+0x478>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d30:	f7fe f914 	bl	8001f5c <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d38:	f7fe f910 	bl	8001f5c <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e045      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4a:	4b06      	ldr	r3, [pc, #24]	@ (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x444>
 8003d56:	e03d      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d107      	bne.n	8003d70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e038      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40007000 	.word	0x40007000
 8003d6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d70:	4b1b      	ldr	r3, [pc, #108]	@ (8003de0 <HAL_RCC_OscConfig+0x4ec>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d028      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d121      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d11a      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003da0:	4013      	ands	r3, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003da6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d111      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db6:	085b      	lsrs	r3, r3, #1
 8003db8:	3b01      	subs	r3, #1
 8003dba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d107      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40023800 	.word	0x40023800

08003de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0cc      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003df8:	4b68      	ldr	r3, [pc, #416]	@ (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d90c      	bls.n	8003e20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e06:	4b65      	ldr	r3, [pc, #404]	@ (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0e:	4b63      	ldr	r3, [pc, #396]	@ (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d001      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0b8      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d020      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e38:	4b59      	ldr	r3, [pc, #356]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	4a58      	ldr	r2, [pc, #352]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e50:	4b53      	ldr	r3, [pc, #332]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4a52      	ldr	r2, [pc, #328]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e5c:	4b50      	ldr	r3, [pc, #320]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	494d      	ldr	r1, [pc, #308]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d044      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d107      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	4b47      	ldr	r3, [pc, #284]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d119      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e07f      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d003      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d107      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d109      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e06f      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e067      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ec2:	4b37      	ldr	r3, [pc, #220]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f023 0203 	bic.w	r2, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	4934      	ldr	r1, [pc, #208]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ed4:	f7fe f842 	bl	8001f5c <HAL_GetTick>
 8003ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003edc:	f7fe f83e 	bl	8001f5c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e04f      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 020c 	and.w	r2, r3, #12
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d1eb      	bne.n	8003edc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f04:	4b25      	ldr	r3, [pc, #148]	@ (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d20c      	bcs.n	8003f2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f12:	4b22      	ldr	r3, [pc, #136]	@ (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1a:	4b20      	ldr	r3, [pc, #128]	@ (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e032      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f38:	4b19      	ldr	r3, [pc, #100]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4916      	ldr	r1, [pc, #88]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f56:	4b12      	ldr	r3, [pc, #72]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	490e      	ldr	r1, [pc, #56]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f6a:	f000 f82d 	bl	8003fc8 <HAL_RCC_GetSysClockFreq>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	091b      	lsrs	r3, r3, #4
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	490a      	ldr	r1, [pc, #40]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f7c:	5ccb      	ldrb	r3, [r1, r3]
 8003f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f82:	4a09      	ldr	r2, [pc, #36]	@ (8003fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f86:	4b09      	ldr	r3, [pc, #36]	@ (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fd ffb6 	bl	8001efc <HAL_InitTick>

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40023c00 	.word	0x40023c00
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	08008f08 	.word	0x08008f08
 8003fa8:	20000008 	.word	0x20000008
 8003fac:	20000000 	.word	0x20000000

08003fb0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003fb4:	4b03      	ldr	r3, [pc, #12]	@ (8003fc4 <HAL_RCC_EnableCSS+0x14>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]
}
 8003fba:	bf00      	nop
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	4247004c 	.word	0x4247004c

08003fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fcc:	b090      	sub	sp, #64	@ 0x40
 8003fce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fd8:	2300      	movs	r3, #0
 8003fda:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fe0:	4b59      	ldr	r3, [pc, #356]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 030c 	and.w	r3, r3, #12
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d00d      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x40>
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	f200 80a1 	bhi.w	8004134 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <HAL_RCC_GetSysClockFreq+0x34>
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d003      	beq.n	8004002 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ffa:	e09b      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ffc:	4b53      	ldr	r3, [pc, #332]	@ (800414c <HAL_RCC_GetSysClockFreq+0x184>)
 8003ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004000:	e09b      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004002:	4b53      	ldr	r3, [pc, #332]	@ (8004150 <HAL_RCC_GetSysClockFreq+0x188>)
 8004004:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004006:	e098      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004008:	4b4f      	ldr	r3, [pc, #316]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x180>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004010:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004012:	4b4d      	ldr	r3, [pc, #308]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x180>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d028      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800401e:	4b4a      	ldr	r3, [pc, #296]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x180>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	099b      	lsrs	r3, r3, #6
 8004024:	2200      	movs	r2, #0
 8004026:	623b      	str	r3, [r7, #32]
 8004028:	627a      	str	r2, [r7, #36]	@ 0x24
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004030:	2100      	movs	r1, #0
 8004032:	4b47      	ldr	r3, [pc, #284]	@ (8004150 <HAL_RCC_GetSysClockFreq+0x188>)
 8004034:	fb03 f201 	mul.w	r2, r3, r1
 8004038:	2300      	movs	r3, #0
 800403a:	fb00 f303 	mul.w	r3, r0, r3
 800403e:	4413      	add	r3, r2
 8004040:	4a43      	ldr	r2, [pc, #268]	@ (8004150 <HAL_RCC_GetSysClockFreq+0x188>)
 8004042:	fba0 1202 	umull	r1, r2, r0, r2
 8004046:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004048:	460a      	mov	r2, r1
 800404a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800404c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800404e:	4413      	add	r3, r2
 8004050:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004054:	2200      	movs	r2, #0
 8004056:	61bb      	str	r3, [r7, #24]
 8004058:	61fa      	str	r2, [r7, #28]
 800405a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800405e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004062:	f7fc fcb1 	bl	80009c8 <__aeabi_uldivmod>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4613      	mov	r3, r2
 800406c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800406e:	e053      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004070:	4b35      	ldr	r3, [pc, #212]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x180>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	099b      	lsrs	r3, r3, #6
 8004076:	2200      	movs	r2, #0
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	617a      	str	r2, [r7, #20]
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004082:	f04f 0b00 	mov.w	fp, #0
 8004086:	4652      	mov	r2, sl
 8004088:	465b      	mov	r3, fp
 800408a:	f04f 0000 	mov.w	r0, #0
 800408e:	f04f 0100 	mov.w	r1, #0
 8004092:	0159      	lsls	r1, r3, #5
 8004094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004098:	0150      	lsls	r0, r2, #5
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	ebb2 080a 	subs.w	r8, r2, sl
 80040a2:	eb63 090b 	sbc.w	r9, r3, fp
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80040b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80040b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80040ba:	ebb2 0408 	subs.w	r4, r2, r8
 80040be:	eb63 0509 	sbc.w	r5, r3, r9
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	00eb      	lsls	r3, r5, #3
 80040cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040d0:	00e2      	lsls	r2, r4, #3
 80040d2:	4614      	mov	r4, r2
 80040d4:	461d      	mov	r5, r3
 80040d6:	eb14 030a 	adds.w	r3, r4, sl
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	eb45 030b 	adc.w	r3, r5, fp
 80040e0:	607b      	str	r3, [r7, #4]
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ee:	4629      	mov	r1, r5
 80040f0:	028b      	lsls	r3, r1, #10
 80040f2:	4621      	mov	r1, r4
 80040f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040f8:	4621      	mov	r1, r4
 80040fa:	028a      	lsls	r2, r1, #10
 80040fc:	4610      	mov	r0, r2
 80040fe:	4619      	mov	r1, r3
 8004100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004102:	2200      	movs	r2, #0
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	60fa      	str	r2, [r7, #12]
 8004108:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800410c:	f7fc fc5c 	bl	80009c8 <__aeabi_uldivmod>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4613      	mov	r3, r2
 8004116:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004118:	4b0b      	ldr	r3, [pc, #44]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x180>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	3301      	adds	r3, #1
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004128:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800412a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004130:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004132:	e002      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004134:	4b05      	ldr	r3, [pc, #20]	@ (800414c <HAL_RCC_GetSysClockFreq+0x184>)
 8004136:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800413a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800413c:	4618      	mov	r0, r3
 800413e:	3740      	adds	r7, #64	@ 0x40
 8004140:	46bd      	mov	sp, r7
 8004142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004146:	bf00      	nop
 8004148:	40023800 	.word	0x40023800
 800414c:	00f42400 	.word	0x00f42400
 8004150:	017d7840 	.word	0x017d7840

08004154 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004158:	4b06      	ldr	r3, [pc, #24]	@ (8004174 <HAL_RCC_NMI_IRQHandler+0x20>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004160:	2b80      	cmp	r3, #128	@ 0x80
 8004162:	d104      	bne.n	800416e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004164:	f000 f80a 	bl	800417c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004168:	4b03      	ldr	r3, [pc, #12]	@ (8004178 <HAL_RCC_NMI_IRQHandler+0x24>)
 800416a:	2280      	movs	r2, #128	@ 0x80
 800416c:	701a      	strb	r2, [r3, #0]
  }
}
 800416e:	bf00      	nop
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40023800 	.word	0x40023800
 8004178:	4002380e 	.word	0x4002380e

0800417c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e041      	b.n	8004220 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d106      	bne.n	80041b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7fd fdcf 	bl	8001d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2202      	movs	r2, #2
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3304      	adds	r3, #4
 80041c6:	4619      	mov	r1, r3
 80041c8:	4610      	mov	r0, r2
 80041ca:	f000 fb41 	bl	8004850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	d001      	beq.n	8004240 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e046      	b.n	80042ce <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a23      	ldr	r2, [pc, #140]	@ (80042dc <HAL_TIM_Base_Start+0xb4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d022      	beq.n	8004298 <HAL_TIM_Base_Start+0x70>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800425a:	d01d      	beq.n	8004298 <HAL_TIM_Base_Start+0x70>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1f      	ldr	r2, [pc, #124]	@ (80042e0 <HAL_TIM_Base_Start+0xb8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d018      	beq.n	8004298 <HAL_TIM_Base_Start+0x70>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1e      	ldr	r2, [pc, #120]	@ (80042e4 <HAL_TIM_Base_Start+0xbc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d013      	beq.n	8004298 <HAL_TIM_Base_Start+0x70>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a1c      	ldr	r2, [pc, #112]	@ (80042e8 <HAL_TIM_Base_Start+0xc0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00e      	beq.n	8004298 <HAL_TIM_Base_Start+0x70>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1b      	ldr	r2, [pc, #108]	@ (80042ec <HAL_TIM_Base_Start+0xc4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d009      	beq.n	8004298 <HAL_TIM_Base_Start+0x70>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a19      	ldr	r2, [pc, #100]	@ (80042f0 <HAL_TIM_Base_Start+0xc8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d004      	beq.n	8004298 <HAL_TIM_Base_Start+0x70>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a18      	ldr	r2, [pc, #96]	@ (80042f4 <HAL_TIM_Base_Start+0xcc>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d111      	bne.n	80042bc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b06      	cmp	r3, #6
 80042a8:	d010      	beq.n	80042cc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ba:	e007      	b.n	80042cc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0201 	orr.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40010000 	.word	0x40010000
 80042e0:	40000400 	.word	0x40000400
 80042e4:	40000800 	.word	0x40000800
 80042e8:	40000c00 	.word	0x40000c00
 80042ec:	40010400 	.word	0x40010400
 80042f0:	40014000 	.word	0x40014000
 80042f4:	40001800 	.word	0x40001800

080042f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e041      	b.n	800438e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d106      	bne.n	8004324 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f839 	bl	8004396 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3304      	adds	r3, #4
 8004334:	4619      	mov	r1, r3
 8004336:	4610      	mov	r0, r2
 8004338:	f000 fa8a 	bl	8004850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d109      	bne.n	80043d0 <HAL_TIM_PWM_Start+0x24>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	bf14      	ite	ne
 80043c8:	2301      	movne	r3, #1
 80043ca:	2300      	moveq	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	e022      	b.n	8004416 <HAL_TIM_PWM_Start+0x6a>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d109      	bne.n	80043ea <HAL_TIM_PWM_Start+0x3e>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b01      	cmp	r3, #1
 80043e0:	bf14      	ite	ne
 80043e2:	2301      	movne	r3, #1
 80043e4:	2300      	moveq	r3, #0
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	e015      	b.n	8004416 <HAL_TIM_PWM_Start+0x6a>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d109      	bne.n	8004404 <HAL_TIM_PWM_Start+0x58>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	bf14      	ite	ne
 80043fc:	2301      	movne	r3, #1
 80043fe:	2300      	moveq	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	e008      	b.n	8004416 <HAL_TIM_PWM_Start+0x6a>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	bf14      	ite	ne
 8004410:	2301      	movne	r3, #1
 8004412:	2300      	moveq	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e07c      	b.n	8004518 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d104      	bne.n	800442e <HAL_TIM_PWM_Start+0x82>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800442c:	e013      	b.n	8004456 <HAL_TIM_PWM_Start+0xaa>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b04      	cmp	r3, #4
 8004432:	d104      	bne.n	800443e <HAL_TIM_PWM_Start+0x92>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800443c:	e00b      	b.n	8004456 <HAL_TIM_PWM_Start+0xaa>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b08      	cmp	r3, #8
 8004442:	d104      	bne.n	800444e <HAL_TIM_PWM_Start+0xa2>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800444c:	e003      	b.n	8004456 <HAL_TIM_PWM_Start+0xaa>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2202      	movs	r2, #2
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2201      	movs	r2, #1
 800445c:	6839      	ldr	r1, [r7, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fcec 	bl	8004e3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a2d      	ldr	r2, [pc, #180]	@ (8004520 <HAL_TIM_PWM_Start+0x174>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d004      	beq.n	8004478 <HAL_TIM_PWM_Start+0xcc>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a2c      	ldr	r2, [pc, #176]	@ (8004524 <HAL_TIM_PWM_Start+0x178>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d101      	bne.n	800447c <HAL_TIM_PWM_Start+0xd0>
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <HAL_TIM_PWM_Start+0xd2>
 800447c:	2300      	movs	r3, #0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d007      	beq.n	8004492 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004490:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a22      	ldr	r2, [pc, #136]	@ (8004520 <HAL_TIM_PWM_Start+0x174>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d022      	beq.n	80044e2 <HAL_TIM_PWM_Start+0x136>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a4:	d01d      	beq.n	80044e2 <HAL_TIM_PWM_Start+0x136>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004528 <HAL_TIM_PWM_Start+0x17c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d018      	beq.n	80044e2 <HAL_TIM_PWM_Start+0x136>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1d      	ldr	r2, [pc, #116]	@ (800452c <HAL_TIM_PWM_Start+0x180>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d013      	beq.n	80044e2 <HAL_TIM_PWM_Start+0x136>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1c      	ldr	r2, [pc, #112]	@ (8004530 <HAL_TIM_PWM_Start+0x184>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00e      	beq.n	80044e2 <HAL_TIM_PWM_Start+0x136>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a16      	ldr	r2, [pc, #88]	@ (8004524 <HAL_TIM_PWM_Start+0x178>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d009      	beq.n	80044e2 <HAL_TIM_PWM_Start+0x136>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a18      	ldr	r2, [pc, #96]	@ (8004534 <HAL_TIM_PWM_Start+0x188>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d004      	beq.n	80044e2 <HAL_TIM_PWM_Start+0x136>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a16      	ldr	r2, [pc, #88]	@ (8004538 <HAL_TIM_PWM_Start+0x18c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d111      	bne.n	8004506 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b06      	cmp	r3, #6
 80044f2:	d010      	beq.n	8004516 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004504:	e007      	b.n	8004516 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0201 	orr.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40010000 	.word	0x40010000
 8004524:	40010400 	.word	0x40010400
 8004528:	40000400 	.word	0x40000400
 800452c:	40000800 	.word	0x40000800
 8004530:	40000c00 	.word	0x40000c00
 8004534:	40014000 	.word	0x40014000
 8004538:	40001800 	.word	0x40001800

0800453c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004548:	2300      	movs	r3, #0
 800454a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004556:	2302      	movs	r3, #2
 8004558:	e0ae      	b.n	80046b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b0c      	cmp	r3, #12
 8004566:	f200 809f 	bhi.w	80046a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800456a:	a201      	add	r2, pc, #4	@ (adr r2, 8004570 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004570:	080045a5 	.word	0x080045a5
 8004574:	080046a9 	.word	0x080046a9
 8004578:	080046a9 	.word	0x080046a9
 800457c:	080046a9 	.word	0x080046a9
 8004580:	080045e5 	.word	0x080045e5
 8004584:	080046a9 	.word	0x080046a9
 8004588:	080046a9 	.word	0x080046a9
 800458c:	080046a9 	.word	0x080046a9
 8004590:	08004627 	.word	0x08004627
 8004594:	080046a9 	.word	0x080046a9
 8004598:	080046a9 	.word	0x080046a9
 800459c:	080046a9 	.word	0x080046a9
 80045a0:	08004667 	.word	0x08004667
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 f9fc 	bl	80049a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699a      	ldr	r2, [r3, #24]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0208 	orr.w	r2, r2, #8
 80045be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0204 	bic.w	r2, r2, #4
 80045ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6999      	ldr	r1, [r3, #24]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	619a      	str	r2, [r3, #24]
      break;
 80045e2:	e064      	b.n	80046ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68b9      	ldr	r1, [r7, #8]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fa4c 	bl	8004a88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699a      	ldr	r2, [r3, #24]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800460e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6999      	ldr	r1, [r3, #24]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	021a      	lsls	r2, r3, #8
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	619a      	str	r2, [r3, #24]
      break;
 8004624:	e043      	b.n	80046ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68b9      	ldr	r1, [r7, #8]
 800462c:	4618      	mov	r0, r3
 800462e:	f000 faa1 	bl	8004b74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69da      	ldr	r2, [r3, #28]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0208 	orr.w	r2, r2, #8
 8004640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0204 	bic.w	r2, r2, #4
 8004650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69d9      	ldr	r1, [r3, #28]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	61da      	str	r2, [r3, #28]
      break;
 8004664:	e023      	b.n	80046ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68b9      	ldr	r1, [r7, #8]
 800466c:	4618      	mov	r0, r3
 800466e:	f000 faf5 	bl	8004c5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69da      	ldr	r2, [r3, #28]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69d9      	ldr	r1, [r3, #28]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	021a      	lsls	r2, r3, #8
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	61da      	str	r2, [r3, #28]
      break;
 80046a6:	e002      	b.n	80046ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	75fb      	strb	r3, [r7, #23]
      break;
 80046ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_TIM_ConfigClockSource+0x1c>
 80046d8:	2302      	movs	r3, #2
 80046da:	e0b4      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x186>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004714:	d03e      	beq.n	8004794 <HAL_TIM_ConfigClockSource+0xd4>
 8004716:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800471a:	f200 8087 	bhi.w	800482c <HAL_TIM_ConfigClockSource+0x16c>
 800471e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004722:	f000 8086 	beq.w	8004832 <HAL_TIM_ConfigClockSource+0x172>
 8004726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800472a:	d87f      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 800472c:	2b70      	cmp	r3, #112	@ 0x70
 800472e:	d01a      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0xa6>
 8004730:	2b70      	cmp	r3, #112	@ 0x70
 8004732:	d87b      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 8004734:	2b60      	cmp	r3, #96	@ 0x60
 8004736:	d050      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x11a>
 8004738:	2b60      	cmp	r3, #96	@ 0x60
 800473a:	d877      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 800473c:	2b50      	cmp	r3, #80	@ 0x50
 800473e:	d03c      	beq.n	80047ba <HAL_TIM_ConfigClockSource+0xfa>
 8004740:	2b50      	cmp	r3, #80	@ 0x50
 8004742:	d873      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 8004744:	2b40      	cmp	r3, #64	@ 0x40
 8004746:	d058      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0x13a>
 8004748:	2b40      	cmp	r3, #64	@ 0x40
 800474a:	d86f      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 800474c:	2b30      	cmp	r3, #48	@ 0x30
 800474e:	d064      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x15a>
 8004750:	2b30      	cmp	r3, #48	@ 0x30
 8004752:	d86b      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 8004754:	2b20      	cmp	r3, #32
 8004756:	d060      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x15a>
 8004758:	2b20      	cmp	r3, #32
 800475a:	d867      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 800475c:	2b00      	cmp	r3, #0
 800475e:	d05c      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x15a>
 8004760:	2b10      	cmp	r3, #16
 8004762:	d05a      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x15a>
 8004764:	e062      	b.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004776:	f000 fb41 	bl	8004dfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004788:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	609a      	str	r2, [r3, #8]
      break;
 8004792:	e04f      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047a4:	f000 fb2a 	bl	8004dfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047b6:	609a      	str	r2, [r3, #8]
      break;
 80047b8:	e03c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c6:	461a      	mov	r2, r3
 80047c8:	f000 fa9e 	bl	8004d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2150      	movs	r1, #80	@ 0x50
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 faf7 	bl	8004dc6 <TIM_ITRx_SetConfig>
      break;
 80047d8:	e02c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047e6:	461a      	mov	r2, r3
 80047e8:	f000 fabd 	bl	8004d66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2160      	movs	r1, #96	@ 0x60
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fae7 	bl	8004dc6 <TIM_ITRx_SetConfig>
      break;
 80047f8:	e01c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004806:	461a      	mov	r2, r3
 8004808:	f000 fa7e 	bl	8004d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2140      	movs	r1, #64	@ 0x40
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fad7 	bl	8004dc6 <TIM_ITRx_SetConfig>
      break;
 8004818:	e00c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4619      	mov	r1, r3
 8004824:	4610      	mov	r0, r2
 8004826:	f000 face 	bl	8004dc6 <TIM_ITRx_SetConfig>
      break;
 800482a:	e003      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
      break;
 8004830:	e000      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004844:	7bfb      	ldrb	r3, [r7, #15]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a46      	ldr	r2, [pc, #280]	@ (800497c <TIM_Base_SetConfig+0x12c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d013      	beq.n	8004890 <TIM_Base_SetConfig+0x40>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800486e:	d00f      	beq.n	8004890 <TIM_Base_SetConfig+0x40>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a43      	ldr	r2, [pc, #268]	@ (8004980 <TIM_Base_SetConfig+0x130>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00b      	beq.n	8004890 <TIM_Base_SetConfig+0x40>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a42      	ldr	r2, [pc, #264]	@ (8004984 <TIM_Base_SetConfig+0x134>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d007      	beq.n	8004890 <TIM_Base_SetConfig+0x40>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a41      	ldr	r2, [pc, #260]	@ (8004988 <TIM_Base_SetConfig+0x138>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d003      	beq.n	8004890 <TIM_Base_SetConfig+0x40>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a40      	ldr	r2, [pc, #256]	@ (800498c <TIM_Base_SetConfig+0x13c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d108      	bne.n	80048a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a35      	ldr	r2, [pc, #212]	@ (800497c <TIM_Base_SetConfig+0x12c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d02b      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b0:	d027      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a32      	ldr	r2, [pc, #200]	@ (8004980 <TIM_Base_SetConfig+0x130>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d023      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a31      	ldr	r2, [pc, #196]	@ (8004984 <TIM_Base_SetConfig+0x134>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d01f      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a30      	ldr	r2, [pc, #192]	@ (8004988 <TIM_Base_SetConfig+0x138>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d01b      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a2f      	ldr	r2, [pc, #188]	@ (800498c <TIM_Base_SetConfig+0x13c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d017      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a2e      	ldr	r2, [pc, #184]	@ (8004990 <TIM_Base_SetConfig+0x140>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d013      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004994 <TIM_Base_SetConfig+0x144>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00f      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004998 <TIM_Base_SetConfig+0x148>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00b      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a2b      	ldr	r2, [pc, #172]	@ (800499c <TIM_Base_SetConfig+0x14c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d007      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a2a      	ldr	r2, [pc, #168]	@ (80049a0 <TIM_Base_SetConfig+0x150>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d003      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a29      	ldr	r2, [pc, #164]	@ (80049a4 <TIM_Base_SetConfig+0x154>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d108      	bne.n	8004914 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4313      	orrs	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a10      	ldr	r2, [pc, #64]	@ (800497c <TIM_Base_SetConfig+0x12c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d003      	beq.n	8004948 <TIM_Base_SetConfig+0xf8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a12      	ldr	r2, [pc, #72]	@ (800498c <TIM_Base_SetConfig+0x13c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d103      	bne.n	8004950 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b01      	cmp	r3, #1
 8004960:	d105      	bne.n	800496e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f023 0201 	bic.w	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	611a      	str	r2, [r3, #16]
  }
}
 800496e:	bf00      	nop
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40010000 	.word	0x40010000
 8004980:	40000400 	.word	0x40000400
 8004984:	40000800 	.word	0x40000800
 8004988:	40000c00 	.word	0x40000c00
 800498c:	40010400 	.word	0x40010400
 8004990:	40014000 	.word	0x40014000
 8004994:	40014400 	.word	0x40014400
 8004998:	40014800 	.word	0x40014800
 800499c:	40001800 	.word	0x40001800
 80049a0:	40001c00 	.word	0x40001c00
 80049a4:	40002000 	.word	0x40002000

080049a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	f023 0201 	bic.w	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0303 	bic.w	r3, r3, #3
 80049de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f023 0302 	bic.w	r3, r3, #2
 80049f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a20      	ldr	r2, [pc, #128]	@ (8004a80 <TIM_OC1_SetConfig+0xd8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d003      	beq.n	8004a0c <TIM_OC1_SetConfig+0x64>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a1f      	ldr	r2, [pc, #124]	@ (8004a84 <TIM_OC1_SetConfig+0xdc>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d10c      	bne.n	8004a26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f023 0308 	bic.w	r3, r3, #8
 8004a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f023 0304 	bic.w	r3, r3, #4
 8004a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a15      	ldr	r2, [pc, #84]	@ (8004a80 <TIM_OC1_SetConfig+0xd8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d003      	beq.n	8004a36 <TIM_OC1_SetConfig+0x8e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a14      	ldr	r2, [pc, #80]	@ (8004a84 <TIM_OC1_SetConfig+0xdc>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d111      	bne.n	8004a5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	621a      	str	r2, [r3, #32]
}
 8004a74:	bf00      	nop
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	40010000 	.word	0x40010000
 8004a84:	40010400 	.word	0x40010400

08004a88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f023 0210 	bic.w	r2, r3, #16
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	021b      	lsls	r3, r3, #8
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f023 0320 	bic.w	r3, r3, #32
 8004ad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	011b      	lsls	r3, r3, #4
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a22      	ldr	r2, [pc, #136]	@ (8004b6c <TIM_OC2_SetConfig+0xe4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <TIM_OC2_SetConfig+0x68>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a21      	ldr	r2, [pc, #132]	@ (8004b70 <TIM_OC2_SetConfig+0xe8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d10d      	bne.n	8004b0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a17      	ldr	r2, [pc, #92]	@ (8004b6c <TIM_OC2_SetConfig+0xe4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d003      	beq.n	8004b1c <TIM_OC2_SetConfig+0x94>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a16      	ldr	r2, [pc, #88]	@ (8004b70 <TIM_OC2_SetConfig+0xe8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d113      	bne.n	8004b44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	621a      	str	r2, [r3, #32]
}
 8004b5e:	bf00      	nop
 8004b60:	371c      	adds	r7, #28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40010000 	.word	0x40010000
 8004b70:	40010400 	.word	0x40010400

08004b74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b087      	sub	sp, #28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 0303 	bic.w	r3, r3, #3
 8004baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	021b      	lsls	r3, r3, #8
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a21      	ldr	r2, [pc, #132]	@ (8004c54 <TIM_OC3_SetConfig+0xe0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d003      	beq.n	8004bda <TIM_OC3_SetConfig+0x66>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a20      	ldr	r2, [pc, #128]	@ (8004c58 <TIM_OC3_SetConfig+0xe4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d10d      	bne.n	8004bf6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004be0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	021b      	lsls	r3, r3, #8
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a16      	ldr	r2, [pc, #88]	@ (8004c54 <TIM_OC3_SetConfig+0xe0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d003      	beq.n	8004c06 <TIM_OC3_SetConfig+0x92>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a15      	ldr	r2, [pc, #84]	@ (8004c58 <TIM_OC3_SetConfig+0xe4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d113      	bne.n	8004c2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	621a      	str	r2, [r3, #32]
}
 8004c48:	bf00      	nop
 8004c4a:	371c      	adds	r7, #28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	40010000 	.word	0x40010000
 8004c58:	40010400 	.word	0x40010400

08004c5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	021b      	lsls	r3, r3, #8
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	031b      	lsls	r3, r3, #12
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a12      	ldr	r2, [pc, #72]	@ (8004d00 <TIM_OC4_SetConfig+0xa4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <TIM_OC4_SetConfig+0x68>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a11      	ldr	r2, [pc, #68]	@ (8004d04 <TIM_OC4_SetConfig+0xa8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d109      	bne.n	8004cd8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	019b      	lsls	r3, r3, #6
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40010000 	.word	0x40010000
 8004d04:	40010400 	.word	0x40010400

08004d08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	f023 0201 	bic.w	r2, r3, #1
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f023 030a 	bic.w	r3, r3, #10
 8004d44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	621a      	str	r2, [r3, #32]
}
 8004d5a:	bf00      	nop
 8004d5c:	371c      	adds	r7, #28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b087      	sub	sp, #28
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	f023 0210 	bic.w	r2, r3, #16
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	031b      	lsls	r3, r3, #12
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004da2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	621a      	str	r2, [r3, #32]
}
 8004dba:	bf00      	nop
 8004dbc:	371c      	adds	r7, #28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b085      	sub	sp, #20
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ddc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f043 0307 	orr.w	r3, r3, #7
 8004de8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	609a      	str	r2, [r3, #8]
}
 8004df0:	bf00      	nop
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	021a      	lsls	r2, r3, #8
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	609a      	str	r2, [r3, #8]
}
 8004e30:	bf00      	nop
 8004e32:	371c      	adds	r7, #28
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f003 031f 	and.w	r3, r3, #31
 8004e4e:	2201      	movs	r2, #1
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a1a      	ldr	r2, [r3, #32]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	401a      	ands	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a1a      	ldr	r2, [r3, #32]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f003 031f 	and.w	r3, r3, #31
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	fa01 f303 	lsl.w	r3, r1, r3
 8004e74:	431a      	orrs	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	621a      	str	r2, [r3, #32]
}
 8004e7a:	bf00      	nop
 8004e7c:	371c      	adds	r7, #28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
	...

08004e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e05a      	b.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a21      	ldr	r2, [pc, #132]	@ (8004f64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d022      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eec:	d01d      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1d      	ldr	r2, [pc, #116]	@ (8004f68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d018      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1b      	ldr	r2, [pc, #108]	@ (8004f6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d013      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1a      	ldr	r2, [pc, #104]	@ (8004f70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00e      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a18      	ldr	r2, [pc, #96]	@ (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d009      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a17      	ldr	r2, [pc, #92]	@ (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d004      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a15      	ldr	r2, [pc, #84]	@ (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d10c      	bne.n	8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40010000 	.word	0x40010000
 8004f68:	40000400 	.word	0x40000400
 8004f6c:	40000800 	.word	0x40000800
 8004f70:	40000c00 	.word	0x40000c00
 8004f74:	40010400 	.word	0x40010400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40001800 	.word	0x40001800

08004f80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e03d      	b.n	8005018 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005024:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800505c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005028:	f000 f826 	bl	8005078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800502c:	480c      	ldr	r0, [pc, #48]	@ (8005060 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800502e:	490d      	ldr	r1, [pc, #52]	@ (8005064 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005030:	4a0d      	ldr	r2, [pc, #52]	@ (8005068 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005034:	e002      	b.n	800503c <LoopCopyDataInit>

08005036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800503a:	3304      	adds	r3, #4

0800503c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800503c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800503e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005040:	d3f9      	bcc.n	8005036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005042:	4a0a      	ldr	r2, [pc, #40]	@ (800506c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005044:	4c0a      	ldr	r4, [pc, #40]	@ (8005070 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005048:	e001      	b.n	800504e <LoopFillZerobss>

0800504a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800504a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800504c:	3204      	adds	r2, #4

0800504e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800504e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005050:	d3fb      	bcc.n	800504a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005052:	f003 fe8f 	bl	8008d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005056:	f7fc f94f 	bl	80012f8 <main>
  bx  lr    
 800505a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800505c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8005060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005064:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8005068:	080090d0 	.word	0x080090d0
  ldr r2, =_sbss
 800506c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8005070:	20001f24 	.word	0x20001f24

08005074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005074:	e7fe      	b.n	8005074 <ADC_IRQHandler>
	...

08005078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800507c:	4b06      	ldr	r3, [pc, #24]	@ (8005098 <SystemInit+0x20>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005082:	4a05      	ldr	r2, [pc, #20]	@ (8005098 <SystemInit+0x20>)
 8005084:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005088:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800508c:	bf00      	nop
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	e000ed00 	.word	0xe000ed00

0800509c <OSIdleTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSIdleTaskHook (void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppIdleTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 80050a0:	4b04      	ldr	r3, [pc, #16]	@ (80050b4 <OSIdleTaskHook+0x18>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <OSIdleTaskHook+0x12>
        (*OS_AppIdleTaskHookPtr)();
 80050a8:	4b02      	ldr	r3, [pc, #8]	@ (80050b4 <OSIdleTaskHook+0x18>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4798      	blx	r3
    }
#endif
}
 80050ae:	bf00      	nop
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	200018d4 	.word	0x200018d4

080050b8 <OSInitHook>:
*                 b) Set bits ASPEN and LSPEN in FPCCR register.
*********************************************************************************************************
*/

void  OSInitHook (void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
#if (OS_CPU_ARM_FP_EN > 0u)
    CPU_INT32U   reg_val;
#endif
                                                                /* 8-byte align the ISR stack.                          */
    OS_CPU_ExceptStkBase = (CPU_STK *)(OSCfg_ISRStkBasePtr + OSCfg_ISRStkSize);
 80050be:	4b11      	ldr	r3, [pc, #68]	@ (8005104 <OSInitHook+0x4c>)
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	4b11      	ldr	r3, [pc, #68]	@ (8005108 <OSInitHook+0x50>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	4a10      	ldr	r2, [pc, #64]	@ (800510c <OSInitHook+0x54>)
 80050cc:	6013      	str	r3, [r2, #0]
    OS_CPU_ExceptStkBase = (CPU_STK *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 80050ce:	4b0f      	ldr	r3, [pc, #60]	@ (800510c <OSInitHook+0x54>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f023 0307 	bic.w	r3, r3, #7
 80050d6:	461a      	mov	r2, r3
 80050d8:	4b0c      	ldr	r3, [pc, #48]	@ (800510c <OSInitHook+0x54>)
 80050da:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    reg_val = CPU_REG_FP_FPCCR;                                 /* Check the floating point mode.                       */
 80050dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005110 <OSInitHook+0x58>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	607b      	str	r3, [r7, #4]
    if ((reg_val & CPU_REG_FPCCR_LAZY_STK) != CPU_REG_FPCCR_LAZY_STK) {
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80050e8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80050ec:	d001      	beq.n	80050f2 <OSInitHook+0x3a>
        while (1u) {                                            /* See Note (1).                                        */
 80050ee:	bf00      	nop
 80050f0:	e7fd      	b.n	80050ee <OSInitHook+0x36>
            ;
        }
    }
#endif
                                                                /* Set BASEPRI boundary from the configuration.         */
    OS_KA_BASEPRI_Boundary = (CPU_INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 80050f2:	4b08      	ldr	r3, [pc, #32]	@ (8005114 <OSInitHook+0x5c>)
 80050f4:	2240      	movs	r2, #64	@ 0x40
 80050f6:	601a      	str	r2, [r3, #0]
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	08008f24 	.word	0x08008f24
 8005108:	08008f28 	.word	0x08008f28
 800510c:	200010b0 	.word	0x200010b0
 8005110:	e000ef34 	.word	0xe000ef34
 8005114:	200010b4 	.word	0x200010b4

08005118 <OSStatTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSStatTaskHook (void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppStatTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 800511c:	4b04      	ldr	r3, [pc, #16]	@ (8005130 <OSStatTaskHook+0x18>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <OSStatTaskHook+0x12>
        (*OS_AppStatTaskHookPtr)();
 8005124:	4b02      	ldr	r3, [pc, #8]	@ (8005130 <OSStatTaskHook+0x18>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4798      	blx	r3
    }
#endif
}
 800512a:	bf00      	nop
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	200018d8 	.word	0x200018d8

08005134 <OSTaskCreateHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskCreateHook (OS_TCB  *p_tcb)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskCreateHookPtr != (OS_APP_HOOK_TCB)0) {
 800513c:	4b05      	ldr	r3, [pc, #20]	@ (8005154 <OSTaskCreateHook+0x20>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <OSTaskCreateHook+0x18>
        (*OS_AppTaskCreateHookPtr)(p_tcb);
 8005144:	4b03      	ldr	r3, [pc, #12]	@ (8005154 <OSTaskCreateHook+0x20>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                                /* Prevent compiler warning                             */
#endif
}
 800514c:	bf00      	nop
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	200018c8 	.word	0x200018c8

08005158 <OSTaskDelHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskDelHook (OS_TCB  *p_tcb)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskDelHookPtr != (OS_APP_HOOK_TCB)0) {
 8005160:	4b05      	ldr	r3, [pc, #20]	@ (8005178 <OSTaskDelHook+0x20>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d003      	beq.n	8005170 <OSTaskDelHook+0x18>
        (*OS_AppTaskDelHookPtr)(p_tcb);
 8005168:	4b03      	ldr	r3, [pc, #12]	@ (8005178 <OSTaskDelHook+0x20>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                                /* Prevent compiler warning                             */
#endif
}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	200018cc 	.word	0x200018cc

0800517c <OSTaskReturnHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskReturnHook (OS_TCB  *p_tcb)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskReturnHookPtr != (OS_APP_HOOK_TCB)0) {
 8005184:	4b05      	ldr	r3, [pc, #20]	@ (800519c <OSTaskReturnHook+0x20>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <OSTaskReturnHook+0x18>
        (*OS_AppTaskReturnHookPtr)(p_tcb);
 800518c:	4b03      	ldr	r3, [pc, #12]	@ (800519c <OSTaskReturnHook+0x20>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                                /* Prevent compiler warning                             */
#endif
}
 8005194:	bf00      	nop
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	200018d0 	.word	0x200018d0

080051a0 <OSTaskStkInit>:
                         void          *p_arg,
                         CPU_STK       *p_stk_base,
                         CPU_STK       *p_stk_limit,
                         CPU_STK_SIZE   stk_size,
                         OS_OPT         opt)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
    CPU_STK    *p_stk;


    (void)opt;                                                  /* 'opt' is not used, prevent warning                   */

    p_stk = &p_stk_base[stk_size];                              /* Load stack pointer                                   */
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	4413      	add	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                          */
    p_stk = (CPU_STK *)((CPU_STK)(p_stk) & 0xFFFFFFF8u);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f023 0307 	bic.w	r3, r3, #7
 80051be:	617b      	str	r3, [r7, #20]
                                                                /* Registers stacked as if auto-saved on exception      */
    *(--p_stk) = (CPU_STK)0x01000000u;                          /* xPSR                                                 */
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	3b04      	subs	r3, #4
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051cc:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)p_task;                               /* Entry Point                                          */
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	3b04      	subs	r3, #4
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)OS_TaskReturn;                        /* R14 (LR)                                             */
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	3b04      	subs	r3, #4
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	4a34      	ldr	r2, [pc, #208]	@ (80052b4 <OSTaskStkInit+0x114>)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x12121212u;                          /* R12                                                  */
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	3b04      	subs	r3, #4
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 80051f2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x03030303u;                          /* R3                                                   */
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	3b04      	subs	r3, #4
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8005200:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x02020202u;                          /* R2                                                   */
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	3b04      	subs	r3, #4
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800520e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)p_stk_limit;                          /* R1                                                   */
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	3b04      	subs	r3, #4
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)p_arg;                                /* R0 : argument                                        */
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	3b04      	subs	r3, #4
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0xFFFFFFFDuL;                         /* R14: EXEC_RETURN; See Note 5                         */
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	3b04      	subs	r3, #4
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f06f 0202 	mvn.w	r2, #2
 8005234:	601a      	str	r2, [r3, #0]
                                                                /* Remaining registers saved on process stack           */
    *(--p_stk) = (CPU_STK)0x11111111uL;                         /* R11                                                  */
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	3b04      	subs	r3, #4
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8005242:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x10101010uL;                         /* R10                                                  */
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	3b04      	subs	r3, #4
 8005248:	617b      	str	r3, [r7, #20]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8005250:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x09090909uL;                         /* R9                                                   */
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	3b04      	subs	r3, #4
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800525e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x08080808uL;                         /* R8                                                   */
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	3b04      	subs	r3, #4
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800526c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x07070707uL;                         /* R7                                                   */
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	3b04      	subs	r3, #4
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800527a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x06060606uL;                         /* R6                                                   */
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	3b04      	subs	r3, #4
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 8005288:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x05050505uL;                         /* R5                                                   */
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	3b04      	subs	r3, #4
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8005296:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x04040404uL;                         /* R4                                                   */
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	3b04      	subs	r3, #4
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 80052a4:	601a      	str	r2, [r3, #0]

    return (p_stk);
 80052a6:	697b      	ldr	r3, [r7, #20]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	371c      	adds	r7, #28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	08007f55 	.word	0x08007f55

080052b8 <OSTaskSwHook>:
*                 to the task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/

void  OSTaskSwHook (void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
    CPU_BOOLEAN  stk_status;
#endif

#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskSwHookPtr != (OS_APP_HOOK_VOID)0) {
 80052be:	4b17      	ldr	r3, [pc, #92]	@ (800531c <OSTaskSwHook+0x64>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <OSTaskSwHook+0x14>
        (*OS_AppTaskSwHookPtr)();
 80052c6:	4b15      	ldr	r3, [pc, #84]	@ (800531c <OSTaskSwHook+0x64>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4798      	blx	r3
#endif

    OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdyPtr);

#if OS_CFG_TASK_PROFILE_EN > 0u
    ts = OS_TS_GET();
 80052cc:	2300      	movs	r3, #0
 80052ce:	607b      	str	r3, [r7, #4]
    if (OSTCBCurPtr != OSTCBHighRdyPtr) {
 80052d0:	4b13      	ldr	r3, [pc, #76]	@ (8005320 <OSTaskSwHook+0x68>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	4b13      	ldr	r3, [pc, #76]	@ (8005324 <OSTaskSwHook+0x6c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d016      	beq.n	800530a <OSTaskSwHook+0x52>
        OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
 80052dc:	4b10      	ldr	r3, [pc, #64]	@ (8005320 <OSTaskSwHook+0x68>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80052e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005320 <OSTaskSwHook+0x68>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	1a8a      	subs	r2, r1, r2
 80052ec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
 80052f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005320 <OSTaskSwHook+0x68>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80052f8:	4b09      	ldr	r3, [pc, #36]	@ (8005320 <OSTaskSwHook+0x68>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8005300:	4b07      	ldr	r3, [pc, #28]	@ (8005320 <OSTaskSwHook+0x68>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	440a      	add	r2, r1
 8005306:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    }

    OSTCBHighRdyPtr->CyclesStart = ts;
 800530a:	4b06      	ldr	r3, [pc, #24]	@ (8005324 <OSTaskSwHook+0x6c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    stk_status = OSTaskStkRedzoneChk((OS_TCB *)0u);
    if (stk_status != OS_TRUE) {
        OSRedzoneHitHook(OSTCBCurPtr);
    }
#endif
}
 8005314:	bf00      	nop
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	200018dc 	.word	0x200018dc
 8005320:	20001f1c 	.word	0x20001f1c
 8005324:	20001f20 	.word	0x20001f20

08005328 <OSTimeTickHook>:
* Note(s)    : 1) This function is assumed to be called from the Tick ISR.
*********************************************************************************************************
*/

void  OSTimeTickHook (void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTimeTickHookPtr != (OS_APP_HOOK_VOID)0) {
 800532c:	4b04      	ldr	r3, [pc, #16]	@ (8005340 <OSTimeTickHook+0x18>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <OSTimeTickHook+0x12>
        (*OS_AppTimeTickHookPtr)();
 8005334:	4b02      	ldr	r3, [pc, #8]	@ (8005340 <OSTimeTickHook+0x18>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4798      	blx	r3
    }
#endif
}
 800533a:	bf00      	nop
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	200018e0 	.word	0x200018e0

08005344 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler  (void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 800534a:	2300      	movs	r3, #0
 800534c:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 800534e:	2040      	movs	r0, #64	@ 0x40
 8005350:	f7fa ff52 	bl	80001f8 <CPU_SR_Save>
 8005354:	6078      	str	r0, [r7, #4]
    OSIntEnter();                                               /* Tell uC/OS-III that we are starting an ISR           */
 8005356:	f000 f909 	bl	800556c <OSIntEnter>
    CPU_CRITICAL_EXIT();
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fa ff5a 	bl	8000214 <CPU_SR_Restore>

    OSTimeTick();                                               /* Call uC/OS-III's OSTimeTick()                        */
 8005360:	f003 f990 	bl	8008684 <OSTimeTick>

    OSIntExit();                                                /* Tell uC/OS-III that we are leaving the ISR           */
 8005364:	f000 f91e 	bl	80055a4 <OSIntExit>
}
 8005368:	bf00      	nop
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <OSCfg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OSCfg_Init (void)
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
    (void)OSCfg_TmrTaskStkBasePtr;
    (void)OSCfg_TmrTaskStkLimit;
    (void)OSCfg_TmrTaskStkSize;
    (void)OSCfg_TmrTaskStkSizeRAM;
#endif
}
 8005374:	bf00      	nop
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <OSInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSInit (OS_ERR  *p_err)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSInitHook();                                               /* Call port specific initialization code               */
 8005388:	f7ff fe96 	bl	80050b8 <OSInitHook>

    OSIntNestingCtr       =           0u;                       /* Clear the interrupt nesting counter                  */
 800538c:	4b59      	ldr	r3, [pc, #356]	@ (80054f4 <OSInit+0x174>)
 800538e:	2200      	movs	r2, #0
 8005390:	701a      	strb	r2, [r3, #0]

    OSRunning             =  OS_STATE_OS_STOPPED;               /* Indicate that multitasking has not started           */
 8005392:	4b59      	ldr	r3, [pc, #356]	@ (80054f8 <OSInit+0x178>)
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]

    OSSchedLockNestingCtr =           0u;                       /* Clear the scheduling lock counter                    */
 8005398:	4b58      	ldr	r3, [pc, #352]	@ (80054fc <OSInit+0x17c>)
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]

    OSTCBCurPtr           = (OS_TCB *)0;                        /* Initialize OS_TCB pointers to a known state          */
 800539e:	4b58      	ldr	r3, [pc, #352]	@ (8005500 <OSInit+0x180>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]
    OSTCBHighRdyPtr       = (OS_TCB *)0;
 80053a4:	4b57      	ldr	r3, [pc, #348]	@ (8005504 <OSInit+0x184>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]

    OSPrioCur             =           0u;                       /* Initialize priority variables to a known state       */
 80053aa:	4b57      	ldr	r3, [pc, #348]	@ (8005508 <OSInit+0x188>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy         =           0u;
 80053b0:	4b56      	ldr	r3, [pc, #344]	@ (800550c <OSInit+0x18c>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	701a      	strb	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;
#endif

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
    OSSchedRoundRobinEn             = OS_FALSE;
 80053b6:	4b56      	ldr	r3, [pc, #344]	@ (8005510 <OSInit+0x190>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	701a      	strb	r2, [r3, #0]
    OSSchedRoundRobinDfltTimeQuanta = OSCfg_TickRate_Hz / 10u;
 80053bc:	4b55      	ldr	r3, [pc, #340]	@ (8005514 <OSInit+0x194>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a55      	ldr	r2, [pc, #340]	@ (8005518 <OSInit+0x198>)
 80053c2:	fba2 2303 	umull	r2, r3, r2, r3
 80053c6:	08db      	lsrs	r3, r3, #3
 80053c8:	4a54      	ldr	r2, [pc, #336]	@ (800551c <OSInit+0x19c>)
 80053ca:	6013      	str	r3, [r2, #0]
#endif

#if (OS_CFG_ISR_STK_SIZE > 0u)
    p_stk = OSCfg_ISRStkBasePtr;                                /* Clear exception stack for stack checking.            */
 80053cc:	4b54      	ldr	r3, [pc, #336]	@ (8005520 <OSInit+0x1a0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	60fb      	str	r3, [r7, #12]
    if (p_stk != (CPU_STK *)0) {
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00f      	beq.n	80053f8 <OSInit+0x78>
        size  = OSCfg_ISRStkSize;
 80053d8:	4b52      	ldr	r3, [pc, #328]	@ (8005524 <OSInit+0x1a4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	60bb      	str	r3, [r7, #8]
        while (size > 0u) {
 80053de:	e008      	b.n	80053f2 <OSInit+0x72>
            size--;
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	60bb      	str	r3, [r7, #8]
           *p_stk = 0u;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
            p_stk++;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3304      	adds	r3, #4
 80053f0:	60fb      	str	r3, [r7, #12]
        while (size > 0u) {
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1f3      	bne.n	80053e0 <OSInit+0x60>

#if (OS_CFG_APP_HOOKS_EN > 0u)                                  /* Clear application hook pointers                      */
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
    OS_AppRedzoneHitHookPtr = (OS_APP_HOOK_TCB )0;
#endif
    OS_AppTaskCreateHookPtr = (OS_APP_HOOK_TCB )0;
 80053f8:	4b4b      	ldr	r3, [pc, #300]	@ (8005528 <OSInit+0x1a8>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]
    OS_AppTaskDelHookPtr    = (OS_APP_HOOK_TCB )0;
 80053fe:	4b4b      	ldr	r3, [pc, #300]	@ (800552c <OSInit+0x1ac>)
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]
    OS_AppTaskReturnHookPtr = (OS_APP_HOOK_TCB )0;
 8005404:	4b4a      	ldr	r3, [pc, #296]	@ (8005530 <OSInit+0x1b0>)
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]

    OS_AppIdleTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 800540a:	4b4a      	ldr	r3, [pc, #296]	@ (8005534 <OSInit+0x1b4>)
 800540c:	2200      	movs	r2, #0
 800540e:	601a      	str	r2, [r3, #0]
    OS_AppStatTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8005410:	4b49      	ldr	r3, [pc, #292]	@ (8005538 <OSInit+0x1b8>)
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
    OS_AppTaskSwHookPtr     = (OS_APP_HOOK_VOID)0;
 8005416:	4b49      	ldr	r3, [pc, #292]	@ (800553c <OSInit+0x1bc>)
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
    OS_AppTimeTickHookPtr   = (OS_APP_HOOK_VOID)0;
 800541c:	4b48      	ldr	r3, [pc, #288]	@ (8005540 <OSInit+0x1c0>)
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]
#endif

#if (OS_CFG_TASK_REG_TBL_SIZE > 0u)
    OSTaskRegNextAvailID = 0u;
 8005422:	4b48      	ldr	r3, [pc, #288]	@ (8005544 <OSInit+0x1c4>)
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]
#endif

    OS_PrioInit();                                              /* Initialize the priority bitmap table                 */
 8005428:	f001 fe7a 	bl	8007120 <OS_PrioInit>

    OS_RdyListInit();                                           /* Initialize the Ready List                            */
 800542c:	f000 fc32 	bl	8005c94 <OS_RdyListInit>


#if (OS_CFG_FLAG_EN > 0u)                                       /* Initialize the Event Flag module                     */
#if (OS_CFG_DBG_EN > 0u)
    OSFlagDbgListPtr = (OS_FLAG_GRP *)0;
 8005430:	4b45      	ldr	r3, [pc, #276]	@ (8005548 <OSInit+0x1c8>)
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
    OSFlagQty        =                0u;
 8005436:	4b45      	ldr	r3, [pc, #276]	@ (800554c <OSInit+0x1cc>)
 8005438:	2200      	movs	r2, #0
 800543a:	801a      	strh	r2, [r3, #0]
#endif
#endif

#if (OS_CFG_MEM_EN > 0u)                                        /* Initialize the Memory Manager module                 */
    OS_MemInit(p_err);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f001 fb93 	bl	8006b68 <OS_MemInit>
    if (*p_err != OS_ERR_NONE) {
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d143      	bne.n	80054d2 <OSInit+0x152>
    }
#endif


#if (OS_MSG_EN > 0u)                                            /* Initialize the free list of OS_MSGs                  */
    OS_MsgPoolInit(p_err);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f001 fba4 	bl	8006b98 <OS_MsgPoolInit>
    if (*p_err != OS_ERR_NONE) {
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d13e      	bne.n	80054d6 <OSInit+0x156>
#endif


#if (OS_CFG_MUTEX_EN > 0u)                                      /* Initialize the Mutex Manager module                  */
#if (OS_CFG_DBG_EN > 0u)
    OSMutexDbgListPtr = (OS_MUTEX *)0;
 8005458:	4b3d      	ldr	r3, [pc, #244]	@ (8005550 <OSInit+0x1d0>)
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]
    OSMutexQty        =             0u;
 800545e:	4b3d      	ldr	r3, [pc, #244]	@ (8005554 <OSInit+0x1d4>)
 8005460:	2200      	movs	r2, #0
 8005462:	801a      	strh	r2, [r3, #0]
#endif


#if (OS_CFG_Q_EN > 0u)                                          /* Initialize the Message Queue Manager module          */
#if (OS_CFG_DBG_EN > 0u)
    OSQDbgListPtr = (OS_Q *)0;
 8005464:	4b3c      	ldr	r3, [pc, #240]	@ (8005558 <OSInit+0x1d8>)
 8005466:	2200      	movs	r2, #0
 8005468:	601a      	str	r2, [r3, #0]
    OSQQty        =         0u;
 800546a:	4b3c      	ldr	r3, [pc, #240]	@ (800555c <OSInit+0x1dc>)
 800546c:	2200      	movs	r2, #0
 800546e:	801a      	strh	r2, [r3, #0]
#endif


#if (OS_CFG_SEM_EN > 0u)                                        /* Initialize the Semaphore Manager module              */
#if (OS_CFG_DBG_EN > 0u)
    OSSemDbgListPtr = (OS_SEM *)0;
 8005470:	4b3b      	ldr	r3, [pc, #236]	@ (8005560 <OSInit+0x1e0>)
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]
    OSSemQty        =           0u;
 8005476:	4b3b      	ldr	r3, [pc, #236]	@ (8005564 <OSInit+0x1e4>)
 8005478:	2200      	movs	r2, #0
 800547a:	801a      	strh	r2, [r3, #0]
        return;
    }
#endif


    OS_TaskInit(p_err);                                         /* Initialize the task manager                          */
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f002 fc83 	bl	8007d88 <OS_TaskInit>
    if (*p_err != OS_ERR_NONE) {
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d127      	bne.n	80054da <OSInit+0x15a>
        return;
    }


#if (OS_CFG_TASK_IDLE_EN > 0u)
    OS_IdleTaskInit(p_err);                                     /* Initialize the Idle Task                             */
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f9d8 	bl	8005840 <OS_IdleTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d122      	bne.n	80054de <OSInit+0x15e>
    }
#endif


#if (OS_CFG_TICK_EN > 0u)
    OS_TickInit(p_err);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f002 fe0d 	bl	80080b8 <OS_TickInit>
    if (*p_err != OS_ERR_NONE) {
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d11d      	bne.n	80054e2 <OSInit+0x162>
    }
#endif


#if (OS_CFG_STAT_TASK_EN > 0u)                                  /* Initialize the Statistic Task                        */
    OS_StatTaskInit(p_err);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f002 f8e4 	bl	8007674 <OS_StatTaskInit>
    if (*p_err != OS_ERR_NONE) {
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d118      	bne.n	80054e6 <OSInit+0x166>
    }
#endif


#if (OS_CFG_TMR_EN > 0u)                                        /* Initialize the Timer Manager module                  */
    OS_TmrInit(p_err);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f003 f905 	bl	80086c4 <OS_TmrInit>
    if (*p_err != OS_ERR_NONE) {
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d113      	bne.n	80054ea <OSInit+0x16a>
    }
#endif


#if (OS_CFG_DBG_EN > 0u)
    OS_Dbg_Init();
 80054c2:	f000 fdd9 	bl	8006078 <OS_Dbg_Init>
#endif


    OSCfg_Init();
 80054c6:	f7ff ff53 	bl	8005370 <OSCfg_Init>

    OSInitialized = OS_TRUE;                                    /* Kernel is initialized                                */
 80054ca:	4b27      	ldr	r3, [pc, #156]	@ (8005568 <OSInit+0x1e8>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	701a      	strb	r2, [r3, #0]
 80054d0:	e00c      	b.n	80054ec <OSInit+0x16c>
        return;
 80054d2:	bf00      	nop
 80054d4:	e00a      	b.n	80054ec <OSInit+0x16c>
        return;
 80054d6:	bf00      	nop
 80054d8:	e008      	b.n	80054ec <OSInit+0x16c>
        return;
 80054da:	bf00      	nop
 80054dc:	e006      	b.n	80054ec <OSInit+0x16c>
        return;
 80054de:	bf00      	nop
 80054e0:	e004      	b.n	80054ec <OSInit+0x16c>
        return;
 80054e2:	bf00      	nop
 80054e4:	e002      	b.n	80054ec <OSInit+0x16c>
        return;
 80054e6:	bf00      	nop
 80054e8:	e000      	b.n	80054ec <OSInit+0x16c>
        return;
 80054ea:	bf00      	nop
}
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	200019ac 	.word	0x200019ac
 80054f8:	200019ad 	.word	0x200019ad
 80054fc:	20001cec 	.word	0x20001cec
 8005500:	20001f1c 	.word	0x20001f1c
 8005504:	20001f20 	.word	0x20001f20
 8005508:	200019da 	.word	0x200019da
 800550c:	200019db 	.word	0x200019db
 8005510:	20001cf4 	.word	0x20001cf4
 8005514:	08008f4c 	.word	0x08008f4c
 8005518:	cccccccd 	.word	0xcccccccd
 800551c:	20001cf0 	.word	0x20001cf0
 8005520:	08008f24 	.word	0x08008f24
 8005524:	08008f28 	.word	0x08008f28
 8005528:	200018c8 	.word	0x200018c8
 800552c:	200018cc 	.word	0x200018cc
 8005530:	200018d0 	.word	0x200018d0
 8005534:	200018d4 	.word	0x200018d4
 8005538:	200018d8 	.word	0x200018d8
 800553c:	200018dc 	.word	0x200018dc
 8005540:	200018e0 	.word	0x200018e0
 8005544:	20001de2 	.word	0x20001de2
 8005548:	200019b8 	.word	0x200019b8
 800554c:	200019bc 	.word	0x200019bc
 8005550:	200019d4 	.word	0x200019d4
 8005554:	200019d8 	.word	0x200019d8
 8005558:	200019e4 	.word	0x200019e4
 800555c:	200019e8 	.word	0x200019e8
 8005560:	20001cf8 	.word	0x20001cf8
 8005564:	20001cfc 	.word	0x20001cfc
 8005568:	200019ae 	.word	0x200019ae

0800556c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 250 levels deep.
************************************************************************************************************************
*/

void  OSIntEnter (void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
    OS_TRACE_ISR_ENTER();

    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is OS running?                                       */
 8005570:	4b0a      	ldr	r3, [pc, #40]	@ (800559c <OSIntEnter+0x30>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d10a      	bne.n	800558e <OSIntEnter+0x22>
        return;                                                 /* No                                                   */
    }

    if (OSIntNestingCtr >= 250u) {                              /* Have we nested past 250 levels?                      */
 8005578:	4b09      	ldr	r3, [pc, #36]	@ (80055a0 <OSIntEnter+0x34>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2bf9      	cmp	r3, #249	@ 0xf9
 800557e:	d808      	bhi.n	8005592 <OSIntEnter+0x26>
        return;                                                 /* Yes                                                  */
    }

    OSIntNestingCtr++;                                          /* Increment ISR nesting level                          */
 8005580:	4b07      	ldr	r3, [pc, #28]	@ (80055a0 <OSIntEnter+0x34>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	3301      	adds	r3, #1
 8005586:	b2da      	uxtb	r2, r3
 8005588:	4b05      	ldr	r3, [pc, #20]	@ (80055a0 <OSIntEnter+0x34>)
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	e002      	b.n	8005594 <OSIntEnter+0x28>
        return;                                                 /* No                                                   */
 800558e:	bf00      	nop
 8005590:	e000      	b.n	8005594 <OSIntEnter+0x28>
        return;                                                 /* Yes                                                  */
 8005592:	bf00      	nop
}
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	200019ad 	.word	0x200019ad
 80055a0:	200019ac 	.word	0x200019ac

080055a4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSIntExit (void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
    CPU_BOOLEAN  stk_status;
#endif
    CPU_SR_ALLOC();
 80055aa:	2300      	movs	r3, #0
 80055ac:	607b      	str	r3, [r7, #4]



    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Has the OS started?                                  */
 80055ae:	4b2c      	ldr	r3, [pc, #176]	@ (8005660 <OSIntExit+0xbc>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d14f      	bne.n	8005656 <OSIntExit+0xb2>
        OS_TRACE_ISR_EXIT();
        return;                                                 /* No                                                   */
    }

    CPU_INT_DIS();
 80055b6:	2040      	movs	r0, #64	@ 0x40
 80055b8:	f7fa fe1e 	bl	80001f8 <CPU_SR_Save>
 80055bc:	6078      	str	r0, [r7, #4]
    if (OSIntNestingCtr == 0u) {                                /* Prevent OSIntNestingCtr from wrapping                */
 80055be:	4b29      	ldr	r3, [pc, #164]	@ (8005664 <OSIntExit+0xc0>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d103      	bne.n	80055ce <OSIntExit+0x2a>
        OS_TRACE_ISR_EXIT();
        CPU_INT_EN();
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fa fe24 	bl	8000214 <CPU_SR_Restore>
        return;
 80055cc:	e044      	b.n	8005658 <OSIntExit+0xb4>
    }
    OSIntNestingCtr--;
 80055ce:	4b25      	ldr	r3, [pc, #148]	@ (8005664 <OSIntExit+0xc0>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	4b23      	ldr	r3, [pc, #140]	@ (8005664 <OSIntExit+0xc0>)
 80055d8:	701a      	strb	r2, [r3, #0]
    if (OSIntNestingCtr > 0u) {                                 /* ISRs still nested?                                   */
 80055da:	4b22      	ldr	r3, [pc, #136]	@ (8005664 <OSIntExit+0xc0>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <OSIntExit+0x46>
        OS_TRACE_ISR_EXIT();
        CPU_INT_EN();                                           /* Yes                                                  */
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7fa fe16 	bl	8000214 <CPU_SR_Restore>
        return;
 80055e8:	e036      	b.n	8005658 <OSIntExit+0xb4>
    }

    if (OSSchedLockNestingCtr > 0u) {                           /* Scheduler still locked?                              */
 80055ea:	4b1f      	ldr	r3, [pc, #124]	@ (8005668 <OSIntExit+0xc4>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <OSIntExit+0x56>
        OS_TRACE_ISR_EXIT();
        CPU_INT_EN();                                           /* Yes                                                  */
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7fa fe0e 	bl	8000214 <CPU_SR_Restore>
        return;
 80055f8:	e02e      	b.n	8005658 <OSIntExit+0xb4>
        OSRedzoneHitHook((OS_TCB *)0);
    }
#endif
#endif

    OSPrioHighRdy   = OS_PrioGetHighest();                      /* Find highest priority                                */
 80055fa:	f001 fdab 	bl	8007154 <OS_PrioGetHighest>
 80055fe:	4603      	mov	r3, r0
 8005600:	461a      	mov	r2, r3
 8005602:	4b1a      	ldr	r3, [pc, #104]	@ (800566c <OSIntExit+0xc8>)
 8005604:	701a      	strb	r2, [r3, #0]
#if (OS_CFG_TASK_IDLE_EN > 0u)
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;         /* Get highest priority task ready-to-run               */
 8005606:	4b19      	ldr	r3, [pc, #100]	@ (800566c <OSIntExit+0xc8>)
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	4619      	mov	r1, r3
 800560c:	4a18      	ldr	r2, [pc, #96]	@ (8005670 <OSIntExit+0xcc>)
 800560e:	460b      	mov	r3, r1
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	440b      	add	r3, r1
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a16      	ldr	r2, [pc, #88]	@ (8005674 <OSIntExit+0xd0>)
 800561c:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                       /* Current task still the highest priority?             */
 800561e:	4b15      	ldr	r3, [pc, #84]	@ (8005674 <OSIntExit+0xd0>)
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	4b15      	ldr	r3, [pc, #84]	@ (8005678 <OSIntExit+0xd4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d103      	bne.n	8005632 <OSIntExit+0x8e>
        if (stk_status != OS_TRUE) {
            OSRedzoneHitHook(OSTCBCurPtr);
        }
#endif
        OS_TRACE_ISR_EXIT();
        CPU_INT_EN();
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7fa fdf2 	bl	8000214 <CPU_SR_Restore>
        OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdyPtr);             /* Do this here because we don't execute OSIntCtxSw().  */
        return;
 8005630:	e012      	b.n	8005658 <OSIntExit+0xb4>
        }
    }
#endif

#if (OS_CFG_TASK_PROFILE_EN > 0u)
    OSTCBHighRdyPtr->CtxSwCtr++;                                /* Inc. # of context switches for this new task         */
 8005632:	4b10      	ldr	r3, [pc, #64]	@ (8005674 <OSIntExit+0xd0>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800563a:	3201      	adds	r2, #1
 800563c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#endif
#if ((OS_CFG_TASK_PROFILE_EN > 0u) || (OS_CFG_DBG_EN > 0u))
    OSTaskCtxSwCtr++;                                           /* Keep track of the total number of ctx switches       */
 8005640:	4b0e      	ldr	r3, [pc, #56]	@ (800567c <OSIntExit+0xd8>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3301      	adds	r3, #1
 8005646:	4a0d      	ldr	r2, [pc, #52]	@ (800567c <OSIntExit+0xd8>)
 8005648:	6013      	str	r3, [r2, #0]
    OS_TLS_TaskSw();
#endif

    OS_TRACE_ISR_EXIT_TO_SCHEDULER();

    OSIntCtxSw();                                               /* Perform interrupt level ctx switch                   */
 800564a:	f7fa fe3a 	bl	80002c2 <OSCtxSw>

    CPU_INT_EN();
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7fa fde0 	bl	8000214 <CPU_SR_Restore>
 8005654:	e000      	b.n	8005658 <OSIntExit+0xb4>
        return;                                                 /* No                                                   */
 8005656:	bf00      	nop
}
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	200019ad 	.word	0x200019ad
 8005664:	200019ac 	.word	0x200019ac
 8005668:	20001cec 	.word	0x20001cec
 800566c:	200019db 	.word	0x200019db
 8005670:	200019ec 	.word	0x200019ec
 8005674:	20001f20 	.word	0x20001f20
 8005678:	20001f1c 	.word	0x20001f1c
 800567c:	20001dd8 	.word	0x20001dd8

08005680 <OSSched>:
* Note(s)    : 1) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSSched (void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8005686:	2300      	movs	r3, #0
 8005688:	607b      	str	r3, [r7, #4]


#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)                       /* Can't schedule when the kernel is stopped.           */
    if (OSRunning != OS_STATE_OS_RUNNING) {
 800568a:	4b24      	ldr	r3, [pc, #144]	@ (800571c <OSSched+0x9c>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d13b      	bne.n	800570a <OSSched+0x8a>
        return;
    }
#endif

    if (OSIntNestingCtr > 0u) {                                 /* ISRs still nested?                                   */
 8005692:	4b23      	ldr	r3, [pc, #140]	@ (8005720 <OSSched+0xa0>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d139      	bne.n	800570e <OSSched+0x8e>
        return;                                                 /* Yes ... only schedule when no nested ISRs            */
    }

    if (OSSchedLockNestingCtr > 0u) {                           /* Scheduler locked?                                    */
 800569a:	4b22      	ldr	r3, [pc, #136]	@ (8005724 <OSSched+0xa4>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d137      	bne.n	8005712 <OSSched+0x92>
        return;                                                 /* Yes                                                  */
    }

    CPU_INT_DIS();
 80056a2:	2040      	movs	r0, #64	@ 0x40
 80056a4:	f7fa fda8 	bl	80001f8 <CPU_SR_Save>
 80056a8:	6078      	str	r0, [r7, #4]
    OSPrioHighRdy   = OS_PrioGetHighest();                      /* Find the highest priority ready                      */
 80056aa:	f001 fd53 	bl	8007154 <OS_PrioGetHighest>
 80056ae:	4603      	mov	r3, r0
 80056b0:	461a      	mov	r2, r3
 80056b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005728 <OSSched+0xa8>)
 80056b4:	701a      	strb	r2, [r3, #0]
#if (OS_CFG_TASK_IDLE_EN > 0u)
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;         /* Get highest priority task ready-to-run               */
 80056b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005728 <OSSched+0xa8>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	4619      	mov	r1, r3
 80056bc:	4a1b      	ldr	r2, [pc, #108]	@ (800572c <OSSched+0xac>)
 80056be:	460b      	mov	r3, r1
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	440b      	add	r3, r1
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a19      	ldr	r2, [pc, #100]	@ (8005730 <OSSched+0xb0>)
 80056cc:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                       /* Current task still the highest priority?             */
 80056ce:	4b18      	ldr	r3, [pc, #96]	@ (8005730 <OSSched+0xb0>)
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	4b18      	ldr	r3, [pc, #96]	@ (8005734 <OSSched+0xb4>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d103      	bne.n	80056e2 <OSSched+0x62>
        CPU_INT_EN();                                           /* Yes                                                  */
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7fa fd9a 	bl	8000214 <CPU_SR_Restore>
        return;
 80056e0:	e018      	b.n	8005714 <OSSched+0x94>
#endif

    OS_TRACE_TASK_PREEMPT(OSTCBCurPtr);

#if (OS_CFG_TASK_PROFILE_EN > 0u)
    OSTCBHighRdyPtr->CtxSwCtr++;                                /* Inc. # of context switches to this task              */
 80056e2:	4b13      	ldr	r3, [pc, #76]	@ (8005730 <OSSched+0xb0>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80056ea:	3201      	adds	r2, #1
 80056ec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#endif

#if ((OS_CFG_TASK_PROFILE_EN > 0u) || (OS_CFG_DBG_EN > 0u))
    OSTaskCtxSwCtr++;                                           /* Increment context switch counter                     */
 80056f0:	4b11      	ldr	r3, [pc, #68]	@ (8005738 <OSSched+0xb8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3301      	adds	r3, #1
 80056f6:	4a10      	ldr	r2, [pc, #64]	@ (8005738 <OSSched+0xb8>)
 80056f8:	6013      	str	r3, [r2, #0]
#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskSw();
#endif

#if (OS_CFG_TASK_IDLE_EN > 0u)
    OS_TASK_SW();                                               /* Perform a task level context switch                  */
 80056fa:	f7fa fde2 	bl	80002c2 <OSCtxSw>
    CPU_INT_EN();
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7fa fd88 	bl	8000214 <CPU_SR_Restore>
        }
    }
#endif

#ifdef OS_TASK_SW_SYNC
    OS_TASK_SW_SYNC();
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	e004      	b.n	8005714 <OSSched+0x94>
        return;
 800570a:	bf00      	nop
 800570c:	e002      	b.n	8005714 <OSSched+0x94>
        return;                                                 /* Yes ... only schedule when no nested ISRs            */
 800570e:	bf00      	nop
 8005710:	e000      	b.n	8005714 <OSSched+0x94>
        return;                                                 /* Yes                                                  */
 8005712:	bf00      	nop
#endif
}
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	200019ad 	.word	0x200019ad
 8005720:	200019ac 	.word	0x200019ac
 8005724:	20001cec 	.word	0x20001cec
 8005728:	200019db 	.word	0x200019db
 800572c:	200019ec 	.word	0x200019ec
 8005730:	20001f20 	.word	0x20001f20
 8005734:	20001f1c 	.word	0x20001f1c
 8005738:	20001dd8 	.word	0x20001dd8

0800573c <OSStart>:
*              2) OSStart() is not supposed to return.  If it does, that would be considered a fatal error.
************************************************************************************************************************
*/

void  OSStart (OS_ERR  *p_err)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    if (OSInitialized != OS_TRUE) {
 8005744:	4b26      	ldr	r3, [pc, #152]	@ (80057e0 <OSStart+0xa4>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d004      	beq.n	8005756 <OSStart+0x1a>
       *p_err = OS_ERR_OS_NOT_INIT;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f645 628b 	movw	r2, #24203	@ 0x5e8b
 8005752:	801a      	strh	r2, [r3, #0]
        return;
 8005754:	e040      	b.n	80057d8 <OSStart+0x9c>
    }

    kernel_task_cnt = 0u;                                       /* Calculate the number of kernel tasks                 */
 8005756:	2300      	movs	r3, #0
 8005758:	81fb      	strh	r3, [r7, #14]
#if (OS_CFG_STAT_TASK_EN > 0u)
    kernel_task_cnt++;
 800575a:	89fb      	ldrh	r3, [r7, #14]
 800575c:	3301      	adds	r3, #1
 800575e:	81fb      	strh	r3, [r7, #14]
#endif
#if (OS_CFG_TMR_EN > 0u)
    kernel_task_cnt++;
 8005760:	89fb      	ldrh	r3, [r7, #14]
 8005762:	3301      	adds	r3, #1
 8005764:	81fb      	strh	r3, [r7, #14]
#endif
#if (OS_CFG_TASK_IDLE_EN > 0u)
    kernel_task_cnt++;
 8005766:	89fb      	ldrh	r3, [r7, #14]
 8005768:	3301      	adds	r3, #1
 800576a:	81fb      	strh	r3, [r7, #14]
#endif

    if (OSTaskQty <= kernel_task_cnt) {                         /* No application task created                          */
 800576c:	4b1d      	ldr	r3, [pc, #116]	@ (80057e4 <OSStart+0xa8>)
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	89fa      	ldrh	r2, [r7, #14]
 8005772:	429a      	cmp	r2, r3
 8005774:	d304      	bcc.n	8005780 <OSStart+0x44>
        *p_err = OS_ERR_OS_NO_APP_TASK;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f645 628c 	movw	r2, #24204	@ 0x5e8c
 800577c:	801a      	strh	r2, [r3, #0]
         return;
 800577e:	e02b      	b.n	80057d8 <OSStart+0x9c>
    }

    if (OSRunning == OS_STATE_OS_STOPPED) {
 8005780:	4b19      	ldr	r3, [pc, #100]	@ (80057e8 <OSStart+0xac>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d123      	bne.n	80057d0 <OSStart+0x94>
        OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority                            */
 8005788:	f001 fce4 	bl	8007154 <OS_PrioGetHighest>
 800578c:	4603      	mov	r3, r0
 800578e:	461a      	mov	r2, r3
 8005790:	4b16      	ldr	r3, [pc, #88]	@ (80057ec <OSStart+0xb0>)
 8005792:	701a      	strb	r2, [r3, #0]
        OSPrioCur       = OSPrioHighRdy;
 8005794:	4b15      	ldr	r3, [pc, #84]	@ (80057ec <OSStart+0xb0>)
 8005796:	781a      	ldrb	r2, [r3, #0]
 8005798:	4b15      	ldr	r3, [pc, #84]	@ (80057f0 <OSStart+0xb4>)
 800579a:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 800579c:	4b13      	ldr	r3, [pc, #76]	@ (80057ec <OSStart+0xb0>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	4619      	mov	r1, r3
 80057a2:	4a14      	ldr	r2, [pc, #80]	@ (80057f4 <OSStart+0xb8>)
 80057a4:	460b      	mov	r3, r1
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	440b      	add	r3, r1
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a11      	ldr	r2, [pc, #68]	@ (80057f8 <OSStart+0xbc>)
 80057b2:	6013      	str	r3, [r2, #0]
        OSTCBCurPtr     = OSTCBHighRdyPtr;
 80057b4:	4b10      	ldr	r3, [pc, #64]	@ (80057f8 <OSStart+0xbc>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a10      	ldr	r2, [pc, #64]	@ (80057fc <OSStart+0xc0>)
 80057ba:	6013      	str	r3, [r2, #0]
        OSRunning       = OS_STATE_OS_RUNNING;
 80057bc:	4b0a      	ldr	r3, [pc, #40]	@ (80057e8 <OSStart+0xac>)
 80057be:	2201      	movs	r2, #1
 80057c0:	701a      	strb	r2, [r3, #0]
        OSStartHighRdy();                                       /* Execute target specific code to start task           */
 80057c2:	f7fa fd3f 	bl	8000244 <OSStartHighRdy>
       *p_err           = OS_ERR_FATAL_RETURN;                  /* OSStart() is not supposed to return                  */
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f643 2299 	movw	r2, #15001	@ 0x3a99
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	e003      	b.n	80057d8 <OSStart+0x9c>
    } else {
       *p_err           = OS_ERR_OS_RUNNING;                    /* OS is already running                                */
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f645 628a 	movw	r2, #24202	@ 0x5e8a
 80057d6:	801a      	strh	r2, [r3, #0]
    }
}
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	200019ae 	.word	0x200019ae
 80057e4:	20001de0 	.word	0x20001de0
 80057e8:	200019ad 	.word	0x200019ad
 80057ec:	200019db 	.word	0x200019db
 80057f0:	200019da 	.word	0x200019da
 80057f4:	200019ec 	.word	0x200019ec
 80057f8:	20001f20 	.word	0x20001f20
 80057fc:	20001f1c 	.word	0x20001f1c

08005800 <OS_IdleTask>:
*              3) This hook has been added to allow you to do such things as STOP the CPU to conserve power.
************************************************************************************************************************
*/
#if (OS_CFG_TASK_IDLE_EN > 0u)
void  OS_IdleTask (void  *p_arg)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_EN > 0u))
    CPU_SR_ALLOC();
 8005808:	2300      	movs	r3, #0
 800580a:	60fb      	str	r3, [r7, #12]

    (void)p_arg;                                                /* Prevent compiler warning for not using 'p_arg'       */

    for (;;) {
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_EN > 0u))
        CPU_CRITICAL_ENTER();
 800580c:	2040      	movs	r0, #64	@ 0x40
 800580e:	f7fa fcf3 	bl	80001f8 <CPU_SR_Save>
 8005812:	60f8      	str	r0, [r7, #12]
#if (OS_CFG_DBG_EN > 0u)
        OSIdleTaskCtr++;
 8005814:	4b08      	ldr	r3, [pc, #32]	@ (8005838 <OS_IdleTask+0x38>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3301      	adds	r3, #1
 800581a:	4a07      	ldr	r2, [pc, #28]	@ (8005838 <OS_IdleTask+0x38>)
 800581c:	6013      	str	r3, [r2, #0]
#endif
#if (OS_CFG_STAT_TASK_EN > 0u)
        OSStatTaskCtr++;
 800581e:	4b07      	ldr	r3, [pc, #28]	@ (800583c <OS_IdleTask+0x3c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3301      	adds	r3, #1
 8005824:	4a05      	ldr	r2, [pc, #20]	@ (800583c <OS_IdleTask+0x3c>)
 8005826:	6013      	str	r3, [r2, #0]
#endif
        CPU_CRITICAL_EXIT();
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7fa fcf3 	bl	8000214 <CPU_SR_Restore>
#endif

#if (OS_CFG_APP_HOOKS_EN > 0u)
        OSIdleTaskHook();                                       /* Call user definable HOOK                             */
 800582e:	f7ff fc35 	bl	800509c <OSIdleTaskHook>
        CPU_CRITICAL_ENTER();
 8005832:	bf00      	nop
 8005834:	e7ea      	b.n	800580c <OS_IdleTask+0xc>
 8005836:	bf00      	nop
 8005838:	200018e4 	.word	0x200018e4
 800583c:	20001d04 	.word	0x20001d04

08005840 <OS_IdleTaskInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/
#if (OS_CFG_TASK_IDLE_EN > 0u)
void  OS_IdleTaskInit (OS_ERR  *p_err)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b08c      	sub	sp, #48	@ 0x30
 8005844:	af0a      	add	r7, sp, #40	@ 0x28
 8005846:	6078      	str	r0, [r7, #4]
#if (OS_CFG_DBG_EN > 0u)
    OSIdleTaskCtr = 0u;
 8005848:	4b10      	ldr	r3, [pc, #64]	@ (800588c <OS_IdleTaskInit+0x4c>)
 800584a:	2200      	movs	r2, #0
 800584c:	601a      	str	r2, [r3, #0]
#endif
                                                                /* --------------- CREATE THE IDLE TASK --------------- */
    OSTaskCreate(&OSIdleTaskTCB,
 800584e:	4b10      	ldr	r3, [pc, #64]	@ (8005890 <OS_IdleTaskInit+0x50>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a10      	ldr	r2, [pc, #64]	@ (8005894 <OS_IdleTaskInit+0x54>)
 8005854:	6812      	ldr	r2, [r2, #0]
 8005856:	4910      	ldr	r1, [pc, #64]	@ (8005898 <OS_IdleTaskInit+0x58>)
 8005858:	6809      	ldr	r1, [r1, #0]
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	9008      	str	r0, [sp, #32]
 800585e:	200b      	movs	r0, #11
 8005860:	9007      	str	r0, [sp, #28]
 8005862:	2000      	movs	r0, #0
 8005864:	9006      	str	r0, [sp, #24]
 8005866:	2000      	movs	r0, #0
 8005868:	9005      	str	r0, [sp, #20]
 800586a:	2000      	movs	r0, #0
 800586c:	9004      	str	r0, [sp, #16]
 800586e:	9103      	str	r1, [sp, #12]
 8005870:	9202      	str	r2, [sp, #8]
 8005872:	9301      	str	r3, [sp, #4]
 8005874:	233f      	movs	r3, #63	@ 0x3f
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	2300      	movs	r3, #0
 800587a:	4a08      	ldr	r2, [pc, #32]	@ (800589c <OS_IdleTaskInit+0x5c>)
 800587c:	4908      	ldr	r1, [pc, #32]	@ (80058a0 <OS_IdleTaskInit+0x60>)
 800587e:	4809      	ldr	r0, [pc, #36]	@ (80058a4 <OS_IdleTaskInit+0x64>)
 8005880:	f001 ff6c 	bl	800775c <OSTaskCreate>
                  0u,
                  0u,
                 (void       *)0,
                 (OS_OPT_TASK_STK_CHK | (OS_OPT)(OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS)),
                  p_err);
}
 8005884:	bf00      	nop
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	200018e4 	.word	0x200018e4
 8005890:	08008f18 	.word	0x08008f18
 8005894:	08008f1c 	.word	0x08008f1c
 8005898:	08008f20 	.word	0x08008f20
 800589c:	08005801 	.word	0x08005801
 80058a0:	08008e64 	.word	0x08008e64
 80058a4:	200018e8 	.word	0x200018e8

080058a8 <OS_Pend>:

void  OS_Pend (OS_PEND_OBJ  *p_obj,
               OS_TCB       *p_tcb,
               OS_STATE      pending_on,
               OS_TICK       timeout)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	4613      	mov	r3, r2
 80058b6:	71fb      	strb	r3, [r7, #7]
    OS_PEND_LIST  *p_pend_list;


    p_tcb->PendOn     = pending_on;                             /* Resource not available, wait until it is             */
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	79fa      	ldrb	r2, [r7, #7]
 80058bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    p_tcb->PendStatus = OS_STATUS_PEND_OK;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    OS_TaskBlock(p_tcb,                                         /* Block the task and add it to the tick list if needed */
 80058c8:	6839      	ldr	r1, [r7, #0]
 80058ca:	68b8      	ldr	r0, [r7, #8]
 80058cc:	f000 fbb2 	bl	8006034 <OS_TaskBlock>
                 timeout);

    if (p_obj != (OS_PEND_OBJ *)0) {                            /* Add the current task to the pend list ...            */
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00a      	beq.n	80058ec <OS_Pend+0x44>
        p_pend_list             = &p_obj->PendList;             /* ... if there is an object to pend on                 */
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3308      	adds	r3, #8
 80058da:	617b      	str	r3, [r7, #20]
        p_tcb->PendObjPtr =  p_obj;                             /* Save the pointer to the object pending on            */
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	635a      	str	r2, [r3, #52]	@ 0x34
        OS_PendListInsertPrio(p_pend_list,                      /* Insert in the pend list in priority order            */
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	6978      	ldr	r0, [r7, #20]
 80058e6:	f000 f89f 	bl	8005a28 <OS_PendListInsertPrio>
 80058ea:	e002      	b.n	80058f2 <OS_Pend+0x4a>
                              p_tcb);

    } else {
        p_tcb->PendObjPtr = (OS_PEND_OBJ *)0;                   /* If no object being pended on, clear the pend object  */
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2200      	movs	r2, #0
 80058f0:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#if (OS_CFG_DBG_EN > 0u)
    OS_PendDbgNameAdd(p_obj,
 80058f2:	68b9      	ldr	r1, [r7, #8]
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 f805 	bl	8005904 <OS_PendDbgNameAdd>
                      p_tcb);
#endif
}
 80058fa:	bf00      	nop
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <OS_PendDbgNameAdd>:
*/

#if (OS_CFG_DBG_EN > 0u)
void  OS_PendDbgNameAdd (OS_PEND_OBJ  *p_obj,
                         OS_TCB       *p_tcb)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb1;


    if (p_obj != (OS_PEND_OBJ *)0) {
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00f      	beq.n	8005934 <OS_PendDbgNameAdd+0x30>
        p_tcb->DbgNamePtr =  p_obj->NamePtr;                    /* Task pending on this object ... save name in TCB     */
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        p_pend_list       = &p_obj->PendList;                   /* Find name of HP task pending on this object ...      */
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3308      	adds	r3, #8
 8005922:	60fb      	str	r3, [r7, #12]
        p_tcb1            =  p_pend_list->HeadPtr;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	60bb      	str	r3, [r7, #8]
        p_obj->DbgNamePtr =  p_tcb1->NamePtr;                   /* ... Save in object                                   */
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	61da      	str	r2, [r3, #28]
            default:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
                 break;
        }
    }
}
 8005932:	e016      	b.n	8005962 <OS_PendDbgNameAdd+0x5e>
        switch (p_tcb->PendOn) {
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800593a:	2b02      	cmp	r3, #2
 800593c:	d002      	beq.n	8005944 <OS_PendDbgNameAdd+0x40>
 800593e:	2b07      	cmp	r3, #7
 8005940:	d005      	beq.n	800594e <OS_PendDbgNameAdd+0x4a>
 8005942:	e009      	b.n	8005958 <OS_PendDbgNameAdd+0x54>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Q");
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	4a0a      	ldr	r2, [pc, #40]	@ (8005970 <OS_PendDbgNameAdd+0x6c>)
 8005948:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
                 break;
 800594c:	e009      	b.n	8005962 <OS_PendDbgNameAdd+0x5e>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Sem");
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	4a08      	ldr	r2, [pc, #32]	@ (8005974 <OS_PendDbgNameAdd+0x70>)
 8005952:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
                 break;
 8005956:	e004      	b.n	8005962 <OS_PendDbgNameAdd+0x5e>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	4a07      	ldr	r2, [pc, #28]	@ (8005978 <OS_PendDbgNameAdd+0x74>)
 800595c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
                 break;
 8005960:	bf00      	nop
}
 8005962:	bf00      	nop
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	08008e78 	.word	0x08008e78
 8005974:	08008e80 	.word	0x08008e80
 8005978:	08008e8c 	.word	0x08008e8c

0800597c <OS_PendDbgNameRemove>:


void  OS_PendDbgNameRemove (OS_PEND_OBJ  *p_obj,
                            OS_TCB       *p_tcb)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb1;


    p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");              /* Remove name of object pended on for readied task     */
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	4a0e      	ldr	r2, [pc, #56]	@ (80059c4 <OS_PendDbgNameRemove+0x48>)
 800598a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

    if (p_obj != (OS_PEND_OBJ *)0) {
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d010      	beq.n	80059b6 <OS_PendDbgNameRemove+0x3a>
        p_pend_list = &p_obj->PendList;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3308      	adds	r3, #8
 8005998:	60fb      	str	r3, [r7, #12]
        p_tcb1      =  p_pend_list->HeadPtr;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	60bb      	str	r3, [r7, #8]
        if (p_tcb1 != (OS_TCB *)0) {                            /* Find name of HP task pending on this object ...      */
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d004      	beq.n	80059b0 <OS_PendDbgNameRemove+0x34>
            p_obj->DbgNamePtr = p_tcb1->NamePtr;                /* ... Save in object                                   */
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	68da      	ldr	r2, [r3, #12]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	61da      	str	r2, [r3, #28]
        } else {
            p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* Or no other task is pending on object                */
        }
    }
}
 80059ae:	e002      	b.n	80059b6 <OS_PendDbgNameRemove+0x3a>
            p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* Or no other task is pending on object                */
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a04      	ldr	r2, [pc, #16]	@ (80059c4 <OS_PendDbgNameRemove+0x48>)
 80059b4:	61da      	str	r2, [r3, #28]
}
 80059b6:	bf00      	nop
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	08008e8c 	.word	0x08008e8c

080059c8 <OS_PendListChangePrio>:
*              2) It's assumed that the TCB contains the NEW priority in its .Prio field.
************************************************************************************************************************
*/

void  OS_PendListChangePrio (OS_TCB  *p_tcb)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_OBJ   *p_obj;

    p_obj       =  p_tcb->PendObjPtr;                           /* Get pointer to pend list                             */
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d4:	60fb      	str	r3, [r7, #12]
    p_pend_list = &p_obj->PendList;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	3308      	adds	r3, #8
 80059da:	60bb      	str	r3, [r7, #8]

    if (p_pend_list->HeadPtr->PendNextPtr != (OS_TCB *)0) {     /* Only move if multiple entries in the list            */
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d009      	beq.n	80059fa <OS_PendListChangePrio+0x32>
            OS_PendListRemove(p_tcb);                           /* Remove entry from current position                   */
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f88a 	bl	8005b00 <OS_PendListRemove>
            p_tcb->PendObjPtr = p_obj;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	635a      	str	r2, [r3, #52]	@ 0x34
            OS_PendListInsertPrio(p_pend_list,                  /* INSERT it back in the list                           */
 80059f2:	6879      	ldr	r1, [r7, #4]
 80059f4:	68b8      	ldr	r0, [r7, #8]
 80059f6:	f000 f817 	bl	8005a28 <OS_PendListInsertPrio>
                                  p_tcb);
    }
}
 80059fa:	bf00      	nop
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <OS_PendListInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application must not call it.
************************************************************************************************************************
*/

void  OS_PendListInit (OS_PEND_LIST  *p_pend_list)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
    p_pend_list->HeadPtr    = (OS_TCB *)0;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]
    p_pend_list->TailPtr    = (OS_TCB *)0;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	605a      	str	r2, [r3, #4]
#if (OS_CFG_DBG_EN > 0u)
    p_pend_list->NbrEntries =           0u;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	811a      	strh	r2, [r3, #8]
#endif
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <OS_PendListInsertPrio>:
************************************************************************************************************************
*/

void  OS_PendListInsertPrio (OS_PEND_LIST  *p_pend_list,
                             OS_TCB        *p_tcb)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
    OS_PRIO   prio;
    OS_TCB   *p_tcb_next;


    prio  = p_tcb->Prio;                                        /* Obtain the priority of the task to insert            */
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005a38:	72fb      	strb	r3, [r7, #11]

    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* CASE 0: Insert when there are no entries             */
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10f      	bne.n	8005a62 <OS_PendListInsertPrio+0x3a>
#if (OS_CFG_DBG_EN > 0u)
        p_pend_list->NbrEntries = 1u;                           /* This is the first entry                              */
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	811a      	strh	r2, [r3, #8]
#endif
        p_tcb->PendNextPtr   = (OS_TCB *)0;                     /* No other OS_TCBs in the list                         */
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	62da      	str	r2, [r3, #44]	@ 0x2c
        p_tcb->PendPrevPtr   = (OS_TCB *)0;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2200      	movs	r2, #0
 8005a52:	631a      	str	r2, [r3, #48]	@ 0x30
        p_pend_list->HeadPtr =  p_tcb;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr =  p_tcb;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	605a      	str	r2, [r3, #4]
                p_tcb->PendPrevPtr->PendNextPtr = p_tcb;
                p_tcb_next->PendPrevPtr         = p_tcb;
            }
        }
    }
}
 8005a60:	e048      	b.n	8005af4 <OS_PendListInsertPrio+0xcc>
        p_pend_list->NbrEntries++;                              /* CASE 1: One more OS_TCBs in the list                 */
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	891b      	ldrh	r3, [r3, #8]
 8005a66:	3301      	adds	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	811a      	strh	r2, [r3, #8]
        p_tcb_next = p_pend_list->HeadPtr;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	60fb      	str	r3, [r7, #12]
        while (p_tcb_next != (OS_TCB *)0) {                     /* Find the position where to insert                    */
 8005a74:	e008      	b.n	8005a88 <OS_PendListInsertPrio+0x60>
            if (prio < p_tcb_next->Prio) {
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005a7c:	7afa      	ldrb	r2, [r7, #11]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d306      	bcc.n	8005a90 <OS_PendListInsertPrio+0x68>
                p_tcb_next = p_tcb_next->PendNextPtr;           /* Not Found, follow the list                           */
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a86:	60fb      	str	r3, [r7, #12]
        while (p_tcb_next != (OS_TCB *)0) {                     /* Find the position where to insert                    */
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f3      	bne.n	8005a76 <OS_PendListInsertPrio+0x4e>
 8005a8e:	e000      	b.n	8005a92 <OS_PendListInsertPrio+0x6a>
                break;                                          /* Found! ... insert BEFORE current                     */
 8005a90:	bf00      	nop
        if (p_tcb_next == (OS_TCB *)0) {                        /* TCB to insert is lowest in priority                  */
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10e      	bne.n	8005ab6 <OS_PendListInsertPrio+0x8e>
            p_tcb->PendNextPtr              = (OS_TCB *)0;      /* ... insert at the tail.                              */
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
            p_tcb->PendPrevPtr              =  p_pend_list->TailPtr;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	631a      	str	r2, [r3, #48]	@ 0x30
            p_tcb->PendPrevPtr->PendNextPtr =  p_tcb;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	62da      	str	r2, [r3, #44]	@ 0x2c
            p_pend_list->TailPtr            =  p_tcb;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	605a      	str	r2, [r3, #4]
}
 8005ab4:	e01e      	b.n	8005af4 <OS_PendListInsertPrio+0xcc>
            if (p_tcb_next->PendPrevPtr == (OS_TCB *)0) {       /* Is new TCB highest priority?                         */
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10c      	bne.n	8005ad8 <OS_PendListInsertPrio+0xb0>
                p_tcb->PendNextPtr      =  p_tcb_next;          /* Yes, insert as new Head of list                      */
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
                p_tcb->PendPrevPtr      = (OS_TCB *)0;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	631a      	str	r2, [r3, #48]	@ 0x30
                p_tcb_next->PendPrevPtr =  p_tcb;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	631a      	str	r2, [r3, #48]	@ 0x30
                p_pend_list->HeadPtr    =  p_tcb;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	601a      	str	r2, [r3, #0]
}
 8005ad6:	e00d      	b.n	8005af4 <OS_PendListInsertPrio+0xcc>
                p_tcb->PendNextPtr              = p_tcb_next;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	62da      	str	r2, [r3, #44]	@ 0x2c
                p_tcb->PendPrevPtr              = p_tcb_next->PendPrevPtr;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	631a      	str	r2, [r3, #48]	@ 0x30
                p_tcb->PendPrevPtr->PendNextPtr = p_tcb;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	62da      	str	r2, [r3, #44]	@ 0x2c
                p_tcb_next->PendPrevPtr         = p_tcb;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005af4:	bf00      	nop
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <OS_PendListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PendListRemove (OS_TCB  *p_tcb)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_next;
    OS_TCB        *p_prev;


    if (p_tcb->PendObjPtr != (OS_PEND_OBJ *)0) {                /* Only remove if object has a pend list.               */
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d046      	beq.n	8005b9e <OS_PendListRemove+0x9e>
        p_pend_list = &p_tcb->PendObjPtr->PendList;             /* Get pointer to pend list                             */
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b14:	3308      	adds	r3, #8
 8005b16:	617b      	str	r3, [r7, #20]

                                                                /* Remove TCB from the pend list.                       */
        if (p_pend_list->HeadPtr->PendNextPtr == (OS_TCB *)0) {
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <OS_PendListRemove+0x30>
            p_pend_list->HeadPtr = (OS_TCB *)0;                 /* Only one entry in the pend list                      */
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]
            p_pend_list->TailPtr = (OS_TCB *)0;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	605a      	str	r2, [r3, #4]
 8005b2e:	e027      	b.n	8005b80 <OS_PendListRemove+0x80>
        } else if (p_tcb->PendPrevPtr == (OS_TCB *)0) {         /* See if entry is at the head of the list              */
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d109      	bne.n	8005b4c <OS_PendListRemove+0x4c>
            p_next               =  p_tcb->PendNextPtr;         /* Yes                                                  */
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3c:	60fb      	str	r3, [r7, #12]
            p_next->PendPrevPtr  = (OS_TCB *)0;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	631a      	str	r2, [r3, #48]	@ 0x30
            p_pend_list->HeadPtr =  p_next;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	e019      	b.n	8005b80 <OS_PendListRemove+0x80>

        } else if (p_tcb->PendNextPtr == (OS_TCB *)0) {         /* See if entry is at the tail of the list              */
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d109      	bne.n	8005b68 <OS_PendListRemove+0x68>
            p_prev               =  p_tcb->PendPrevPtr;         /* Yes                                                  */
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b58:	613b      	str	r3, [r7, #16]
            p_prev->PendNextPtr  = (OS_TCB *)0;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
            p_pend_list->TailPtr =  p_prev;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	605a      	str	r2, [r3, #4]
 8005b66:	e00b      	b.n	8005b80 <OS_PendListRemove+0x80>

        } else {
            p_prev               = p_tcb->PendPrevPtr;          /* Remove from inside the list                          */
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b6c:	613b      	str	r3, [r7, #16]
            p_next               = p_tcb->PendNextPtr;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b72:	60fb      	str	r3, [r7, #12]
            p_prev->PendNextPtr  = p_next;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	62da      	str	r2, [r3, #44]	@ 0x2c
            p_next->PendPrevPtr  = p_prev;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	631a      	str	r2, [r3, #48]	@ 0x30
        }
#if (OS_CFG_DBG_EN > 0u)
        p_pend_list->NbrEntries--;                              /* One less entry in the list                           */
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	891b      	ldrh	r3, [r3, #8]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	811a      	strh	r2, [r3, #8]
#endif
        p_tcb->PendNextPtr = (OS_TCB      *)0;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	62da      	str	r2, [r3, #44]	@ 0x2c
        p_tcb->PendPrevPtr = (OS_TCB      *)0;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	631a      	str	r2, [r3, #48]	@ 0x30
        p_tcb->PendObjPtr  = (OS_PEND_OBJ *)0;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	635a      	str	r2, [r3, #52]	@ 0x34
    }
}
 8005b9e:	bf00      	nop
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
	...

08005bac <OS_Post>:
void  OS_Post (OS_PEND_OBJ  *p_obj,
               OS_TCB       *p_tcb,
               void         *p_void,
               OS_MSG_SIZE   msg_size,
               CPU_TS        ts)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	807b      	strh	r3, [r7, #2]
#if (OS_MSG_EN == 0u)
    (void)p_void;
    (void)msg_size;
#endif

    switch (p_tcb->TaskState) {
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005bc0:	2b07      	cmp	r3, #7
 8005bc2:	d862      	bhi.n	8005c8a <OS_Post+0xde>
 8005bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bcc <OS_Post+0x20>)
 8005bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bca:	bf00      	nop
 8005bcc:	08005c8b 	.word	0x08005c8b
 8005bd0:	08005c8b 	.word	0x08005c8b
 8005bd4:	08005bed 	.word	0x08005bed
 8005bd8:	08005bed 	.word	0x08005bed
 8005bdc:	08005c8b 	.word	0x08005c8b
 8005be0:	08005c8b 	.word	0x08005c8b
 8005be4:	08005c3f 	.word	0x08005c3f
 8005be8:	08005c3f 	.word	0x08005c3f
             break;

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
#if (OS_MSG_EN > 0u)
             p_tcb->MsgPtr  = p_void;                           /* Deposit message in OS_TCB of task waiting            */
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	661a      	str	r2, [r3, #96]	@ 0x60
             p_tcb->MsgSize = msg_size;                         /* ... assuming posting a message                       */
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	887a      	ldrh	r2, [r7, #2]
 8005bf6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif
#if (OS_CFG_TS_EN > 0u)
                 p_tcb->TS      = ts;
#endif
             if (p_obj != (OS_PEND_OBJ *)0) {
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <OS_Post+0x5a>
                 OS_PendListRemove(p_tcb);                      /* Remove task from pend list                           */
 8005c00:	68b8      	ldr	r0, [r7, #8]
 8005c02:	f7ff ff7d 	bl	8005b00 <OS_PendListRemove>
             }
#if (OS_CFG_DBG_EN > 0u)
             OS_PendDbgNameRemove(p_obj,
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f7ff feb7 	bl	800597c <OS_PendDbgNameRemove>
                                  p_tcb);
#endif
#if (OS_CFG_TICK_EN > 0u)
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	d102      	bne.n	8005c1e <OS_Post+0x72>
                 OS_TickListRemove(p_tcb);                      /* Remove from tick list                                */
 8005c18:	68b8      	ldr	r0, [r7, #8]
 8005c1a:	f002 fb99 	bl	8008350 <OS_TickListRemove>
             }
#endif
             OS_RdyListInsert(p_tcb);                           /* Insert the task in the ready list                    */
 8005c1e:	68b8      	ldr	r0, [r7, #8]
 8005c20:	f000 f85e 	bl	8005ce0 <OS_RdyListInsert>
             p_tcb->TaskState  = OS_TASK_STATE_RDY;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
             p_tcb->PendStatus = OS_STATUS_PEND_OK;             /* Clear pend status                                    */
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;       /* Indicate no longer pending                           */
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
             break;
 8005c3c:	e026      	b.n	8005c8c <OS_Post+0xe0>

        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
#if (OS_MSG_EN > 0u)
             p_tcb->MsgPtr  = p_void;                           /* Deposit message in OS_TCB of task waiting            */
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	661a      	str	r2, [r3, #96]	@ 0x60
             p_tcb->MsgSize = msg_size;                         /* ... assuming posting a message                       */
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	887a      	ldrh	r2, [r7, #2]
 8005c48:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif
#if (OS_CFG_TS_EN > 0u)
             p_tcb->TS      = ts;
#endif
             if (p_obj != (OS_PEND_OBJ *)0) {
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <OS_Post+0xac>
                 OS_PendListRemove(p_tcb);                      /* Remove from pend list                                */
 8005c52:	68b8      	ldr	r0, [r7, #8]
 8005c54:	f7ff ff54 	bl	8005b00 <OS_PendListRemove>
             }
#if (OS_CFG_DBG_EN > 0u)
             OS_PendDbgNameRemove(p_obj,
 8005c58:	68b9      	ldr	r1, [r7, #8]
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f7ff fe8e 	bl	800597c <OS_PendDbgNameRemove>
                                  p_tcb);
#endif
#if (OS_CFG_TICK_EN > 0u)
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005c66:	2b07      	cmp	r3, #7
 8005c68:	d102      	bne.n	8005c70 <OS_Post+0xc4>
                 OS_TickListRemove(p_tcb);                      /* Cancel any timeout                                   */
 8005c6a:	68b8      	ldr	r0, [r7, #8]
 8005c6c:	f002 fb70 	bl	8008350 <OS_TickListRemove>
             }
#endif
             p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2204      	movs	r2, #4
 8005c74:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
             p_tcb->PendStatus = OS_STATUS_PEND_OK;             /* Clear pend status                                    */
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;       /* Indicate no longer pending                           */
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
             break;
 8005c88:	e000      	b.n	8005c8c <OS_Post+0xe0>

        default:
                                                                /* Default case.                                        */
             break;
 8005c8a:	bf00      	nop
    }
}
 8005c8c:	bf00      	nop
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <OS_RdyListInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInit (void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
    CPU_INT32U    i;
    OS_RDY_LIST  *p_rdy_list;



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                    /* Initialize the array of OS_RDY_LIST at each priority */
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	607b      	str	r3, [r7, #4]
 8005c9e:	e013      	b.n	8005cc8 <OS_RdyListInit+0x34>
        p_rdy_list = &OSRdyList[i];
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4a0c      	ldr	r2, [pc, #48]	@ (8005cdc <OS_RdyListInit+0x48>)
 8005cac:	4413      	add	r3, r2
 8005cae:	603b      	str	r3, [r7, #0]
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries =           0u;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	811a      	strh	r2, [r3, #8]
#endif
        p_rdy_list->HeadPtr    = (OS_TCB *)0;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    = (OS_TCB *)0;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	605a      	str	r2, [r3, #4]
    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                    /* Initialize the array of OS_RDY_LIST at each priority */
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	607b      	str	r3, [r7, #4]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b3f      	cmp	r3, #63	@ 0x3f
 8005ccc:	d9e8      	bls.n	8005ca0 <OS_RdyListInit+0xc>
    }
}
 8005cce:	bf00      	nop
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	200019ec 	.word	0x200019ec

08005ce0 <OS_RdyListInsert>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInsert (OS_TCB  *p_tcb)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
    OS_PrioInsert(p_tcb->Prio);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f001 fa4c 	bl	800718c <OS_PrioInsert>
    if (p_tcb->Prio == OSPrioCur) {                             /* Are we readying a task at the same prio?             */
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 8005cfa:	4b07      	ldr	r3, [pc, #28]	@ (8005d18 <OS_RdyListInsert+0x38>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d103      	bne.n	8005d0a <OS_RdyListInsert+0x2a>
        OS_RdyListInsertTail(p_tcb);                            /* Yes, insert readied task at the end of the list      */
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f84c 	bl	8005da0 <OS_RdyListInsertTail>
    } else {
        OS_RdyListInsertHead(p_tcb);                            /* No,  insert readied task at the beginning of the list*/
    }

    OS_TRACE_TASK_READY(p_tcb);
}
 8005d08:	e002      	b.n	8005d10 <OS_RdyListInsert+0x30>
        OS_RdyListInsertHead(p_tcb);                            /* No,  insert readied task at the beginning of the list*/
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f806 	bl	8005d1c <OS_RdyListInsertHead>
}
 8005d10:	bf00      	nop
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	200019da 	.word	0x200019da

08005d1c <OS_RdyListInsertHead>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertHead (OS_TCB  *p_tcb)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	4413      	add	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4a19      	ldr	r2, [pc, #100]	@ (8005d9c <OS_RdyListInsertHead+0x80>)
 8005d36:	4413      	add	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->HeadPtr == (OS_TCB *)0) {                   /* CASE 0: Insert when there are no entries             */
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10f      	bne.n	8005d62 <OS_RdyListInsertHead+0x46>
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries =           1u;                  /* This is the first entry                              */
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2201      	movs	r2, #1
 8005d46:	811a      	strh	r2, [r3, #8]
#endif
        p_tcb->NextPtr         = (OS_TCB *)0;                   /* No other OS_TCBs in the list                         */
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	611a      	str	r2, [r3, #16]
        p_tcb->PrevPtr         = (OS_TCB *)0;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	615a      	str	r2, [r3, #20]
        p_rdy_list->HeadPtr    =  p_tcb;                        /* Both list pointers point to this OS_TCB              */
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    =  p_tcb;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	605a      	str	r2, [r3, #4]
        p_tcb->PrevPtr         = (OS_TCB *)0;
        p_tcb2                 =  p_rdy_list->HeadPtr;          /* Adjust old head of list's links                      */
        p_tcb2->PrevPtr        =  p_tcb;
        p_rdy_list->HeadPtr    =  p_tcb;
    }
}
 8005d60:	e015      	b.n	8005d8e <OS_RdyListInsertHead+0x72>
        p_rdy_list->NbrEntries++;                               /* One more OS_TCB in the list                          */
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	891b      	ldrh	r3, [r3, #8]
 8005d66:	3301      	adds	r3, #1
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr         =  p_rdy_list->HeadPtr;          /* Adjust new OS_TCBs links                             */
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	611a      	str	r2, [r3, #16]
        p_tcb->PrevPtr         = (OS_TCB *)0;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	615a      	str	r2, [r3, #20]
        p_tcb2                 =  p_rdy_list->HeadPtr;          /* Adjust old head of list's links                      */
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	60bb      	str	r3, [r7, #8]
        p_tcb2->PrevPtr        =  p_tcb;
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	615a      	str	r2, [r3, #20]
        p_rdy_list->HeadPtr    =  p_tcb;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	601a      	str	r2, [r3, #0]
}
 8005d8e:	bf00      	nop
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	200019ec 	.word	0x200019ec

08005da0 <OS_RdyListInsertTail>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertTail (OS_TCB  *p_tcb)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005dae:	461a      	mov	r2, r3
 8005db0:	4613      	mov	r3, r2
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	4413      	add	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4a18      	ldr	r2, [pc, #96]	@ (8005e1c <OS_RdyListInsertTail+0x7c>)
 8005dba:	4413      	add	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->HeadPtr == (OS_TCB *)0) {                   /* CASE 0: Insert when there are no entries             */
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10f      	bne.n	8005de6 <OS_RdyListInsertTail+0x46>
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries  =           1u;                 /* This is the first entry                              */
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	811a      	strh	r2, [r3, #8]
#endif
        p_tcb->NextPtr          = (OS_TCB *)0;                  /* No other OS_TCBs in the list                         */
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	611a      	str	r2, [r3, #16]
        p_tcb->PrevPtr          = (OS_TCB *)0;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	615a      	str	r2, [r3, #20]
        p_rdy_list->HeadPtr     =  p_tcb;                       /* Both list pointers point to this OS_TCB              */
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr     =  p_tcb;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	605a      	str	r2, [r3, #4]
        p_tcb2                  =  p_rdy_list->TailPtr;
        p_tcb->PrevPtr          =  p_tcb2;
        p_tcb2->NextPtr         =  p_tcb;                       /* Adjust old tail of list's links                      */
        p_rdy_list->TailPtr     =  p_tcb;
    }
}
 8005de4:	e014      	b.n	8005e10 <OS_RdyListInsertTail+0x70>
        p_rdy_list->NbrEntries++;                               /* One more OS_TCB in the list                          */
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	891b      	ldrh	r3, [r3, #8]
 8005dea:	3301      	adds	r3, #1
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB *)0;                  /* Adjust new OS_TCBs links                             */
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	611a      	str	r2, [r3, #16]
        p_tcb2                  =  p_rdy_list->TailPtr;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	60bb      	str	r3, [r7, #8]
        p_tcb->PrevPtr          =  p_tcb2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	615a      	str	r2, [r3, #20]
        p_tcb2->NextPtr         =  p_tcb;                       /* Adjust old tail of list's links                      */
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	611a      	str	r2, [r3, #16]
        p_rdy_list->TailPtr     =  p_tcb;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	605a      	str	r2, [r3, #4]
}
 8005e10:	bf00      	nop
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	200019ec 	.word	0x200019ec

08005e20 <OS_RdyListMoveHeadToTail>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListMoveHeadToTail (OS_RDY_LIST  *p_rdy_list)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
    OS_TCB  *p_tcb1;
    OS_TCB  *p_tcb2;
    OS_TCB  *p_tcb3;


     if (p_rdy_list->HeadPtr != p_rdy_list->TailPtr) {
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d03a      	beq.n	8005eaa <OS_RdyListMoveHeadToTail+0x8a>
         if (p_rdy_list->HeadPtr->NextPtr == p_rdy_list->TailPtr) { /* SWAP the TCBs                                    */
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	691a      	ldr	r2, [r3, #16]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d118      	bne.n	8005e74 <OS_RdyListMoveHeadToTail+0x54>
             p_tcb1              =  p_rdy_list->HeadPtr;        /* Point to current head                                */
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	617b      	str	r3, [r7, #20]
             p_tcb2              =  p_rdy_list->TailPtr;        /* Point to current tail                                */
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	613b      	str	r3, [r7, #16]
             p_tcb1->PrevPtr     =  p_tcb2;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	615a      	str	r2, [r3, #20]
             p_tcb1->NextPtr     = (OS_TCB *)0;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	2200      	movs	r2, #0
 8005e58:	611a      	str	r2, [r3, #16]
             p_tcb2->PrevPtr     = (OS_TCB *)0;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	615a      	str	r2, [r3, #20]
             p_tcb2->NextPtr     =  p_tcb1;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	611a      	str	r2, [r3, #16]
             p_rdy_list->HeadPtr =  p_tcb2;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	601a      	str	r2, [r3, #0]
             p_rdy_list->TailPtr =  p_tcb1;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	605a      	str	r2, [r3, #4]
             p_tcb2->NextPtr     =  p_tcb1;                     /* Adjust forward link of old list tail                 */
             p_rdy_list->HeadPtr =  p_tcb3;                     /* Adjust new list head and tail pointers               */
             p_rdy_list->TailPtr =  p_tcb1;
         }
     }
}
 8005e72:	e01a      	b.n	8005eaa <OS_RdyListMoveHeadToTail+0x8a>
             p_tcb1              =  p_rdy_list->HeadPtr;        /* Point to current head                                */
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	617b      	str	r3, [r7, #20]
             p_tcb2              =  p_rdy_list->TailPtr;        /* Point to current tail                                */
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	613b      	str	r3, [r7, #16]
             p_tcb3              =  p_tcb1->NextPtr;            /* Point to new list head                               */
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	60fb      	str	r3, [r7, #12]
             p_tcb3->PrevPtr     = (OS_TCB *)0;                 /* Adjust back    link of new list head                 */
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	615a      	str	r2, [r3, #20]
             p_tcb1->NextPtr     = (OS_TCB *)0;                 /* Adjust forward link of new list tail                 */
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	611a      	str	r2, [r3, #16]
             p_tcb1->PrevPtr     =  p_tcb2;                     /* Adjust back    link of new list tail                 */
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	615a      	str	r2, [r3, #20]
             p_tcb2->NextPtr     =  p_tcb1;                     /* Adjust forward link of old list tail                 */
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	611a      	str	r2, [r3, #16]
             p_rdy_list->HeadPtr =  p_tcb3;                     /* Adjust new list head and tail pointers               */
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	601a      	str	r2, [r3, #0]
             p_rdy_list->TailPtr =  p_tcb1;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	605a      	str	r2, [r3, #4]
}
 8005eaa:	bf00      	nop
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
	...

08005eb8 <OS_RdyListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListRemove (OS_TCB  *p_tcb)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
    OS_TCB       *p_tcb1;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	4613      	mov	r3, r2
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4a24      	ldr	r2, [pc, #144]	@ (8005f64 <OS_RdyListRemove+0xac>)
 8005ed2:	4413      	add	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]
    p_tcb1     = p_tcb->PrevPtr;                                /* Point to next and previous OS_TCB in the list        */
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	613b      	str	r3, [r7, #16]
    p_tcb2     = p_tcb->NextPtr;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {                                /* Was the OS_TCB to remove at the head?                */
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d11f      	bne.n	8005f28 <OS_RdyListRemove+0x70>
        if (p_tcb2 == (OS_TCB *)0) {                            /* Yes, was it the only OS_TCB?                         */
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10f      	bne.n	8005f0e <OS_RdyListRemove+0x56>
#if (OS_CFG_DBG_EN > 0u)
            p_rdy_list->NbrEntries =           0u;              /* Yes, no more entries                                 */
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	811a      	strh	r2, [r3, #8]
#endif
            p_rdy_list->HeadPtr    = (OS_TCB *)0;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	601a      	str	r2, [r3, #0]
            p_rdy_list->TailPtr    = (OS_TCB *)0;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2200      	movs	r2, #0
 8005efe:	605a      	str	r2, [r3, #4]
            OS_PrioRemove(p_tcb->Prio);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005f06:	4618      	mov	r0, r3
 8005f08:	f001 f966 	bl	80071d8 <OS_PrioRemove>
 8005f0c:	e01f      	b.n	8005f4e <OS_RdyListRemove+0x96>
        } else {
#if (OS_CFG_DBG_EN > 0u)
            p_rdy_list->NbrEntries--;                           /* No,  one less entry                                  */
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	891b      	ldrh	r3, [r3, #8]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	811a      	strh	r2, [r3, #8]
#endif
            p_tcb2->PrevPtr     = (OS_TCB *)0;                  /* adjust back link of new list head                    */
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	615a      	str	r2, [r3, #20]
            p_rdy_list->HeadPtr =  p_tcb2;                      /* adjust OS_RDY_LIST's new head                        */
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	e012      	b.n	8005f4e <OS_RdyListRemove+0x96>
        }
    } else {
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries--;                               /* No,  one less entry                                  */
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	891b      	ldrh	r3, [r3, #8]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	811a      	strh	r2, [r3, #8]
#endif
        p_tcb1->NextPtr = p_tcb2;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	611a      	str	r2, [r3, #16]
        if (p_tcb2 == (OS_TCB *)0) {
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d103      	bne.n	8005f48 <OS_RdyListRemove+0x90>
            p_rdy_list->TailPtr = p_tcb1;                       /* Removing the TCB at the tail, adj the tail ptr       */
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	605a      	str	r2, [r3, #4]
 8005f46:	e002      	b.n	8005f4e <OS_RdyListRemove+0x96>
        } else {
            p_tcb2->PrevPtr     = p_tcb1;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	615a      	str	r2, [r3, #20]
        }
    }
    p_tcb->PrevPtr = (OS_TCB *)0;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	615a      	str	r2, [r3, #20]
    p_tcb->NextPtr = (OS_TCB *)0;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	611a      	str	r2, [r3, #16]

    OS_TRACE_TASK_SUSPENDED(p_tcb);
}
 8005f5a:	bf00      	nop
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	200019ec 	.word	0x200019ec

08005f68 <OS_SchedRoundRobin>:
************************************************************************************************************************
*/

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
void  OS_SchedRoundRobin (OS_RDY_LIST  *p_rdy_list)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
    OS_TCB  *p_tcb;
    CPU_SR_ALLOC();
 8005f70:	2300      	movs	r3, #0
 8005f72:	60fb      	str	r3, [r7, #12]


    if (OSSchedRoundRobinEn != OS_TRUE) {                       /* Make sure round-robin has been enabled               */
 8005f74:	4b2b      	ldr	r3, [pc, #172]	@ (8006024 <OS_SchedRoundRobin+0xbc>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d14f      	bne.n	800601c <OS_SchedRoundRobin+0xb4>
        return;
    }

    CPU_CRITICAL_ENTER();
 8005f7c:	2040      	movs	r0, #64	@ 0x40
 8005f7e:	f7fa f93b 	bl	80001f8 <CPU_SR_Save>
 8005f82:	60f8      	str	r0, [r7, #12]
    p_tcb = p_rdy_list->HeadPtr;                                /* Decrement time quanta counter                        */
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	60bb      	str	r3, [r7, #8]

    if (p_tcb == (OS_TCB *)0) {
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d103      	bne.n	8005f98 <OS_SchedRoundRobin+0x30>
        CPU_CRITICAL_EXIT();
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f7fa f93f 	bl	8000214 <CPU_SR_Restore>
        return;
 8005f96:	e042      	b.n	800601e <OS_SchedRoundRobin+0xb6>
    }

#if (OS_CFG_TASK_IDLE_EN > 0u)
    if (p_tcb == &OSIdleTaskTCB) {
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4a23      	ldr	r2, [pc, #140]	@ (8006028 <OS_SchedRoundRobin+0xc0>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d103      	bne.n	8005fa8 <OS_SchedRoundRobin+0x40>
        CPU_CRITICAL_EXIT();
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f7fa f937 	bl	8000214 <CPU_SR_Restore>
        return;
 8005fa6:	e03a      	b.n	800601e <OS_SchedRoundRobin+0xb6>
    }
#endif

    if (p_tcb->TimeQuantaCtr > 0u) {
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d004      	beq.n	8005fba <OS_SchedRoundRobin+0x52>
        p_tcb->TimeQuantaCtr--;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fb4:	1e5a      	subs	r2, r3, #1
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if (p_tcb->TimeQuantaCtr > 0u) {                            /* Task not done with its time quanta                   */
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <OS_SchedRoundRobin+0x62>
        CPU_CRITICAL_EXIT();
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f7fa f926 	bl	8000214 <CPU_SR_Restore>
        return;
 8005fc8:	e029      	b.n	800601e <OS_SchedRoundRobin+0xb6>
    }

    if (p_rdy_list->HeadPtr == p_rdy_list->TailPtr) {           /* See if it's time to time slice current task          */
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d103      	bne.n	8005fde <OS_SchedRoundRobin+0x76>
        CPU_CRITICAL_EXIT();                                    /* ... only if multiple tasks at same priority          */
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f7fa f91c 	bl	8000214 <CPU_SR_Restore>
        return;
 8005fdc:	e01f      	b.n	800601e <OS_SchedRoundRobin+0xb6>
    }

    if (OSSchedLockNestingCtr > 0u) {                           /* Can't round-robin if the scheduler is locked         */
 8005fde:	4b13      	ldr	r3, [pc, #76]	@ (800602c <OS_SchedRoundRobin+0xc4>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <OS_SchedRoundRobin+0x86>
        CPU_CRITICAL_EXIT();
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f7fa f914 	bl	8000214 <CPU_SR_Restore>
        return;
 8005fec:	e017      	b.n	800601e <OS_SchedRoundRobin+0xb6>
    }

    OS_RdyListMoveHeadToTail(p_rdy_list);                       /* Move current OS_TCB to the end of the list           */
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7ff ff16 	bl	8005e20 <OS_RdyListMoveHeadToTail>
    p_tcb = p_rdy_list->HeadPtr;                                /* Point to new OS_TCB at head of the list              */
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	60bb      	str	r3, [r7, #8]
    if (p_tcb->TimeQuanta == 0u) {                              /* See if we need to use the default time slice         */
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d104      	bne.n	800600c <OS_SchedRoundRobin+0xa4>
        p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta;
 8006002:	4b0b      	ldr	r3, [pc, #44]	@ (8006030 <OS_SchedRoundRobin+0xc8>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	65da      	str	r2, [r3, #92]	@ 0x5c
 800600a:	e003      	b.n	8006014 <OS_SchedRoundRobin+0xac>
    } else {
        p_tcb->TimeQuantaCtr = p_tcb->TimeQuanta;               /* Load time slice counter with new time                */
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    CPU_CRITICAL_EXIT();
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f7fa f8fd 	bl	8000214 <CPU_SR_Restore>
 800601a:	e000      	b.n	800601e <OS_SchedRoundRobin+0xb6>
        return;
 800601c:	bf00      	nop
}
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	20001cf4 	.word	0x20001cf4
 8006028:	200018e8 	.word	0x200018e8
 800602c:	20001cec 	.word	0x20001cec
 8006030:	20001cf0 	.word	0x20001cf0

08006034 <OS_TaskBlock>:
************************************************************************************************************************
*/

void  OS_TaskBlock (OS_TCB   *p_tcb,
                    OS_TICK   timeout)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]

    elapsed = OS_DynTickGet();
#endif

#if (OS_CFG_TICK_EN > 0u)
    if (timeout > 0u) {                                         /* Add task to tick list if timeout non zero            */
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00b      	beq.n	800605c <OS_TaskBlock+0x28>
#if (OS_CFG_DYN_TICK_EN > 0u)
        (void)OS_TickListInsert(p_tcb, elapsed, (OSTickCtr + elapsed), timeout);
#else
        (void)OS_TickListInsert(p_tcb,      0u,             OSTickCtr, timeout);
 8006044:	4b0b      	ldr	r3, [pc, #44]	@ (8006074 <OS_TaskBlock+0x40>)
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2100      	movs	r1, #0
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f002 f86d 	bl	800812c <OS_TickListInsert>
#endif
        p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2203      	movs	r2, #3
 8006056:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800605a:	e003      	b.n	8006064 <OS_TaskBlock+0x30>
    } else {
        p_tcb->TaskState = OS_TASK_STATE_PEND;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
#else
    (void)timeout;
    p_tcb->TaskState = OS_TASK_STATE_PEND;
#endif
    OS_RdyListRemove(p_tcb);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff ff27 	bl	8005eb8 <OS_RdyListRemove>
}
 800606a:	bf00      	nop
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20001de4 	.word	0x20001de4

08006078 <OS_Dbg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OS_Dbg_Init (void)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
    CPU_INT08U const * volatile  p_temp08;
    CPU_INT16U const * volatile  p_temp16;
    CPU_INT32U const * volatile  p_temp32;


    p_temp08 = (CPU_INT08U const *)&OSDbg_DbgEn;
 800607e:	4b4a      	ldr	r3, [pc, #296]	@ (80061a8 <OS_Dbg_Init+0x130>)
 8006080:	60fb      	str	r3, [r7, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_DataSize;
 8006082:	4b4a      	ldr	r3, [pc, #296]	@ (80061ac <OS_Dbg_Init+0x134>)
 8006084:	607b      	str	r3, [r7, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_ArgChkEn;
 8006086:	4b4a      	ldr	r3, [pc, #296]	@ (80061b0 <OS_Dbg_Init+0x138>)
 8006088:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_AppHooksEn;
 800608a:	4b4a      	ldr	r3, [pc, #296]	@ (80061b4 <OS_Dbg_Init+0x13c>)
 800608c:	60fb      	str	r3, [r7, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_EndiannessTest;
 800608e:	4b4a      	ldr	r3, [pc, #296]	@ (80061b8 <OS_Dbg_Init+0x140>)
 8006090:	607b      	str	r3, [r7, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_CalledFromISRChkEn;
 8006092:	4b4a      	ldr	r3, [pc, #296]	@ (80061bc <OS_Dbg_Init+0x144>)
 8006094:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrp;
 8006096:	4b4a      	ldr	r3, [pc, #296]	@ (80061c0 <OS_Dbg_Init+0x148>)
 8006098:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagEn;
 800609a:	4b4a      	ldr	r3, [pc, #296]	@ (80061c4 <OS_Dbg_Init+0x14c>)
 800609c:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_FLAG_EN > 0u)
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagDelEn;
 800609e:	4b4a      	ldr	r3, [pc, #296]	@ (80061c8 <OS_Dbg_Init+0x150>)
 80060a0:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagModeClrEn;
 80060a2:	4b4a      	ldr	r3, [pc, #296]	@ (80061cc <OS_Dbg_Init+0x154>)
 80060a4:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagPendAbortEn;
 80060a6:	4b4a      	ldr	r3, [pc, #296]	@ (80061d0 <OS_Dbg_Init+0x158>)
 80060a8:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrpSize;
 80060aa:	4b4a      	ldr	r3, [pc, #296]	@ (80061d4 <OS_Dbg_Init+0x15c>)
 80060ac:	60bb      	str	r3, [r7, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagWidth;
 80060ae:	4b4a      	ldr	r3, [pc, #296]	@ (80061d8 <OS_Dbg_Init+0x160>)
 80060b0:	60bb      	str	r3, [r7, #8]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mem;
 80060b2:	4b4a      	ldr	r3, [pc, #296]	@ (80061dc <OS_Dbg_Init+0x164>)
 80060b4:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MemEn;
 80060b6:	4b4a      	ldr	r3, [pc, #296]	@ (80061e0 <OS_Dbg_Init+0x168>)
 80060b8:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_MEM_EN > 0u)
    p_temp16 = (CPU_INT16U const *)&OSDbg_MemSize;
 80060ba:	4b4a      	ldr	r3, [pc, #296]	@ (80061e4 <OS_Dbg_Init+0x16c>)
 80060bc:	60bb      	str	r3, [r7, #8]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_MsgEn;
 80060be:	4b4a      	ldr	r3, [pc, #296]	@ (80061e8 <OS_Dbg_Init+0x170>)
 80060c0:	60fb      	str	r3, [r7, #12]
#if (OS_MSG_EN > 0u)
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgSize;
 80060c2:	4b4a      	ldr	r3, [pc, #296]	@ (80061ec <OS_Dbg_Init+0x174>)
 80060c4:	60bb      	str	r3, [r7, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgPoolSize;
 80060c6:	4b4a      	ldr	r3, [pc, #296]	@ (80061f0 <OS_Dbg_Init+0x178>)
 80060c8:	60bb      	str	r3, [r7, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgQSize;
 80060ca:	4b4a      	ldr	r3, [pc, #296]	@ (80061f4 <OS_Dbg_Init+0x17c>)
 80060cc:	60bb      	str	r3, [r7, #8]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mutex;
 80060ce:	4b4a      	ldr	r3, [pc, #296]	@ (80061f8 <OS_Dbg_Init+0x180>)
 80060d0:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexEn;
 80060d2:	4b4a      	ldr	r3, [pc, #296]	@ (80061fc <OS_Dbg_Init+0x184>)
 80060d4:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_MUTEX_EN > 0u)
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexDelEn;
 80060d6:	4b4a      	ldr	r3, [pc, #296]	@ (8006200 <OS_Dbg_Init+0x188>)
 80060d8:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexPendAbortEn;
 80060da:	4b4a      	ldr	r3, [pc, #296]	@ (8006204 <OS_Dbg_Init+0x18c>)
 80060dc:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MutexSize;
 80060de:	4b4a      	ldr	r3, [pc, #296]	@ (8006208 <OS_Dbg_Init+0x190>)
 80060e0:	60bb      	str	r3, [r7, #8]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_ObjTypeChkEn;
 80060e2:	4b4a      	ldr	r3, [pc, #296]	@ (800620c <OS_Dbg_Init+0x194>)
 80060e4:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_ObjCreatedChkEn;
 80060e6:	4b4a      	ldr	r3, [pc, #296]	@ (8006210 <OS_Dbg_Init+0x198>)
 80060e8:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PendListSize;
 80060ea:	4b4a      	ldr	r3, [pc, #296]	@ (8006214 <OS_Dbg_Init+0x19c>)
 80060ec:	60bb      	str	r3, [r7, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendObjSize;
 80060ee:	4b4a      	ldr	r3, [pc, #296]	@ (8006218 <OS_Dbg_Init+0x1a0>)
 80060f0:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioMax;
 80060f2:	4b4a      	ldr	r3, [pc, #296]	@ (800621c <OS_Dbg_Init+0x1a4>)
 80060f4:	60bb      	str	r3, [r7, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioTblSize;
 80060f6:	4b4a      	ldr	r3, [pc, #296]	@ (8006220 <OS_Dbg_Init+0x1a8>)
 80060f8:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PtrSize;
 80060fa:	4b4a      	ldr	r3, [pc, #296]	@ (8006224 <OS_Dbg_Init+0x1ac>)
 80060fc:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Q;
 80060fe:	4b4a      	ldr	r3, [pc, #296]	@ (8006228 <OS_Dbg_Init+0x1b0>)
 8006100:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QEn;
 8006102:	4b4a      	ldr	r3, [pc, #296]	@ (800622c <OS_Dbg_Init+0x1b4>)
 8006104:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_Q_EN > 0u)
    p_temp08 = (CPU_INT08U const *)&OSDbg_QDelEn;
 8006106:	4b4a      	ldr	r3, [pc, #296]	@ (8006230 <OS_Dbg_Init+0x1b8>)
 8006108:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QFlushEn;
 800610a:	4b4a      	ldr	r3, [pc, #296]	@ (8006234 <OS_Dbg_Init+0x1bc>)
 800610c:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QPendAbortEn;
 800610e:	4b4a      	ldr	r3, [pc, #296]	@ (8006238 <OS_Dbg_Init+0x1c0>)
 8006110:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_QSize;
 8006112:	4b4a      	ldr	r3, [pc, #296]	@ (800623c <OS_Dbg_Init+0x1c4>)
 8006114:	60bb      	str	r3, [r7, #8]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_SchedRoundRobinEn;
 8006116:	4b4a      	ldr	r3, [pc, #296]	@ (8006240 <OS_Dbg_Init+0x1c8>)
 8006118:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Sem;
 800611a:	4b4a      	ldr	r3, [pc, #296]	@ (8006244 <OS_Dbg_Init+0x1cc>)
 800611c:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemEn;
 800611e:	4b4a      	ldr	r3, [pc, #296]	@ (8006248 <OS_Dbg_Init+0x1d0>)
 8006120:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_SEM_EN > 0u)
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemDelEn;
 8006122:	4b4a      	ldr	r3, [pc, #296]	@ (800624c <OS_Dbg_Init+0x1d4>)
 8006124:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemPendAbortEn;
 8006126:	4b4a      	ldr	r3, [pc, #296]	@ (8006250 <OS_Dbg_Init+0x1d8>)
 8006128:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSetEn;
 800612a:	4b4a      	ldr	r3, [pc, #296]	@ (8006254 <OS_Dbg_Init+0x1dc>)
 800612c:	60bb      	str	r3, [r7, #8]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSize;
 800612e:	4b4a      	ldr	r3, [pc, #296]	@ (8006258 <OS_Dbg_Init+0x1e0>)
 8006130:	60bb      	str	r3, [r7, #8]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_RdyList;
 8006132:	4b4a      	ldr	r3, [pc, #296]	@ (800625c <OS_Dbg_Init+0x1e4>)
 8006134:	60bb      	str	r3, [r7, #8]
    p_temp32 = (CPU_INT32U const *)&OSDbg_RdyListSize;
 8006136:	4b4a      	ldr	r3, [pc, #296]	@ (8006260 <OS_Dbg_Init+0x1e8>)
 8006138:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_StkWidth;
 800613a:	4b4a      	ldr	r3, [pc, #296]	@ (8006264 <OS_Dbg_Init+0x1ec>)
 800613c:	60bb      	str	r3, [r7, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskEn;
 800613e:	4b4a      	ldr	r3, [pc, #296]	@ (8006268 <OS_Dbg_Init+0x1f0>)
 8006140:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskStkChkEn;
 8006142:	4b4a      	ldr	r3, [pc, #296]	@ (800626c <OS_Dbg_Init+0x1f4>)
 8006144:	60fb      	str	r3, [r7, #12]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskChangePrioEn;
 8006146:	4b4a      	ldr	r3, [pc, #296]	@ (8006270 <OS_Dbg_Init+0x1f8>)
 8006148:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskDelEn;
 800614a:	4b4a      	ldr	r3, [pc, #296]	@ (8006274 <OS_Dbg_Init+0x1fc>)
 800614c:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQEn;
 800614e:	4b4a      	ldr	r3, [pc, #296]	@ (8006278 <OS_Dbg_Init+0x200>)
 8006150:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQPendAbortEn;
 8006152:	4b4a      	ldr	r3, [pc, #296]	@ (800627c <OS_Dbg_Init+0x204>)
 8006154:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskProfileEn;
 8006156:	4b4a      	ldr	r3, [pc, #296]	@ (8006280 <OS_Dbg_Init+0x208>)
 8006158:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TaskRegTblSize;
 800615a:	4b4a      	ldr	r3, [pc, #296]	@ (8006284 <OS_Dbg_Init+0x20c>)
 800615c:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSemPendAbortEn;
 800615e:	4b4a      	ldr	r3, [pc, #296]	@ (8006288 <OS_Dbg_Init+0x210>)
 8006160:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSuspendEn;
 8006162:	4b4a      	ldr	r3, [pc, #296]	@ (800628c <OS_Dbg_Init+0x214>)
 8006164:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TCBSize;
 8006166:	4b4a      	ldr	r3, [pc, #296]	@ (8006290 <OS_Dbg_Init+0x218>)
 8006168:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TickListSize;
 800616a:	4b4a      	ldr	r3, [pc, #296]	@ (8006294 <OS_Dbg_Init+0x21c>)
 800616c:	60bb      	str	r3, [r7, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyHMSMEn;
 800616e:	4b4a      	ldr	r3, [pc, #296]	@ (8006298 <OS_Dbg_Init+0x220>)
 8006170:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyResumeEn;
 8006172:	4b4a      	ldr	r3, [pc, #296]	@ (800629c <OS_Dbg_Init+0x224>)
 8006174:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TLS_TblSize;
 8006176:	4b4a      	ldr	r3, [pc, #296]	@ (80062a0 <OS_Dbg_Init+0x228>)
 8006178:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Tmr;
 800617a:	4b4a      	ldr	r3, [pc, #296]	@ (80062a4 <OS_Dbg_Init+0x22c>)
 800617c:	60bb      	str	r3, [r7, #8]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrEn;
 800617e:	4b4a      	ldr	r3, [pc, #296]	@ (80062a8 <OS_Dbg_Init+0x230>)
 8006180:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_TMR_EN > 0u)
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrDelEn;
 8006182:	4b4a      	ldr	r3, [pc, #296]	@ (80062ac <OS_Dbg_Init+0x234>)
 8006184:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TmrSize;
 8006186:	4b4a      	ldr	r3, [pc, #296]	@ (80062b0 <OS_Dbg_Init+0x238>)
 8006188:	60bb      	str	r3, [r7, #8]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_VersionNbr;
 800618a:	4b4a      	ldr	r3, [pc, #296]	@ (80062b4 <OS_Dbg_Init+0x23c>)
 800618c:	60bb      	str	r3, [r7, #8]

    p_temp08 = p_temp08;                                     /* Prevent compiler warning for not using 'p_temp'        */
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	60fb      	str	r3, [r7, #12]
    p_temp16 = p_temp16;
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	60bb      	str	r3, [r7, #8]
    p_temp32 = p_temp32;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	607b      	str	r3, [r7, #4]
}
 800619a:	bf00      	nop
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	08008f64 	.word	0x08008f64
 80061ac:	080090bc 	.word	0x080090bc
 80061b0:	08008f65 	.word	0x08008f65
 80061b4:	08008f66 	.word	0x08008f66
 80061b8:	08008f68 	.word	0x08008f68
 80061bc:	08008f6c 	.word	0x08008f6c
 80061c0:	08008f70 	.word	0x08008f70
 80061c4:	08008f6d 	.word	0x08008f6d
 80061c8:	08008f94 	.word	0x08008f94
 80061cc:	08008f95 	.word	0x08008f95
 80061d0:	08008f96 	.word	0x08008f96
 80061d4:	08008f98 	.word	0x08008f98
 80061d8:	08008f9a 	.word	0x08008f9a
 80061dc:	08008f9c 	.word	0x08008f9c
 80061e0:	08008fbc 	.word	0x08008fbc
 80061e4:	08008fbe 	.word	0x08008fbe
 80061e8:	08008fc0 	.word	0x08008fc0
 80061ec:	08008fc2 	.word	0x08008fc2
 80061f0:	08008fc4 	.word	0x08008fc4
 80061f4:	08008fc6 	.word	0x08008fc6
 80061f8:	08008fc8 	.word	0x08008fc8
 80061fc:	08008ff4 	.word	0x08008ff4
 8006200:	08008ff5 	.word	0x08008ff5
 8006204:	08008ff6 	.word	0x08008ff6
 8006208:	08008ff8 	.word	0x08008ff8
 800620c:	08008ffa 	.word	0x08008ffa
 8006210:	08008ffb 	.word	0x08008ffb
 8006214:	08008ffc 	.word	0x08008ffc
 8006218:	08008ffe 	.word	0x08008ffe
 800621c:	08009000 	.word	0x08009000
 8006220:	08009002 	.word	0x08009002
 8006224:	08009004 	.word	0x08009004
 8006228:	08009008 	.word	0x08009008
 800622c:	08009038 	.word	0x08009038
 8006230:	08009039 	.word	0x08009039
 8006234:	0800903a 	.word	0x0800903a
 8006238:	0800903b 	.word	0x0800903b
 800623c:	0800903c 	.word	0x0800903c
 8006240:	0800903e 	.word	0x0800903e
 8006244:	08009040 	.word	0x08009040
 8006248:	08009064 	.word	0x08009064
 800624c:	08009065 	.word	0x08009065
 8006250:	08009066 	.word	0x08009066
 8006254:	08009067 	.word	0x08009067
 8006258:	08009068 	.word	0x08009068
 800625c:	0800906a 	.word	0x0800906a
 8006260:	0800906c 	.word	0x0800906c
 8006264:	08009070 	.word	0x08009070
 8006268:	08009071 	.word	0x08009071
 800626c:	08009072 	.word	0x08009072
 8006270:	08009073 	.word	0x08009073
 8006274:	08009074 	.word	0x08009074
 8006278:	08009075 	.word	0x08009075
 800627c:	08009076 	.word	0x08009076
 8006280:	08009077 	.word	0x08009077
 8006284:	08009078 	.word	0x08009078
 8006288:	0800907a 	.word	0x0800907a
 800628c:	0800907b 	.word	0x0800907b
 8006290:	0800907c 	.word	0x0800907c
 8006294:	0800907e 	.word	0x0800907e
 8006298:	08009080 	.word	0x08009080
 800629c:	08009081 	.word	0x08009081
 80062a0:	08009082 	.word	0x08009082
 80062a4:	08009084 	.word	0x08009084
 80062a8:	080090b4 	.word	0x080090b4
 80062ac:	080090b5 	.word	0x080090b5
 80062b0:	080090b6 	.word	0x080090b6
 80062b4:	080090b8 	.word	0x080090b8

080062b8 <OSFlagCreate>:

void  OSFlagCreate (OS_FLAG_GRP  *p_grp,
                    CPU_CHAR     *p_name,
                    OS_FLAGS      flags,
                    OS_ERR       *p_err)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	603b      	str	r3, [r7, #0]
    CPU_SR_ALLOC();
 80062c6:	2300      	movs	r3, #0
 80062c8:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* See if called from ISR ...                           */
 80062ca:	4b21      	ldr	r3, [pc, #132]	@ (8006350 <OSFlagCreate+0x98>)
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d004      	beq.n	80062dc <OSFlagCreate+0x24>
       *p_err = OS_ERR_CREATE_ISR;                              /* ... can't CREATE from an ISR                         */
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	f642 62e1 	movw	r2, #12001	@ 0x2ee1
 80062d8:	801a      	strh	r2, [r3, #0]
        return;
 80062da:	e035      	b.n	8006348 <OSFlagCreate+0x90>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_grp == (OS_FLAG_GRP *)0) {                            /* Validate 'p_grp'                                     */
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d104      	bne.n	80062ec <OSFlagCreate+0x34>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 80062e8:	801a      	strh	r2, [r3, #0]
        return;
 80062ea:	e02d      	b.n	8006348 <OSFlagCreate+0x90>
    }
#endif

    CPU_CRITICAL_ENTER();
 80062ec:	2040      	movs	r0, #64	@ 0x40
 80062ee:	f7f9 ff83 	bl	80001f8 <CPU_SR_Save>
 80062f2:	6178      	str	r0, [r7, #20]
#if (OS_OBJ_TYPE_REQ > 0u)
#if (OS_CFG_OBJ_CREATED_CHK_EN > 0u)
    if (p_grp->Type == OS_OBJ_TYPE_FLAG) {
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a16      	ldr	r2, [pc, #88]	@ (8006354 <OSFlagCreate+0x9c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d107      	bne.n	800630e <OSFlagCreate+0x56>
        CPU_CRITICAL_EXIT();
 80062fe:	6978      	ldr	r0, [r7, #20]
 8006300:	f7f9 ff88 	bl	8000214 <CPU_SR_Restore>
        *p_err = OS_ERR_OBJ_CREATED;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	f645 52c1 	movw	r2, #24001	@ 0x5dc1
 800630a:	801a      	strh	r2, [r3, #0]
        return;
 800630c:	e01c      	b.n	8006348 <OSFlagCreate+0x90>
    }
#endif
    p_grp->Type    = OS_OBJ_TYPE_FLAG;                          /* Set to event flag group type                         */
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4a10      	ldr	r2, [pc, #64]	@ (8006354 <OSFlagCreate+0x9c>)
 8006312:	601a      	str	r2, [r3, #0]
#endif
#if (OS_CFG_DBG_EN > 0u)
    p_grp->NamePtr = p_name;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	605a      	str	r2, [r3, #4]
#else
    (void)p_name;
#endif
    p_grp->Flags   = flags;                                     /* Set to desired initial value                         */
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	621a      	str	r2, [r3, #32]
#if (OS_CFG_TS_EN > 0u)
    p_grp->TS      = 0u;
#endif
    OS_PendListInit(&p_grp->PendList);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3308      	adds	r3, #8
 8006324:	4618      	mov	r0, r3
 8006326:	f7ff fb6c 	bl	8005a02 <OS_PendListInit>

#if (OS_CFG_DBG_EN > 0u)
    OS_FlagDbgListAdd(p_grp);
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 fbb0 	bl	8006a90 <OS_FlagDbgListAdd>
    OSFlagQty++;
 8006330:	4b09      	ldr	r3, [pc, #36]	@ (8006358 <OSFlagCreate+0xa0>)
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	3301      	adds	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	4b07      	ldr	r3, [pc, #28]	@ (8006358 <OSFlagCreate+0xa0>)
 800633a:	801a      	strh	r2, [r3, #0]
#endif

    OS_TRACE_FLAG_CREATE(p_grp, p_name);

    CPU_CRITICAL_EXIT();
 800633c:	6978      	ldr	r0, [r7, #20]
 800633e:	f7f9 ff69 	bl	8000214 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2200      	movs	r2, #0
 8006346:	801a      	strh	r2, [r3, #0]
}
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	200019ac 	.word	0x200019ac
 8006354:	47414c46 	.word	0x47414c46
 8006358:	200019bc 	.word	0x200019bc

0800635c <OSFlagPend>:
                      OS_FLAGS      flags,
                      OS_TICK       timeout,
                      OS_OPT        opt,
                      CPU_TS       *p_ts,
                      OS_ERR       *p_err)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	807b      	strh	r3, [r7, #2]
    CPU_BOOLEAN  consume;
    OS_FLAGS     flags_rdy;
    OS_OPT       mode;
    CPU_SR_ALLOC();
 800636a:	2300      	movs	r3, #0
 800636c:	61bb      	str	r3, [r7, #24]
        return ((OS_FLAGS)0);
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* See if called from ISR ...                           */
 800636e:	4ba1      	ldr	r3, [pc, #644]	@ (80065f4 <OSFlagPend+0x298>)
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d009      	beq.n	800638a <OSFlagPend+0x2e>
        if ((opt & OS_OPT_PEND_NON_BLOCKING) != OS_OPT_PEND_NON_BLOCKING) {
 8006376:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800637a:	2b00      	cmp	r3, #0
 800637c:	db05      	blt.n	800638a <OSFlagPend+0x2e>
           *p_err = OS_ERR_PEND_ISR;                            /* ... can't PEND from an ISR                           */
 800637e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006380:	f246 12ae 	movw	r2, #25006	@ 0x61ae
 8006384:	801a      	strh	r2, [r3, #0]
            OS_TRACE_FLAG_PEND_FAILED(p_grp);
            OS_TRACE_FLAG_PEND_EXIT(OS_ERR_PEND_ISR);
            return ((OS_FLAGS)0);
 8006386:	2300      	movs	r3, #0
 8006388:	e249      	b.n	800681e <OSFlagPend+0x4c2>
        }
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 800638a:	4b9b      	ldr	r3, [pc, #620]	@ (80065f8 <OSFlagPend+0x29c>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d005      	beq.n	800639e <OSFlagPend+0x42>
        OS_TRACE_FLAG_PEND_EXIT(OS_ERR_OS_NOT_RUNNING);
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8006392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006394:	f645 6289 	movw	r2, #24201	@ 0x5e89
 8006398:	801a      	strh	r2, [r3, #0]
        return (0u);
 800639a:	2300      	movs	r3, #0
 800639c:	e23f      	b.n	800681e <OSFlagPend+0x4c2>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_grp == (OS_FLAG_GRP *)0) {                            /* Validate 'p_grp'                                     */
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d105      	bne.n	80063b0 <OSFlagPend+0x54>
        OS_TRACE_FLAG_PEND_FAILED(p_grp);
        OS_TRACE_FLAG_PEND_EXIT(OS_ERR_OBJ_PTR_NULL);
       *p_err = OS_ERR_OBJ_PTR_NULL;
 80063a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a6:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 80063aa:	801a      	strh	r2, [r3, #0]
        return (0u);
 80063ac:	2300      	movs	r3, #0
 80063ae:	e236      	b.n	800681e <OSFlagPend+0x4c2>
    }
    switch (opt) {                                              /* Validate 'opt'                                       */
 80063b0:	887b      	ldrh	r3, [r7, #2]
 80063b2:	f248 1208 	movw	r2, #33032	@ 0x8108
 80063b6:	4293      	cmp	r3, r2
 80063b8:	dc51      	bgt.n	800645e <OSFlagPend+0x102>
 80063ba:	f5b3 4f01 	cmp.w	r3, #33024	@ 0x8100
 80063be:	dc0b      	bgt.n	80063d8 <OSFlagPend+0x7c>
 80063c0:	f248 0208 	movw	r2, #32776	@ 0x8008
 80063c4:	4293      	cmp	r3, r2
 80063c6:	dc4a      	bgt.n	800645e <OSFlagPend+0x102>
 80063c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063cc:	dc14      	bgt.n	80063f8 <OSFlagPend+0x9c>
 80063ce:	2b08      	cmp	r3, #8
 80063d0:	dc3f      	bgt.n	8006452 <OSFlagPend+0xf6>
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	dc2f      	bgt.n	8006436 <OSFlagPend+0xda>
 80063d6:	e042      	b.n	800645e <OSFlagPend+0x102>
 80063d8:	f5a3 4301 	sub.w	r3, r3, #33024	@ 0x8100
 80063dc:	3b01      	subs	r3, #1
 80063de:	228b      	movs	r2, #139	@ 0x8b
 80063e0:	fa22 f303 	lsr.w	r3, r2, r3
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	bf14      	ite	ne
 80063ec:	2301      	movne	r3, #1
 80063ee:	2300      	moveq	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d139      	bne.n	800646a <OSFlagPend+0x10e>
 80063f6:	e032      	b.n	800645e <OSFlagPend+0x102>
 80063f8:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80063fc:	3b01      	subs	r3, #1
 80063fe:	228b      	movs	r2, #139	@ 0x8b
 8006400:	fa22 f303 	lsr.w	r3, r2, r3
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	bf14      	ite	ne
 800640c:	2301      	movne	r3, #1
 800640e:	2300      	moveq	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d129      	bne.n	800646a <OSFlagPend+0x10e>
 8006416:	e022      	b.n	800645e <OSFlagPend+0x102>
 8006418:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800641c:	228b      	movs	r2, #139	@ 0x8b
 800641e:	fa22 f303 	lsr.w	r3, r2, r3
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	bf14      	ite	ne
 800642a:	2301      	movne	r3, #1
 800642c:	2300      	moveq	r3, #0
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d11a      	bne.n	800646a <OSFlagPend+0x10e>
 8006434:	e013      	b.n	800645e <OSFlagPend+0x102>
 8006436:	461a      	mov	r2, r3
 8006438:	f44f 738b 	mov.w	r3, #278	@ 0x116
 800643c:	40d3      	lsrs	r3, r2
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	bf14      	ite	ne
 8006446:	2301      	movne	r3, #1
 8006448:	2300      	moveq	r3, #0
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10c      	bne.n	800646a <OSFlagPend+0x10e>
 8006450:	e005      	b.n	800645e <OSFlagPend+0x102>
 8006452:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8006456:	dc02      	bgt.n	800645e <OSFlagPend+0x102>
 8006458:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800645c:	dcdc      	bgt.n	8006418 <OSFlagPend+0xbc>
             break;

        default:
             OS_TRACE_FLAG_PEND_FAILED(p_grp);
             OS_TRACE_FLAG_PEND_EXIT(OS_ERR_OPT_INVALID);
            *p_err = OS_ERR_OPT_INVALID;
 800645e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006460:	f645 6225 	movw	r2, #24101	@ 0x5e25
 8006464:	801a      	strh	r2, [r3, #0]
             return (0u);
 8006466:	2300      	movs	r3, #0
 8006468:	e1d9      	b.n	800681e <OSFlagPend+0x4c2>
             break;
 800646a:	bf00      	nop
    }
#endif

#if (OS_CFG_OBJ_TYPE_CHK_EN > 0u)
    if (p_grp->Type != OS_OBJ_TYPE_FLAG) {                      /* Validate that we are pointing at an event flag       */
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a62      	ldr	r2, [pc, #392]	@ (80065fc <OSFlagPend+0x2a0>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d005      	beq.n	8006482 <OSFlagPend+0x126>
        OS_TRACE_FLAG_PEND_FAILED(p_grp);
        OS_TRACE_FLAG_PEND_EXIT(OS_ERR_OBJ_TYPE);
       *p_err = OS_ERR_OBJ_TYPE;
 8006476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006478:	f645 52c4 	movw	r2, #24004	@ 0x5dc4
 800647c:	801a      	strh	r2, [r3, #0]
        return (0u);
 800647e:	2300      	movs	r3, #0
 8006480:	e1cd      	b.n	800681e <OSFlagPend+0x4c2>
    }
#endif

    if ((opt & OS_OPT_PEND_FLAG_CONSUME) != 0u) {               /* See if we need to consume the flags                  */
 8006482:	887b      	ldrh	r3, [r7, #2]
 8006484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <OSFlagPend+0x136>
        consume = OS_TRUE;
 800648c:	2301      	movs	r3, #1
 800648e:	77fb      	strb	r3, [r7, #31]
 8006490:	e001      	b.n	8006496 <OSFlagPend+0x13a>
    } else {
        consume = OS_FALSE;
 8006492:	2300      	movs	r3, #0
 8006494:	77fb      	strb	r3, [r7, #31]
    }

    if (p_ts != (CPU_TS *)0) {
 8006496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <OSFlagPend+0x146>
       *p_ts = 0u;                                              /* Initialize the returned timestamp                    */
 800649c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]
    }

    mode = opt & OS_OPT_PEND_FLAG_MASK;
 80064a2:	887b      	ldrh	r3, [r7, #2]
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	82fb      	strh	r3, [r7, #22]
    CPU_CRITICAL_ENTER();
 80064aa:	2040      	movs	r0, #64	@ 0x40
 80064ac:	f7f9 fea4 	bl	80001f8 <CPU_SR_Save>
 80064b0:	61b8      	str	r0, [r7, #24]
    switch (mode) {
 80064b2:	8afb      	ldrh	r3, [r7, #22]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	2b07      	cmp	r3, #7
 80064b8:	f200 812d 	bhi.w	8006716 <OSFlagPend+0x3ba>
 80064bc:	a201      	add	r2, pc, #4	@ (adr r2, 80064c4 <OSFlagPend+0x168>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	08006609 	.word	0x08006609
 80064c8:	08006691 	.word	0x08006691
 80064cc:	08006717 	.word	0x08006717
 80064d0:	080064e5 	.word	0x080064e5
 80064d4:	08006717 	.word	0x08006717
 80064d8:	08006717 	.word	0x08006717
 80064dc:	08006717 	.word	0x08006717
 80064e0:	0800656d 	.word	0x0800656d
        case OS_OPT_PEND_FLAG_SET_ALL:                          /* See if all required flags are set                    */
             flags_rdy = (p_grp->Flags & flags);                /* Extract only the bits we want                        */
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	4013      	ands	r3, r2
 80064ec:	613b      	str	r3, [r7, #16]
             if (flags_rdy == flags) {                          /* Must match ALL the bits that we want                 */
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d116      	bne.n	8006524 <OSFlagPend+0x1c8>
                 if (consume == OS_TRUE) {                      /* See if we need to consume the flags                  */
 80064f6:	7ffb      	ldrb	r3, [r7, #31]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d106      	bne.n	800650a <OSFlagPend+0x1ae>
                     p_grp->Flags &= ~flags_rdy;                /* Clear ONLY the flags that we wanted                  */
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a1a      	ldr	r2, [r3, #32]
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	43db      	mvns	r3, r3
 8006504:	401a      	ands	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	621a      	str	r2, [r3, #32]
                 }
                 OSTCBCurPtr->FlagsRdy = flags_rdy;             /* Save flags that were ready                           */
 800650a:	4b3d      	ldr	r3, [pc, #244]	@ (8006600 <OSFlagPend+0x2a4>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#if (OS_CFG_TS_EN > 0u)
                 if (p_ts != (CPU_TS *)0) {
                    *p_ts = p_grp->TS;
                 }
#endif
                 CPU_CRITICAL_EXIT();                           /* Yes, condition met, return to caller                 */
 8006514:	69b8      	ldr	r0, [r7, #24]
 8006516:	f7f9 fe7d 	bl	8000214 <CPU_SR_Restore>
                 OS_TRACE_FLAG_PEND(p_grp);
                 OS_TRACE_FLAG_PEND_EXIT(OS_ERR_NONE);
                *p_err = OS_ERR_NONE;
 800651a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651c:	2200      	movs	r2, #0
 800651e:	801a      	strh	r2, [r3, #0]
                 return (flags_rdy);
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	e17c      	b.n	800681e <OSFlagPend+0x4c2>
             } else {                                           /* Block task until events occur or timeout             */
                 if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {
 8006524:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006528:	2b00      	cmp	r3, #0
 800652a:	da08      	bge.n	800653e <OSFlagPend+0x1e2>
                     CPU_CRITICAL_EXIT();
 800652c:	69b8      	ldr	r0, [r7, #24]
 800652e:	f7f9 fe71 	bl	8000214 <CPU_SR_Restore>
                     OS_TRACE_FLAG_PEND_FAILED(p_grp);
                     OS_TRACE_FLAG_PEND_EXIT(OS_ERR_PEND_WOULD_BLOCK);
                    *p_err = OS_ERR_PEND_WOULD_BLOCK;           /* Specified non-blocking so task would block           */
 8006532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006534:	f246 12b0 	movw	r2, #25008	@ 0x61b0
 8006538:	801a      	strh	r2, [r3, #0]
                     return ((OS_FLAGS)0);
 800653a:	2300      	movs	r3, #0
 800653c:	e16f      	b.n	800681e <OSFlagPend+0x4c2>
                 } else {                                       /* Specified blocking so check is scheduler is locked   */
                     if (OSSchedLockNestingCtr > 0u) {          /* See if called with scheduler locked ...        */
 800653e:	4b31      	ldr	r3, [pc, #196]	@ (8006604 <OSFlagPend+0x2a8>)
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d008      	beq.n	8006558 <OSFlagPend+0x1fc>
                         CPU_CRITICAL_EXIT();
 8006546:	69b8      	ldr	r0, [r7, #24]
 8006548:	f7f9 fe64 	bl	8000214 <CPU_SR_Restore>
                         OS_TRACE_FLAG_PEND_FAILED(p_grp);
                         OS_TRACE_FLAG_PEND_EXIT(OS_ERR_SCHED_LOCKED);
                        *p_err = OS_ERR_SCHED_LOCKED;           /* ... can't PEND when locked                           */
 800654c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800654e:	f646 5263 	movw	r2, #28003	@ 0x6d63
 8006552:	801a      	strh	r2, [r3, #0]
                         return (0u);
 8006554:	2300      	movs	r3, #0
 8006556:	e162      	b.n	800681e <OSFlagPend+0x4c2>
                     }
                 }
                                                                /* Lock the scheduler/re-enable interrupts              */
                 OS_FlagBlock(p_grp,
 8006558:	887a      	ldrh	r2, [r7, #2]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68b9      	ldr	r1, [r7, #8]
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 fa72 	bl	8006a48 <OS_FlagBlock>
                              flags,
                              opt,
                              timeout);
                 CPU_CRITICAL_EXIT();
 8006564:	69b8      	ldr	r0, [r7, #24]
 8006566:	f7f9 fe55 	bl	8000214 <CPU_SR_Restore>
             }
             break;
 800656a:	e0dd      	b.n	8006728 <OSFlagPend+0x3cc>

        case OS_OPT_PEND_FLAG_SET_ANY:
             flags_rdy = (p_grp->Flags & flags);                /* Extract only the bits we want                        */
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	4013      	ands	r3, r2
 8006574:	613b      	str	r3, [r7, #16]
             if (flags_rdy != 0u) {                             /* See if any flag set                                  */
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d016      	beq.n	80065aa <OSFlagPend+0x24e>
                 if (consume == OS_TRUE) {                      /* See if we need to consume the flags                  */
 800657c:	7ffb      	ldrb	r3, [r7, #31]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d106      	bne.n	8006590 <OSFlagPend+0x234>
                     p_grp->Flags &= ~flags_rdy;                /* Clear ONLY the flags that we got                     */
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a1a      	ldr	r2, [r3, #32]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	43db      	mvns	r3, r3
 800658a:	401a      	ands	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	621a      	str	r2, [r3, #32]
                 }
                 OSTCBCurPtr->FlagsRdy = flags_rdy;             /* Save flags that were ready                           */
 8006590:	4b1b      	ldr	r3, [pc, #108]	@ (8006600 <OSFlagPend+0x2a4>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#if (OS_CFG_TS_EN > 0u)
                 if (p_ts != (CPU_TS *)0) {
                    *p_ts  = p_grp->TS;
                 }
#endif
                 CPU_CRITICAL_EXIT();                           /* Yes, condition met, return to caller                 */
 800659a:	69b8      	ldr	r0, [r7, #24]
 800659c:	f7f9 fe3a 	bl	8000214 <CPU_SR_Restore>
                 OS_TRACE_FLAG_PEND(p_grp);
                 OS_TRACE_FLAG_PEND_EXIT(OS_ERR_NONE);
                *p_err = OS_ERR_NONE;
 80065a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a2:	2200      	movs	r2, #0
 80065a4:	801a      	strh	r2, [r3, #0]
                 return (flags_rdy);
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	e139      	b.n	800681e <OSFlagPend+0x4c2>
             } else {                                           /* Block task until events occur or timeout             */
                 if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {
 80065aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	da08      	bge.n	80065c4 <OSFlagPend+0x268>
                     CPU_CRITICAL_EXIT();
 80065b2:	69b8      	ldr	r0, [r7, #24]
 80065b4:	f7f9 fe2e 	bl	8000214 <CPU_SR_Restore>
                     OS_TRACE_FLAG_PEND_EXIT(OS_ERR_PEND_WOULD_BLOCK);
                    *p_err = OS_ERR_PEND_WOULD_BLOCK;           /* Specified non-blocking so task would block           */
 80065b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ba:	f246 12b0 	movw	r2, #25008	@ 0x61b0
 80065be:	801a      	strh	r2, [r3, #0]
                     return ((OS_FLAGS)0);
 80065c0:	2300      	movs	r3, #0
 80065c2:	e12c      	b.n	800681e <OSFlagPend+0x4c2>
                 } else {                                       /* Specified blocking so check is scheduler is locked   */
                     if (OSSchedLockNestingCtr > 0u) {          /* See if called with scheduler locked ...        */
 80065c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006604 <OSFlagPend+0x2a8>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d008      	beq.n	80065de <OSFlagPend+0x282>
                         CPU_CRITICAL_EXIT();
 80065cc:	69b8      	ldr	r0, [r7, #24]
 80065ce:	f7f9 fe21 	bl	8000214 <CPU_SR_Restore>
                         OS_TRACE_FLAG_PEND_EXIT(OS_ERR_SCHED_LOCKED);
                        *p_err = OS_ERR_SCHED_LOCKED;           /* ... can't PEND when locked                           */
 80065d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d4:	f646 5263 	movw	r2, #28003	@ 0x6d63
 80065d8:	801a      	strh	r2, [r3, #0]
                         return ((OS_FLAGS)0);
 80065da:	2300      	movs	r3, #0
 80065dc:	e11f      	b.n	800681e <OSFlagPend+0x4c2>
                     }
                 }

                 OS_FlagBlock(p_grp,
 80065de:	887a      	ldrh	r2, [r7, #2]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68b9      	ldr	r1, [r7, #8]
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f000 fa2f 	bl	8006a48 <OS_FlagBlock>
                              flags,
                              opt,
                              timeout);
                 CPU_CRITICAL_EXIT();
 80065ea:	69b8      	ldr	r0, [r7, #24]
 80065ec:	f7f9 fe12 	bl	8000214 <CPU_SR_Restore>
             }
             break;
 80065f0:	e09a      	b.n	8006728 <OSFlagPend+0x3cc>
 80065f2:	bf00      	nop
 80065f4:	200019ac 	.word	0x200019ac
 80065f8:	200019ad 	.word	0x200019ad
 80065fc:	47414c46 	.word	0x47414c46
 8006600:	20001f1c 	.word	0x20001f1c
 8006604:	20001cec 	.word	0x20001cec

#if (OS_CFG_FLAG_MODE_CLR_EN > 0u)
        case OS_OPT_PEND_FLAG_CLR_ALL:                          /* See if all required flags are cleared                */
             flags_rdy = (OS_FLAGS)(~p_grp->Flags & flags);     /* Extract only the bits we want                        */
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	43db      	mvns	r3, r3
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	4013      	ands	r3, r2
 8006612:	613b      	str	r3, [r7, #16]
             if (flags_rdy == flags) {                          /* Must match ALL the bits that we want                 */
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	429a      	cmp	r2, r3
 800661a:	d115      	bne.n	8006648 <OSFlagPend+0x2ec>
                 if (consume == OS_TRUE) {                      /* See if we need to consume the flags                  */
 800661c:	7ffb      	ldrb	r3, [r7, #31]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d105      	bne.n	800662e <OSFlagPend+0x2d2>
                     p_grp->Flags |= flags_rdy;                 /* Set ONLY the flags that we wanted                    */
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6a1a      	ldr	r2, [r3, #32]
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	431a      	orrs	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	621a      	str	r2, [r3, #32]
                 }
                 OSTCBCurPtr->FlagsRdy = flags_rdy;             /* Save flags that were ready                           */
 800662e:	4b7e      	ldr	r3, [pc, #504]	@ (8006828 <OSFlagPend+0x4cc>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#if (OS_CFG_TS_EN > 0u)
                 if (p_ts != (CPU_TS *)0) {
                    *p_ts  = p_grp->TS;
                 }
#endif
                 CPU_CRITICAL_EXIT();                           /* Yes, condition met, return to caller                 */
 8006638:	69b8      	ldr	r0, [r7, #24]
 800663a:	f7f9 fdeb 	bl	8000214 <CPU_SR_Restore>
                 OS_TRACE_FLAG_PEND(p_grp);
                 OS_TRACE_FLAG_PEND_EXIT(OS_ERR_NONE);
                *p_err = OS_ERR_NONE;
 800663e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006640:	2200      	movs	r2, #0
 8006642:	801a      	strh	r2, [r3, #0]
                 return (flags_rdy);
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	e0ea      	b.n	800681e <OSFlagPend+0x4c2>
             } else {                                           /* Block task until events occur or timeout             */
                 if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {
 8006648:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800664c:	2b00      	cmp	r3, #0
 800664e:	da08      	bge.n	8006662 <OSFlagPend+0x306>
                     CPU_CRITICAL_EXIT();
 8006650:	69b8      	ldr	r0, [r7, #24]
 8006652:	f7f9 fddf 	bl	8000214 <CPU_SR_Restore>
                     OS_TRACE_FLAG_PEND_EXIT(OS_ERR_PEND_WOULD_BLOCK);
                    *p_err = OS_ERR_PEND_WOULD_BLOCK;           /* Specified non-blocking so task would block           */
 8006656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006658:	f246 12b0 	movw	r2, #25008	@ 0x61b0
 800665c:	801a      	strh	r2, [r3, #0]
                     return ((OS_FLAGS)0);
 800665e:	2300      	movs	r3, #0
 8006660:	e0dd      	b.n	800681e <OSFlagPend+0x4c2>
                 } else {                                       /* Specified blocking so check is scheduler is locked   */
                     if (OSSchedLockNestingCtr > 0u) {          /* See if called with scheduler locked ...        */
 8006662:	4b72      	ldr	r3, [pc, #456]	@ (800682c <OSFlagPend+0x4d0>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d008      	beq.n	800667c <OSFlagPend+0x320>
                         CPU_CRITICAL_EXIT();
 800666a:	69b8      	ldr	r0, [r7, #24]
 800666c:	f7f9 fdd2 	bl	8000214 <CPU_SR_Restore>
                         OS_TRACE_FLAG_PEND_EXIT(OS_ERR_SCHED_LOCKED);
                        *p_err = OS_ERR_SCHED_LOCKED;           /* ... can't PEND when locked                           */
 8006670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006672:	f646 5263 	movw	r2, #28003	@ 0x6d63
 8006676:	801a      	strh	r2, [r3, #0]
                         return (0);
 8006678:	2300      	movs	r3, #0
 800667a:	e0d0      	b.n	800681e <OSFlagPend+0x4c2>
                     }
                 }

                 OS_FlagBlock(p_grp,
 800667c:	887a      	ldrh	r2, [r7, #2]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 f9e0 	bl	8006a48 <OS_FlagBlock>
                              flags,
                              opt,
                              timeout);
                 CPU_CRITICAL_EXIT();
 8006688:	69b8      	ldr	r0, [r7, #24]
 800668a:	f7f9 fdc3 	bl	8000214 <CPU_SR_Restore>
             }
             break;
 800668e:	e04b      	b.n	8006728 <OSFlagPend+0x3cc>

        case OS_OPT_PEND_FLAG_CLR_ANY:
             flags_rdy = (~p_grp->Flags & flags);               /* Extract only the bits we want                        */
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	43db      	mvns	r3, r3
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	4013      	ands	r3, r2
 800669a:	613b      	str	r3, [r7, #16]
             if (flags_rdy != 0u) {                             /* See if any flag cleared                              */
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d015      	beq.n	80066ce <OSFlagPend+0x372>
                 if (consume == OS_TRUE) {                      /* See if we need to consume the flags                  */
 80066a2:	7ffb      	ldrb	r3, [r7, #31]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d105      	bne.n	80066b4 <OSFlagPend+0x358>
                     p_grp->Flags |= flags_rdy;                 /* Set ONLY the flags that we got                       */
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6a1a      	ldr	r2, [r3, #32]
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	431a      	orrs	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	621a      	str	r2, [r3, #32]
                 }
                 OSTCBCurPtr->FlagsRdy = flags_rdy;             /* Save flags that were ready                           */
 80066b4:	4b5c      	ldr	r3, [pc, #368]	@ (8006828 <OSFlagPend+0x4cc>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#if (OS_CFG_TS_EN > 0u)
                 if (p_ts != (CPU_TS *)0) {
                    *p_ts  = p_grp->TS;
                 }
#endif
                 CPU_CRITICAL_EXIT();                           /* Yes, condition met, return to caller                 */
 80066be:	69b8      	ldr	r0, [r7, #24]
 80066c0:	f7f9 fda8 	bl	8000214 <CPU_SR_Restore>
                 OS_TRACE_FLAG_PEND(p_grp);
                 OS_TRACE_FLAG_PEND_EXIT(OS_ERR_NONE);
                *p_err = OS_ERR_NONE;
 80066c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c6:	2200      	movs	r2, #0
 80066c8:	801a      	strh	r2, [r3, #0]
                 return (flags_rdy);
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	e0a7      	b.n	800681e <OSFlagPend+0x4c2>
             } else {                                           /* Block task until events occur or timeout             */
                 if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {
 80066ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	da08      	bge.n	80066e8 <OSFlagPend+0x38c>
                     CPU_CRITICAL_EXIT();
 80066d6:	69b8      	ldr	r0, [r7, #24]
 80066d8:	f7f9 fd9c 	bl	8000214 <CPU_SR_Restore>
                     OS_TRACE_FLAG_PEND_EXIT(OS_ERR_PEND_WOULD_BLOCK);
                    *p_err = OS_ERR_PEND_WOULD_BLOCK;           /* Specified non-blocking so task would block           */
 80066dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066de:	f246 12b0 	movw	r2, #25008	@ 0x61b0
 80066e2:	801a      	strh	r2, [r3, #0]
                     return ((OS_FLAGS)0);
 80066e4:	2300      	movs	r3, #0
 80066e6:	e09a      	b.n	800681e <OSFlagPend+0x4c2>
                 } else {                                       /* Specified blocking so check is scheduler is locked   */
                     if (OSSchedLockNestingCtr > 0u) {          /* See if called with scheduler locked ...        */
 80066e8:	4b50      	ldr	r3, [pc, #320]	@ (800682c <OSFlagPend+0x4d0>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d008      	beq.n	8006702 <OSFlagPend+0x3a6>
                         CPU_CRITICAL_EXIT();
 80066f0:	69b8      	ldr	r0, [r7, #24]
 80066f2:	f7f9 fd8f 	bl	8000214 <CPU_SR_Restore>
                         OS_TRACE_FLAG_PEND_EXIT(OS_ERR_SCHED_LOCKED);
                        *p_err = OS_ERR_SCHED_LOCKED;           /* ... can't PEND when locked                           */
 80066f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f8:	f646 5263 	movw	r2, #28003	@ 0x6d63
 80066fc:	801a      	strh	r2, [r3, #0]
                         return (0u);
 80066fe:	2300      	movs	r3, #0
 8006700:	e08d      	b.n	800681e <OSFlagPend+0x4c2>
                     }
                 }

                 OS_FlagBlock(p_grp,
 8006702:	887a      	ldrh	r2, [r7, #2]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68b9      	ldr	r1, [r7, #8]
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f000 f99d 	bl	8006a48 <OS_FlagBlock>
                              flags,
                              opt,
                              timeout);
                 CPU_CRITICAL_EXIT();
 800670e:	69b8      	ldr	r0, [r7, #24]
 8006710:	f7f9 fd80 	bl	8000214 <CPU_SR_Restore>
             }
             break;
 8006714:	e008      	b.n	8006728 <OSFlagPend+0x3cc>
#endif

        default:
             CPU_CRITICAL_EXIT();
 8006716:	69b8      	ldr	r0, [r7, #24]
 8006718:	f7f9 fd7c 	bl	8000214 <CPU_SR_Restore>
             OS_TRACE_FLAG_PEND_FAILED(p_grp);
             OS_TRACE_FLAG_PEND_EXIT(OS_ERR_OPT_INVALID);
            *p_err = OS_ERR_OPT_INVALID;
 800671c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671e:	f645 6225 	movw	r2, #24101	@ 0x5e25
 8006722:	801a      	strh	r2, [r3, #0]
             return (0u);
 8006724:	2300      	movs	r3, #0
 8006726:	e07a      	b.n	800681e <OSFlagPend+0x4c2>
    }

    OS_TRACE_FLAG_PEND_BLOCK(p_grp);

    OSSched();                                                  /* Find next HPT ready to run                           */
 8006728:	f7fe ffaa 	bl	8005680 <OSSched>

    CPU_CRITICAL_ENTER();
 800672c:	2040      	movs	r0, #64	@ 0x40
 800672e:	f7f9 fd63 	bl	80001f8 <CPU_SR_Save>
 8006732:	61b8      	str	r0, [r7, #24]
    switch (OSTCBCurPtr->PendStatus) {
 8006734:	4b3c      	ldr	r3, [pc, #240]	@ (8006828 <OSFlagPend+0x4cc>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800673c:	2b03      	cmp	r3, #3
 800673e:	d82d      	bhi.n	800679c <OSFlagPend+0x440>
 8006740:	a201      	add	r2, pc, #4	@ (adr r2, 8006748 <OSFlagPend+0x3ec>)
 8006742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006746:	bf00      	nop
 8006748:	08006759 	.word	0x08006759
 800674c:	08006761 	.word	0x08006761
 8006750:	0800678d 	.word	0x0800678d
 8006754:	08006771 	.word	0x08006771
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_FLAG_PEND(p_grp);
            *p_err = OS_ERR_NONE;
 8006758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675a:	2200      	movs	r2, #0
 800675c:	801a      	strh	r2, [r3, #0]
             break;
 800675e:	e025      	b.n	80067ac <OSFlagPend+0x450>
#if (OS_CFG_TS_EN > 0u)
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             CPU_CRITICAL_EXIT();
 8006760:	69b8      	ldr	r0, [r7, #24]
 8006762:	f7f9 fd57 	bl	8000214 <CPU_SR_Restore>
             OS_TRACE_FLAG_PEND_FAILED(p_grp);
            *p_err = OS_ERR_PEND_ABORT;
 8006766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006768:	f246 12a9 	movw	r2, #25001	@ 0x61a9
 800676c:	801a      	strh	r2, [r3, #0]
             break;
 800676e:	e01d      	b.n	80067ac <OSFlagPend+0x450>

        case OS_STATUS_PEND_TIMEOUT:                            /* Indicate that we didn't get semaphore within timeout */
             if (p_ts != (CPU_TS *)0) {
 8006770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <OSFlagPend+0x420>
                *p_ts = 0u;
 8006776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]
             }
             CPU_CRITICAL_EXIT();
 800677c:	69b8      	ldr	r0, [r7, #24]
 800677e:	f7f9 fd49 	bl	8000214 <CPU_SR_Restore>
             OS_TRACE_FLAG_PEND_FAILED(p_grp);
            *p_err = OS_ERR_TIMEOUT;
 8006782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006784:	f247 22d9 	movw	r2, #29401	@ 0x72d9
 8006788:	801a      	strh	r2, [r3, #0]
             break;
 800678a:	e00f      	b.n	80067ac <OSFlagPend+0x450>
#if (OS_CFG_TS_EN > 0u)
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             CPU_CRITICAL_EXIT();
 800678c:	69b8      	ldr	r0, [r7, #24]
 800678e:	f7f9 fd41 	bl	8000214 <CPU_SR_Restore>
             OS_TRACE_FLAG_PEND_FAILED(p_grp);
            *p_err = OS_ERR_OBJ_DEL;
 8006792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006794:	f645 52c2 	movw	r2, #24002	@ 0x5dc2
 8006798:	801a      	strh	r2, [r3, #0]
             break;
 800679a:	e007      	b.n	80067ac <OSFlagPend+0x450>

        default:
             CPU_CRITICAL_EXIT();
 800679c:	69b8      	ldr	r0, [r7, #24]
 800679e:	f7f9 fd39 	bl	8000214 <CPU_SR_Restore>
             OS_TRACE_FLAG_PEND_FAILED(p_grp);
            *p_err = OS_ERR_STATUS_INVALID;
 80067a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a4:	f646 622e 	movw	r2, #28206	@ 0x6e2e
 80067a8:	801a      	strh	r2, [r3, #0]
             break;
 80067aa:	bf00      	nop
    }
    if (*p_err != OS_ERR_NONE) {
 80067ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <OSFlagPend+0x45c>
        OS_TRACE_FLAG_PEND_EXIT(*p_err);
        return (0u);
 80067b4:	2300      	movs	r3, #0
 80067b6:	e032      	b.n	800681e <OSFlagPend+0x4c2>
    }

    flags_rdy = OSTCBCurPtr->FlagsRdy;
 80067b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006828 <OSFlagPend+0x4cc>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067c0:	613b      	str	r3, [r7, #16]
    if (consume == OS_TRUE) {                                   /* See if we need to consume the flags                  */
 80067c2:	7ffb      	ldrb	r3, [r7, #31]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d123      	bne.n	8006810 <OSFlagPend+0x4b4>
        switch (mode) {
 80067c8:	8afb      	ldrh	r3, [r7, #22]
 80067ca:	2b08      	cmp	r3, #8
 80067cc:	d008      	beq.n	80067e0 <OSFlagPend+0x484>
 80067ce:	2b08      	cmp	r3, #8
 80067d0:	dc15      	bgt.n	80067fe <OSFlagPend+0x4a2>
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	dc02      	bgt.n	80067dc <OSFlagPend+0x480>
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	dc0a      	bgt.n	80067f0 <OSFlagPend+0x494>
 80067da:	e010      	b.n	80067fe <OSFlagPend+0x4a2>
 80067dc:	2b04      	cmp	r3, #4
 80067de:	d10e      	bne.n	80067fe <OSFlagPend+0x4a2>
            case OS_OPT_PEND_FLAG_SET_ALL:
            case OS_OPT_PEND_FLAG_SET_ANY:                      /* Clear ONLY the flags we got                          */
                 p_grp->Flags &= ~flags_rdy;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6a1a      	ldr	r2, [r3, #32]
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	43db      	mvns	r3, r3
 80067e8:	401a      	ands	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	621a      	str	r2, [r3, #32]
                 break;
 80067ee:	e00f      	b.n	8006810 <OSFlagPend+0x4b4>

#if (OS_CFG_FLAG_MODE_CLR_EN > 0u)
            case OS_OPT_PEND_FLAG_CLR_ALL:
            case OS_OPT_PEND_FLAG_CLR_ANY:                      /* Set   ONLY the flags we got                          */
                 p_grp->Flags |=  flags_rdy;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6a1a      	ldr	r2, [r3, #32]
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	431a      	orrs	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	621a      	str	r2, [r3, #32]
                 break;
 80067fc:	e008      	b.n	8006810 <OSFlagPend+0x4b4>
#endif
            default:
                 CPU_CRITICAL_EXIT();
 80067fe:	69b8      	ldr	r0, [r7, #24]
 8006800:	f7f9 fd08 	bl	8000214 <CPU_SR_Restore>
                 OS_TRACE_FLAG_PEND_EXIT(OS_ERR_OPT_INVALID);
                *p_err = OS_ERR_OPT_INVALID;
 8006804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006806:	f645 6225 	movw	r2, #24101	@ 0x5e25
 800680a:	801a      	strh	r2, [r3, #0]
                 return (0u);
 800680c:	2300      	movs	r3, #0
 800680e:	e006      	b.n	800681e <OSFlagPend+0x4c2>
        }
    }
    CPU_CRITICAL_EXIT();
 8006810:	69b8      	ldr	r0, [r7, #24]
 8006812:	f7f9 fcff 	bl	8000214 <CPU_SR_Restore>
    OS_TRACE_FLAG_PEND_EXIT(OS_ERR_NONE);
   *p_err = OS_ERR_NONE;                                        /* Event(s) must have occurred                          */
 8006816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006818:	2200      	movs	r2, #0
 800681a:	801a      	strh	r2, [r3, #0]
    return (flags_rdy);
 800681c:	693b      	ldr	r3, [r7, #16]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3720      	adds	r7, #32
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20001f1c 	.word	0x20001f1c
 800682c:	20001cec 	.word	0x20001cec

08006830 <OSFlagPost>:

OS_FLAGS  OSFlagPost (OS_FLAG_GRP  *p_grp,
                      OS_FLAGS      flags,
                      OS_OPT        opt,
                      OS_ERR       *p_err)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08c      	sub	sp, #48	@ 0x30
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	603b      	str	r3, [r7, #0]
 800683c:	4613      	mov	r3, r2
 800683e:	80fb      	strh	r3, [r7, #6]
    OS_OPT         mode;
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb;
    OS_TCB        *p_tcb_next;
    CPU_TS         ts;
    CPU_SR_ALLOC();
 8006840:	2300      	movs	r3, #0
 8006842:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

    OS_TRACE_FLAG_POST_ENTER(p_grp, flags, opt);

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 8006844:	4b7e      	ldr	r3, [pc, #504]	@ (8006a40 <OSFlagPost+0x210>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d005      	beq.n	8006858 <OSFlagPost+0x28>
        OS_TRACE_FLAG_POST_EXIT(OS_ERR_OS_NOT_RUNNING);
       *p_err = OS_ERR_OS_NOT_RUNNING;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	f645 6289 	movw	r2, #24201	@ 0x5e89
 8006852:	801a      	strh	r2, [r3, #0]
        return (0u);
 8006854:	2300      	movs	r3, #0
 8006856:	e0ef      	b.n	8006a38 <OSFlagPost+0x208>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_grp == (OS_FLAG_GRP *)0) {                            /* Validate 'p_grp'                                     */
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d105      	bne.n	800686a <OSFlagPost+0x3a>
        OS_TRACE_FLAG_POST_FAILED(p_grp);
        OS_TRACE_FLAG_POST_EXIT(OS_ERR_OBJ_PTR_NULL);
       *p_err  = OS_ERR_OBJ_PTR_NULL;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 8006864:	801a      	strh	r2, [r3, #0]
        return (0u);
 8006866:	2300      	movs	r3, #0
 8006868:	e0e6      	b.n	8006a38 <OSFlagPost+0x208>
    }
#endif

#if (OS_CFG_OBJ_TYPE_CHK_EN > 0u)
    if (p_grp->Type != OS_OBJ_TYPE_FLAG) {                      /* Make sure we are pointing to an event flag grp       */
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a75      	ldr	r2, [pc, #468]	@ (8006a44 <OSFlagPost+0x214>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d005      	beq.n	8006880 <OSFlagPost+0x50>
        OS_TRACE_FLAG_POST_FAILED(p_grp);
        OS_TRACE_FLAG_POST_EXIT(OS_ERR_OBJ_TYPE);
       *p_err = OS_ERR_OBJ_TYPE;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	f645 52c4 	movw	r2, #24004	@ 0x5dc4
 800687a:	801a      	strh	r2, [r3, #0]
        return (0u);
 800687c:	2300      	movs	r3, #0
 800687e:	e0db      	b.n	8006a38 <OSFlagPost+0x208>
#endif

#if (OS_CFG_TS_EN > 0u)
    ts = OS_TS_GET();                                           /* Get timestamp                                        */
#else
    ts = 0u;
 8006880:	2300      	movs	r3, #0
 8006882:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

    OS_TRACE_FLAG_POST(p_grp);

    switch (opt) {
 8006884:	88fb      	ldrh	r3, [r7, #6]
 8006886:	f248 0201 	movw	r2, #32769	@ 0x8001
 800688a:	4293      	cmp	r3, r2
 800688c:	d019      	beq.n	80068c2 <OSFlagPost+0x92>
 800688e:	f248 0201 	movw	r2, #32769	@ 0x8001
 8006892:	4293      	cmp	r3, r2
 8006894:	dc21      	bgt.n	80068da <OSFlagPost+0xaa>
 8006896:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800689a:	d007      	beq.n	80068ac <OSFlagPost+0x7c>
 800689c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068a0:	dc1b      	bgt.n	80068da <OSFlagPost+0xaa>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <OSFlagPost+0x7c>
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d00b      	beq.n	80068c2 <OSFlagPost+0x92>
 80068aa:	e016      	b.n	80068da <OSFlagPost+0xaa>
        case OS_OPT_POST_FLAG_SET:
        case OS_OPT_POST_FLAG_SET | OS_OPT_POST_NO_SCHED:
             CPU_CRITICAL_ENTER();
 80068ac:	2040      	movs	r0, #64	@ 0x40
 80068ae:	f7f9 fca3 	bl	80001f8 <CPU_SR_Save>
 80068b2:	62b8      	str	r0, [r7, #40]	@ 0x28
             p_grp->Flags |=  flags;                            /* Set   the flags specified in the group               */
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6a1a      	ldr	r2, [r3, #32]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	431a      	orrs	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	621a      	str	r2, [r3, #32]
             break;
 80068c0:	e011      	b.n	80068e6 <OSFlagPost+0xb6>

        case OS_OPT_POST_FLAG_CLR:
        case OS_OPT_POST_FLAG_CLR | OS_OPT_POST_NO_SCHED:
             CPU_CRITICAL_ENTER();
 80068c2:	2040      	movs	r0, #64	@ 0x40
 80068c4:	f7f9 fc98 	bl	80001f8 <CPU_SR_Save>
 80068c8:	62b8      	str	r0, [r7, #40]	@ 0x28
             p_grp->Flags &= ~flags;                            /* Clear the flags specified in the group               */
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6a1a      	ldr	r2, [r3, #32]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	43db      	mvns	r3, r3
 80068d2:	401a      	ands	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	621a      	str	r2, [r3, #32]
             break;
 80068d8:	e005      	b.n	80068e6 <OSFlagPost+0xb6>

        default:
            *p_err = OS_ERR_OPT_INVALID;                        /* INVALID option                                       */
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	f645 6225 	movw	r2, #24101	@ 0x5e25
 80068e0:	801a      	strh	r2, [r3, #0]
             OS_TRACE_FLAG_POST_EXIT(*p_err);
             return (0u);
 80068e2:	2300      	movs	r3, #0
 80068e4:	e0a8      	b.n	8006a38 <OSFlagPost+0x208>
    }
#if (OS_CFG_TS_EN > 0u)
    p_grp->TS   = ts;
#endif
    p_pend_list = &p_grp->PendList;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3308      	adds	r3, #8
 80068ea:	623b      	str	r3, [r7, #32]
    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* Any task waiting on event flag group?                */
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d108      	bne.n	8006906 <OSFlagPost+0xd6>
        CPU_CRITICAL_EXIT();                                    /* No                                                   */
 80068f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068f6:	f7f9 fc8d 	bl	8000214 <CPU_SR_Restore>
       *p_err = OS_ERR_NONE;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2200      	movs	r2, #0
 80068fe:	801a      	strh	r2, [r3, #0]
        OS_TRACE_FLAG_POST_EXIT(*p_err);
        return (p_grp->Flags);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	e098      	b.n	8006a38 <OSFlagPost+0x208>
    }

    p_tcb = p_pend_list->HeadPtr;
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (p_tcb != (OS_TCB *)0) {                              /* Go through all tasks waiting on event flag(s)        */
 800690c:	e07a      	b.n	8006a04 <OSFlagPost+0x1d4>
        p_tcb_next = p_tcb->PendNextPtr;
 800690e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006912:	61bb      	str	r3, [r7, #24]
        mode       = p_tcb->FlagsOpt & OS_OPT_PEND_FLAG_MASK;
 8006914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006916:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	82fb      	strh	r3, [r7, #22]
        switch (mode) {
 8006920:	8afb      	ldrh	r3, [r7, #22]
 8006922:	3b01      	subs	r3, #1
 8006924:	2b07      	cmp	r3, #7
 8006926:	d85b      	bhi.n	80069e0 <OSFlagPost+0x1b0>
 8006928:	a201      	add	r2, pc, #4	@ (adr r2, 8006930 <OSFlagPost+0x100>)
 800692a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692e:	bf00      	nop
 8006930:	08006997 	.word	0x08006997
 8006934:	080069bf 	.word	0x080069bf
 8006938:	080069e1 	.word	0x080069e1
 800693c:	08006951 	.word	0x08006951
 8006940:	080069e1 	.word	0x080069e1
 8006944:	080069e1 	.word	0x080069e1
 8006948:	080069e1 	.word	0x080069e1
 800694c:	08006977 	.word	0x08006977
            case OS_OPT_PEND_FLAG_SET_ALL:                      /* See if all req. flags are set for current node       */
                 flags_rdy = (p_grp->Flags & p_tcb->FlagsPend);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a1a      	ldr	r2, [r3, #32]
 8006954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800695a:	4013      	ands	r3, r2
 800695c:	613b      	str	r3, [r7, #16]
                 if (flags_rdy == p_tcb->FlagsPend) {
 800695e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	429a      	cmp	r2, r3
 8006968:	d143      	bne.n	80069f2 <OSFlagPost+0x1c2>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                         */
 800696a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800696c:	6939      	ldr	r1, [r7, #16]
 800696e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006970:	f000 f8b6 	bl	8006ae0 <OS_FlagTaskRdy>
                                    flags_rdy,
                                    ts);
                 }
                 break;
 8006974:	e03d      	b.n	80069f2 <OSFlagPost+0x1c2>

            case OS_OPT_PEND_FLAG_SET_ANY:                      /* See if any flag set                                  */
                 flags_rdy = (p_grp->Flags & p_tcb->FlagsPend);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6a1a      	ldr	r2, [r3, #32]
 800697a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800697c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006980:	4013      	ands	r3, r2
 8006982:	613b      	str	r3, [r7, #16]
                 if (flags_rdy != 0u) {
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d035      	beq.n	80069f6 <OSFlagPost+0x1c6>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                         */
 800698a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800698c:	6939      	ldr	r1, [r7, #16]
 800698e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006990:	f000 f8a6 	bl	8006ae0 <OS_FlagTaskRdy>
                                    flags_rdy,
                                    ts);
                 }
                 break;
 8006994:	e02f      	b.n	80069f6 <OSFlagPost+0x1c6>

#if (OS_CFG_FLAG_MODE_CLR_EN > 0u)
            case OS_OPT_PEND_FLAG_CLR_ALL:                      /* See if all req. flags are set for current node       */
                 flags_rdy = (OS_FLAGS)(~p_grp->Flags & p_tcb->FlagsPend);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	43da      	mvns	r2, r3
 800699c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069a2:	4013      	ands	r3, r2
 80069a4:	613b      	str	r3, [r7, #16]
                 if (flags_rdy == p_tcb->FlagsPend) {
 80069a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d123      	bne.n	80069fa <OSFlagPost+0x1ca>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                         */
 80069b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069b4:	6939      	ldr	r1, [r7, #16]
 80069b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80069b8:	f000 f892 	bl	8006ae0 <OS_FlagTaskRdy>
                                    flags_rdy,
                                    ts);
                 }
                 break;
 80069bc:	e01d      	b.n	80069fa <OSFlagPost+0x1ca>

            case OS_OPT_PEND_FLAG_CLR_ANY:                      /* See if any flag set                                  */
                 flags_rdy = (OS_FLAGS)(~p_grp->Flags & p_tcb->FlagsPend);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	43da      	mvns	r2, r3
 80069c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069ca:	4013      	ands	r3, r2
 80069cc:	613b      	str	r3, [r7, #16]
                 if (flags_rdy != 0u) {
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d014      	beq.n	80069fe <OSFlagPost+0x1ce>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                         */
 80069d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069d6:	6939      	ldr	r1, [r7, #16]
 80069d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80069da:	f000 f881 	bl	8006ae0 <OS_FlagTaskRdy>
                                    flags_rdy,
                                    ts);
                 }
                 break;
 80069de:	e00e      	b.n	80069fe <OSFlagPost+0x1ce>
#endif
            default:
                 CPU_CRITICAL_EXIT();
 80069e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069e2:	f7f9 fc17 	bl	8000214 <CPU_SR_Restore>
                *p_err = OS_ERR_FLAG_PEND_OPT;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	f643 22ff 	movw	r2, #15103	@ 0x3aff
 80069ec:	801a      	strh	r2, [r3, #0]
                 OS_TRACE_FLAG_POST_EXIT(*p_err);
                 return (0u);
 80069ee:	2300      	movs	r3, #0
 80069f0:	e022      	b.n	8006a38 <OSFlagPost+0x208>
                 break;
 80069f2:	bf00      	nop
 80069f4:	e004      	b.n	8006a00 <OSFlagPost+0x1d0>
                 break;
 80069f6:	bf00      	nop
 80069f8:	e002      	b.n	8006a00 <OSFlagPost+0x1d0>
                 break;
 80069fa:	bf00      	nop
 80069fc:	e000      	b.n	8006a00 <OSFlagPost+0x1d0>
                 break;
 80069fe:	bf00      	nop
        }
                                                                /* Point to next task waiting for event flag(s)         */
        p_tcb = p_tcb_next;
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (p_tcb != (OS_TCB *)0) {                              /* Go through all tasks waiting on event flag(s)        */
 8006a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d181      	bne.n	800690e <OSFlagPost+0xde>
    }
    CPU_CRITICAL_EXIT();
 8006a0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a0c:	f7f9 fc02 	bl	8000214 <CPU_SR_Restore>

    if ((opt & OS_OPT_POST_NO_SCHED) == 0u) {
 8006a10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	db01      	blt.n	8006a1c <OSFlagPost+0x1ec>
        OSSched();
 8006a18:	f7fe fe32 	bl	8005680 <OSSched>
    }

    CPU_CRITICAL_ENTER();
 8006a1c:	2040      	movs	r0, #64	@ 0x40
 8006a1e:	f7f9 fbeb 	bl	80001f8 <CPU_SR_Save>
 8006a22:	62b8      	str	r0, [r7, #40]	@ 0x28
    flags_cur = p_grp->Flags;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	61fb      	str	r3, [r7, #28]
    CPU_CRITICAL_EXIT();
 8006a2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a2c:	f7f9 fbf2 	bl	8000214 <CPU_SR_Restore>
   *p_err     = OS_ERR_NONE;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2200      	movs	r2, #0
 8006a34:	801a      	strh	r2, [r3, #0]

    OS_TRACE_FLAG_POST_EXIT(*p_err);
    return (flags_cur);
 8006a36:	69fb      	ldr	r3, [r7, #28]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3730      	adds	r7, #48	@ 0x30
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	200019ad 	.word	0x200019ad
 8006a44:	47414c46 	.word	0x47414c46

08006a48 <OS_FlagBlock>:

void  OS_FlagBlock (OS_FLAG_GRP  *p_grp,
                    OS_FLAGS      flags,
                    OS_OPT        opt,
                    OS_TICK       timeout)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	4613      	mov	r3, r2
 8006a56:	80fb      	strh	r3, [r7, #6]
    OSTCBCurPtr->FlagsPend = flags;                             /* Save the flags that we need to wait for              */
 8006a58:	4b0c      	ldr	r3, [pc, #48]	@ (8006a8c <OS_FlagBlock+0x44>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    OSTCBCurPtr->FlagsOpt  = opt;                               /* Save the type of wait we are doing                   */
 8006a62:	4b0a      	ldr	r3, [pc, #40]	@ (8006a8c <OS_FlagBlock+0x44>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	88fa      	ldrh	r2, [r7, #6]
 8006a68:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
    OSTCBCurPtr->FlagsRdy  = 0u;
 8006a6c:	4b07      	ldr	r3, [pc, #28]	@ (8006a8c <OS_FlagBlock+0x44>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    OS_Pend((OS_PEND_OBJ *)((void *)p_grp),
 8006a76:	4b05      	ldr	r3, [pc, #20]	@ (8006a8c <OS_FlagBlock+0x44>)
 8006a78:	6819      	ldr	r1, [r3, #0]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f7fe ff12 	bl	80058a8 <OS_Pend>
             OSTCBCurPtr,
             OS_TASK_PEND_ON_FLAG,
             timeout);
}
 8006a84:	bf00      	nop
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	20001f1c 	.word	0x20001f1c

08006a90 <OS_FlagDbgListAdd>:
************************************************************************************************************************
*/

#if (OS_CFG_DBG_EN > 0u)
void  OS_FlagDbgListAdd (OS_FLAG_GRP  *p_grp)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
    p_grp->DbgNamePtr                = (CPU_CHAR *)((void *)" ");
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a0f      	ldr	r2, [pc, #60]	@ (8006ad8 <OS_FlagDbgListAdd+0x48>)
 8006a9c:	61da      	str	r2, [r3, #28]
    p_grp->DbgPrevPtr                = (OS_FLAG_GRP *)0;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	615a      	str	r2, [r3, #20]
    if (OSFlagDbgListPtr == (OS_FLAG_GRP *)0) {
 8006aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8006adc <OS_FlagDbgListAdd+0x4c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d103      	bne.n	8006ab4 <OS_FlagDbgListAdd+0x24>
        p_grp->DbgNextPtr            = (OS_FLAG_GRP *)0;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	619a      	str	r2, [r3, #24]
 8006ab2:	e007      	b.n	8006ac4 <OS_FlagDbgListAdd+0x34>
    } else {
        p_grp->DbgNextPtr            = OSFlagDbgListPtr;
 8006ab4:	4b09      	ldr	r3, [pc, #36]	@ (8006adc <OS_FlagDbgListAdd+0x4c>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	619a      	str	r2, [r3, #24]
        OSFlagDbgListPtr->DbgPrevPtr = p_grp;
 8006abc:	4b07      	ldr	r3, [pc, #28]	@ (8006adc <OS_FlagDbgListAdd+0x4c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	615a      	str	r2, [r3, #20]
    }
    OSFlagDbgListPtr                 = p_grp;
 8006ac4:	4a05      	ldr	r2, [pc, #20]	@ (8006adc <OS_FlagDbgListAdd+0x4c>)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6013      	str	r3, [r2, #0]
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	08008e98 	.word	0x08008e98
 8006adc:	200019b8 	.word	0x200019b8

08006ae0 <OS_FlagTaskRdy>:
*/

void   OS_FlagTaskRdy (OS_TCB    *p_tcb,
                       OS_FLAGS   flags_rdy,
                       CPU_TS     ts)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
#if (OS_CFG_TS_EN == 0u)
    (void)ts;                                                   /* Prevent compiler warning for not using 'ts'          */
#endif

    p_tcb->FlagsRdy   = flags_rdy;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    p_tcb->PendStatus = OS_STATUS_PEND_OK;                      /* Clear pend status                                    */
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;                /* Indicate no longer pending                           */
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
#if (OS_CFG_TS_EN > 0u)
    p_tcb->TS         = ts;
#endif
    switch (p_tcb->TaskState) {
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	dc02      	bgt.n	8006b14 <OS_FlagTaskRdy+0x34>
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	da04      	bge.n	8006b1c <OS_FlagTaskRdy+0x3c>
        case OS_TASK_STATE_DLY:
        case OS_TASK_STATE_DLY_SUSPENDED:
        case OS_TASK_STATE_SUSPENDED:
        default:
                                                                /* Default case.                                        */
             break;
 8006b12:	e020      	b.n	8006b56 <OS_FlagTaskRdy+0x76>
 8006b14:	3b06      	subs	r3, #6
    switch (p_tcb->TaskState) {
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d81d      	bhi.n	8006b56 <OS_FlagTaskRdy+0x76>
 8006b1a:	e00f      	b.n	8006b3c <OS_FlagTaskRdy+0x5c>
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006b22:	2b03      	cmp	r3, #3
 8006b24:	d102      	bne.n	8006b2c <OS_FlagTaskRdy+0x4c>
                 OS_TickListRemove(p_tcb);                      /* Remove from tick list                                */
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f001 fc12 	bl	8008350 <OS_TickListRemove>
             OS_RdyListInsert(p_tcb);                           /* Insert the task in the ready list                    */
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f7ff f8d7 	bl	8005ce0 <OS_RdyListInsert>
             p_tcb->TaskState = OS_TASK_STATE_RDY;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
             break;
 8006b3a:	e00d      	b.n	8006b58 <OS_FlagTaskRdy+0x78>
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006b42:	2b07      	cmp	r3, #7
 8006b44:	d102      	bne.n	8006b4c <OS_FlagTaskRdy+0x6c>
                 OS_TickListRemove(p_tcb);                      /* Remove from tick list                                */
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f001 fc02 	bl	8008350 <OS_TickListRemove>
             p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2204      	movs	r2, #4
 8006b50:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
             break;
 8006b54:	e000      	b.n	8006b58 <OS_FlagTaskRdy+0x78>
             break;
 8006b56:	bf00      	nop
    }
    OS_PendListRemove(p_tcb);
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f7fe ffd1 	bl	8005b00 <OS_PendListRemove>
}
 8006b5e:	bf00      	nop
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
	...

08006b68 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_MemInit (OS_ERR  *p_err)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
#if (OS_CFG_DBG_EN > 0u)
    OSMemDbgListPtr = (OS_MEM *)0;
 8006b70:	4b07      	ldr	r3, [pc, #28]	@ (8006b90 <OS_MemInit+0x28>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]
    OSMemQty        = 0u;
 8006b76:	4b07      	ldr	r3, [pc, #28]	@ (8006b94 <OS_MemInit+0x2c>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	801a      	strh	r2, [r3, #0]
#endif
   *p_err           = OS_ERR_NONE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	801a      	strh	r2, [r3, #0]
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	200019c0 	.word	0x200019c0
 8006b94:	200019c4 	.word	0x200019c4

08006b98 <OS_MsgPoolInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MsgPoolInit (OS_ERR  *p_err)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
    OS_MSG_QTY   i;
    OS_MSG_QTY   loops;


#if (OS_CFG_ARG_CHK_EN > 0u)
    if (OSCfg_MsgPoolBasePtr == (OS_MSG *)0) {
 8006ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8006c50 <OS_MsgPoolInit+0xb8>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d104      	bne.n	8006bb2 <OS_MsgPoolInit+0x1a>
       *p_err = OS_ERR_MSG_POOL_NULL_PTR;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f245 721e 	movw	r2, #22302	@ 0x571e
 8006bae:	801a      	strh	r2, [r3, #0]
        return;
 8006bb0:	e048      	b.n	8006c44 <OS_MsgPoolInit+0xac>
    }
    if (OSCfg_MsgPoolSize == 0u) {
 8006bb2:	4b28      	ldr	r3, [pc, #160]	@ (8006c54 <OS_MsgPoolInit+0xbc>)
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d104      	bne.n	8006bc4 <OS_MsgPoolInit+0x2c>
       *p_err = OS_ERR_MSG_POOL_EMPTY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f245 721d 	movw	r2, #22301	@ 0x571d
 8006bc0:	801a      	strh	r2, [r3, #0]
        return;
 8006bc2:	e03f      	b.n	8006c44 <OS_MsgPoolInit+0xac>
    }
#endif

    p_msg1 = OSCfg_MsgPoolBasePtr;
 8006bc4:	4b22      	ldr	r3, [pc, #136]	@ (8006c50 <OS_MsgPoolInit+0xb8>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	617b      	str	r3, [r7, #20]
    p_msg2 = OSCfg_MsgPoolBasePtr;
 8006bca:	4b21      	ldr	r3, [pc, #132]	@ (8006c50 <OS_MsgPoolInit+0xb8>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	613b      	str	r3, [r7, #16]
    p_msg2++;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	330c      	adds	r3, #12
 8006bd4:	613b      	str	r3, [r7, #16]
    loops  = OSCfg_MsgPoolSize - 1u;
 8006bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8006c54 <OS_MsgPoolInit+0xbc>)
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	81bb      	strh	r3, [r7, #12]
    for (i = 0u; i < loops; i++) {                              /* Init. list of free OS_MSGs                           */
 8006bde:	2300      	movs	r3, #0
 8006be0:	81fb      	strh	r3, [r7, #14]
 8006be2:	e011      	b.n	8006c08 <OS_MsgPoolInit+0x70>
        p_msg1->NextPtr = p_msg2;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	601a      	str	r2, [r3, #0]
        p_msg1->MsgPtr  = (void *)0;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2200      	movs	r2, #0
 8006bee:	605a      	str	r2, [r3, #4]
        p_msg1->MsgSize =         0u;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	811a      	strh	r2, [r3, #8]
#if (OS_CFG_TS_EN > 0u)
        p_msg1->MsgTS   =         0u;
#endif
        p_msg1++;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	330c      	adds	r3, #12
 8006bfa:	617b      	str	r3, [r7, #20]
        p_msg2++;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	330c      	adds	r3, #12
 8006c00:	613b      	str	r3, [r7, #16]
    for (i = 0u; i < loops; i++) {                              /* Init. list of free OS_MSGs                           */
 8006c02:	89fb      	ldrh	r3, [r7, #14]
 8006c04:	3301      	adds	r3, #1
 8006c06:	81fb      	strh	r3, [r7, #14]
 8006c08:	89fa      	ldrh	r2, [r7, #14]
 8006c0a:	89bb      	ldrh	r3, [r7, #12]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d3e9      	bcc.n	8006be4 <OS_MsgPoolInit+0x4c>
    }
    p_msg1->NextPtr = (OS_MSG *)0;                              /* Last OS_MSG                                          */
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]
    p_msg1->MsgPtr  = (void   *)0;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	605a      	str	r2, [r3, #4]
    p_msg1->MsgSize =           0u;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	811a      	strh	r2, [r3, #8]
#if (OS_CFG_TS_EN > 0u)
    p_msg1->MsgTS   =           0u;
#endif

    OSMsgPool.NextPtr    = OSCfg_MsgPoolBasePtr;
 8006c22:	4b0b      	ldr	r3, [pc, #44]	@ (8006c50 <OS_MsgPoolInit+0xb8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a0c      	ldr	r2, [pc, #48]	@ (8006c58 <OS_MsgPoolInit+0xc0>)
 8006c28:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree    = OSCfg_MsgPoolSize;
 8006c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c54 <OS_MsgPoolInit+0xbc>)
 8006c2c:	881a      	ldrh	r2, [r3, #0]
 8006c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c58 <OS_MsgPoolInit+0xc0>)
 8006c30:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed    = 0u;
 8006c32:	4b09      	ldr	r3, [pc, #36]	@ (8006c58 <OS_MsgPoolInit+0xc0>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	80da      	strh	r2, [r3, #6]
#if (OS_CFG_DBG_EN > 0u)
    OSMsgPool.NbrUsedMax = 0u;
 8006c38:	4b07      	ldr	r3, [pc, #28]	@ (8006c58 <OS_MsgPoolInit+0xc0>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	811a      	strh	r2, [r3, #8]
#endif
   *p_err                = OS_ERR_NONE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	801a      	strh	r2, [r3, #0]
}
 8006c44:	371c      	adds	r7, #28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	08008f30 	.word	0x08008f30
 8006c54:	08008f2c 	.word	0x08008f2c
 8006c58:	200019c8 	.word	0x200019c8

08006c5c <OS_MsgQFreeAll>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_MSG_QTY  OS_MsgQFreeAll (OS_MSG_Q  *p_msg_q)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
    OS_MSG      *p_msg;
    OS_MSG_QTY   qty;



    qty = p_msg_q->NbrEntries;                                  /* Get the number of OS_MSGs being freed                */
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	895b      	ldrh	r3, [r3, #10]
 8006c68:	81fb      	strh	r3, [r7, #14]
    if (p_msg_q->NbrEntries > 0u) {
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	895b      	ldrh	r3, [r3, #10]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d026      	beq.n	8006cc0 <OS_MsgQFreeAll+0x64>
        p_msg                   = p_msg_q->InPtr;               /* Point to end of message chain                        */
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60bb      	str	r3, [r7, #8]
        p_msg->NextPtr          = OSMsgPool.NextPtr;
 8006c78:	4b15      	ldr	r3, [pc, #84]	@ (8006cd0 <OS_MsgQFreeAll+0x74>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	601a      	str	r2, [r3, #0]
        OSMsgPool.NextPtr       = p_msg_q->OutPtr;              /* Point to beginning of message chain                  */
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	4a12      	ldr	r2, [pc, #72]	@ (8006cd0 <OS_MsgQFreeAll+0x74>)
 8006c86:	6013      	str	r3, [r2, #0]
        OSMsgPool.NbrUsed      -= p_msg_q->NbrEntries;          /* Update statistics for free list of messages          */
 8006c88:	4b11      	ldr	r3, [pc, #68]	@ (8006cd0 <OS_MsgQFreeAll+0x74>)
 8006c8a:	88da      	ldrh	r2, [r3, #6]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	895b      	ldrh	r3, [r3, #10]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	4b0e      	ldr	r3, [pc, #56]	@ (8006cd0 <OS_MsgQFreeAll+0x74>)
 8006c96:	80da      	strh	r2, [r3, #6]
        OSMsgPool.NbrFree      += p_msg_q->NbrEntries;
 8006c98:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd0 <OS_MsgQFreeAll+0x74>)
 8006c9a:	889a      	ldrh	r2, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	895b      	ldrh	r3, [r3, #10]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd0 <OS_MsgQFreeAll+0x74>)
 8006ca6:	809a      	strh	r2, [r3, #4]
        p_msg_q->NbrEntries     =           0u;                 /* Flush the message queue                              */
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	815a      	strh	r2, [r3, #10]
#if (OS_CFG_DBG_EN > 0u)
        p_msg_q->NbrEntriesMax  =           0u;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	819a      	strh	r2, [r3, #12]
#endif
        p_msg_q->InPtr          = (OS_MSG *)0;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	601a      	str	r2, [r3, #0]
        p_msg_q->OutPtr         = (OS_MSG *)0;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	605a      	str	r2, [r3, #4]
    }
    return (qty);
 8006cc0:	89fb      	ldrh	r3, [r7, #14]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	200019c8 	.word	0x200019c8

08006cd4 <OS_MsgQInit>:
************************************************************************************************************************
*/

void  OS_MsgQInit (OS_MSG_Q    *p_msg_q,
                   OS_MSG_QTY   size)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	807b      	strh	r3, [r7, #2]
    p_msg_q->NbrEntriesSize = size;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	887a      	ldrh	r2, [r7, #2]
 8006ce4:	811a      	strh	r2, [r3, #8]
    p_msg_q->NbrEntries     =           0u;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	815a      	strh	r2, [r3, #10]
#if (OS_CFG_DBG_EN > 0u)
    p_msg_q->NbrEntriesMax  =           0u;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	819a      	strh	r2, [r3, #12]
#endif
    p_msg_q->InPtr          = (OS_MSG *)0;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	601a      	str	r2, [r3, #0]
    p_msg_q->OutPtr         = (OS_MSG *)0;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	605a      	str	r2, [r3, #4]
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
	...

08006d0c <OSMutexCreate>:
*/

void  OSMutexCreate (OS_MUTEX  *p_mutex,
                     CPU_CHAR  *p_name,
                     OS_ERR    *p_err)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
    CPU_SR_ALLOC();
 8006d18:	2300      	movs	r3, #0
 8006d1a:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to be called from an ISR                 */
 8006d1c:	4b24      	ldr	r3, [pc, #144]	@ (8006db0 <OSMutexCreate+0xa4>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d004      	beq.n	8006d2e <OSMutexCreate+0x22>
       *p_err = OS_ERR_CREATE_ISR;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f642 62e1 	movw	r2, #12001	@ 0x2ee1
 8006d2a:	801a      	strh	r2, [r3, #0]
        return;
 8006d2c:	e03c      	b.n	8006da8 <OSMutexCreate+0x9c>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_mutex == (OS_MUTEX *)0) {                             /* Validate 'p_mutex'                                   */
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d104      	bne.n	8006d3e <OSMutexCreate+0x32>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 8006d3a:	801a      	strh	r2, [r3, #0]
        return;
 8006d3c:	e034      	b.n	8006da8 <OSMutexCreate+0x9c>
    }
#endif

    CPU_CRITICAL_ENTER();
 8006d3e:	2040      	movs	r0, #64	@ 0x40
 8006d40:	f7f9 fa5a 	bl	80001f8 <CPU_SR_Save>
 8006d44:	6178      	str	r0, [r7, #20]
#if (OS_OBJ_TYPE_REQ > 0u)
#if (OS_CFG_OBJ_CREATED_CHK_EN > 0u)
    if (p_mutex->Type == OS_OBJ_TYPE_MUTEX) {
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a1a      	ldr	r2, [pc, #104]	@ (8006db4 <OSMutexCreate+0xa8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d107      	bne.n	8006d60 <OSMutexCreate+0x54>
        CPU_CRITICAL_EXIT();
 8006d50:	6978      	ldr	r0, [r7, #20]
 8006d52:	f7f9 fa5f 	bl	8000214 <CPU_SR_Restore>
        *p_err = OS_ERR_OBJ_CREATED;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f645 52c1 	movw	r2, #24001	@ 0x5dc1
 8006d5c:	801a      	strh	r2, [r3, #0]
        return;
 8006d5e:	e023      	b.n	8006da8 <OSMutexCreate+0x9c>
    }
#endif
    p_mutex->Type              =  OS_OBJ_TYPE_MUTEX;            /* Mark the data structure as a mutex                   */
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4a14      	ldr	r2, [pc, #80]	@ (8006db4 <OSMutexCreate+0xa8>)
 8006d64:	601a      	str	r2, [r3, #0]
#endif
#if (OS_CFG_DBG_EN > 0u)
    p_mutex->NamePtr           =  p_name;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	605a      	str	r2, [r3, #4]
#else
    (void)p_name;
#endif
    p_mutex->MutexGrpNextPtr   = (OS_MUTEX *)0;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	621a      	str	r2, [r3, #32]
    p_mutex->OwnerTCBPtr       = (OS_TCB   *)0;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	625a      	str	r2, [r3, #36]	@ 0x24
    p_mutex->OwnerNestingCtr   =             0u;                /* Mutex is available                                   */
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if (OS_CFG_TS_EN > 0u)
    p_mutex->TS                =             0u;
#endif
    OS_PendListInit(&p_mutex->PendList);                        /* Initialize the waiting list                          */
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3308      	adds	r3, #8
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7fe fe3c 	bl	8005a02 <OS_PendListInit>

#if (OS_CFG_DBG_EN > 0u)
    OS_MutexDbgListAdd(p_mutex);
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 f906 	bl	8006f9c <OS_MutexDbgListAdd>
    OSMutexQty++;
 8006d90:	4b09      	ldr	r3, [pc, #36]	@ (8006db8 <OSMutexCreate+0xac>)
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	3301      	adds	r3, #1
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	4b07      	ldr	r3, [pc, #28]	@ (8006db8 <OSMutexCreate+0xac>)
 8006d9a:	801a      	strh	r2, [r3, #0]
#endif

    OS_TRACE_MUTEX_CREATE(p_mutex, p_name);
    CPU_CRITICAL_EXIT();
 8006d9c:	6978      	ldr	r0, [r7, #20]
 8006d9e:	f7f9 fa39 	bl	8000214 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	801a      	strh	r2, [r3, #0]
}
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	200019ac 	.word	0x200019ac
 8006db4:	5854554d 	.word	0x5854554d
 8006db8:	200019d8 	.word	0x200019d8

08006dbc <OSMutexPend>:
void  OSMutexPend (OS_MUTEX  *p_mutex,
                   OS_TICK    timeout,
                   OS_OPT     opt,
                   CPU_TS    *p_ts,
                   OS_ERR    *p_err)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	603b      	str	r3, [r7, #0]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	80fb      	strh	r3, [r7, #6]
    OS_TCB  *p_tcb;
    CPU_SR_ALLOC();
 8006dcc:	2300      	movs	r3, #0
 8006dce:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
 8006dd0:	4b6d      	ldr	r3, [pc, #436]	@ (8006f88 <OSMutexPend+0x1cc>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d004      	beq.n	8006de2 <OSMutexPend+0x26>
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_PEND_ISR);
       *p_err = OS_ERR_PEND_ISR;
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	f246 12ae 	movw	r2, #25006	@ 0x61ae
 8006dde:	801a      	strh	r2, [r3, #0]
        return;
 8006de0:	e0cf      	b.n	8006f82 <OSMutexPend+0x1c6>
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 8006de2:	4b6a      	ldr	r3, [pc, #424]	@ (8006f8c <OSMutexPend+0x1d0>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d004      	beq.n	8006df4 <OSMutexPend+0x38>
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_OS_NOT_RUNNING);
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	f645 6289 	movw	r2, #24201	@ 0x5e89
 8006df0:	801a      	strh	r2, [r3, #0]
        return;
 8006df2:	e0c6      	b.n	8006f82 <OSMutexPend+0x1c6>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_mutex == (OS_MUTEX *)0) {                             /* Validate arguments                                   */
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d104      	bne.n	8006e04 <OSMutexPend+0x48>
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_OBJ_PTR_NULL);
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 8006e00:	801a      	strh	r2, [r3, #0]
        return;
 8006e02:	e0be      	b.n	8006f82 <OSMutexPend+0x1c6>
    }
    switch (opt) {                                              /* Validate 'opt'                                       */
 8006e04:	88fb      	ldrh	r3, [r7, #6]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d007      	beq.n	8006e1a <OSMutexPend+0x5e>
 8006e0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e0e:	d004      	beq.n	8006e1a <OSMutexPend+0x5e>
             break;

        default:
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
             OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_OPT_INVALID);
            *p_err = OS_ERR_OPT_INVALID;
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	f645 6225 	movw	r2, #24101	@ 0x5e25
 8006e16:	801a      	strh	r2, [r3, #0]
             return;
 8006e18:	e0b3      	b.n	8006f82 <OSMutexPend+0x1c6>
             break;
 8006e1a:	bf00      	nop
    }
#endif

#if (OS_CFG_OBJ_TYPE_CHK_EN > 0u)
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {                   /* Make sure mutex was created                          */
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a5b      	ldr	r2, [pc, #364]	@ (8006f90 <OSMutexPend+0x1d4>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d004      	beq.n	8006e30 <OSMutexPend+0x74>
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_OBJ_TYPE);
       *p_err = OS_ERR_OBJ_TYPE;
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	f645 52c4 	movw	r2, #24004	@ 0x5dc4
 8006e2c:	801a      	strh	r2, [r3, #0]
        return;
 8006e2e:	e0a8      	b.n	8006f82 <OSMutexPend+0x1c6>
    }
#endif

    CPU_CRITICAL_ENTER();
 8006e30:	2040      	movs	r0, #64	@ 0x40
 8006e32:	f7f9 f9e1 	bl	80001f8 <CPU_SR_Save>
 8006e36:	6178      	str	r0, [r7, #20]
    if (p_mutex->OwnerNestingCtr == 0u) {                       /* Resource available?                                  */
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d114      	bne.n	8006e6c <OSMutexPend+0xb0>
        p_mutex->OwnerTCBPtr     = OSTCBCurPtr;                 /* Yes, caller may proceed                              */
 8006e42:	4b54      	ldr	r3, [pc, #336]	@ (8006f94 <OSMutexPend+0x1d8>)
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	625a      	str	r2, [r3, #36]	@ 0x24
        p_mutex->OwnerNestingCtr = 1u;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if (OS_CFG_TS_EN > 0u)
        if (p_ts != (CPU_TS *)0) {
           *p_ts = p_mutex->TS;
        }
#endif
        OS_MutexGrpAdd(OSTCBCurPtr, p_mutex);                   /* Add mutex to owner's group                           */
 8006e52:	4b50      	ldr	r3, [pc, #320]	@ (8006f94 <OSMutexPend+0x1d8>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68f9      	ldr	r1, [r7, #12]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 f8c7 	bl	8006fec <OS_MutexGrpAdd>
        CPU_CRITICAL_EXIT();
 8006e5e:	6978      	ldr	r0, [r7, #20]
 8006e60:	f7f9 f9d8 	bl	8000214 <CPU_SR_Restore>
        OS_TRACE_MUTEX_PEND(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_NONE);
       *p_err = OS_ERR_NONE;
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	2200      	movs	r2, #0
 8006e68:	801a      	strh	r2, [r3, #0]
        return;
 8006e6a:	e08a      	b.n	8006f82 <OSMutexPend+0x1c6>
    }

    if (OSTCBCurPtr == p_mutex->OwnerTCBPtr) {                  /* See if current task is already the owner of the mutex*/
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e70:	4b48      	ldr	r3, [pc, #288]	@ (8006f94 <OSMutexPend+0x1d8>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d11c      	bne.n	8006eb2 <OSMutexPend+0xf6>
        if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)-1) {
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e7e:	2bff      	cmp	r3, #255	@ 0xff
 8006e80:	d107      	bne.n	8006e92 <OSMutexPend+0xd6>
            CPU_CRITICAL_EXIT();
 8006e82:	6978      	ldr	r0, [r7, #20]
 8006e84:	f7f9 f9c6 	bl	8000214 <CPU_SR_Restore>
            OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_MUTEX_OVF);
           *p_err = OS_ERR_MUTEX_OVF;
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	f245 7284 	movw	r2, #22404	@ 0x5784
 8006e8e:	801a      	strh	r2, [r3, #0]
            return;
 8006e90:	e077      	b.n	8006f82 <OSMutexPend+0x1c6>
        }
        p_mutex->OwnerNestingCtr++;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e98:	3301      	adds	r3, #1
 8006e9a:	b2da      	uxtb	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if (OS_CFG_TS_EN > 0u)
        if (p_ts != (CPU_TS *)0) {
           *p_ts = p_mutex->TS;
        }
#endif
        CPU_CRITICAL_EXIT();
 8006ea2:	6978      	ldr	r0, [r7, #20]
 8006ea4:	f7f9 f9b6 	bl	8000214 <CPU_SR_Restore>
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_MUTEX_OWNER);
       *p_err = OS_ERR_MUTEX_OWNER;                             /* Indicate that current task already owns the mutex    */
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	f245 7282 	movw	r2, #22402	@ 0x5782
 8006eae:	801a      	strh	r2, [r3, #0]
        return;
 8006eb0:	e067      	b.n	8006f82 <OSMutexPend+0x1c6>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {               /* Caller wants to block if not available?              */
 8006eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	da07      	bge.n	8006eca <OSMutexPend+0x10e>
        CPU_CRITICAL_EXIT();
 8006eba:	6978      	ldr	r0, [r7, #20]
 8006ebc:	f7f9 f9aa 	bl	8000214 <CPU_SR_Restore>
           *p_ts = 0u;
        }
#endif
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_PEND_WOULD_BLOCK);
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                        /* No                                                   */
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	f246 12b0 	movw	r2, #25008	@ 0x61b0
 8006ec6:	801a      	strh	r2, [r3, #0]
        return;
 8006ec8:	e05b      	b.n	8006f82 <OSMutexPend+0x1c6>
    } else {
        if (OSSchedLockNestingCtr > 0u) {                       /* Can't pend when the scheduler is locked              */
 8006eca:	4b33      	ldr	r3, [pc, #204]	@ (8006f98 <OSMutexPend+0x1dc>)
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d007      	beq.n	8006ee2 <OSMutexPend+0x126>
            CPU_CRITICAL_EXIT();
 8006ed2:	6978      	ldr	r0, [r7, #20]
 8006ed4:	f7f9 f99e 	bl	8000214 <CPU_SR_Restore>
               *p_ts = 0u;
            }
#endif
            OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_SCHED_LOCKED);
           *p_err = OS_ERR_SCHED_LOCKED;
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	f646 5263 	movw	r2, #28003	@ 0x6d63
 8006ede:	801a      	strh	r2, [r3, #0]
            return;
 8006ee0:	e04f      	b.n	8006f82 <OSMutexPend+0x1c6>
        }
    }

    p_tcb = p_mutex->OwnerTCBPtr;                               /* Point to the TCB of the Mutex owner                  */
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee6:	613b      	str	r3, [r7, #16]
    if (p_tcb->Prio > OSTCBCurPtr->Prio) {                      /* See if mutex owner has a lower priority than current */
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 8006eee:	4b29      	ldr	r3, [pc, #164]	@ (8006f94 <OSMutexPend+0x1d8>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d907      	bls.n	8006f0a <OSMutexPend+0x14e>
        OS_TaskChangePrio(p_tcb, OSTCBCurPtr->Prio);
 8006efa:	4b26      	ldr	r3, [pc, #152]	@ (8006f94 <OSMutexPend+0x1d8>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8006f02:	4619      	mov	r1, r3
 8006f04:	6938      	ldr	r0, [r7, #16]
 8006f06:	f001 f839 	bl	8007f7c <OS_TaskChangePrio>
        OS_TRACE_MUTEX_TASK_PRIO_INHERIT(p_tcb, p_tcb->Prio);
    }

    OS_Pend((OS_PEND_OBJ *)((void *)p_mutex),                   /* Block task pending on Mutex                          */
 8006f0a:	4b22      	ldr	r3, [pc, #136]	@ (8006f94 <OSMutexPend+0x1d8>)
 8006f0c:	6819      	ldr	r1, [r3, #0]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2204      	movs	r2, #4
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f7fe fcc8 	bl	80058a8 <OS_Pend>
             OSTCBCurPtr,
             OS_TASK_PEND_ON_MUTEX,
             timeout);

    CPU_CRITICAL_EXIT();
 8006f18:	6978      	ldr	r0, [r7, #20]
 8006f1a:	f7f9 f97b 	bl	8000214 <CPU_SR_Restore>
    OS_TRACE_MUTEX_PEND_BLOCK(p_mutex);
    OSSched();                                                  /* Find the next highest priority task ready to run     */
 8006f1e:	f7fe fbaf 	bl	8005680 <OSSched>

    CPU_CRITICAL_ENTER();
 8006f22:	2040      	movs	r0, #64	@ 0x40
 8006f24:	f7f9 f968 	bl	80001f8 <CPU_SR_Save>
 8006f28:	6178      	str	r0, [r7, #20]
    switch (OSTCBCurPtr->PendStatus) {
 8006f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8006f94 <OSMutexPend+0x1d8>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d81d      	bhi.n	8006f72 <OSMutexPend+0x1b6>
 8006f36:	a201      	add	r2, pc, #4	@ (adr r2, 8006f3c <OSMutexPend+0x180>)
 8006f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3c:	08006f4d 	.word	0x08006f4d
 8006f40:	08006f55 	.word	0x08006f55
 8006f44:	08006f69 	.word	0x08006f69
 8006f48:	08006f5f 	.word	0x08006f5f
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_MUTEX_PEND(p_mutex);
            *p_err = OS_ERR_NONE;
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	801a      	strh	r2, [r3, #0]
             break;
 8006f52:	e013      	b.n	8006f7c <OSMutexPend+0x1c0>
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            *p_err = OS_ERR_PEND_ABORT;
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	f246 12a9 	movw	r2, #25001	@ 0x61a9
 8006f5a:	801a      	strh	r2, [r3, #0]
             break;
 8006f5c:	e00e      	b.n	8006f7c <OSMutexPend+0x1c0>
             if (p_ts != (CPU_TS *)0) {
                *p_ts = 0u;
             }
#endif
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            *p_err = OS_ERR_TIMEOUT;
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	f247 22d9 	movw	r2, #29401	@ 0x72d9
 8006f64:	801a      	strh	r2, [r3, #0]
             break;
 8006f66:	e009      	b.n	8006f7c <OSMutexPend+0x1c0>
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            *p_err = OS_ERR_OBJ_DEL;
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	f645 52c2 	movw	r2, #24002	@ 0x5dc2
 8006f6e:	801a      	strh	r2, [r3, #0]
             break;
 8006f70:	e004      	b.n	8006f7c <OSMutexPend+0x1c0>

        default:
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            *p_err = OS_ERR_STATUS_INVALID;
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	f646 622e 	movw	r2, #28206	@ 0x6e2e
 8006f78:	801a      	strh	r2, [r3, #0]
             break;
 8006f7a:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
 8006f7c:	6978      	ldr	r0, [r7, #20]
 8006f7e:	f7f9 f949 	bl	8000214 <CPU_SR_Restore>
    OS_TRACE_MUTEX_PEND_EXIT(*p_err);
}
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	200019ac 	.word	0x200019ac
 8006f8c:	200019ad 	.word	0x200019ad
 8006f90:	5854554d 	.word	0x5854554d
 8006f94:	20001f1c 	.word	0x20001f1c
 8006f98:	20001cec 	.word	0x20001cec

08006f9c <OS_MutexDbgListAdd>:
************************************************************************************************************************
*/

#if (OS_CFG_DBG_EN > 0u)
void  OS_MutexDbgListAdd (OS_MUTEX  *p_mutex)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
    p_mutex->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8006fe4 <OS_MutexDbgListAdd+0x48>)
 8006fa8:	61da      	str	r2, [r3, #28]
    p_mutex->DbgPrevPtr               = (OS_MUTEX *)0;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	615a      	str	r2, [r3, #20]
    if (OSMutexDbgListPtr == (OS_MUTEX *)0) {
 8006fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe8 <OS_MutexDbgListAdd+0x4c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d103      	bne.n	8006fc0 <OS_MutexDbgListAdd+0x24>
        p_mutex->DbgNextPtr           = (OS_MUTEX *)0;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	619a      	str	r2, [r3, #24]
 8006fbe:	e007      	b.n	8006fd0 <OS_MutexDbgListAdd+0x34>
    } else {
        p_mutex->DbgNextPtr           =  OSMutexDbgListPtr;
 8006fc0:	4b09      	ldr	r3, [pc, #36]	@ (8006fe8 <OS_MutexDbgListAdd+0x4c>)
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	619a      	str	r2, [r3, #24]
        OSMutexDbgListPtr->DbgPrevPtr =  p_mutex;
 8006fc8:	4b07      	ldr	r3, [pc, #28]	@ (8006fe8 <OS_MutexDbgListAdd+0x4c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	615a      	str	r2, [r3, #20]
    }
    OSMutexDbgListPtr                 =  p_mutex;
 8006fd0:	4a05      	ldr	r2, [pc, #20]	@ (8006fe8 <OS_MutexDbgListAdd+0x4c>)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6013      	str	r3, [r2, #0]
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	08008ea4 	.word	0x08008ea4
 8006fe8:	200019d4 	.word	0x200019d4

08006fec <OS_MutexGrpAdd>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpAdd (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
    p_mutex->MutexGrpNextPtr = p_tcb->MutexGrpHeadPtr;      /* The mutex grp is not sorted add to head of list.       */
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	621a      	str	r2, [r3, #32]
    p_tcb->MutexGrpHeadPtr   = p_mutex;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <OS_MutexGrpRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpRemove (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
    OS_MUTEX  **pp_mutex;

    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	3340      	adds	r3, #64	@ 0x40
 800701e:	60fb      	str	r3, [r7, #12]

    while(*pp_mutex != p_mutex) {
 8007020:	e003      	b.n	800702a <OS_MutexGrpRemove+0x1a>
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3320      	adds	r3, #32
 8007028:	60fb      	str	r3, [r7, #12]
    while(*pp_mutex != p_mutex) {
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	429a      	cmp	r2, r3
 8007032:	d1f6      	bne.n	8007022 <OS_MutexGrpRemove+0x12>
    }

    *pp_mutex = (*pp_mutex)->MutexGrpNextPtr;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6a1a      	ldr	r2, [r3, #32]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	601a      	str	r2, [r3, #0]
}
 800703e:	bf00      	nop
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <OS_MutexGrpPrioFindHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_MutexGrpPrioFindHighest (OS_TCB  *p_tcb)
{
 800704a:	b480      	push	{r7}
 800704c:	b087      	sub	sp, #28
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
    OS_PRIO     highest_prio;
    OS_PRIO     prio;
    OS_TCB     *p_head;


    highest_prio = (OS_PRIO)(OS_CFG_PRIO_MAX - 1u);
 8007052:	233f      	movs	r3, #63	@ 0x3f
 8007054:	74fb      	strb	r3, [r7, #19]
    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	3340      	adds	r3, #64	@ 0x40
 800705a:	617b      	str	r3, [r7, #20]

    while(*pp_mutex != (OS_MUTEX *)0) {
 800705c:	e014      	b.n	8007088 <OS_MutexGrpPrioFindHighest+0x3e>
        p_head = (*pp_mutex)->PendList.HeadPtr;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	60fb      	str	r3, [r7, #12]
        if (p_head != (OS_TCB *)0) {
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d009      	beq.n	8007080 <OS_MutexGrpPrioFindHighest+0x36>
            prio = p_head->Prio;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007072:	72fb      	strb	r3, [r7, #11]
            if(prio < highest_prio) {
 8007074:	7afa      	ldrb	r2, [r7, #11]
 8007076:	7cfb      	ldrb	r3, [r7, #19]
 8007078:	429a      	cmp	r2, r3
 800707a:	d201      	bcs.n	8007080 <OS_MutexGrpPrioFindHighest+0x36>
                highest_prio = prio;
 800707c:	7afb      	ldrb	r3, [r7, #11]
 800707e:	74fb      	strb	r3, [r7, #19]
            }
        }
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	3320      	adds	r3, #32
 8007086:	617b      	str	r3, [r7, #20]
    while(*pp_mutex != (OS_MUTEX *)0) {
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e6      	bne.n	800705e <OS_MutexGrpPrioFindHighest+0x14>
    }

    return (highest_prio);
 8007090:	7cfb      	ldrb	r3, [r7, #19]
}
 8007092:	4618      	mov	r0, r3
 8007094:	371c      	adds	r7, #28
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <OS_MutexGrpPostAll>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpPostAll (OS_TCB  *p_tcb)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b08a      	sub	sp, #40	@ 0x28
 80070a2:	af02      	add	r7, sp, #8
 80070a4:	6078      	str	r0, [r7, #4]
    CPU_TS         ts;
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb_new;


    p_mutex = p_tcb->MutexGrpHeadPtr;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070aa:	61fb      	str	r3, [r7, #28]

    while(p_mutex != (OS_MUTEX *)0) {
 80070ac:	e02f      	b.n	800710e <OS_MutexGrpPostAll+0x70>

        OS_TRACE_MUTEX_POST(p_mutex);

        p_mutex_next = p_mutex->MutexGrpNextPtr;
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	61bb      	str	r3, [r7, #24]
#if (OS_CFG_TS_EN > 0u)
        ts           = OS_TS_GET();                             /* Get timestamp                                        */
        p_mutex->TS  = ts;
#else
        ts           = 0u;
 80070b4:	2300      	movs	r3, #0
 80070b6:	617b      	str	r3, [r7, #20]
#endif
        OS_MutexGrpRemove(p_tcb,  p_mutex);                     /* Remove mutex from owner's group                      */
 80070b8:	69f9      	ldr	r1, [r7, #28]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7ff ffa8 	bl	8007010 <OS_MutexGrpRemove>

        p_pend_list = &p_mutex->PendList;
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	3308      	adds	r3, #8
 80070c4:	613b      	str	r3, [r7, #16]
        if (p_pend_list->HeadPtr == (OS_TCB *)0) {              /* Any task waiting on mutex?                           */
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d107      	bne.n	80070de <OS_MutexGrpPostAll+0x40>
            p_mutex->OwnerNestingCtr =           0u;            /* Decrement owner's nesting counter                    */
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            p_mutex->OwnerTCBPtr     = (OS_TCB *)0;             /* No                                                   */
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	2200      	movs	r2, #0
 80070da:	625a      	str	r2, [r3, #36]	@ 0x24
 80070dc:	e015      	b.n	800710a <OS_MutexGrpPostAll+0x6c>
        } else {
                                                                /* Get TCB from head of pend list                       */
            p_tcb_new                = p_pend_list->HeadPtr;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	60fb      	str	r3, [r7, #12]
            p_mutex->OwnerTCBPtr     = p_tcb;                   /* Give mutex to new owner                              */
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	625a      	str	r2, [r3, #36]	@ 0x24
            p_mutex->OwnerNestingCtr = 1u;
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            OS_MutexGrpAdd(p_tcb_new, p_mutex);
 80070f2:	69f9      	ldr	r1, [r7, #28]
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f7ff ff79 	bl	8006fec <OS_MutexGrpAdd>
                                                                /* Post to mutex                                        */
            OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	2300      	movs	r3, #0
 8007100:	2200      	movs	r2, #0
 8007102:	68f9      	ldr	r1, [r7, #12]
 8007104:	69f8      	ldr	r0, [r7, #28]
 8007106:	f7fe fd51 	bl	8005bac <OS_Post>
                                   (void *)0,
                                   0u,
                                   ts);
        }

        p_mutex = p_mutex_next;
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	61fb      	str	r3, [r7, #28]
    while(p_mutex != (OS_MUTEX *)0) {
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1cc      	bne.n	80070ae <OS_MutexGrpPostAll+0x10>
    }

}
 8007114:	bf00      	nop
 8007116:	bf00      	nop
 8007118:	3720      	adds	r7, #32
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
	...

08007120 <OS_PrioInit>:
* Note       : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_PrioInit (void)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
    CPU_DATA  i;


                                                                /* Clear the bitmap table ... no task is ready          */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 8007126:	2300      	movs	r3, #0
 8007128:	607b      	str	r3, [r7, #4]
 800712a:	e007      	b.n	800713c <OS_PrioInit+0x1c>
         OSPrioTbl[i] = 0u;
 800712c:	4a08      	ldr	r2, [pc, #32]	@ (8007150 <OS_PrioInit+0x30>)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2100      	movs	r1, #0
 8007132:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	3301      	adds	r3, #1
 800713a:	607b      	str	r3, [r7, #4]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d9f4      	bls.n	800712c <OS_PrioInit+0xc>
    }

#if (OS_CFG_TASK_IDLE_EN == 0u)
    OS_PrioInsert ((OS_PRIO)(OS_CFG_PRIO_MAX - 1u));            /* Insert what would be the idle task                   */
#endif
}
 8007142:	bf00      	nop
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	200019dc 	.word	0x200019dc

08007154 <OS_PrioGetHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_PrioGetHighest (void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	af00      	add	r7, sp, #0
#if   (OS_CFG_PRIO_MAX <= (CPU_CFG_DATA_SIZE * 8u))             /* Optimize for less than word size nbr of priorities   */
    return ((OS_PRIO)CPU_CntLeadZeros(OSPrioTbl[0]));


#elif (OS_CFG_PRIO_MAX <= (2u * (CPU_CFG_DATA_SIZE * 8u)))      /* Optimize for    2x the word size nbr of priorities   */
    if (OSPrioTbl[0] == 0u) {
 8007158:	4b0b      	ldr	r3, [pc, #44]	@ (8007188 <OS_PrioGetHighest+0x34>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d109      	bne.n	8007174 <OS_PrioGetHighest+0x20>
        return ((OS_PRIO)((OS_PRIO)CPU_CntLeadZeros(OSPrioTbl[1]) + (CPU_CFG_DATA_SIZE * 8u)));
 8007160:	4b09      	ldr	r3, [pc, #36]	@ (8007188 <OS_PrioGetHighest+0x34>)
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	4618      	mov	r0, r3
 8007166:	f7f9 f862 	bl	800022e <CPU_CntLeadZeros>
 800716a:	4603      	mov	r3, r0
 800716c:	b2db      	uxtb	r3, r3
 800716e:	3320      	adds	r3, #32
 8007170:	b2db      	uxtb	r3, r3
 8007172:	e006      	b.n	8007182 <OS_PrioGetHighest+0x2e>
    } else {
        return ((OS_PRIO)((OS_PRIO)CPU_CntLeadZeros(OSPrioTbl[0])));
 8007174:	4b04      	ldr	r3, [pc, #16]	@ (8007188 <OS_PrioGetHighest+0x34>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4618      	mov	r0, r3
 800717a:	f7f9 f858 	bl	800022e <CPU_CntLeadZeros>
 800717e:	4603      	mov	r3, r0
 8007180:	b2db      	uxtb	r3, r3
    }
    prio += (OS_PRIO)CPU_CntLeadZeros(*p_tbl);                  /* Find the position of the first bit set at the entry  */

    return (prio);
#endif
}
 8007182:	4618      	mov	r0, r3
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	200019dc 	.word	0x200019dc

0800718c <OS_PrioInsert>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioInsert (OS_PRIO  prio)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	4603      	mov	r3, r0
 8007194:	71fb      	strb	r3, [r7, #7]
#if   (OS_CFG_PRIO_MAX <= (CPU_CFG_DATA_SIZE * 8u))             /* Optimize for less than word size nbr of priorities   */
    OSPrioTbl[0] |= (CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - prio);


#elif (OS_CFG_PRIO_MAX <= (2u * (CPU_CFG_DATA_SIZE * 8u)))      /* Optimize for    2x the word size nbr of priorities   */
    if (prio < (CPU_CFG_DATA_SIZE * 8u)) {
 8007196:	79fb      	ldrb	r3, [r7, #7]
 8007198:	2b1f      	cmp	r3, #31
 800719a:	d80a      	bhi.n	80071b2 <OS_PrioInsert+0x26>
        OSPrioTbl[0] |= (CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - prio);
 800719c:	4b0d      	ldr	r3, [pc, #52]	@ (80071d4 <OS_PrioInsert+0x48>)
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	79fb      	ldrb	r3, [r7, #7]
 80071a2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80071a6:	fa21 f303 	lsr.w	r3, r1, r3
 80071aa:	4313      	orrs	r3, r2
 80071ac:	4a09      	ldr	r2, [pc, #36]	@ (80071d4 <OS_PrioInsert+0x48>)
 80071ae:	6013      	str	r3, [r2, #0]

    ix             = (OS_PRIO)(prio /  (CPU_CFG_DATA_SIZE * 8u));
    bit_nbr        = (CPU_DATA)prio & ((CPU_CFG_DATA_SIZE * 8u) - 1u);
    OSPrioTbl[ix] |= (CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - bit_nbr);
#endif
}
 80071b0:	e00a      	b.n	80071c8 <OS_PrioInsert+0x3c>
        OSPrioTbl[1] |= (CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - (prio - (CPU_CFG_DATA_SIZE * 8u)));
 80071b2:	4b08      	ldr	r3, [pc, #32]	@ (80071d4 <OS_PrioInsert+0x48>)
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	79fb      	ldrb	r3, [r7, #7]
 80071b8:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 80071bc:	2101      	movs	r1, #1
 80071be:	fa01 f303 	lsl.w	r3, r1, r3
 80071c2:	4313      	orrs	r3, r2
 80071c4:	4a03      	ldr	r2, [pc, #12]	@ (80071d4 <OS_PrioInsert+0x48>)
 80071c6:	6053      	str	r3, [r2, #4]
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	200019dc 	.word	0x200019dc

080071d8 <OS_PrioRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioRemove (OS_PRIO  prio)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	4603      	mov	r3, r0
 80071e0:	71fb      	strb	r3, [r7, #7]
#if   (OS_CFG_PRIO_MAX <= (CPU_CFG_DATA_SIZE * 8u))             /* Optimize for less than word size nbr of priorities   */
    OSPrioTbl[0] &= ~((CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - prio));


#elif (OS_CFG_PRIO_MAX <= (2u * (CPU_CFG_DATA_SIZE * 8u)))      /* Optimize for    2x the word size nbr of priorities   */
    if (prio < (CPU_CFG_DATA_SIZE * 8u)) {
 80071e2:	79fb      	ldrb	r3, [r7, #7]
 80071e4:	2b1f      	cmp	r3, #31
 80071e6:	d80b      	bhi.n	8007200 <OS_PrioRemove+0x28>
        OSPrioTbl[0] &= ~((CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - prio));
 80071e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007224 <OS_PrioRemove+0x4c>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	79fb      	ldrb	r3, [r7, #7]
 80071ee:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80071f2:	fa21 f303 	lsr.w	r3, r1, r3
 80071f6:	43db      	mvns	r3, r3
 80071f8:	4013      	ands	r3, r2
 80071fa:	4a0a      	ldr	r2, [pc, #40]	@ (8007224 <OS_PrioRemove+0x4c>)
 80071fc:	6013      	str	r3, [r2, #0]

    ix             =   (OS_PRIO)(prio  /   (CPU_CFG_DATA_SIZE * 8u));
    bit_nbr        =   (CPU_DATA)prio  &  ((CPU_CFG_DATA_SIZE * 8u) - 1u);
    OSPrioTbl[ix] &= ~((CPU_DATA)  1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - bit_nbr));
#endif
}
 80071fe:	e00b      	b.n	8007218 <OS_PrioRemove+0x40>
        OSPrioTbl[1] &= ~((CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - (prio - (CPU_CFG_DATA_SIZE * 8u))));
 8007200:	4b08      	ldr	r3, [pc, #32]	@ (8007224 <OS_PrioRemove+0x4c>)
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	79fb      	ldrb	r3, [r7, #7]
 8007206:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800720a:	2101      	movs	r1, #1
 800720c:	fa01 f303 	lsl.w	r3, r1, r3
 8007210:	43db      	mvns	r3, r3
 8007212:	4013      	ands	r3, r2
 8007214:	4a03      	ldr	r2, [pc, #12]	@ (8007224 <OS_PrioRemove+0x4c>)
 8007216:	6053      	str	r3, [r2, #4]
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	200019dc 	.word	0x200019dc

08007228 <OSStatReset>:
* Note(s)    : none
************************************************************************************************************************
*/

void  OSStatReset (OS_ERR  *p_err)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
#endif
#if (OS_CFG_Q_EN > 0u)
    OS_Q        *p_q;
#endif
#endif
    CPU_SR_ALLOC();
 8007230:	2300      	movs	r3, #0
 8007232:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 8007234:	2040      	movs	r0, #64	@ 0x40
 8007236:	f7f8 ffdf 	bl	80001f8 <CPU_SR_Save>
 800723a:	60f8      	str	r0, [r7, #12]
#if (OS_CFG_STAT_TASK_EN > 0u)
    OSStatTaskCPUUsageMax = 0u;
 800723c:	4b33      	ldr	r3, [pc, #204]	@ (800730c <OSStatReset+0xe4>)
 800723e:	2200      	movs	r2, #0
 8007240:	801a      	strh	r2, [r3, #0]
#if (OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u)
    OSSchedLockTimeMax    = 0u;                                 /* Reset the maximum scheduler lock time                */
#endif

#if ((OS_MSG_EN > 0u) && (OS_CFG_DBG_EN > 0u))
    OSMsgPool.NbrUsedMax  = 0u;
 8007242:	4b33      	ldr	r3, [pc, #204]	@ (8007310 <OSStatReset+0xe8>)
 8007244:	2200      	movs	r2, #0
 8007246:	811a      	strh	r2, [r3, #8]
#endif
    CPU_CRITICAL_EXIT();
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f7f8 ffe3 	bl	8000214 <CPU_SR_Restore>

#if (OS_CFG_DBG_EN > 0u)
    CPU_CRITICAL_ENTER();
 800724e:	2040      	movs	r0, #64	@ 0x40
 8007250:	f7f8 ffd2 	bl	80001f8 <CPU_SR_Save>
 8007254:	60f8      	str	r0, [r7, #12]
    p_tcb = OSTaskDbgListPtr;
 8007256:	4b2f      	ldr	r3, [pc, #188]	@ (8007314 <OSStatReset+0xec>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	617b      	str	r3, [r7, #20]
    CPU_CRITICAL_EXIT();
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f7f8 ffd9 	bl	8000214 <CPU_SR_Restore>
    while (p_tcb != (OS_TCB *)0) {                              /* Reset per-Task statistics                            */
 8007262:	e02b      	b.n	80072bc <OSStatReset+0x94>
        CPU_CRITICAL_ENTER();
 8007264:	2040      	movs	r0, #64	@ 0x40
 8007266:	f7f8 ffc7 	bl	80001f8 <CPU_SR_Save>
 800726a:	60f8      	str	r0, [r7, #12]
        p_tcb->SchedLockTimeMax = 0u;
#endif

#if (OS_CFG_TASK_PROFILE_EN > 0u)
#if (OS_CFG_TASK_Q_EN > 0u)
        p_tcb->MsgQPendTimeMax  = 0u;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	2200      	movs	r2, #0
 8007270:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
        p_tcb->SemPendTimeMax   = 0u;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2200      	movs	r2, #0
 8007276:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        p_tcb->CtxSwCtr         = 0u;
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2200      	movs	r2, #0
 800727e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        p_tcb->CPUUsage         = 0u;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2200      	movs	r2, #0
 8007286:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
        p_tcb->CPUUsageMax      = 0u;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	2200      	movs	r2, #0
 800728e:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
        p_tcb->CyclesTotal      = 0u;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2200      	movs	r2, #0
 8007296:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        p_tcb->CyclesTotalPrev  = 0u;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2200      	movs	r2, #0
 800729e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        p_tcb->CyclesStart      = OS_TS_GET();
#endif
#endif

#if (OS_CFG_TASK_Q_EN > 0u)
        p_msg_q                 = &p_tcb->MsgQ;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	3368      	adds	r3, #104	@ 0x68
 80072a6:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax  = 0u;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2200      	movs	r2, #0
 80072ac:	819a      	strh	r2, [r3, #12]
#endif
        p_tcb                   = p_tcb->DbgNextPtr;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80072b4:	617b      	str	r3, [r7, #20]
        CPU_CRITICAL_EXIT();
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f7f8 ffac 	bl	8000214 <CPU_SR_Restore>
    while (p_tcb != (OS_TCB *)0) {                              /* Reset per-Task statistics                            */
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1d0      	bne.n	8007264 <OSStatReset+0x3c>
    }
#endif

#if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
    CPU_CRITICAL_ENTER();
 80072c2:	2040      	movs	r0, #64	@ 0x40
 80072c4:	f7f8 ff98 	bl	80001f8 <CPU_SR_Save>
 80072c8:	60f8      	str	r0, [r7, #12]
    p_q = OSQDbgListPtr;
 80072ca:	4b13      	ldr	r3, [pc, #76]	@ (8007318 <OSStatReset+0xf0>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f7f8 ff9f 	bl	8000214 <CPU_SR_Restore>
    while (p_q != (OS_Q *)0) {                                  /* Reset message queues statistics                      */
 80072d6:	e00f      	b.n	80072f8 <OSStatReset+0xd0>
        CPU_CRITICAL_ENTER();
 80072d8:	2040      	movs	r0, #64	@ 0x40
 80072da:	f7f8 ff8d 	bl	80001f8 <CPU_SR_Save>
 80072de:	60f8      	str	r0, [r7, #12]
        p_msg_q                = &p_q->MsgQ;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	3320      	adds	r3, #32
 80072e4:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax = 0u;
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	2200      	movs	r2, #0
 80072ea:	819a      	strh	r2, [r3, #12]
        p_q                    = p_q->DbgNextPtr;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	613b      	str	r3, [r7, #16]
        CPU_CRITICAL_EXIT();
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f7f8 ff8e 	bl	8000214 <CPU_SR_Restore>
    while (p_q != (OS_Q *)0) {                                  /* Reset message queues statistics                      */
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1ec      	bne.n	80072d8 <OSStatReset+0xb0>
    }
#endif


   *p_err = OS_ERR_NONE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	801a      	strh	r2, [r3, #0]
}
 8007304:	bf00      	nop
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	20001d02 	.word	0x20001d02
 8007310:	200019c8 	.word	0x200019c8
 8007314:	20001ddc 	.word	0x20001ddc
 8007318:	200019e4 	.word	0x200019e4

0800731c <OS_StatTask>:
*              4) This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTask (void  *p_arg)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b092      	sub	sp, #72	@ 0x48
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) && (OS_CFG_ISR_STK_SIZE > 0u)
    CPU_STK     *p_stk;
    CPU_INT32U   free_stk;
    CPU_INT32U   size_stk;
#endif
    CPU_SR_ALLOC();
 8007324:	2300      	movs	r3, #0
 8007326:	61bb      	str	r3, [r7, #24]


    (void)p_arg;                                                /* Prevent compiler warning for not using 'p_arg'       */

    while (OSStatTaskRdy != OS_TRUE) {
 8007328:	e008      	b.n	800733c <OS_StatTask+0x20>
        OSTimeDly(2u * OSCfg_StatTaskRate_Hz,                   /* Wait until statistic task is ready                   */
 800732a:	4b85      	ldr	r3, [pc, #532]	@ (8007540 <OS_StatTask+0x224>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	f107 020e 	add.w	r2, r7, #14
 8007334:	2100      	movs	r1, #0
 8007336:	4618      	mov	r0, r3
 8007338:	f001 f93c 	bl	80085b4 <OSTimeDly>
    while (OSStatTaskRdy != OS_TRUE) {
 800733c:	4b81      	ldr	r3, [pc, #516]	@ (8007544 <OS_StatTask+0x228>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d1f2      	bne.n	800732a <OS_StatTask+0xe>
                  OS_OPT_TIME_DLY,
                  &err);
    }
    OSStatReset(&err);                                          /* Reset statistics                                     */
 8007344:	f107 030e 	add.w	r3, r7, #14
 8007348:	4618      	mov	r0, r3
 800734a:	f7ff ff6d 	bl	8007228 <OSStatReset>

    dly = (OS_TICK)0;                                           /* Compute statistic task sleep delay                   */
 800734e:	2300      	movs	r3, #0
 8007350:	627b      	str	r3, [r7, #36]	@ 0x24
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 8007352:	4b7d      	ldr	r3, [pc, #500]	@ (8007548 <OS_StatTask+0x22c>)
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	4b7a      	ldr	r3, [pc, #488]	@ (8007540 <OS_StatTask+0x224>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	429a      	cmp	r2, r3
 800735c:	d906      	bls.n	800736c <OS_StatTask+0x50>
        dly = (OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 800735e:	4b7a      	ldr	r3, [pc, #488]	@ (8007548 <OS_StatTask+0x22c>)
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	4b77      	ldr	r3, [pc, #476]	@ (8007540 <OS_StatTask+0x224>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	fbb2 f3f3 	udiv	r3, r2, r3
 800736a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    if (dly == 0u) {
 800736c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736e:	2b00      	cmp	r3, #0
 8007370:	d106      	bne.n	8007380 <OS_StatTask+0x64>
        dly =  (OSCfg_TickRate_Hz / 10u);
 8007372:	4b75      	ldr	r3, [pc, #468]	@ (8007548 <OS_StatTask+0x22c>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a75      	ldr	r2, [pc, #468]	@ (800754c <OS_StatTask+0x230>)
 8007378:	fba2 2303 	umull	r2, r3, r2, r3
 800737c:	08db      	lsrs	r3, r3, #3
 800737e:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef  CPU_CFG_INT_DIS_MEAS_EN
        OSIntDisTimeMax = CPU_IntDisMeasMaxGet();
#endif
#endif

        CPU_CRITICAL_ENTER();                                   /* ---------------- OVERALL CPU USAGE ----------------- */
 8007380:	2040      	movs	r0, #64	@ 0x40
 8007382:	f7f8 ff39 	bl	80001f8 <CPU_SR_Save>
 8007386:	61b8      	str	r0, [r7, #24]
        OSStatTaskCtrRun   = OSStatTaskCtr;                     /* Obtain the of the stat counter for the past .1 second*/
 8007388:	4b71      	ldr	r3, [pc, #452]	@ (8007550 <OS_StatTask+0x234>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a71      	ldr	r2, [pc, #452]	@ (8007554 <OS_StatTask+0x238>)
 800738e:	6013      	str	r3, [r2, #0]
        OSStatTaskCtr      = 0u;                                /* Reset the stat counter for the next .1 second        */
 8007390:	4b6f      	ldr	r3, [pc, #444]	@ (8007550 <OS_StatTask+0x234>)
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]
        CPU_CRITICAL_EXIT();
 8007396:	69b8      	ldr	r0, [r7, #24]
 8007398:	f7f8 ff3c 	bl	8000214 <CPU_SR_Restore>

        if (OSStatTaskCtrMax > OSStatTaskCtrRun) {              /* Compute CPU Usage with best resolution               */
 800739c:	4b6e      	ldr	r3, [pc, #440]	@ (8007558 <OS_StatTask+0x23c>)
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	4b6c      	ldr	r3, [pc, #432]	@ (8007554 <OS_StatTask+0x238>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d94f      	bls.n	8007448 <OS_StatTask+0x12c>
            if (OSStatTaskCtrMax < 400000u) {                   /* 1 to       400,000                                   */
 80073a8:	4b6b      	ldr	r3, [pc, #428]	@ (8007558 <OS_StatTask+0x23c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a6b      	ldr	r2, [pc, #428]	@ (800755c <OS_StatTask+0x240>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d805      	bhi.n	80073be <OS_StatTask+0xa2>
                ctr_mult = 10000u;
 80073b2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80073b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  =     1u;
 80073b8:	2301      	movs	r3, #1
 80073ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073bc:	e024      	b.n	8007408 <OS_StatTask+0xec>
            } else if (OSStatTaskCtrMax <   4000000u) {         /* 400,000 to     4,000,000                             */
 80073be:	4b66      	ldr	r3, [pc, #408]	@ (8007558 <OS_StatTask+0x23c>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a67      	ldr	r2, [pc, #412]	@ (8007560 <OS_StatTask+0x244>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d805      	bhi.n	80073d4 <OS_StatTask+0xb8>
                ctr_mult =  1000u;
 80073c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80073cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  =    10u;
 80073ce:	230a      	movs	r3, #10
 80073d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073d2:	e019      	b.n	8007408 <OS_StatTask+0xec>
            } else if (OSStatTaskCtrMax <  40000000u) {         /* 4,000,000 to    40,000,000                           */
 80073d4:	4b60      	ldr	r3, [pc, #384]	@ (8007558 <OS_StatTask+0x23c>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a62      	ldr	r2, [pc, #392]	@ (8007564 <OS_StatTask+0x248>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d204      	bcs.n	80073e8 <OS_StatTask+0xcc>
                ctr_mult =   100u;
 80073de:	2364      	movs	r3, #100	@ 0x64
 80073e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  =   100u;
 80073e2:	2364      	movs	r3, #100	@ 0x64
 80073e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073e6:	e00f      	b.n	8007408 <OS_StatTask+0xec>
            } else if (OSStatTaskCtrMax < 400000000u) {         /* 40,000,000 to   400,000,000                          */
 80073e8:	4b5b      	ldr	r3, [pc, #364]	@ (8007558 <OS_StatTask+0x23c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a5e      	ldr	r2, [pc, #376]	@ (8007568 <OS_StatTask+0x24c>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d805      	bhi.n	80073fe <OS_StatTask+0xe2>
                ctr_mult =    10u;
 80073f2:	230a      	movs	r3, #10
 80073f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  =  1000u;
 80073f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80073fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073fc:	e004      	b.n	8007408 <OS_StatTask+0xec>
            } else {                                            /* 400,000,000 and up                                   */
                ctr_mult =     1u;
 80073fe:	2301      	movs	r3, #1
 8007400:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  = 10000u;
 8007402:	f242 7310 	movw	r3, #10000	@ 0x2710
 8007406:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
            ctr_max            = OSStatTaskCtrMax / ctr_div;
 8007408:	4b53      	ldr	r3, [pc, #332]	@ (8007558 <OS_StatTask+0x23c>)
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007412:	617b      	str	r3, [r7, #20]
            OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ((ctr_mult * OSStatTaskCtrRun) / ctr_max));
 8007414:	4b4f      	ldr	r3, [pc, #316]	@ (8007554 <OS_StatTask+0x238>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800741a:	fb03 f202 	mul.w	r2, r3, r2
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	fbb2 f3f3 	udiv	r3, r2, r3
 8007424:	b29b      	uxth	r3, r3
 8007426:	f5c3 531c 	rsb	r3, r3, #9984	@ 0x2700
 800742a:	3310      	adds	r3, #16
 800742c:	b29a      	uxth	r2, r3
 800742e:	4b4f      	ldr	r3, [pc, #316]	@ (800756c <OS_StatTask+0x250>)
 8007430:	801a      	strh	r2, [r3, #0]
            if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
 8007432:	4b4f      	ldr	r3, [pc, #316]	@ (8007570 <OS_StatTask+0x254>)
 8007434:	881a      	ldrh	r2, [r3, #0]
 8007436:	4b4d      	ldr	r3, [pc, #308]	@ (800756c <OS_StatTask+0x250>)
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	429a      	cmp	r2, r3
 800743c:	d207      	bcs.n	800744e <OS_StatTask+0x132>
                OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
 800743e:	4b4b      	ldr	r3, [pc, #300]	@ (800756c <OS_StatTask+0x250>)
 8007440:	881a      	ldrh	r2, [r3, #0]
 8007442:	4b4b      	ldr	r3, [pc, #300]	@ (8007570 <OS_StatTask+0x254>)
 8007444:	801a      	strh	r2, [r3, #0]
 8007446:	e002      	b.n	800744e <OS_StatTask+0x132>
            }
        } else {
            OSStatTaskCPUUsage = 0u;
 8007448:	4b48      	ldr	r3, [pc, #288]	@ (800756c <OS_StatTask+0x250>)
 800744a:	2200      	movs	r2, #0
 800744c:	801a      	strh	r2, [r3, #0]
        }

        OSStatTaskHook();                                       /* Invoke user definable hook                           */
 800744e:	f7fd fe63 	bl	8005118 <OSStatTaskHook>


#if (OS_CFG_DBG_EN > 0u)
#if (OS_CFG_TASK_PROFILE_EN > 0u)
        cycles_total = 0u;
 8007452:	2300      	movs	r3, #0
 8007454:	643b      	str	r3, [r7, #64]	@ 0x40

        CPU_CRITICAL_ENTER();
 8007456:	2040      	movs	r0, #64	@ 0x40
 8007458:	f7f8 fece 	bl	80001f8 <CPU_SR_Save>
 800745c:	61b8      	str	r0, [r7, #24]
        p_tcb = OSTaskDbgListPtr;
 800745e:	4b45      	ldr	r3, [pc, #276]	@ (8007574 <OS_StatTask+0x258>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	633b      	str	r3, [r7, #48]	@ 0x30
        CPU_CRITICAL_EXIT();
 8007464:	69b8      	ldr	r0, [r7, #24]
 8007466:	f7f8 fed5 	bl	8000214 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {                          /* ---------------- TOTAL CYCLES COUNT ---------------- */
 800746a:	e021      	b.n	80074b0 <OS_StatTask+0x194>
            CPU_CRITICAL_ENTER();
 800746c:	2040      	movs	r0, #64	@ 0x40
 800746e:	f7f8 fec3 	bl	80001f8 <CPU_SR_Save>
 8007472:	61b8      	str	r0, [r7, #24]
            p_tcb->CyclesTotalPrev = p_tcb->CyclesTotal;        /* Save accumulated # cycles into a temp variable       */
 8007474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007476:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800747a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            p_tcb->CyclesTotal     = 0u;                        /* Reset total cycles for task for next run             */
 8007480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007482:	2200      	movs	r2, #0
 8007484:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
            CPU_CRITICAL_EXIT();
 8007488:	69b8      	ldr	r0, [r7, #24]
 800748a:	f7f8 fec3 	bl	8000214 <CPU_SR_Restore>

            cycles_total          += p_tcb->CyclesTotalPrev;    /* Perform sum of all task # cycles                     */
 800748e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007490:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007494:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007496:	4413      	add	r3, r2
 8007498:	643b      	str	r3, [r7, #64]	@ 0x40

            CPU_CRITICAL_ENTER();
 800749a:	2040      	movs	r0, #64	@ 0x40
 800749c:	f7f8 feac 	bl	80001f8 <CPU_SR_Save>
 80074a0:	61b8      	str	r0, [r7, #24]
            p_tcb                  = p_tcb->DbgNextPtr;
 80074a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80074a8:	633b      	str	r3, [r7, #48]	@ 0x30
            CPU_CRITICAL_EXIT();
 80074aa:	69b8      	ldr	r0, [r7, #24]
 80074ac:	f7f8 feb2 	bl	8000214 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {                          /* ---------------- TOTAL CYCLES COUNT ---------------- */
 80074b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1da      	bne.n	800746c <OS_StatTask+0x150>
#endif


#if (OS_CFG_TASK_PROFILE_EN > 0u)
                                                                /* ------------ INDIVIDUAL TASK CPU USAGE ------------- */
        if (cycles_total > 0u) {                                /* 'cycles_total' scaling ...                           */
 80074b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d031      	beq.n	8007520 <OS_StatTask+0x204>
            if (cycles_total < 400000u) {                       /* 1 to       400,000                                   */
 80074bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074be:	4a27      	ldr	r2, [pc, #156]	@ (800755c <OS_StatTask+0x240>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d805      	bhi.n	80074d0 <OS_StatTask+0x1b4>
                cycles_mult = 10000u;
 80074c4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80074c8:	63bb      	str	r3, [r7, #56]	@ 0x38
                cycles_div  =     1u;
 80074ca:	2301      	movs	r3, #1
 80074cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074ce:	e021      	b.n	8007514 <OS_StatTask+0x1f8>
            } else if (cycles_total <   4000000u) {             /* 400,000 to     4,000,000                             */
 80074d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074d2:	4a23      	ldr	r2, [pc, #140]	@ (8007560 <OS_StatTask+0x244>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d805      	bhi.n	80074e4 <OS_StatTask+0x1c8>
                cycles_mult =  1000u;
 80074d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80074dc:	63bb      	str	r3, [r7, #56]	@ 0x38
                cycles_div  =    10u;
 80074de:	230a      	movs	r3, #10
 80074e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074e2:	e017      	b.n	8007514 <OS_StatTask+0x1f8>
            } else if (cycles_total <  40000000u) {             /* 4,000,000 to    40,000,000                           */
 80074e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074e6:	4a1f      	ldr	r2, [pc, #124]	@ (8007564 <OS_StatTask+0x248>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d204      	bcs.n	80074f6 <OS_StatTask+0x1da>
                cycles_mult =   100u;
 80074ec:	2364      	movs	r3, #100	@ 0x64
 80074ee:	63bb      	str	r3, [r7, #56]	@ 0x38
                cycles_div  =   100u;
 80074f0:	2364      	movs	r3, #100	@ 0x64
 80074f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074f4:	e00e      	b.n	8007514 <OS_StatTask+0x1f8>
            } else if (cycles_total < 400000000u) {             /* 40,000,000 to   400,000,000                          */
 80074f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074f8:	4a1b      	ldr	r2, [pc, #108]	@ (8007568 <OS_StatTask+0x24c>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d805      	bhi.n	800750a <OS_StatTask+0x1ee>
                cycles_mult =    10u;
 80074fe:	230a      	movs	r3, #10
 8007500:	63bb      	str	r3, [r7, #56]	@ 0x38
                cycles_div  =  1000u;
 8007502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007506:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007508:	e004      	b.n	8007514 <OS_StatTask+0x1f8>
            } else {                                            /* 400,000,000 and up                                   */
                cycles_mult =     1u;
 800750a:	2301      	movs	r3, #1
 800750c:	63bb      	str	r3, [r7, #56]	@ 0x38
                cycles_div  = 10000u;
 800750e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8007512:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            cycles_max  = cycles_total / cycles_div;
 8007514:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007518:	fbb2 f3f3 	udiv	r3, r2, r3
 800751c:	637b      	str	r3, [r7, #52]	@ 0x34
 800751e:	e003      	b.n	8007528 <OS_StatTask+0x20c>
        } else {
            cycles_mult = 0u;
 8007520:	2300      	movs	r3, #0
 8007522:	63bb      	str	r3, [r7, #56]	@ 0x38
            cycles_max  = 1u;
 8007524:	2301      	movs	r3, #1
 8007526:	637b      	str	r3, [r7, #52]	@ 0x34
        }
#endif
        CPU_CRITICAL_ENTER();
 8007528:	2040      	movs	r0, #64	@ 0x40
 800752a:	f7f8 fe65 	bl	80001f8 <CPU_SR_Save>
 800752e:	61b8      	str	r0, [r7, #24]
        p_tcb = OSTaskDbgListPtr;
 8007530:	4b10      	ldr	r3, [pc, #64]	@ (8007574 <OS_StatTask+0x258>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	633b      	str	r3, [r7, #48]	@ 0x30
        CPU_CRITICAL_EXIT();
 8007536:	69b8      	ldr	r0, [r7, #24]
 8007538:	f7f8 fe6c 	bl	8000214 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {
 800753c:	e058      	b.n	80075f0 <OS_StatTask+0x2d4>
 800753e:	bf00      	nop
 8007540:	08008f38 	.word	0x08008f38
 8007544:	20001d10 	.word	0x20001d10
 8007548:	08008f4c 	.word	0x08008f4c
 800754c:	cccccccd 	.word	0xcccccccd
 8007550:	20001d04 	.word	0x20001d04
 8007554:	20001d0c 	.word	0x20001d0c
 8007558:	20001d08 	.word	0x20001d08
 800755c:	00061a7f 	.word	0x00061a7f
 8007560:	003d08ff 	.word	0x003d08ff
 8007564:	02625a00 	.word	0x02625a00
 8007568:	17d783ff 	.word	0x17d783ff
 800756c:	20001d00 	.word	0x20001d00
 8007570:	20001d02 	.word	0x20001d02
 8007574:	20001ddc 	.word	0x20001ddc
#if (OS_CFG_TASK_PROFILE_EN > 0u)                               /* Compute execution time of each task                  */
            usage = (OS_CPU_USAGE)(cycles_mult * p_tcb->CyclesTotalPrev / cycles_max);
 8007578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800757e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007580:	fb03 f202 	mul.w	r2, r3, r2
 8007584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007586:	fbb2 f3f3 	udiv	r3, r2, r3
 800758a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            if (usage > 10000u) {
 800758e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007592:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007596:	4293      	cmp	r3, r2
 8007598:	d903      	bls.n	80075a2 <OS_StatTask+0x286>
                usage = 10000u;
 800759a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800759e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            }
            p_tcb->CPUUsage = usage;
 80075a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80075a8:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
            if (p_tcb->CPUUsageMax < usage) {                   /* Detect peak CPU usage                                */
 80075ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ae:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 80075b2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d904      	bls.n	80075c4 <OS_StatTask+0x2a8>
                p_tcb->CPUUsageMax = usage;
 80075ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075bc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80075c0:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
            }
#endif

#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u)
            OSTaskStkChk( p_tcb,                                /* Compute stack usage of active tasks only             */
 80075c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c6:	f103 01b4 	add.w	r1, r3, #180	@ 0xb4
 80075ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075cc:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80075d0:	f107 030e 	add.w	r3, r7, #14
 80075d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075d6:	f000 faef 	bl	8007bb8 <OSTaskStkChk>
                         &p_tcb->StkFree,
                         &p_tcb->StkUsed,
                         &err);
#endif

            CPU_CRITICAL_ENTER();
 80075da:	2040      	movs	r0, #64	@ 0x40
 80075dc:	f7f8 fe0c 	bl	80001f8 <CPU_SR_Save>
 80075e0:	61b8      	str	r0, [r7, #24]
            p_tcb = p_tcb->DbgNextPtr;
 80075e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80075e8:	633b      	str	r3, [r7, #48]	@ 0x30
            CPU_CRITICAL_EXIT();
 80075ea:	69b8      	ldr	r0, [r7, #24]
 80075ec:	f7f8 fe12 	bl	8000214 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {
 80075f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1c0      	bne.n	8007578 <OS_StatTask+0x25c>
        }
#endif

                                                                /*------------------ Check ISR Stack -------------------*/
#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) && (OS_CFG_ISR_STK_SIZE > 0u)
        free_stk  = 0u;
 80075f6:	2300      	movs	r3, #0
 80075f8:	61fb      	str	r3, [r7, #28]
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
        p_stk     = OSCfg_ISRStkBasePtr;                        /*   Start at the lowest memory and go up               */
 80075fa:	4b19      	ldr	r3, [pc, #100]	@ (8007660 <OS_StatTask+0x344>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	623b      	str	r3, [r7, #32]
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
        p_stk    += OS_CFG_TASK_STK_REDZONE_DEPTH;
        size_stk  = OSCfg_ISRStkSize - OS_CFG_TASK_STK_REDZONE_DEPTH;
#else
        size_stk  = OSCfg_ISRStkSize;
 8007600:	4b18      	ldr	r3, [pc, #96]	@ (8007664 <OS_StatTask+0x348>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	613b      	str	r3, [r7, #16]
#endif
        while ((*p_stk == 0u) && (free_stk < size_stk)) {       /*   Compute the number of zero entries on the stk      */
 8007606:	e005      	b.n	8007614 <OS_StatTask+0x2f8>
            p_stk++;
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	3304      	adds	r3, #4
 800760c:	623b      	str	r3, [r7, #32]
            free_stk++;
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	3301      	adds	r3, #1
 8007612:	61fb      	str	r3, [r7, #28]
        while ((*p_stk == 0u) && (free_stk < size_stk)) {       /*   Compute the number of zero entries on the stk      */
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d103      	bne.n	8007624 <OS_StatTask+0x308>
 800761c:	69fa      	ldr	r2, [r7, #28]
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	429a      	cmp	r2, r3
 8007622:	d3f1      	bcc.n	8007608 <OS_StatTask+0x2ec>
        while ((*p_stk == 0u) && (free_stk < size_stk)) {       /*   Compute the number of zero entries on the stk      */
            free_stk++;
            p_stk--;
        }
#endif
        OSISRStkFree = free_stk;
 8007624:	4a10      	ldr	r2, [pc, #64]	@ (8007668 <OS_StatTask+0x34c>)
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	6013      	str	r3, [r2, #0]
        OSISRStkUsed = OSCfg_ISRStkSize - free_stk;
 800762a:	4b0e      	ldr	r3, [pc, #56]	@ (8007664 <OS_StatTask+0x348>)
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	4a0e      	ldr	r2, [pc, #56]	@ (800766c <OS_StatTask+0x350>)
 8007634:	6013      	str	r3, [r2, #0]
#endif

        if (OSStatResetFlag == OS_TRUE) {                       /* Check if need to reset statistics                    */
 8007636:	4b0e      	ldr	r3, [pc, #56]	@ (8007670 <OS_StatTask+0x354>)
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d107      	bne.n	800764e <OS_StatTask+0x332>
            OSStatResetFlag  = OS_FALSE;
 800763e:	4b0c      	ldr	r3, [pc, #48]	@ (8007670 <OS_StatTask+0x354>)
 8007640:	2200      	movs	r2, #0
 8007642:	701a      	strb	r2, [r3, #0]
            OSStatReset(&err);
 8007644:	f107 030e 	add.w	r3, r7, #14
 8007648:	4618      	mov	r0, r3
 800764a:	f7ff fded 	bl	8007228 <OSStatReset>
        if (OSStatTaskTimeMax < OSStatTaskTime) {
            OSStatTaskTimeMax = OSStatTaskTime;
        }
#endif

        OSTimeDly(dly,
 800764e:	f107 030e 	add.w	r3, r7, #14
 8007652:	461a      	mov	r2, r3
 8007654:	2100      	movs	r1, #0
 8007656:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007658:	f000 ffac 	bl	80085b4 <OSTimeDly>
        CPU_CRITICAL_ENTER();                                   /* ---------------- OVERALL CPU USAGE ----------------- */
 800765c:	e690      	b.n	8007380 <OS_StatTask+0x64>
 800765e:	bf00      	nop
 8007660:	08008f24 	.word	0x08008f24
 8007664:	08008f28 	.word	0x08008f28
 8007668:	200019b0 	.word	0x200019b0
 800766c:	200019b4 	.word	0x200019b4
 8007670:	20001cfe 	.word	0x20001cfe

08007674 <OS_StatTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTaskInit (OS_ERR  *p_err)
{
 8007674:	b590      	push	{r4, r7, lr}
 8007676:	b08d      	sub	sp, #52	@ 0x34
 8007678:	af0a      	add	r7, sp, #40	@ 0x28
 800767a:	6078      	str	r0, [r7, #4]
    OSStatTaskCtr    = 0u;
 800767c:	4b28      	ldr	r3, [pc, #160]	@ (8007720 <OS_StatTaskInit+0xac>)
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrRun = 0u;
 8007682:	4b28      	ldr	r3, [pc, #160]	@ (8007724 <OS_StatTaskInit+0xb0>)
 8007684:	2200      	movs	r2, #0
 8007686:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrMax = 0u;
 8007688:	4b27      	ldr	r3, [pc, #156]	@ (8007728 <OS_StatTaskInit+0xb4>)
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]
    OSStatTaskRdy    = OS_STATE_NOT_RDY;                        /* Statistic task is not ready                          */
 800768e:	4b27      	ldr	r3, [pc, #156]	@ (800772c <OS_StatTaskInit+0xb8>)
 8007690:	2200      	movs	r2, #0
 8007692:	701a      	strb	r2, [r3, #0]
    OSStatResetFlag  = OS_FALSE;
 8007694:	4b26      	ldr	r3, [pc, #152]	@ (8007730 <OS_StatTaskInit+0xbc>)
 8007696:	2200      	movs	r2, #0
 8007698:	701a      	strb	r2, [r3, #0]

#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) && (OS_CFG_ISR_STK_SIZE > 0u)
    OSISRStkFree     = 0u;
 800769a:	4b26      	ldr	r3, [pc, #152]	@ (8007734 <OS_StatTaskInit+0xc0>)
 800769c:	2200      	movs	r2, #0
 800769e:	601a      	str	r2, [r3, #0]
    OSISRStkUsed     = 0u;
 80076a0:	4b25      	ldr	r3, [pc, #148]	@ (8007738 <OS_StatTaskInit+0xc4>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]
#endif
                                                                /* --------------- CREATE THE STAT TASK --------------- */
    if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
 80076a6:	4b25      	ldr	r3, [pc, #148]	@ (800773c <OS_StatTaskInit+0xc8>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d104      	bne.n	80076b8 <OS_StatTaskInit+0x44>
       *p_err = OS_ERR_STAT_STK_INVALID;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f646 622b 	movw	r2, #28203	@ 0x6e2b
 80076b4:	801a      	strh	r2, [r3, #0]
        return;
 80076b6:	e02f      	b.n	8007718 <OS_StatTaskInit+0xa4>
    }

    if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
 80076b8:	4b21      	ldr	r3, [pc, #132]	@ (8007740 <OS_StatTaskInit+0xcc>)
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	4b21      	ldr	r3, [pc, #132]	@ (8007744 <OS_StatTaskInit+0xd0>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d204      	bcs.n	80076ce <OS_StatTaskInit+0x5a>
       *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f646 622c 	movw	r2, #28204	@ 0x6e2c
 80076ca:	801a      	strh	r2, [r3, #0]
        return;
 80076cc:	e024      	b.n	8007718 <OS_StatTaskInit+0xa4>
    }

    if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 80076ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007748 <OS_StatTaskInit+0xd4>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80076d4:	d904      	bls.n	80076e0 <OS_StatTaskInit+0x6c>
       *p_err = OS_ERR_STAT_PRIO_INVALID;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f646 622a 	movw	r2, #28202	@ 0x6e2a
 80076dc:	801a      	strh	r2, [r3, #0]
        return;
 80076de:	e01b      	b.n	8007718 <OS_StatTaskInit+0xa4>
    }

    OSTaskCreate(&OSStatTaskTCB,
 80076e0:	4b19      	ldr	r3, [pc, #100]	@ (8007748 <OS_StatTaskInit+0xd4>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	4a15      	ldr	r2, [pc, #84]	@ (800773c <OS_StatTaskInit+0xc8>)
 80076e6:	6812      	ldr	r2, [r2, #0]
 80076e8:	4918      	ldr	r1, [pc, #96]	@ (800774c <OS_StatTaskInit+0xd8>)
 80076ea:	6809      	ldr	r1, [r1, #0]
 80076ec:	4814      	ldr	r0, [pc, #80]	@ (8007740 <OS_StatTaskInit+0xcc>)
 80076ee:	6800      	ldr	r0, [r0, #0]
 80076f0:	687c      	ldr	r4, [r7, #4]
 80076f2:	9408      	str	r4, [sp, #32]
 80076f4:	2403      	movs	r4, #3
 80076f6:	9407      	str	r4, [sp, #28]
 80076f8:	2400      	movs	r4, #0
 80076fa:	9406      	str	r4, [sp, #24]
 80076fc:	2400      	movs	r4, #0
 80076fe:	9405      	str	r4, [sp, #20]
 8007700:	2400      	movs	r4, #0
 8007702:	9404      	str	r4, [sp, #16]
 8007704:	9003      	str	r0, [sp, #12]
 8007706:	9102      	str	r1, [sp, #8]
 8007708:	9201      	str	r2, [sp, #4]
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	2300      	movs	r3, #0
 800770e:	4a10      	ldr	r2, [pc, #64]	@ (8007750 <OS_StatTaskInit+0xdc>)
 8007710:	4910      	ldr	r1, [pc, #64]	@ (8007754 <OS_StatTaskInit+0xe0>)
 8007712:	4811      	ldr	r0, [pc, #68]	@ (8007758 <OS_StatTaskInit+0xe4>)
 8007714:	f000 f822 	bl	800775c <OSTaskCreate>
                  0u,
                  0u,
                 (void       *)0,
                 (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                  p_err);
}
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	bd90      	pop	{r4, r7, pc}
 800771e:	bf00      	nop
 8007720:	20001d04 	.word	0x20001d04
 8007724:	20001d0c 	.word	0x20001d0c
 8007728:	20001d08 	.word	0x20001d08
 800772c:	20001d10 	.word	0x20001d10
 8007730:	20001cfe 	.word	0x20001cfe
 8007734:	200019b0 	.word	0x200019b0
 8007738:	200019b4 	.word	0x200019b4
 800773c:	08008f3c 	.word	0x08008f3c
 8007740:	08008f44 	.word	0x08008f44
 8007744:	08008f48 	.word	0x08008f48
 8007748:	08008f34 	.word	0x08008f34
 800774c:	08008f40 	.word	0x08008f40
 8007750:	0800731d 	.word	0x0800731d
 8007754:	08008ea8 	.word	0x08008ea8
 8007758:	20001d14 	.word	0x20001d14

0800775c <OSTaskCreate>:
                    OS_MSG_QTY     q_size,
                    OS_TICK        time_quanta,
                    void          *p_ext,
                    OS_OPT         opt,
                    OS_ERR        *p_err)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08c      	sub	sp, #48	@ 0x30
 8007760:	af02      	add	r7, sp, #8
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
 8007768:	603b      	str	r3, [r7, #0]
    OS_TLS_ID      id;
#endif

    CPU_STK       *p_sp;
    CPU_STK       *p_stk_limit;
    CPU_SR_ALLOC();
 800776a:	2300      	movs	r3, #0
 800776c:	61bb      	str	r3, [r7, #24]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* --------- CANNOT CREATE A TASK FROM AN ISR --------- */
 800776e:	4b86      	ldr	r3, [pc, #536]	@ (8007988 <OSTaskCreate+0x22c>)
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d004      	beq.n	8007780 <OSTaskCreate+0x24>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_TASK_CREATE_ISR;
 8007776:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007778:	f247 124a 	movw	r2, #29002	@ 0x714a
 800777c:	801a      	strh	r2, [r3, #0]
        return;
 800777e:	e0ff      	b.n	8007980 <OSTaskCreate+0x224>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)                                    /* ---------------- VALIDATE ARGUMENTS ---------------- */
    if (p_tcb == (OS_TCB *)0) {                                 /* User must supply a valid OS_TCB                      */
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d104      	bne.n	8007790 <OSTaskCreate+0x34>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_TCB_INVALID;
 8007786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007788:	f247 12ad 	movw	r2, #29101	@ 0x71ad
 800778c:	801a      	strh	r2, [r3, #0]
        return;
 800778e:	e0f7      	b.n	8007980 <OSTaskCreate+0x224>
    }
    if (p_task == (OS_TASK_PTR)0u) {                            /* User must supply a valid task                        */
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d104      	bne.n	80077a0 <OSTaskCreate+0x44>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_TASK_INVALID;
 8007796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007798:	f247 124f 	movw	r2, #29007	@ 0x714f
 800779c:	801a      	strh	r2, [r3, #0]
        return;
 800779e:	e0ef      	b.n	8007980 <OSTaskCreate+0x224>
    }
    if (p_stk_base == (CPU_STK *)0) {                           /* User must supply a valid stack base address          */
 80077a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d104      	bne.n	80077b0 <OSTaskCreate+0x54>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_STK_INVALID;
 80077a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077a8:	f646 622f 	movw	r2, #28207	@ 0x6e2f
 80077ac:	801a      	strh	r2, [r3, #0]
        return;
 80077ae:	e0e7      	b.n	8007980 <OSTaskCreate+0x224>
    }
    if (stk_size < OSCfg_StkSizeMin) {                          /* User must supply a valid minimum stack size          */
 80077b0:	4b76      	ldr	r3, [pc, #472]	@ (800798c <OSTaskCreate+0x230>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d204      	bcs.n	80077c4 <OSTaskCreate+0x68>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_STK_SIZE_INVALID;
 80077ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077bc:	f646 6230 	movw	r2, #28208	@ 0x6e30
 80077c0:	801a      	strh	r2, [r3, #0]
        return;
 80077c2:	e0dd      	b.n	8007980 <OSTaskCreate+0x224>
    }
    if (stk_limit >= stk_size) {                                /* User must supply a valid stack limit                 */
 80077c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d304      	bcc.n	80077d6 <OSTaskCreate+0x7a>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_STK_LIMIT_INVALID;
 80077cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077ce:	f646 6231 	movw	r2, #28209	@ 0x6e31
 80077d2:	801a      	strh	r2, [r3, #0]
        return;
 80077d4:	e0d4      	b.n	8007980 <OSTaskCreate+0x224>
    }
    if ((prio  > (OS_CFG_PRIO_MAX - 2u)) &&                     /* Priority must be within 0 and OS_CFG_PRIO_MAX-1      */
 80077d6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80077da:	2b3e      	cmp	r3, #62	@ 0x3e
 80077dc:	d908      	bls.n	80077f0 <OSTaskCreate+0x94>
 80077de:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80077e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80077e4:	d004      	beq.n	80077f0 <OSTaskCreate+0x94>
        (prio != (OS_CFG_PRIO_MAX - 1u))) {
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_PRIO_INVALID;
 80077e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077e8:	f246 2273 	movw	r2, #25203	@ 0x6273
 80077ec:	801a      	strh	r2, [r3, #0]
        return;
 80077ee:	e0c7      	b.n	8007980 <OSTaskCreate+0x224>
    }
#endif

    if (prio == (OS_CFG_PRIO_MAX - 1u)) {
 80077f0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80077f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80077f6:	d108      	bne.n	800780a <OSTaskCreate+0xae>
#if (OS_CFG_TASK_IDLE_EN > 0u)
        if (p_tcb != &OSIdleTaskTCB) {
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4a65      	ldr	r2, [pc, #404]	@ (8007990 <OSTaskCreate+0x234>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d004      	beq.n	800780a <OSTaskCreate+0xae>
            OS_TRACE_TASK_CREATE_FAILED(p_tcb);
           *p_err = OS_ERR_PRIO_INVALID;                        /* Not allowed to use same priority as idle task        */
 8007800:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007802:	f246 2273 	movw	r2, #25203	@ 0x6273
 8007806:	801a      	strh	r2, [r3, #0]
            return;
 8007808:	e0ba      	b.n	8007980 <OSTaskCreate+0x224>
       *p_err = OS_ERR_PRIO_INVALID;                            /* Not allowed to use same priority as idle task        */
        return;
#endif
    }

    OS_TaskInitTCB(p_tcb);                                      /* Initialize the TCB to default values                 */
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 fad8 	bl	8007dc0 <OS_TaskInitTCB>

   *p_err = OS_ERR_NONE;
 8007810:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007812:	2200      	movs	r2, #0
 8007814:	801a      	strh	r2, [r3, #0]
                                                                /* -------------- CLEAR THE TASK'S STACK -------------- */
    if (((opt & OS_OPT_TASK_STK_CHK) != 0u) ||                  /* See if stack checking has been enabled               */
 8007816:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d105      	bne.n	800782e <OSTaskCreate+0xd2>
        ((opt & OS_OPT_TASK_STK_CLR) != 0u)) {                  /* See if stack needs to be cleared                     */
 8007822:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007826:	f003 0302 	and.w	r3, r3, #2
    if (((opt & OS_OPT_TASK_STK_CHK) != 0u) ||                  /* See if stack checking has been enabled               */
 800782a:	2b00      	cmp	r3, #0
 800782c:	d017      	beq.n	800785e <OSTaskCreate+0x102>
        if ((opt & OS_OPT_TASK_STK_CLR) != 0u) {
 800782e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b00      	cmp	r3, #0
 8007838:	d011      	beq.n	800785e <OSTaskCreate+0x102>
            p_sp = p_stk_base;
 800783a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800783c:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {                   /* Stack grows from HIGH to LOW memory                  */
 800783e:	2300      	movs	r3, #0
 8007840:	627b      	str	r3, [r7, #36]	@ 0x24
 8007842:	e008      	b.n	8007856 <OSTaskCreate+0xfa>
               *p_sp = 0u;                                      /* Clear from bottom of stack and up!                   */
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	2200      	movs	r2, #0
 8007848:	601a      	str	r2, [r3, #0]
                p_sp++;
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	3304      	adds	r3, #4
 800784e:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {                   /* Stack grows from HIGH to LOW memory                  */
 8007850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007852:	3301      	adds	r3, #1
 8007854:	627b      	str	r3, [r7, #36]	@ 0x24
 8007856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800785a:	429a      	cmp	r2, r3
 800785c:	d3f2      	bcc.n	8007844 <OSTaskCreate+0xe8>
            }
        }
    }
                                                                /* ------ INITIALIZE THE STACK FRAME OF THE TASK ------ */
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    p_stk_limit = p_stk_base + stk_limit;
 800785e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007864:	4413      	add	r3, r2
 8007866:	617b      	str	r3, [r7, #20]
#else
    p_stk_limit = p_stk_base + (stk_size - 1u) - stk_limit;
#endif

    p_sp = OSTaskStkInit(p_task,
 8007868:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800786c:	9301      	str	r3, [sp, #4]
 800786e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7fd fc91 	bl	80051a0 <OSTaskStkInit>
 800787e:	61f8      	str	r0, [r7, #28]
                         p_stk_limit,
                         stk_size,
                         opt);

#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)             /* Check if we overflown the stack during init          */
    if (p_sp < p_stk_base) {
 8007880:	69fa      	ldr	r2, [r7, #28]
 8007882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007884:	429a      	cmp	r2, r3
 8007886:	d204      	bcs.n	8007892 <OSTaskCreate+0x136>
       *p_err = OS_ERR_STK_OVF;
 8007888:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800788a:	f646 6232 	movw	r2, #28210	@ 0x6e32
 800788e:	801a      	strh	r2, [r3, #0]
        return;
 8007890:	e076      	b.n	8007980 <OSTaskCreate+0x224>
    OS_TaskStkRedzoneInit(p_stk_base, stk_size);
#endif

                                                                /* ------------ INITIALIZE THE TCB FIELDS ------------- */
#if (OS_CFG_DBG_EN > 0u)
    p_tcb->TaskEntryAddr = p_task;                              /* Save task entry point address                        */
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	625a      	str	r2, [r3, #36]	@ 0x24
    p_tcb->TaskEntryArg  = p_arg;                               /* Save task entry argument                             */
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

#if (OS_CFG_DBG_EN > 0u)
    p_tcb->NamePtr       = p_name;                              /* Save task name                                       */
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	60da      	str	r2, [r3, #12]
#else
    (void)p_name;
#endif

    p_tcb->Prio          = prio;                                /* Save the task's priority                             */
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80078aa:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

#if (OS_CFG_MUTEX_EN > 0u)
    p_tcb->BasePrio      = prio;                                /* Set the base priority                                */
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80078b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
#endif

    p_tcb->StkPtr        = p_sp;                                /* Save the new top-of-stack pointer                    */
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	69fa      	ldr	r2, [r7, #28]
 80078bc:	601a      	str	r2, [r3, #0]
    p_tcb->StkLimitPtr   = p_stk_limit;                         /* Save the stack limit pointer                         */
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	609a      	str	r2, [r3, #8]

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
    p_tcb->TimeQuanta    = time_quanta;                         /* Save the #ticks for time slice (0 means not sliced)  */
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078c8:	659a      	str	r2, [r3, #88]	@ 0x58
    if (time_quanta == 0u) {
 80078ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d104      	bne.n	80078da <OSTaskCreate+0x17e>
        p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta;
 80078d0:	4b30      	ldr	r3, [pc, #192]	@ (8007994 <OSTaskCreate+0x238>)
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80078d8:	e002      	b.n	80078e0 <OSTaskCreate+0x184>
    } else {
        p_tcb->TimeQuantaCtr = time_quanta;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078de:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
#else
    (void)time_quanta;
#endif

    p_tcb->ExtPtr        = p_ext;                               /* Save pointer to TCB extension                        */
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078e4:	605a      	str	r2, [r3, #4]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) || (OS_CFG_TASK_STK_REDZONE_EN > 0u))
    p_tcb->StkBasePtr    = p_stk_base;                          /* Save pointer to the base address of the stack        */
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078ea:	621a      	str	r2, [r3, #32]
    p_tcb->StkSize       = stk_size;                            /* Save the stack size (in number of CPU_STK elements)  */
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80078f0:	645a      	str	r2, [r3, #68]	@ 0x44
#endif
    p_tcb->Opt           = opt;                                 /* Save task options                                    */
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80078f8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

#if (OS_CFG_TASK_REG_TBL_SIZE > 0u)
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 80078fc:	2300      	movs	r3, #0
 80078fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007902:	e00b      	b.n	800791c <OSTaskCreate+0x1c0>
        p_tcb->RegTbl[reg_nbr] = 0u;
 8007904:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	3220      	adds	r2, #32
 800790c:	2100      	movs	r1, #0
 800790e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 8007912:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007916:	3301      	adds	r3, #1
 8007918:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800791c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007920:	2b00      	cmp	r3, #0
 8007922:	d0ef      	beq.n	8007904 <OSTaskCreate+0x1a8>
    }
#endif

#if (OS_CFG_TASK_Q_EN > 0u)
    OS_MsgQInit(&p_tcb->MsgQ,                                   /* Initialize the task's message queue                  */
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	3368      	adds	r3, #104	@ 0x68
 8007928:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800792c:	4611      	mov	r1, r2
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff f9d0 	bl	8006cd4 <OS_MsgQInit>
                q_size);
#else
    (void)q_size;
#endif

    OSTaskCreateHook(p_tcb);                                    /* Call user defined hook                               */
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f7fd fbfd 	bl	8005134 <OSTaskCreateHook>
        p_tcb->TLS_Tbl[id] = 0u;
    }
    OS_TLS_TaskCreate(p_tcb);                                   /* Call TLS hook                                        */
#endif
                                                                /* -------------- ADD TASK TO READY LIST -------------- */
    CPU_CRITICAL_ENTER();
 800793a:	2040      	movs	r0, #64	@ 0x40
 800793c:	f7f8 fc5c 	bl	80001f8 <CPU_SR_Save>
 8007940:	61b8      	str	r0, [r7, #24]
    OS_PrioInsert(p_tcb->Prio);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007948:	4618      	mov	r0, r3
 800794a:	f7ff fc1f 	bl	800718c <OS_PrioInsert>
    OS_RdyListInsertTail(p_tcb);
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f7fe fa26 	bl	8005da0 <OS_RdyListInsertTail>

#if (OS_CFG_DBG_EN > 0u)
    OS_TaskDbgListAdd(p_tcb);
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 f9af 	bl	8007cb8 <OS_TaskDbgListAdd>
#endif

    OSTaskQty++;                                                /* Increment the #tasks counter                         */
 800795a:	4b0f      	ldr	r3, [pc, #60]	@ (8007998 <OSTaskCreate+0x23c>)
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	3301      	adds	r3, #1
 8007960:	b29a      	uxth	r2, r3
 8007962:	4b0d      	ldr	r3, [pc, #52]	@ (8007998 <OSTaskCreate+0x23c>)
 8007964:	801a      	strh	r2, [r3, #0]

    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Return if multitasking has not started               */
 8007966:	4b0d      	ldr	r3, [pc, #52]	@ (800799c <OSTaskCreate+0x240>)
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d003      	beq.n	8007976 <OSTaskCreate+0x21a>
        CPU_CRITICAL_EXIT();
 800796e:	69b8      	ldr	r0, [r7, #24]
 8007970:	f7f8 fc50 	bl	8000214 <CPU_SR_Restore>
        return;
 8007974:	e004      	b.n	8007980 <OSTaskCreate+0x224>
    }

    CPU_CRITICAL_EXIT();
 8007976:	69b8      	ldr	r0, [r7, #24]
 8007978:	f7f8 fc4c 	bl	8000214 <CPU_SR_Restore>

    OSSched();
 800797c:	f7fd fe80 	bl	8005680 <OSSched>
}
 8007980:	3728      	adds	r7, #40	@ 0x28
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	200019ac 	.word	0x200019ac
 800798c:	08008f48 	.word	0x08008f48
 8007990:	200018e8 	.word	0x200018e8
 8007994:	20001cf0 	.word	0x20001cf0
 8007998:	20001de0 	.word	0x20001de0
 800799c:	200019ad 	.word	0x200019ad

080079a0 <OSTaskDel>:
*/

#if (OS_CFG_TASK_DEL_EN > 0u)
void  OSTaskDel (OS_TCB  *p_tcb,
                 OS_ERR  *p_err)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
#if (OS_CFG_MUTEX_EN > 0u)
    OS_TCB   *p_tcb_owner;
    OS_PRIO   prio_new;
#endif
    CPU_SR_ALLOC();
 80079aa:	2300      	movs	r3, #0
 80079ac:	613b      	str	r3, [r7, #16]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* See if trying to delete from ISR                     */
 80079ae:	4b7d      	ldr	r3, [pc, #500]	@ (8007ba4 <OSTaskDel+0x204>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d004      	beq.n	80079c0 <OSTaskDel+0x20>
       *p_err = OS_ERR_TASK_DEL_ISR;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	f247 124e 	movw	r2, #29006	@ 0x714e
 80079bc:	801a      	strh	r2, [r3, #0]
        return;
 80079be:	e0ed      	b.n	8007b9c <OSTaskDel+0x1fc>
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 80079c0:	4b79      	ldr	r3, [pc, #484]	@ (8007ba8 <OSTaskDel+0x208>)
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d004      	beq.n	80079d2 <OSTaskDel+0x32>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	f645 6289 	movw	r2, #24201	@ 0x5e89
 80079ce:	801a      	strh	r2, [r3, #0]
        return;
 80079d0:	e0e4      	b.n	8007b9c <OSTaskDel+0x1fc>
    }
#endif

#if (OS_CFG_TASK_IDLE_EN > 0u)
    if (p_tcb == &OSIdleTaskTCB) {                              /* Not allowed to delete the idle task                  */
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a75      	ldr	r2, [pc, #468]	@ (8007bac <OSTaskDel+0x20c>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d104      	bne.n	80079e4 <OSTaskDel+0x44>
       *p_err = OS_ERR_TASK_DEL_IDLE;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	f247 124c 	movw	r2, #29004	@ 0x714c
 80079e0:	801a      	strh	r2, [r3, #0]
        return;
 80079e2:	e0db      	b.n	8007b9c <OSTaskDel+0x1fc>
    }
#endif

    if (p_tcb == (OS_TCB *)0) {                                 /* Delete 'Self'?                                       */
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d109      	bne.n	80079fe <OSTaskDel+0x5e>
        CPU_CRITICAL_ENTER();
 80079ea:	2040      	movs	r0, #64	@ 0x40
 80079ec:	f7f8 fc04 	bl	80001f8 <CPU_SR_Save>
 80079f0:	6138      	str	r0, [r7, #16]
        p_tcb  = OSTCBCurPtr;                                   /* Yes.                                                 */
 80079f2:	4b6f      	ldr	r3, [pc, #444]	@ (8007bb0 <OSTaskDel+0x210>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	607b      	str	r3, [r7, #4]
        CPU_CRITICAL_EXIT();
 80079f8:	6938      	ldr	r0, [r7, #16]
 80079fa:	f7f8 fc0b 	bl	8000214 <CPU_SR_Restore>
    }

    CPU_CRITICAL_ENTER();
 80079fe:	2040      	movs	r0, #64	@ 0x40
 8007a00:	f7f8 fbfa 	bl	80001f8 <CPU_SR_Save>
 8007a04:	6138      	str	r0, [r7, #16]
    switch (p_tcb->TaskState) {
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007a0c:	2b07      	cmp	r3, #7
 8007a0e:	f200 8093 	bhi.w	8007b38 <OSTaskDel+0x198>
 8007a12:	a201      	add	r2, pc, #4	@ (adr r2, 8007a18 <OSTaskDel+0x78>)
 8007a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a18:	08007a39 	.word	0x08007a39
 8007a1c:	08007a41 	.word	0x08007a41
 8007a20:	08007a49 	.word	0x08007a49
 8007a24:	08007a49 	.word	0x08007a49
 8007a28:	08007b49 	.word	0x08007b49
 8007a2c:	08007a41 	.word	0x08007a41
 8007a30:	08007a49 	.word	0x08007a49
 8007a34:	08007a49 	.word	0x08007a49
        case OS_TASK_STATE_RDY:
             OS_RdyListRemove(p_tcb);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7fe fa3d 	bl	8005eb8 <OS_RdyListRemove>
             break;
 8007a3e:	e086      	b.n	8007b4e <OSTaskDel+0x1ae>
             break;

        case OS_TASK_STATE_DLY:                                 /* Task is only delayed, not on any wait list           */
        case OS_TASK_STATE_DLY_SUSPENDED:
#if (OS_CFG_TICK_EN > 0u)
             OS_TickListRemove(p_tcb);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fc85 	bl	8008350 <OS_TickListRemove>
#endif
             break;
 8007a46:	e082      	b.n	8007b4e <OSTaskDel+0x1ae>

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             switch (p_tcb->PendOn) {                           /* See what we are pending on                           */
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a4e:	2b07      	cmp	r3, #7
 8007a50:	bf8c      	ite	hi
 8007a52:	2201      	movhi	r2, #1
 8007a54:	2200      	movls	r2, #0
 8007a56:	b2d2      	uxtb	r2, r2
 8007a58:	2a00      	cmp	r2, #0
 8007a5a:	d15a      	bne.n	8007b12 <OSTaskDel+0x172>
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a62:	f003 0262 	and.w	r2, r3, #98	@ 0x62
 8007a66:	2a00      	cmp	r2, #0
 8007a68:	bf14      	ite	ne
 8007a6a:	2201      	movne	r2, #1
 8007a6c:	2200      	moveq	r2, #0
 8007a6e:	b2d2      	uxtb	r2, r2
 8007a70:	2a00      	cmp	r2, #0
 8007a72:	d112      	bne.n	8007a9a <OSTaskDel+0xfa>
 8007a74:	f003 0285 	and.w	r2, r3, #133	@ 0x85
 8007a78:	2a00      	cmp	r2, #0
 8007a7a:	bf14      	ite	ne
 8007a7c:	2201      	movne	r2, #1
 8007a7e:	2200      	moveq	r2, #0
 8007a80:	b2d2      	uxtb	r2, r2
 8007a82:	2a00      	cmp	r2, #0
 8007a84:	d147      	bne.n	8007b16 <OSTaskDel+0x176>
 8007a86:	f003 0310 	and.w	r3, r3, #16
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	bf14      	ite	ne
 8007a8e:	2301      	movne	r3, #1
 8007a90:	2300      	moveq	r3, #0
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d104      	bne.n	8007aa2 <OSTaskDel+0x102>
                      break;
#endif

                 default:
                                                                /* Default case.                                        */
                      break;
 8007a98:	e03b      	b.n	8007b12 <OSTaskDel+0x172>
                      OS_PendListRemove(p_tcb);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7fe f830 	bl	8005b00 <OS_PendListRemove>
                      break;
 8007aa0:	e03c      	b.n	8007b1c <OSTaskDel+0x17c>
                      p_tcb_owner = ((OS_MUTEX *)((void *)p_tcb->PendObjPtr))->OwnerTCBPtr;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa8:	60fb      	str	r3, [r7, #12]
                      prio_new = p_tcb_owner->Prio;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007ab0:	75fb      	strb	r3, [r7, #23]
                      OS_PendListRemove(p_tcb);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7fe f824 	bl	8005b00 <OS_PendListRemove>
                      if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d014      	beq.n	8007af2 <OSTaskDel+0x152>
                          (p_tcb_owner->Prio == p_tcb->Prio)) { /* Has the owner inherited a priority?                  */
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
                      if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d10c      	bne.n	8007af2 <OSTaskDel+0x152>
                          prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f7ff fab6 	bl	800704a <OS_MutexGrpPrioFindHighest>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	75fb      	strb	r3, [r7, #23]
                          prio_new = (prio_new > p_tcb_owner->BasePrio) ? p_tcb_owner->BasePrio : prio_new;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ae8:	7dfa      	ldrb	r2, [r7, #23]
 8007aea:	4293      	cmp	r3, r2
 8007aec:	bf28      	it	cs
 8007aee:	4613      	movcs	r3, r2
 8007af0:	75fb      	strb	r3, [r7, #23]
                      p_tcb->PendOn = OS_TASK_PEND_ON_NOTHING;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                      if (prio_new != p_tcb_owner->Prio) {
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007b00:	7dfa      	ldrb	r2, [r7, #23]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d009      	beq.n	8007b1a <OSTaskDel+0x17a>
                          OS_TaskChangePrio(p_tcb_owner, prio_new);
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f000 fa36 	bl	8007f7c <OS_TaskChangePrio>
                      break;
 8007b10:	e003      	b.n	8007b1a <OSTaskDel+0x17a>
                      break;
 8007b12:	bf00      	nop
 8007b14:	e002      	b.n	8007b1c <OSTaskDel+0x17c>
                      break;
 8007b16:	bf00      	nop
 8007b18:	e000      	b.n	8007b1c <OSTaskDel+0x17c>
                      break;
 8007b1a:	bf00      	nop
             }
#if (OS_CFG_TICK_EN > 0u)
             if ((p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) ||
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d004      	beq.n	8007b30 <OSTaskDel+0x190>
                 (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED)) {
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
             if ((p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) ||
 8007b2c:	2b07      	cmp	r3, #7
 8007b2e:	d10d      	bne.n	8007b4c <OSTaskDel+0x1ac>
                 OS_TickListRemove(p_tcb);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fc0d 	bl	8008350 <OS_TickListRemove>
             }
#endif
             break;
 8007b36:	e009      	b.n	8007b4c <OSTaskDel+0x1ac>

        default:
            CPU_CRITICAL_EXIT();
 8007b38:	6938      	ldr	r0, [r7, #16]
 8007b3a:	f7f8 fb6b 	bl	8000214 <CPU_SR_Restore>
           *p_err = OS_ERR_STATE_INVALID;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	f646 622d 	movw	r2, #28205	@ 0x6e2d
 8007b44:	801a      	strh	r2, [r3, #0]
            return;
 8007b46:	e029      	b.n	8007b9c <OSTaskDel+0x1fc>
             break;
 8007b48:	bf00      	nop
 8007b4a:	e000      	b.n	8007b4e <OSTaskDel+0x1ae>
             break;
 8007b4c:	bf00      	nop
    }

#if (OS_CFG_MUTEX_EN > 0u)
    if(p_tcb->MutexGrpHeadPtr != (OS_MUTEX *)0) {
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <OSTaskDel+0x1bc>
        OS_MutexGrpPostAll(p_tcb);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7ff faa1 	bl	800709e <OS_MutexGrpPostAll>
    }
#endif

#if (OS_CFG_TASK_Q_EN > 0u)
    (void)OS_MsgQFreeAll(&p_tcb->MsgQ);                         /* Free task's message queue messages                   */
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3368      	adds	r3, #104	@ 0x68
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff f87b 	bl	8006c5c <OS_MsgQFreeAll>
#endif

    OSTaskDelHook(p_tcb);                                       /* Call user defined hook                               */
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7fd faf6 	bl	8005158 <OSTaskDelHook>
#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskDel(p_tcb);                                      /* Call TLS hook                                        */
#endif

#if (OS_CFG_DBG_EN > 0u)
    OS_TaskDbgListRemove(p_tcb);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f8c9 	bl	8007d04 <OS_TaskDbgListRemove>
#endif

    OSTaskQty--;                                                /* One less task being managed                          */
 8007b72:	4b10      	ldr	r3, [pc, #64]	@ (8007bb4 <OSTaskDel+0x214>)
 8007b74:	881b      	ldrh	r3, [r3, #0]
 8007b76:	3b01      	subs	r3, #1
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007bb4 <OSTaskDel+0x214>)
 8007b7c:	801a      	strh	r2, [r3, #0]

    OS_TRACE_TASK_DEL(p_tcb);

#if (OS_CFG_TASK_STK_REDZONE_EN == 0u)                          /* Don't clear the TCB before checking the red-zone     */
    OS_TaskInitTCB(p_tcb);                                      /* Initialize the TCB to default values                 */
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f91e 	bl	8007dc0 <OS_TaskInitTCB>
#endif
    p_tcb->TaskState = (OS_STATE)OS_TASK_STATE_DEL;             /* Indicate that the task was deleted                   */
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	22ff      	movs	r2, #255	@ 0xff
 8007b88:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

   *p_err = OS_ERR_NONE;                                        /* See Note #1.                                         */
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	801a      	strh	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 8007b92:	6938      	ldr	r0, [r7, #16]
 8007b94:	f7f8 fb3e 	bl	8000214 <CPU_SR_Restore>

    OSSched();                                                  /* Find new highest priority task                       */
 8007b98:	f7fd fd72 	bl	8005680 <OSSched>
}
 8007b9c:	3718      	adds	r7, #24
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	200019ac 	.word	0x200019ac
 8007ba8:	200019ad 	.word	0x200019ad
 8007bac:	200018e8 	.word	0x200018e8
 8007bb0:	20001f1c 	.word	0x20001f1c
 8007bb4:	20001de0 	.word	0x20001de0

08007bb8 <OSTaskStkChk>:
#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u)
void  OSTaskStkChk (OS_TCB        *p_tcb,
                    CPU_STK_SIZE  *p_free,
                    CPU_STK_SIZE  *p_used,
                    OS_ERR        *p_err)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b088      	sub	sp, #32
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	603b      	str	r3, [r7, #0]
    CPU_STK_SIZE  free_stk;
    CPU_STK_SIZE  stk_size;
    CPU_STK      *p_stk;
    CPU_SR_ALLOC();
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* See if trying to check stack from ISR                */
 8007bca:	4b39      	ldr	r3, [pc, #228]	@ (8007cb0 <OSTaskStkChk+0xf8>)
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d004      	beq.n	8007bdc <OSTaskStkChk+0x24>
       *p_err = OS_ERR_TASK_STK_CHK_ISR;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	f247 1259 	movw	r2, #29017	@ 0x7159
 8007bd8:	801a      	strh	r2, [r3, #0]
        return;
 8007bda:	e065      	b.n	8007ca8 <OSTaskStkChk+0xf0>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_free == (CPU_STK_SIZE *)0) {                          /* User must specify valid destinations for the sizes   */
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d104      	bne.n	8007bec <OSTaskStkChk+0x34>
       *p_err = OS_ERR_PTR_INVALID;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	f246 22d5 	movw	r2, #25301	@ 0x62d5
 8007be8:	801a      	strh	r2, [r3, #0]
        return;
 8007bea:	e05d      	b.n	8007ca8 <OSTaskStkChk+0xf0>
    }

    if (p_used == (CPU_STK_SIZE *)0) {
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d104      	bne.n	8007bfc <OSTaskStkChk+0x44>
       *p_err = OS_ERR_PTR_INVALID;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	f246 22d5 	movw	r2, #25301	@ 0x62d5
 8007bf8:	801a      	strh	r2, [r3, #0]
        return;
 8007bfa:	e055      	b.n	8007ca8 <OSTaskStkChk+0xf0>
    }
#endif

    CPU_CRITICAL_ENTER();
 8007bfc:	2040      	movs	r0, #64	@ 0x40
 8007bfe:	f7f8 fafb 	bl	80001f8 <CPU_SR_Save>
 8007c02:	6178      	str	r0, [r7, #20]
    if (p_tcb == (OS_TCB *)0) {                                 /* Check the stack of the current task?                 */
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d102      	bne.n	8007c10 <OSTaskStkChk+0x58>
        p_tcb = OSTCBCurPtr;                                    /* Yes                                                  */
 8007c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8007cb4 <OSTaskStkChk+0xfc>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	60fb      	str	r3, [r7, #12]
    }

    if (p_tcb->StkPtr == (CPU_STK *)0) {                        /* Make sure task exist                                 */
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10d      	bne.n	8007c34 <OSTaskStkChk+0x7c>
        CPU_CRITICAL_EXIT();
 8007c18:	6978      	ldr	r0, [r7, #20]
 8007c1a:	f7f8 fafb 	bl	8000214 <CPU_SR_Restore>
       *p_free = 0u;
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2200      	movs	r2, #0
 8007c22:	601a      	str	r2, [r3, #0]
       *p_used = 0u;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	601a      	str	r2, [r3, #0]
       *p_err  = OS_ERR_TASK_NOT_EXIST;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	f247 1252 	movw	r2, #29010	@ 0x7152
 8007c30:	801a      	strh	r2, [r3, #0]
        return;
 8007c32:	e039      	b.n	8007ca8 <OSTaskStkChk+0xf0>
    }

    if ((p_tcb->Opt & OS_OPT_TASK_STK_CHK) == 0u) {             /* Make sure stack checking option is set               */
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10d      	bne.n	8007c5e <OSTaskStkChk+0xa6>
        CPU_CRITICAL_EXIT();
 8007c42:	6978      	ldr	r0, [r7, #20]
 8007c44:	f7f8 fae6 	bl	8000214 <CPU_SR_Restore>
       *p_free = 0u;
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	601a      	str	r2, [r3, #0]
       *p_used = 0u;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	601a      	str	r2, [r3, #0]
       *p_err  = OS_ERR_TASK_OPT;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	f247 1254 	movw	r2, #29012	@ 0x7154
 8007c5a:	801a      	strh	r2, [r3, #0]
        return;
 8007c5c:	e024      	b.n	8007ca8 <OSTaskStkChk+0xf0>
    }

#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    p_stk = p_tcb->StkBasePtr;                                  /* Start at the lowest memory and go up                 */
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	61bb      	str	r3, [r7, #24]
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
    p_stk -= OS_CFG_TASK_STK_REDZONE_DEPTH;
#endif
#endif

    stk_size = p_tcb->StkSize;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c68:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 8007c6a:	6978      	ldr	r0, [r7, #20]
 8007c6c:	f7f8 fad2 	bl	8000214 <CPU_SR_Restore>

    free_stk = 0u;
 8007c70:	2300      	movs	r3, #0
 8007c72:	61fb      	str	r3, [r7, #28]
                                                                /* Compute the number of zero entries on the stk        */
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    while ((free_stk  < stk_size) &&
 8007c74:	e005      	b.n	8007c82 <OSTaskStkChk+0xca>
           (*p_stk   ==       0u)) {
        p_stk++;
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	3304      	adds	r3, #4
 8007c7a:	61bb      	str	r3, [r7, #24]
        free_stk++;
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	61fb      	str	r3, [r7, #28]
    while ((free_stk  < stk_size) &&
 8007c82:	69fa      	ldr	r2, [r7, #28]
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d203      	bcs.n	8007c92 <OSTaskStkChk+0xda>
           (*p_stk   ==       0u)) {
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	681b      	ldr	r3, [r3, #0]
    while ((free_stk  < stk_size) &&
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d0f1      	beq.n	8007c76 <OSTaskStkChk+0xbe>
           (*p_stk   ==       0u)) {
        free_stk++;
        p_stk--;
    }
#endif
   *p_free = free_stk;
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	69fa      	ldr	r2, [r7, #28]
 8007c96:	601a      	str	r2, [r3, #0]
   *p_used = (stk_size - free_stk);                             /* Compute number of entries used on the stack          */
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	1ad2      	subs	r2, r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	601a      	str	r2, [r3, #0]
   *p_err  = OS_ERR_NONE;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	801a      	strh	r2, [r3, #0]
}
 8007ca8:	3720      	adds	r7, #32
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	200019ac 	.word	0x200019ac
 8007cb4:	20001f1c 	.word	0x20001f1c

08007cb8 <OS_TaskDbgListAdd>:
************************************************************************************************************************
*/

#if (OS_CFG_DBG_EN > 0u)
void  OS_TaskDbgListAdd (OS_TCB  *p_tcb)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
    p_tcb->DbgPrevPtr                = (OS_TCB *)0;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
    if (OSTaskDbgListPtr == (OS_TCB *)0) {
 8007cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8007d00 <OS_TaskDbgListAdd+0x48>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d104      	bne.n	8007cda <OS_TaskDbgListAdd+0x22>
        p_tcb->DbgNextPtr            = (OS_TCB *)0;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 8007cd8:	e009      	b.n	8007cee <OS_TaskDbgListAdd+0x36>
    } else {
        p_tcb->DbgNextPtr            =  OSTaskDbgListPtr;
 8007cda:	4b09      	ldr	r3, [pc, #36]	@ (8007d00 <OS_TaskDbgListAdd+0x48>)
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        OSTaskDbgListPtr->DbgPrevPtr =  p_tcb;
 8007ce4:	4b06      	ldr	r3, [pc, #24]	@ (8007d00 <OS_TaskDbgListAdd+0x48>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
    }
    OSTaskDbgListPtr                 =  p_tcb;
 8007cee:	4a04      	ldr	r2, [pc, #16]	@ (8007d00 <OS_TaskDbgListAdd+0x48>)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6013      	str	r3, [r2, #0]
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	20001ddc 	.word	0x20001ddc

08007d04 <OS_TaskDbgListRemove>:



void  OS_TaskDbgListRemove (OS_TCB  *p_tcb)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
    OS_TCB  *p_tcb_next;
    OS_TCB  *p_tcb_prev;


    p_tcb_prev = p_tcb->DbgPrevPtr;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007d12:	60fb      	str	r3, [r7, #12]
    p_tcb_next = p_tcb->DbgNextPtr;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007d1a:	60bb      	str	r3, [r7, #8]

    if (p_tcb_prev == (OS_TCB *)0) {
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10e      	bne.n	8007d40 <OS_TaskDbgListRemove+0x3c>
        OSTaskDbgListPtr = p_tcb_next;
 8007d22:	4a18      	ldr	r2, [pc, #96]	@ (8007d84 <OS_TaskDbgListRemove+0x80>)
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	6013      	str	r3, [r2, #0]
        if (p_tcb_next != (OS_TCB *)0) {
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d003      	beq.n	8007d36 <OS_TaskDbgListRemove+0x32>
            p_tcb_next->DbgPrevPtr = (OS_TCB *)0;
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        }
        p_tcb->DbgNextPtr = (OS_TCB *)0;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        p_tcb_prev->DbgNextPtr =  p_tcb_next;
        p_tcb_next->DbgPrevPtr =  p_tcb_prev;
        p_tcb->DbgNextPtr      = (OS_TCB *)0;
        p_tcb->DbgPrevPtr      = (OS_TCB *)0;
    }
}
 8007d3e:	e01b      	b.n	8007d78 <OS_TaskDbgListRemove+0x74>
    } else if (p_tcb_next == (OS_TCB *)0) {
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d108      	bne.n	8007d58 <OS_TaskDbgListRemove+0x54>
        p_tcb_prev->DbgNextPtr = (OS_TCB *)0;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        p_tcb->DbgPrevPtr      = (OS_TCB *)0;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 8007d56:	e00f      	b.n	8007d78 <OS_TaskDbgListRemove+0x74>
        p_tcb_prev->DbgNextPtr =  p_tcb_next;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        p_tcb_next->DbgPrevPtr =  p_tcb_prev;
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        p_tcb->DbgNextPtr      = (OS_TCB *)0;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        p_tcb->DbgPrevPtr      = (OS_TCB *)0;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 8007d78:	bf00      	nop
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	20001ddc 	.word	0x20001ddc

08007d88 <OS_TaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInit (OS_ERR  *p_err)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
#if (OS_CFG_DBG_EN > 0u)
    OSTaskDbgListPtr = (OS_TCB *)0;
 8007d90:	4b08      	ldr	r3, [pc, #32]	@ (8007db4 <OS_TaskInit+0x2c>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	601a      	str	r2, [r3, #0]
#endif

    OSTaskQty        = 0u;                                      /* Clear the number of tasks                            */
 8007d96:	4b08      	ldr	r3, [pc, #32]	@ (8007db8 <OS_TaskInit+0x30>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	801a      	strh	r2, [r3, #0]

#if ((OS_CFG_TASK_PROFILE_EN > 0u) || (OS_CFG_DBG_EN > 0u))
    OSTaskCtxSwCtr   = 0u;                                      /* Clear the context switch counter                     */
 8007d9c:	4b07      	ldr	r3, [pc, #28]	@ (8007dbc <OS_TaskInit+0x34>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]
#endif

   *p_err            = OS_ERR_NONE;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	801a      	strh	r2, [r3, #0]
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	20001ddc 	.word	0x20001ddc
 8007db8:	20001de0 	.word	0x20001de0
 8007dbc:	20001dd8 	.word	0x20001dd8

08007dc0 <OS_TaskInitTCB>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInitTCB (OS_TCB  *p_tcb)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_ID   id;
#endif


    p_tcb->StkPtr               = (CPU_STK          *)0;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	601a      	str	r2, [r3, #0]
    p_tcb->StkLimitPtr          = (CPU_STK          *)0;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	609a      	str	r2, [r3, #8]

    p_tcb->ExtPtr               = (void             *)0;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	605a      	str	r2, [r3, #4]

    p_tcb->NextPtr              = (OS_TCB           *)0;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	611a      	str	r2, [r3, #16]
    p_tcb->PrevPtr              = (OS_TCB           *)0;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	615a      	str	r2, [r3, #20]

#if (OS_CFG_TICK_EN > 0u)
    p_tcb->TickNextPtr          = (OS_TCB           *)0;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	619a      	str	r2, [r3, #24]
    p_tcb->TickPrevPtr          = (OS_TCB           *)0;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	61da      	str	r2, [r3, #28]
#endif

#if (OS_CFG_DBG_EN > 0u)
    p_tcb->NamePtr              = (CPU_CHAR *)((void *)"?Task");
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a55      	ldr	r2, [pc, #340]	@ (8007f4c <OS_TaskInitTCB+0x18c>)
 8007df6:	60da      	str	r2, [r3, #12]
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkBasePtr           = (CPU_STK          *)0;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	621a      	str	r2, [r3, #32]
#endif

#if (OS_CFG_DBG_EN > 0u)
    p_tcb->TaskEntryAddr        = (OS_TASK_PTR       )0;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	625a      	str	r2, [r3, #36]	@ 0x24
    p_tcb->TaskEntryArg         = (void             *)0;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	629a      	str	r2, [r3, #40]	@ 0x28
#if (OS_CFG_TS_EN > 0u)
    p_tcb->TS                   =                     0u;
#endif

#if (OS_MSG_EN > 0u)
    p_tcb->MsgPtr               = (void             *)0;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	661a      	str	r2, [r3, #96]	@ 0x60
    p_tcb->MsgSize              =                     0u;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif

#if (OS_CFG_TASK_Q_EN > 0u)
    OS_MsgQInit(&p_tcb->MsgQ,
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	3368      	adds	r3, #104	@ 0x68
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe ff58 	bl	8006cd4 <OS_MsgQInit>
                 0u);
#if (OS_CFG_TASK_PROFILE_EN > 0u)
    p_tcb->MsgQPendTime         =                     0u;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	679a      	str	r2, [r3, #120]	@ 0x78
    p_tcb->MsgQPendTimeMax      =                     0u;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
#endif

#if (OS_CFG_FLAG_EN > 0u)
    p_tcb->FlagsPend            =                     0u;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    p_tcb->FlagsOpt             =                     0u;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
    p_tcb->FlagsRdy             =                     0u;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif

#if (OS_CFG_TASK_REG_TBL_SIZE > 0u)
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 8007e48:	2300      	movs	r3, #0
 8007e4a:	73fb      	strb	r3, [r7, #15]
 8007e4c:	e008      	b.n	8007e60 <OS_TaskInitTCB+0xa0>
        p_tcb->RegTbl[reg_id]   =                     0u;
 8007e4e:	7bfa      	ldrb	r2, [r7, #15]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	3220      	adds	r2, #32
 8007e54:	2100      	movs	r1, #0
 8007e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	73fb      	strb	r3, [r7, #15]
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d0f3      	beq.n	8007e4e <OS_TaskInitTCB+0x8e>
    for (id = 0u; id < OS_CFG_TLS_TBL_SIZE; id++) {
        p_tcb->TLS_Tbl[id]      =                     0u;
    }
#endif

    p_tcb->SemCtr               =                     0u;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	64da      	str	r2, [r3, #76]	@ 0x4c
#if (OS_CFG_TASK_PROFILE_EN > 0u)
    p_tcb->SemPendTime          =                     0u;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    p_tcb->SemPendTimeMax       =                     0u;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkSize              =                     0u;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	645a      	str	r2, [r3, #68]	@ 0x44
#endif


#if (OS_CFG_TASK_SUSPEND_EN > 0u)
    p_tcb->SuspendCtr           =                     0u;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
#endif

#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u)
    p_tcb->StkFree              =                     0u;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    p_tcb->StkUsed              =                     0u;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif

    p_tcb->Opt                  =                     0u;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

#if (OS_CFG_TICK_EN > 0u)
    p_tcb->TickRemain           =                     0u;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	651a      	str	r2, [r3, #80]	@ 0x50
    p_tcb->TickCtrPrev          =                     0u;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
    p_tcb->TimeQuanta           =                     0u;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	659a      	str	r2, [r3, #88]	@ 0x58
    p_tcb->TimeQuantaCtr        =                     0u;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif

#if (OS_CFG_TASK_PROFILE_EN > 0u)
    p_tcb->CPUUsage             =                     0u;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
    p_tcb->CPUUsageMax          =                     0u;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
    p_tcb->CtxSwCtr             =                     0u;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    p_tcb->CyclesDelta          =                     0u;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (OS_CFG_TS_EN > 0u)
    p_tcb->CyclesStart          =  OS_TS_GET();                 /* Read the current timestamp and save                  */
#else
    p_tcb->CyclesStart          =                     0u;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
#endif
    p_tcb->CyclesTotal          =                     0u;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
#endif
#if (OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u)
    p_tcb->SchedLockTimeMax     =                     0u;
#endif

    p_tcb->PendNextPtr          = (OS_TCB           *)0;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	62da      	str	r2, [r3, #44]	@ 0x2c
    p_tcb->PendPrevPtr          = (OS_TCB           *)0;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	631a      	str	r2, [r3, #48]	@ 0x30
    p_tcb->PendObjPtr           = (OS_PEND_OBJ      *)0;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	635a      	str	r2, [r3, #52]	@ 0x34
    p_tcb->PendOn               =  OS_TASK_PEND_ON_NOTHING;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    p_tcb->PendStatus           =  OS_STATUS_PEND_OK;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    p_tcb->TaskState            =  OS_TASK_STATE_RDY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    p_tcb->Prio                 =  OS_PRIO_INIT;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2240      	movs	r2, #64	@ 0x40
 8007f18:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
#if (OS_CFG_MUTEX_EN > 0u)
    p_tcb->BasePrio             =  OS_PRIO_INIT;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2240      	movs	r2, #64	@ 0x40
 8007f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    p_tcb->MutexGrpHeadPtr      = (OS_MUTEX         *)0;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	641a      	str	r2, [r3, #64]	@ 0x40
#endif

#if (OS_CFG_DBG_EN > 0u)
    p_tcb->DbgPrevPtr           = (OS_TCB           *)0;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
    p_tcb->DbgNextPtr           = (OS_TCB           *)0;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    p_tcb->DbgNamePtr           = (CPU_CHAR *)((void *)" ");
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a04      	ldr	r2, [pc, #16]	@ (8007f50 <OS_TaskInitTCB+0x190>)
 8007f3e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
#endif
}
 8007f42:	bf00      	nop
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	08008ebc 	.word	0x08008ebc
 8007f50:	08008ec4 	.word	0x08008ec4

08007f54 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
    OS_ERR  err;



    OSTaskReturnHook(OSTCBCurPtr);                              /* Call hook to let user decide on what to do           */
 8007f5a:	4b07      	ldr	r3, [pc, #28]	@ (8007f78 <OS_TaskReturn+0x24>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fd f90c 	bl	800517c <OSTaskReturnHook>
#if (OS_CFG_TASK_DEL_EN > 0u)
    OSTaskDel((OS_TCB *)0,                                      /* Delete task if it accidentally returns!              */
 8007f64:	1dbb      	adds	r3, r7, #6
 8007f66:	4619      	mov	r1, r3
 8007f68:	2000      	movs	r0, #0
 8007f6a:	f7ff fd19 	bl	80079a0 <OSTaskDel>
        OSTimeDly(OSCfg_TickRate_Hz,
                  OS_OPT_TIME_DLY,
                  &err);
    }
#endif
}
 8007f6e:	bf00      	nop
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20001f1c 	.word	0x20001f1c

08007f7c <OS_TaskChangePrio>:
************************************************************************************************************************
*/

void  OS_TaskChangePrio(OS_TCB  *p_tcb,
                        OS_PRIO  prio_new)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	460b      	mov	r3, r1
 8007f86:	70fb      	strb	r3, [r7, #3]
    OS_PRIO  prio_cur;
#endif


    do {
        p_tcb_owner = (OS_TCB *)0;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_MUTEX_EN > 0u)
        prio_cur    =  p_tcb->Prio;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007f92:	72fb      	strb	r3, [r7, #11]
#endif
        switch (p_tcb->TaskState) {
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007f9a:	2b07      	cmp	r3, #7
 8007f9c:	f200 8085 	bhi.w	80080aa <OS_TaskChangePrio+0x12e>
 8007fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa8 <OS_TaskChangePrio+0x2c>)
 8007fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa6:	bf00      	nop
 8007fa8:	08007fc9 	.word	0x08007fc9
 8007fac:	08007ffd 	.word	0x08007ffd
 8007fb0:	08008007 	.word	0x08008007
 8007fb4:	08008007 	.word	0x08008007
 8007fb8:	08007ffd 	.word	0x08007ffd
 8007fbc:	08007ffd 	.word	0x08007ffd
 8007fc0:	08008007 	.word	0x08008007
 8007fc4:	08008007 	.word	0x08008007
            case OS_TASK_STATE_RDY:
                 OS_RdyListRemove(p_tcb);                       /* Remove from current priority                         */
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7fd ff75 	bl	8005eb8 <OS_RdyListRemove>
                 p_tcb->Prio = prio_new;                        /* Set new task priority                                */
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	78fa      	ldrb	r2, [r7, #3]
 8007fd2:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
                 OS_PrioInsert(p_tcb->Prio);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7ff f8d5 	bl	800718c <OS_PrioInsert>
                 if (p_tcb == OSTCBCurPtr) {
 8007fe2:	4b34      	ldr	r3, [pc, #208]	@ (80080b4 <OS_TaskChangePrio+0x138>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d103      	bne.n	8007ff4 <OS_TaskChangePrio+0x78>
                     OS_RdyListInsertHead(p_tcb);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7fd fe95 	bl	8005d1c <OS_RdyListInsertHead>
                 } else {
                     OS_RdyListInsertTail(p_tcb);
                 }
                 break;
 8007ff2:	e053      	b.n	800809c <OS_TaskChangePrio+0x120>
                     OS_RdyListInsertTail(p_tcb);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7fd fed3 	bl	8005da0 <OS_RdyListInsertTail>
                 break;
 8007ffa:	e04f      	b.n	800809c <OS_TaskChangePrio+0x120>

            case OS_TASK_STATE_DLY:                             /* Nothing to do except change the priority in the OS_TCB*/
            case OS_TASK_STATE_SUSPENDED:
            case OS_TASK_STATE_DLY_SUSPENDED:
                 p_tcb->Prio = prio_new;                        /* Set new task priority                                */
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	78fa      	ldrb	r2, [r7, #3]
 8008000:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
                 break;
 8008004:	e04a      	b.n	800809c <OS_TaskChangePrio+0x120>

            case OS_TASK_STATE_PEND:
            case OS_TASK_STATE_PEND_TIMEOUT:
            case OS_TASK_STATE_PEND_SUSPENDED:
            case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                 p_tcb->Prio = prio_new;                        /* Set new task priority                                */
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	78fa      	ldrb	r2, [r7, #3]
 800800a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
                 switch (p_tcb->PendOn) {                       /* What to do depends on what we are pending on         */
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008014:	2b06      	cmp	r3, #6
 8008016:	dc3d      	bgt.n	8008094 <OS_TaskChangePrio+0x118>
 8008018:	2b05      	cmp	r3, #5
 800801a:	da04      	bge.n	8008026 <OS_TaskChangePrio+0xaa>
 800801c:	2b01      	cmp	r3, #1
 800801e:	d002      	beq.n	8008026 <OS_TaskChangePrio+0xaa>
 8008020:	2b04      	cmp	r3, #4
 8008022:	d004      	beq.n	800802e <OS_TaskChangePrio+0xb2>

                     case OS_TASK_PEND_ON_TASK_Q:
                     case OS_TASK_PEND_ON_TASK_SEM:
                     default:
                                                                /* Default case.                                        */
                          break;
 8008024:	e036      	b.n	8008094 <OS_TaskChangePrio+0x118>
                          OS_PendListChangePrio(p_tcb);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7fd fcce 	bl	80059c8 <OS_PendListChangePrio>
                          break;
 800802c:	e035      	b.n	800809a <OS_TaskChangePrio+0x11e>
                          OS_PendListChangePrio(p_tcb);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7fd fcca 	bl	80059c8 <OS_PendListChangePrio>
                          p_tcb_owner = ((OS_MUTEX *)((void *)p_tcb->PendObjPtr))->OwnerTCBPtr;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800803a:	60fb      	str	r3, [r7, #12]
                          if (prio_cur > prio_new) {            /* Are we increasing the priority?                      */
 800803c:	7afa      	ldrb	r2, [r7, #11]
 800803e:	78fb      	ldrb	r3, [r7, #3]
 8008040:	429a      	cmp	r2, r3
 8008042:	d908      	bls.n	8008056 <OS_TaskChangePrio+0xda>
                              if (p_tcb_owner->Prio <= prio_new) { /* Yes, do we need to give this prio to the owner?   */
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800804a:	78fa      	ldrb	r2, [r7, #3]
 800804c:	429a      	cmp	r2, r3
 800804e:	d323      	bcc.n	8008098 <OS_TaskChangePrio+0x11c>
                                  p_tcb_owner = (OS_TCB *)0;
 8008050:	2300      	movs	r3, #0
 8008052:	60fb      	str	r3, [r7, #12]
                          break;
 8008054:	e020      	b.n	8008098 <OS_TaskChangePrio+0x11c>
                              if (p_tcb_owner->Prio == prio_cur) { /* No, is it required to check for a lower prio?     */
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800805c:	7afa      	ldrb	r2, [r7, #11]
 800805e:	429a      	cmp	r2, r3
 8008060:	d115      	bne.n	800808e <OS_TaskChangePrio+0x112>
                                  prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f7fe fff1 	bl	800704a <OS_MutexGrpPrioFindHighest>
 8008068:	4603      	mov	r3, r0
 800806a:	70fb      	strb	r3, [r7, #3]
                                  prio_new = (prio_new > p_tcb_owner->BasePrio) ? p_tcb_owner->BasePrio : prio_new;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008072:	78fa      	ldrb	r2, [r7, #3]
 8008074:	4293      	cmp	r3, r2
 8008076:	bf28      	it	cs
 8008078:	4613      	movcs	r3, r2
 800807a:	70fb      	strb	r3, [r7, #3]
                                  if (prio_new == p_tcb_owner->Prio) {
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8008082:	78fa      	ldrb	r2, [r7, #3]
 8008084:	429a      	cmp	r2, r3
 8008086:	d107      	bne.n	8008098 <OS_TaskChangePrio+0x11c>
                                      p_tcb_owner = (OS_TCB *)0;
 8008088:	2300      	movs	r3, #0
 800808a:	60fb      	str	r3, [r7, #12]
                          break;
 800808c:	e004      	b.n	8008098 <OS_TaskChangePrio+0x11c>
                                  p_tcb_owner = (OS_TCB *)0;
 800808e:	2300      	movs	r3, #0
 8008090:	60fb      	str	r3, [r7, #12]
                          break;
 8008092:	e001      	b.n	8008098 <OS_TaskChangePrio+0x11c>
                          break;
 8008094:	bf00      	nop
 8008096:	e000      	b.n	800809a <OS_TaskChangePrio+0x11e>
                          break;
 8008098:	bf00      	nop
                 }
                 break;
 800809a:	bf00      	nop

            default:
                 return;
        }
        p_tcb = p_tcb_owner;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	607b      	str	r3, [r7, #4]
    } while (p_tcb != (OS_TCB *)0);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f47f af70 	bne.w	8007f88 <OS_TaskChangePrio+0xc>
 80080a8:	e000      	b.n	80080ac <OS_TaskChangePrio+0x130>
                 return;
 80080aa:	bf00      	nop
}
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	20001f1c 	.word	0x20001f1c

080080b8 <OS_TickInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickInit (OS_ERR  *p_err)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
    *p_err                = OS_ERR_NONE;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	801a      	strh	r2, [r3, #0]

    OSTickCtr             = 0u;                               /* Clear the tick counter                               */
 80080c6:	4b09      	ldr	r3, [pc, #36]	@ (80080ec <OS_TickInit+0x34>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	601a      	str	r2, [r3, #0]

#if (OS_CFG_DYN_TICK_EN > 0u)
    OSTickCtrStep         = 0u;
#endif

    OSTickList.TCB_Ptr    = (OS_TCB *)0;
 80080cc:	4b08      	ldr	r3, [pc, #32]	@ (80080f0 <OS_TickInit+0x38>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]

#if (OS_CFG_DBG_EN > 0u)
    OSTickList.NbrEntries = 0u;
 80080d2:	4b07      	ldr	r3, [pc, #28]	@ (80080f0 <OS_TickInit+0x38>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	809a      	strh	r2, [r3, #4]
    OSTickList.NbrUpdated = 0u;
 80080d8:	4b05      	ldr	r3, [pc, #20]	@ (80080f0 <OS_TickInit+0x38>)
 80080da:	2200      	movs	r2, #0
 80080dc:	80da      	strh	r2, [r3, #6]
#endif
}
 80080de:	bf00      	nop
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	20001de4 	.word	0x20001de4
 80080f0:	20001de8 	.word	0x20001de8

080080f4 <OS_TickUpdate>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickUpdate (OS_TICK  ticks)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
#if (OS_CFG_TS_EN > 0u)
    CPU_TS  ts_start;
#endif
    CPU_SR_ALLOC();
 80080fc:	2300      	movs	r3, #0
 80080fe:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 8008100:	2040      	movs	r0, #64	@ 0x40
 8008102:	f7f8 f879 	bl	80001f8 <CPU_SR_Save>
 8008106:	60f8      	str	r0, [r7, #12]

    OSTickCtr += ticks;                                         /* Keep track of the number of ticks                    */
 8008108:	4b07      	ldr	r3, [pc, #28]	@ (8008128 <OS_TickUpdate+0x34>)
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4413      	add	r3, r2
 8008110:	4a05      	ldr	r2, [pc, #20]	@ (8008128 <OS_TickUpdate+0x34>)
 8008112:	6013      	str	r3, [r2, #0]
    OSTickTime = OS_TS_GET() - ts_start;
    if (OSTickTimeMax < OSTickTime) {
        OSTickTimeMax = OSTickTime;
    }
#else
    OS_TickListUpdate(ticks);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f979 	bl	800840c <OS_TickListUpdate>
        OSTickCtrStep = 0u;
    }

    OS_DynTickSet(OSTickCtrStep);
#endif
    CPU_CRITICAL_EXIT();
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f7f8 f87a 	bl	8000214 <CPU_SR_Restore>
}
 8008120:	bf00      	nop
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20001de4 	.word	0x20001de4

0800812c <OS_TickListInsert>:

CPU_BOOLEAN  OS_TickListInsert (OS_TCB   *p_tcb,
                                OS_TICK   elapsed,
                                OS_TICK   tick_base,
                                OS_TICK   time)
{
 800812c:	b480      	push	{r7}
 800812e:	b08b      	sub	sp, #44	@ 0x2c
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
 8008138:	603b      	str	r3, [r7, #0]
    OS_TICK_LIST  *p_list;
    OS_TICK        delta;
    OS_TICK        remain;


    delta = (time + tick_base) - (OSTickCtr + elapsed);         /* How many ticks until our delay expires?              */
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	441a      	add	r2, r3
 8008140:	4b4d      	ldr	r3, [pc, #308]	@ (8008278 <OS_TickListInsert+0x14c>)
 8008142:	6819      	ldr	r1, [r3, #0]
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	440b      	add	r3, r1
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	61fb      	str	r3, [r7, #28]

    if (delta == 0u) {
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d104      	bne.n	800815c <OS_TickListInsert+0x30>
        p_tcb->TickRemain = 0u;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	651a      	str	r2, [r3, #80]	@ 0x50
        return (OS_FALSE);
 8008158:	2300      	movs	r3, #0
 800815a:	e087      	b.n	800826c <OS_TickListInsert+0x140>
    }

    OS_TRACE_TASK_DLY(delta);

    p_list = &OSTickList;
 800815c:	4b47      	ldr	r3, [pc, #284]	@ (800827c <OS_TickListInsert+0x150>)
 800815e:	61bb      	str	r3, [r7, #24]
    if (p_list->TCB_Ptr == (OS_TCB *)0) {                       /* Is the list empty?                                   */
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d110      	bne.n	800818a <OS_TickListInsert+0x5e>
        p_tcb->TickRemain   = delta;                            /* Yes, Store time in TCB                               */
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	69fa      	ldr	r2, [r7, #28]
 800816c:	651a      	str	r2, [r3, #80]	@ 0x50
        p_tcb->TickNextPtr  = (OS_TCB *)0;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	619a      	str	r2, [r3, #24]
        p_tcb->TickPrevPtr  = (OS_TCB *)0;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	61da      	str	r2, [r3, #28]
        p_list->TCB_Ptr     = p_tcb;                            /* Point to TCB of task to place in the list            */
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	601a      	str	r2, [r3, #0]

        OSTickCtrStep       = delta;
        OS_DynTickSet(OSTickCtrStep);
#endif
#if (OS_CFG_DBG_EN > 0u)
        p_list->NbrEntries  = 1u;                               /* List contains 1 entry                                */
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	2201      	movs	r2, #1
 8008184:	809a      	strh	r2, [r3, #4]
#endif
        return (OS_TRUE);
 8008186:	2301      	movs	r3, #1
 8008188:	e070      	b.n	800826c <OS_TickListInsert+0x140>
    }


#if (OS_CFG_DBG_EN > 0u)
    p_list->NbrEntries++;                                       /* Update debug counter to reflect the new entry.       */
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	889b      	ldrh	r3, [r3, #4]
 800818e:	3301      	adds	r3, #1
 8008190:	b29a      	uxth	r2, r3
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	809a      	strh	r2, [r3, #4]
#endif

    p_tcb2 = p_list->TCB_Ptr;
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	623b      	str	r3, [r7, #32]
    remain = p_tcb2->TickRemain - elapsed;                      /* How many ticks until the head's delay expires?       */
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	617b      	str	r3, [r7, #20]

    if ((delta               <   remain) &&                     /* If our entry is the new head of the tick list    ... */
 80081a6:	69fa      	ldr	r2, [r7, #28]
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d219      	bcs.n	80081e2 <OS_TickListInsert+0xb6>
        (p_tcb2->TickPrevPtr == (OS_TCB *)0)) {
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	69db      	ldr	r3, [r3, #28]
    if ((delta               <   remain) &&                     /* If our entry is the new head of the tick list    ... */
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d115      	bne.n	80081e2 <OS_TickListInsert+0xb6>
        p_tcb->TickRemain    =  delta;                          /* ... the delta is equivalent to the full delay    ... */
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	69fa      	ldr	r2, [r7, #28]
 80081ba:	651a      	str	r2, [r3, #80]	@ 0x50
        p_tcb2->TickRemain   =  remain - delta;                 /* ... the previous head's delta is now relative to it. */
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	1ad2      	subs	r2, r2, r3
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	651a      	str	r2, [r3, #80]	@ 0x50

        p_tcb->TickPrevPtr   = (OS_TCB *)0;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	61da      	str	r2, [r3, #28]
        p_tcb->TickNextPtr   =  p_tcb2;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6a3a      	ldr	r2, [r7, #32]
 80081d0:	619a      	str	r2, [r3, #24]
        p_tcb2->TickPrevPtr  =  p_tcb;
 80081d2:	6a3b      	ldr	r3, [r7, #32]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	61da      	str	r2, [r3, #28]
        p_list->TCB_Ptr      =  p_tcb;
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	601a      	str	r2, [r3, #0]
                                                                /* In DTM, a new list head must update the tick     ... */
        OSTickCtrStep        =  delta;                          /* ... timer to interrupt at the new delay value.       */
        OS_DynTickSet(OSTickCtrStep);
#endif

        return (OS_TRUE);
 80081de:	2301      	movs	r3, #1
 80081e0:	e044      	b.n	800826c <OS_TickListInsert+0x140>
    }

                                                                /* Our entry comes after the current list head.         */
    delta  -= remain;                                           /* Make delta relative to the head.                     */
 80081e2:	69fa      	ldr	r2, [r7, #28]
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	61fb      	str	r3, [r7, #28]
    p_tcb1  = p_tcb2;
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	627b      	str	r3, [r7, #36]	@ 0x24
    p_tcb2  = p_tcb1->TickNextPtr;
 80081ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	623b      	str	r3, [r7, #32]

    while ((p_tcb2 !=        (OS_TCB *)0) &&                    /* Find the appropriate position in the delta list.     */
 80081f4:	e009      	b.n	800820a <OS_TickListInsert+0xde>
           (delta  >= p_tcb2->TickRemain)) {
        delta  -= p_tcb2->TickRemain;
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081fa:	69fa      	ldr	r2, [r7, #28]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	61fb      	str	r3, [r7, #28]
        p_tcb1  = p_tcb2;
 8008200:	6a3b      	ldr	r3, [r7, #32]
 8008202:	627b      	str	r3, [r7, #36]	@ 0x24
        p_tcb2  = p_tcb2->TickNextPtr;
 8008204:	6a3b      	ldr	r3, [r7, #32]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	623b      	str	r3, [r7, #32]
    while ((p_tcb2 !=        (OS_TCB *)0) &&                    /* Find the appropriate position in the delta list.     */
 800820a:	6a3b      	ldr	r3, [r7, #32]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d004      	beq.n	800821a <OS_TickListInsert+0xee>
           (delta  >= p_tcb2->TickRemain)) {
 8008210:	6a3b      	ldr	r3, [r7, #32]
 8008212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    while ((p_tcb2 !=        (OS_TCB *)0) &&                    /* Find the appropriate position in the delta list.     */
 8008214:	69fa      	ldr	r2, [r7, #28]
 8008216:	429a      	cmp	r2, r3
 8008218:	d2ed      	bcs.n	80081f6 <OS_TickListInsert+0xca>
    }

    if (p_tcb2 != (OS_TCB *)0) {                                /* Our entry is not the last element in the list.       */
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d018      	beq.n	8008252 <OS_TickListInsert+0x126>
        p_tcb1               = p_tcb2->TickPrevPtr;
 8008220:	6a3b      	ldr	r3, [r7, #32]
 8008222:	69db      	ldr	r3, [r3, #28]
 8008224:	627b      	str	r3, [r7, #36]	@ 0x24
        p_tcb->TickRemain    = delta;                           /* Store remaining time                                 */
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	69fa      	ldr	r2, [r7, #28]
 800822a:	651a      	str	r2, [r3, #80]	@ 0x50
        p_tcb->TickPrevPtr   = p_tcb1;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008230:	61da      	str	r2, [r3, #28]
        p_tcb->TickNextPtr   = p_tcb2;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6a3a      	ldr	r2, [r7, #32]
 8008236:	619a      	str	r2, [r3, #24]
        p_tcb2->TickRemain  -= delta;                           /* Reduce time of next entry in the list                */
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	1ad2      	subs	r2, r2, r3
 8008240:	6a3b      	ldr	r3, [r7, #32]
 8008242:	651a      	str	r2, [r3, #80]	@ 0x50
        p_tcb2->TickPrevPtr  = p_tcb;
 8008244:	6a3b      	ldr	r3, [r7, #32]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	61da      	str	r2, [r3, #28]
        p_tcb1->TickNextPtr  = p_tcb;
 800824a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	619a      	str	r2, [r3, #24]
 8008250:	e00b      	b.n	800826a <OS_TickListInsert+0x13e>

    } else {                                                    /* Our entry belongs at the end of the list.            */
        p_tcb->TickRemain    = delta;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	69fa      	ldr	r2, [r7, #28]
 8008256:	651a      	str	r2, [r3, #80]	@ 0x50
        p_tcb->TickPrevPtr   = p_tcb1;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800825c:	61da      	str	r2, [r3, #28]
        p_tcb->TickNextPtr   = (OS_TCB *)0;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	619a      	str	r2, [r3, #24]
        p_tcb1->TickNextPtr  = p_tcb;
 8008264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	619a      	str	r2, [r3, #24]
    }

    return (OS_TRUE);
 800826a:	2301      	movs	r3, #1
}
 800826c:	4618      	mov	r0, r3
 800826e:	372c      	adds	r7, #44	@ 0x2c
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	20001de4 	.word	0x20001de4
 800827c:	20001de8 	.word	0x20001de8

08008280 <OS_TickListInsertDly>:

void  OS_TickListInsertDly (OS_TCB   *p_tcb,
                            OS_TICK   time,
                            OS_OPT    opt,
                            OS_ERR   *p_err)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	603b      	str	r3, [r7, #0]
 800828c:	4613      	mov	r3, r2
 800828e:	80fb      	strh	r3, [r7, #6]


#if (OS_CFG_DYN_TICK_EN > 0u)
    elapsed  = OS_DynTickGet();
#else
    elapsed  = 0u;
 8008290:	2300      	movs	r3, #0
 8008292:	61bb      	str	r3, [r7, #24]
#endif

    if (opt == OS_OPT_TIME_MATCH) {                             /* MATCH to absolute tick ctr value mode                */
 8008294:	88fb      	ldrh	r3, [r7, #6]
 8008296:	2b04      	cmp	r3, #4
 8008298:	d102      	bne.n	80082a0 <OS_TickListInsertDly+0x20>
        tick_base = 0u;                                         /* tick_base + time == time                             */
 800829a:	2300      	movs	r3, #0
 800829c:	61fb      	str	r3, [r7, #28]
 800829e:	e03b      	b.n	8008318 <OS_TickListInsertDly+0x98>

    } else if (opt == OS_OPT_TIME_PERIODIC) {                   /* PERIODIC mode.                                       */
 80082a0:	88fb      	ldrh	r3, [r7, #6]
 80082a2:	2b08      	cmp	r3, #8
 80082a4:	d135      	bne.n	8008312 <OS_TickListInsertDly+0x92>
        if (time == 0u) {
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d104      	bne.n	80082b6 <OS_TickListInsertDly+0x36>
           *p_err = OS_ERR_TIME_ZERO_DLY;                       /* Infinite frequency is invalid.                       */
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	f247 227e 	movw	r2, #29310	@ 0x727e
 80082b2:	801a      	strh	r2, [r3, #0]
            return;
 80082b4:	e047      	b.n	8008346 <OS_TickListInsertDly+0xc6>
        }

        tick_base = p_tcb->TickCtrPrev;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ba:	61fb      	str	r3, [r7, #28]

#if (OS_CFG_DYN_TICK_EN > 0u)                                   /* How far is our tick-base from the system time?       */
        base_offset = OSTickCtr + elapsed - tick_base;
#else
        base_offset = OSTickCtr - tick_base;
 80082bc:	4b23      	ldr	r3, [pc, #140]	@ (800834c <OS_TickListInsertDly+0xcc>)
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	617b      	str	r3, [r7, #20]
#endif

        if (base_offset >= time) {                              /* If our task missed the last period, move         ... */
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d31a      	bcc.n	8008304 <OS_TickListInsertDly+0x84>
            tick_base += time * (base_offset / time);           /* ... tick_base up to the next one.                    */
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	fb02 f303 	mul.w	r3, r2, r3
 80082dc:	69fa      	ldr	r2, [r7, #28]
 80082de:	4413      	add	r3, r2
 80082e0:	61fb      	str	r3, [r7, #28]
            if ((base_offset % time) != 0u) {
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80082ea:	68b9      	ldr	r1, [r7, #8]
 80082ec:	fb01 f202 	mul.w	r2, r1, r2
 80082f0:	1a9b      	subs	r3, r3, r2
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <OS_TickListInsertDly+0x7e>
                tick_base += time;                              /* Account for rounding errors with integer division    */
 80082f6:	69fa      	ldr	r2, [r7, #28]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	4413      	add	r3, r2
 80082fc:	61fb      	str	r3, [r7, #28]
            }

            p_tcb->TickCtrPrev = tick_base;                     /* Adjust the periodic tick base                        */
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	69fa      	ldr	r2, [r7, #28]
 8008302:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        p_tcb->TickCtrPrev += time;                             /* Update for the next time we perform a periodic dly.  */
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	441a      	add	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	655a      	str	r2, [r3, #84]	@ 0x54
 8008310:	e002      	b.n	8008318 <OS_TickListInsertDly+0x98>

    } else {                                                    /* RELATIVE time delay mode                             */
#if (OS_CFG_DYN_TICK_EN > 0u)                                   /* Our base is always the current system time.          */
        tick_base = OSTickCtr + elapsed;
#else
        tick_base = OSTickCtr;
 8008312:	4b0e      	ldr	r3, [pc, #56]	@ (800834c <OS_TickListInsertDly+0xcc>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	61fb      	str	r3, [r7, #28]
#endif
    }

    valid_dly = OS_TickListInsert(p_tcb, elapsed, tick_base, time);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	69fa      	ldr	r2, [r7, #28]
 800831c:	69b9      	ldr	r1, [r7, #24]
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f7ff ff04 	bl	800812c <OS_TickListInsert>
 8008324:	4603      	mov	r3, r0
 8008326:	74fb      	strb	r3, [r7, #19]

    if (valid_dly == OS_TRUE) {
 8008328:	7cfb      	ldrb	r3, [r7, #19]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d107      	bne.n	800833e <OS_TickListInsertDly+0xbe>
        p_tcb->TaskState = OS_TASK_STATE_DLY;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
       *p_err            = OS_ERR_NONE;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2200      	movs	r2, #0
 800833a:	801a      	strh	r2, [r3, #0]
 800833c:	e003      	b.n	8008346 <OS_TickListInsertDly+0xc6>
    } else {
       *p_err = OS_ERR_TIME_ZERO_DLY;
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	f247 227e 	movw	r2, #29310	@ 0x727e
 8008344:	801a      	strh	r2, [r3, #0]
    }
}
 8008346:	3720      	adds	r7, #32
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	20001de4 	.word	0x20001de4

08008350 <OS_TickListRemove>:
*              2) This function is assumed to be called with interrupts disabled.
************************************************************************************************************************
*/

void  OS_TickListRemove (OS_TCB  *p_tcb)
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]

#if (OS_CFG_DYN_TICK_EN > 0u)
    elapsed = OS_DynTickGet();
#endif

    p_tcb1 = p_tcb->TickPrevPtr;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	69db      	ldr	r3, [r3, #28]
 800835c:	617b      	str	r3, [r7, #20]
    p_tcb2 = p_tcb->TickNextPtr;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	613b      	str	r3, [r7, #16]
    p_list = &OSTickList;
 8008364:	4b28      	ldr	r3, [pc, #160]	@ (8008408 <OS_TickListRemove+0xb8>)
 8008366:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d126      	bne.n	80083bc <OS_TickListRemove+0x6c>
        if (p_tcb2 == (OS_TCB *)0) {                            /* Remove the ONLY entry in the list?                   */
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d109      	bne.n	8008388 <OS_TickListRemove+0x38>
            p_list->TCB_Ptr      = (OS_TCB *)0;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]
#if (OS_CFG_DBG_EN > 0u)
            p_list->NbrEntries   =           0u;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	809a      	strh	r2, [r3, #4]
#endif
            p_tcb->TickRemain    =           0u;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	651a      	str	r2, [r3, #80]	@ 0x50
        p_list->NbrEntries--;
#endif
        p_tcb->TickNextPtr       = (OS_TCB *)0;
        p_tcb->TickRemain        =           0u;
    }
}
 8008386:	e038      	b.n	80083fa <OS_TickListRemove+0xaa>
            p_tcb2->TickPrevPtr  = (OS_TCB *)0;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	2200      	movs	r2, #0
 800838c:	61da      	str	r2, [r3, #28]
            p_tcb2->TickRemain  += p_tcb->TickRemain;           /* Add back the ticks to the delta                      */
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008396:	441a      	add	r2, r3
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	651a      	str	r2, [r3, #80]	@ 0x50
            p_list->TCB_Ptr      = p_tcb2;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	601a      	str	r2, [r3, #0]
            p_list->NbrEntries--;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	889b      	ldrh	r3, [r3, #4]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	809a      	strh	r2, [r3, #4]
            p_tcb->TickNextPtr          = (OS_TCB *)0;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	619a      	str	r2, [r3, #24]
            p_tcb->TickRemain           =           0u;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80083ba:	e01e      	b.n	80083fa <OS_TickListRemove+0xaa>
        p_tcb1->TickNextPtr = p_tcb2;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	619a      	str	r2, [r3, #24]
        if (p_tcb2 != (OS_TCB *)0) {
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d009      	beq.n	80083dc <OS_TickListRemove+0x8c>
            p_tcb2->TickPrevPtr  = p_tcb1;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	61da      	str	r2, [r3, #28]
            p_tcb2->TickRemain  += p_tcb->TickRemain;            /* Add back the ticks to the delta list                 */
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083d6:	441a      	add	r2, r3
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	651a      	str	r2, [r3, #80]	@ 0x50
        p_tcb->TickPrevPtr       = (OS_TCB *)0;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	61da      	str	r2, [r3, #28]
        p_list->NbrEntries--;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	889b      	ldrh	r3, [r3, #4]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	809a      	strh	r2, [r3, #4]
        p_tcb->TickNextPtr       = (OS_TCB *)0;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	619a      	str	r2, [r3, #24]
        p_tcb->TickRemain        =           0u;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80083fa:	bf00      	nop
 80083fc:	371c      	adds	r7, #28
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	20001de8 	.word	0x20001de8

0800840c <OS_TickListUpdate>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TickListUpdate (OS_TICK  ticks)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b088      	sub	sp, #32
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
#endif



#if (OS_CFG_DBG_EN > 0u)
    nbr_updated = 0u;
 8008414:	2300      	movs	r3, #0
 8008416:	837b      	strh	r3, [r7, #26]
#endif
    p_list      = &OSTickList;
 8008418:	4b65      	ldr	r3, [pc, #404]	@ (80085b0 <OS_TickListUpdate+0x1a4>)
 800841a:	613b      	str	r3, [r7, #16]
    p_tcb       = p_list->TCB_Ptr;
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	61fb      	str	r3, [r7, #28]
    if (p_tcb != (OS_TCB *)0) {
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	2b00      	cmp	r3, #0
 8008426:	f000 80bb 	beq.w	80085a0 <OS_TickListUpdate+0x194>
        if (p_tcb->TickRemain <= ticks) {
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	429a      	cmp	r2, r3
 8008432:	d308      	bcc.n	8008446 <OS_TickListUpdate+0x3a>
            ticks              = ticks - p_tcb->TickRemain;
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	607b      	str	r3, [r7, #4]
            p_tcb->TickRemain  = 0u;
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	2200      	movs	r2, #0
 8008442:	651a      	str	r2, [r3, #80]	@ 0x50
 8008444:	e0a7      	b.n	8008596 <OS_TickListUpdate+0x18a>
        } else {
            p_tcb->TickRemain -= ticks;
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	1ad2      	subs	r2, r2, r3
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        while (p_tcb->TickRemain == 0u) {
 8008452:	e0a0      	b.n	8008596 <OS_TickListUpdate+0x18a>
#if (OS_CFG_DBG_EN > 0u)
            nbr_updated++;
 8008454:	8b7b      	ldrh	r3, [r7, #26]
 8008456:	3301      	adds	r3, #1
 8008458:	837b      	strh	r3, [r7, #26]
#endif

            switch (p_tcb->TaskState) {
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008460:	2b01      	cmp	r3, #1
 8008462:	d002      	beq.n	800846a <OS_TickListUpdate+0x5e>
 8008464:	2b05      	cmp	r3, #5
 8008466:	d008      	beq.n	800847a <OS_TickListUpdate+0x6e>
 8008468:	e00c      	b.n	8008484 <OS_TickListUpdate+0x78>
                case OS_TASK_STATE_DLY:
                     p_tcb->TaskState = OS_TASK_STATE_RDY;
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                     OS_RdyListInsert(p_tcb);                            /* Insert the task in the ready list                    */
 8008472:	69f8      	ldr	r0, [r7, #28]
 8008474:	f7fd fc34 	bl	8005ce0 <OS_RdyListInsert>
                     break;
 8008478:	e062      	b.n	8008540 <OS_TickListUpdate+0x134>

                case OS_TASK_STATE_DLY_SUSPENDED:
                     p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	2204      	movs	r2, #4
 800847e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                     break;
 8008482:	e05d      	b.n	8008540 <OS_TickListUpdate+0x134>

                default:
#if (OS_CFG_MUTEX_EN > 0u)
                     p_tcb_owner = (OS_TCB *)0;
 8008484:	2300      	movs	r3, #0
 8008486:	617b      	str	r3, [r7, #20]
                     if (p_tcb->PendOn == OS_TASK_PEND_ON_MUTEX) {
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800848e:	2b04      	cmp	r3, #4
 8008490:	d103      	bne.n	800849a <OS_TickListUpdate+0x8e>
                         p_tcb_owner = (OS_TCB *)((OS_MUTEX *)((void *)p_tcb->PendObjPtr))->OwnerTCBPtr;
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008498:	617b      	str	r3, [r7, #20]
                     }
#endif

#if (OS_MSG_EN > 0u)
                     p_tcb->MsgPtr  = (void *)0;
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	2200      	movs	r2, #0
 800849e:	661a      	str	r2, [r3, #96]	@ 0x60
                     p_tcb->MsgSize = 0u;
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif
#if (OS_CFG_TS_EN > 0u)
                     p_tcb->TS      = OS_TS_GET();
#endif
                     OS_PendListRemove(p_tcb);                           /* Remove task from pend list                           */
 80084a8:	69f8      	ldr	r0, [r7, #28]
 80084aa:	f7fd fb29 	bl	8005b00 <OS_PendListRemove>

                     switch (p_tcb->TaskState) {
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80084b4:	2b03      	cmp	r3, #3
 80084b6:	d002      	beq.n	80084be <OS_TickListUpdate+0xb2>
 80084b8:	2b07      	cmp	r3, #7
 80084ba:	d008      	beq.n	80084ce <OS_TickListUpdate+0xc2>
                         case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                              p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
                              break;

                         default:
                              break;
 80084bc:	e00c      	b.n	80084d8 <OS_TickListUpdate+0xcc>
                              OS_RdyListInsert(p_tcb);                   /* Insert the task in the ready list                    */
 80084be:	69f8      	ldr	r0, [r7, #28]
 80084c0:	f7fd fc0e 	bl	8005ce0 <OS_RdyListInsert>
                              p_tcb->TaskState  = OS_TASK_STATE_RDY;
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                              break;
 80084cc:	e004      	b.n	80084d8 <OS_TickListUpdate+0xcc>
                              p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	2204      	movs	r2, #4
 80084d2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                              break;
 80084d6:	bf00      	nop
                     }
                     p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;         /* Indicate pend timed out                              */
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	2203      	movs	r2, #3
 80084dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                     p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                           */
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

#if (OS_CFG_MUTEX_EN > 0u)
                     if (p_tcb_owner != (OS_TCB *)0) {
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d027      	beq.n	800853e <OS_TickListUpdate+0x132>
                         if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d01f      	beq.n	800853e <OS_TickListUpdate+0x132>
                             (p_tcb_owner->Prio == p_tcb->Prio)) {       /* Has the owner inherited a priority?                  */
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
                         if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 800850a:	429a      	cmp	r2, r3
 800850c:	d117      	bne.n	800853e <OS_TickListUpdate+0x132>
                             prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 800850e:	6978      	ldr	r0, [r7, #20]
 8008510:	f7fe fd9b 	bl	800704a <OS_MutexGrpPrioFindHighest>
 8008514:	4603      	mov	r3, r0
 8008516:	73fb      	strb	r3, [r7, #15]
                             prio_new = (prio_new > p_tcb_owner->BasePrio) ? p_tcb_owner->BasePrio : prio_new;
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800851e:	7bfa      	ldrb	r2, [r7, #15]
 8008520:	4293      	cmp	r3, r2
 8008522:	bf28      	it	cs
 8008524:	4613      	movcs	r3, r2
 8008526:	73fb      	strb	r3, [r7, #15]
                             if (prio_new != p_tcb_owner->Prio) {
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800852e:	7bfa      	ldrb	r2, [r7, #15]
 8008530:	429a      	cmp	r2, r3
 8008532:	d004      	beq.n	800853e <OS_TickListUpdate+0x132>
                                 OS_TaskChangePrio(p_tcb_owner, prio_new);
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	4619      	mov	r1, r3
 8008538:	6978      	ldr	r0, [r7, #20]
 800853a:	f7ff fd1f 	bl	8007f7c <OS_TaskChangePrio>
                                 OS_TRACE_MUTEX_TASK_PRIO_DISINHERIT(p_tcb_owner, p_tcb_owner->Prio);
                             }
                         }
                     }
#endif
                     break;
 800853e:	bf00      	nop
            }

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	699a      	ldr	r2, [r3, #24]
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	601a      	str	r2, [r3, #0]
            p_tcb           = p_list->TCB_Ptr;                           /* Get 'p_tcb' again for loop                           */
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	61fb      	str	r3, [r7, #28]
            if (p_tcb == (OS_TCB *)0) {
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d103      	bne.n	800855c <OS_TickListUpdate+0x150>
#if (OS_CFG_DBG_EN > 0u)
                p_list->NbrEntries = 0u;
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	2200      	movs	r2, #0
 8008558:	809a      	strh	r2, [r3, #4]
#endif
                break;
 800855a:	e021      	b.n	80085a0 <OS_TickListUpdate+0x194>
            } else {
#if (OS_CFG_DBG_EN > 0u)
                p_list->NbrEntries--;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	889b      	ldrh	r3, [r3, #4]
 8008560:	3b01      	subs	r3, #1
 8008562:	b29a      	uxth	r2, r3
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	809a      	strh	r2, [r3, #4]
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	2200      	movs	r2, #0
 800856c:	61da      	str	r2, [r3, #28]
                if (p_tcb->TickRemain <= ticks) {
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	429a      	cmp	r2, r3
 8008576:	d308      	bcc.n	800858a <OS_TickListUpdate+0x17e>
                    ticks              = ticks - p_tcb->TickRemain;
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	607b      	str	r3, [r7, #4]
                    p_tcb->TickRemain  = 0u;
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	2200      	movs	r2, #0
 8008586:	651a      	str	r2, [r3, #80]	@ 0x50
 8008588:	e005      	b.n	8008596 <OS_TickListUpdate+0x18a>
                } else {
                    p_tcb->TickRemain -= ticks;
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	1ad2      	subs	r2, r2, r3
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	651a      	str	r2, [r3, #80]	@ 0x50
        while (p_tcb->TickRemain == 0u) {
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800859a:	2b00      	cmp	r3, #0
 800859c:	f43f af5a 	beq.w	8008454 <OS_TickListUpdate+0x48>
                }
            }
        }
    }
#if (OS_CFG_DBG_EN > 0u)
    p_list->NbrUpdated = nbr_updated;
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	8b7a      	ldrh	r2, [r7, #26]
 80085a4:	80da      	strh	r2, [r3, #6]
#endif
}
 80085a6:	bf00      	nop
 80085a8:	3720      	adds	r7, #32
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	20001de8 	.word	0x20001de8

080085b4 <OSTimeDly>:
*/

void  OSTimeDly (OS_TICK   dly,
                 OS_OPT    opt,
                 OS_ERR   *p_err)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	460b      	mov	r3, r1
 80085be:	607a      	str	r2, [r7, #4]
 80085c0:	817b      	strh	r3, [r7, #10]
#if (OS_CFG_TICK_EN > 0u)
    CPU_SR_ALLOC();
 80085c2:	2300      	movs	r3, #0
 80085c4:	617b      	str	r3, [r7, #20]
    *p_err = OS_ERR_TICK_DISABLED;
    return;
#else

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
 80085c6:	4b2b      	ldr	r3, [pc, #172]	@ (8008674 <OSTimeDly+0xc0>)
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d004      	beq.n	80085d8 <OSTimeDly+0x24>
       *p_err = OS_ERR_TIME_DLY_ISR;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f247 2275 	movw	r2, #29301	@ 0x7275
 80085d4:	801a      	strh	r2, [r3, #0]
        return;
 80085d6:	e049      	b.n	800866c <OSTimeDly+0xb8>
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 80085d8:	4b27      	ldr	r3, [pc, #156]	@ (8008678 <OSTimeDly+0xc4>)
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d004      	beq.n	80085ea <OSTimeDly+0x36>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f645 6289 	movw	r2, #24201	@ 0x5e89
 80085e6:	801a      	strh	r2, [r3, #0]
        return;
 80085e8:	e040      	b.n	800866c <OSTimeDly+0xb8>
    }
#endif

    if (OSSchedLockNestingCtr > 0u) {                           /* Can't delay when the scheduler is locked             */
 80085ea:	4b24      	ldr	r3, [pc, #144]	@ (800867c <OSTimeDly+0xc8>)
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d004      	beq.n	80085fc <OSTimeDly+0x48>
       *p_err = OS_ERR_SCHED_LOCKED;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f646 5263 	movw	r2, #28003	@ 0x6d63
 80085f8:	801a      	strh	r2, [r3, #0]
        return;
 80085fa:	e037      	b.n	800866c <OSTimeDly+0xb8>
    }

    switch (opt) {
 80085fc:	897b      	ldrh	r3, [r7, #10]
 80085fe:	2b08      	cmp	r3, #8
 8008600:	bf8c      	ite	hi
 8008602:	2201      	movhi	r2, #1
 8008604:	2200      	movls	r2, #0
 8008606:	b2d2      	uxtb	r2, r2
 8008608:	2a00      	cmp	r2, #0
 800860a:	d10c      	bne.n	8008626 <OSTimeDly+0x72>
 800860c:	f240 1215 	movw	r2, #277	@ 0x115
 8008610:	fa22 f303 	lsr.w	r3, r2, r3
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b00      	cmp	r3, #0
 800861a:	bf14      	ite	ne
 800861c:	2301      	movne	r3, #1
 800861e:	2300      	moveq	r3, #0
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d104      	bne.n	8008630 <OSTimeDly+0x7c>
        case OS_OPT_TIME_PERIODIC:
        case OS_OPT_TIME_MATCH:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f645 6225 	movw	r2, #24101	@ 0x5e25
 800862c:	801a      	strh	r2, [r3, #0]
             return;
 800862e:	e01d      	b.n	800866c <OSTimeDly+0xb8>
             break;
 8008630:	bf00      	nop
    }

#if (OS_CFG_TICK_EN > 0u)
    CPU_CRITICAL_ENTER();
 8008632:	2040      	movs	r0, #64	@ 0x40
 8008634:	f7f7 fde0 	bl	80001f8 <CPU_SR_Save>
 8008638:	6178      	str	r0, [r7, #20]
    OS_TickListInsertDly(OSTCBCurPtr,
 800863a:	4b11      	ldr	r3, [pc, #68]	@ (8008680 <OSTimeDly+0xcc>)
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	897a      	ldrh	r2, [r7, #10]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68f9      	ldr	r1, [r7, #12]
 8008644:	f7ff fe1c 	bl	8008280 <OS_TickListInsertDly>
                         dly,
                         opt,
                         p_err);
    if (*p_err != OS_ERR_NONE) {
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	881b      	ldrh	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d003      	beq.n	8008658 <OSTimeDly+0xa4>
         CPU_CRITICAL_EXIT();
 8008650:	6978      	ldr	r0, [r7, #20]
 8008652:	f7f7 fddf 	bl	8000214 <CPU_SR_Restore>
         return;
 8008656:	e009      	b.n	800866c <OSTimeDly+0xb8>
    }

    OS_RdyListRemove(OSTCBCurPtr);                              /* Remove current task from ready list                  */
 8008658:	4b09      	ldr	r3, [pc, #36]	@ (8008680 <OSTimeDly+0xcc>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4618      	mov	r0, r3
 800865e:	f7fd fc2b 	bl	8005eb8 <OS_RdyListRemove>
    CPU_CRITICAL_EXIT();
 8008662:	6978      	ldr	r0, [r7, #20]
 8008664:	f7f7 fdd6 	bl	8000214 <CPU_SR_Restore>
    OSSched();                                                  /* Find next task to run!                               */
 8008668:	f7fd f80a 	bl	8005680 <OSSched>
#endif
#endif
}
 800866c:	3718      	adds	r7, #24
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	200019ac 	.word	0x200019ac
 8008678:	200019ad 	.word	0x200019ad
 800867c:	20001cec 	.word	0x20001cec
 8008680:	20001f1c 	.word	0x20001f1c

08008684 <OSTimeTick>:
* Note(s)    : none
************************************************************************************************************************
*/

void  OSTimeTick (void)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	af00      	add	r7, sp, #0
    if (OSRunning != OS_STATE_OS_RUNNING) {
 8008688:	4b0b      	ldr	r3, [pc, #44]	@ (80086b8 <OSTimeTick+0x34>)
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d111      	bne.n	80086b4 <OSTimeTick+0x30>
        return;
    }

    OSTimeTickHook();                                           /* Call user definable hook                             */
 8008690:	f7fc fe4a 	bl	8005328 <OSTimeTickHook>

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
    OS_SchedRoundRobin(&OSRdyList[OSPrioCur]);                  /* Update quanta ctr for the task which just ran        */
 8008694:	4b09      	ldr	r3, [pc, #36]	@ (80086bc <OSTimeTick+0x38>)
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	461a      	mov	r2, r3
 800869a:	4613      	mov	r3, r2
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	4413      	add	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4a07      	ldr	r2, [pc, #28]	@ (80086c0 <OSTimeTick+0x3c>)
 80086a4:	4413      	add	r3, r2
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7fd fc5e 	bl	8005f68 <OS_SchedRoundRobin>
#endif

#if (OS_CFG_TICK_EN > 0u)
    OS_TickUpdate(1u);                                          /* Update from the ISR                                  */
 80086ac:	2001      	movs	r0, #1
 80086ae:	f7ff fd21 	bl	80080f4 <OS_TickUpdate>
 80086b2:	e000      	b.n	80086b6 <OSTimeTick+0x32>
        return;
 80086b4:	bf00      	nop
#endif
}
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	200019ad 	.word	0x200019ad
 80086bc:	200019da 	.word	0x200019da
 80086c0:	200019ec 	.word	0x200019ec

080086c4 <OS_TmrInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrInit (OS_ERR  *p_err)
{
 80086c4:	b590      	push	{r4, r7, lr}
 80086c6:	b08d      	sub	sp, #52	@ 0x34
 80086c8:	af0a      	add	r7, sp, #40	@ 0x28
 80086ca:	6078      	str	r0, [r7, #4]
#if (OS_CFG_DBG_EN > 0u)
    OSTmrQty             =           0u;                        /* Keep track of the number of timers created           */
 80086cc:	4b2e      	ldr	r3, [pc, #184]	@ (8008788 <OS_TmrInit+0xc4>)
 80086ce:	2200      	movs	r2, #0
 80086d0:	801a      	strh	r2, [r3, #0]
    OSTmrDbgListPtr      = (OS_TMR *)0;
 80086d2:	4b2e      	ldr	r3, [pc, #184]	@ (800878c <OS_TmrInit+0xc8>)
 80086d4:	2200      	movs	r2, #0
 80086d6:	601a      	str	r2, [r3, #0]
#endif

    OSTmrListPtr         = (OS_TMR *)0;                         /* Create an empty timer list                           */
 80086d8:	4b2d      	ldr	r3, [pc, #180]	@ (8008790 <OS_TmrInit+0xcc>)
 80086da:	2200      	movs	r2, #0
 80086dc:	601a      	str	r2, [r3, #0]
#if (OS_CFG_DBG_EN > 0u)
    OSTmrListEntries     =           0u;
 80086de:	4b2d      	ldr	r3, [pc, #180]	@ (8008794 <OS_TmrInit+0xd0>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	801a      	strh	r2, [r3, #0]
#endif
                                                                /* Calculate Timer to Ticks multiplier                  */
    OSTmrToTicksMult = OSCfg_TickRate_Hz / OSCfg_TmrTaskRate_Hz;
 80086e4:	4b2c      	ldr	r3, [pc, #176]	@ (8008798 <OS_TmrInit+0xd4>)
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	4b2c      	ldr	r3, [pc, #176]	@ (800879c <OS_TmrInit+0xd8>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f0:	4a2b      	ldr	r2, [pc, #172]	@ (80087a0 <OS_TmrInit+0xdc>)
 80086f2:	6013      	str	r3, [r2, #0]
#if (OS_CFG_TS_EN > 0u)
    OSTmrTaskTime        =           0u;
    OSTmrTaskTimeMax     =           0u;
#endif

    OSMutexCreate(&OSTmrMutex,                                  /* Use a mutex to protect the timers                    */
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	492b      	ldr	r1, [pc, #172]	@ (80087a4 <OS_TmrInit+0xe0>)
 80086f8:	482b      	ldr	r0, [pc, #172]	@ (80087a8 <OS_TmrInit+0xe4>)
 80086fa:	f7fe fb07 	bl	8006d0c <OSMutexCreate>
                  (CPU_CHAR *)0,
#else
                  (CPU_CHAR *)"OS Tmr Mutex",
#endif
                  p_err);
    if (*p_err != OS_ERR_NONE) {
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d13b      	bne.n	800877e <OS_TmrInit+0xba>
        return;
    }

    OS_TmrCondCreate();
 8008706:	f000 fa4d 	bl	8008ba4 <OS_TmrCondCreate>
                                                                /* -------------- CREATE THE TIMER TASK --------------- */
    if (OSCfg_TmrTaskStkBasePtr == (CPU_STK *)0) {
 800870a:	4b28      	ldr	r3, [pc, #160]	@ (80087ac <OS_TmrInit+0xe8>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d104      	bne.n	800871c <OS_TmrInit+0x58>
       *p_err = OS_ERR_TMR_STK_INVALID;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f247 3247 	movw	r2, #29511	@ 0x7347
 8008718:	801a      	strh	r2, [r3, #0]
        return;
 800871a:	e031      	b.n	8008780 <OS_TmrInit+0xbc>
    }

    if (OSCfg_TmrTaskStkSize < OSCfg_StkSizeMin) {
 800871c:	4b24      	ldr	r3, [pc, #144]	@ (80087b0 <OS_TmrInit+0xec>)
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	4b24      	ldr	r3, [pc, #144]	@ (80087b4 <OS_TmrInit+0xf0>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	429a      	cmp	r2, r3
 8008726:	d204      	bcs.n	8008732 <OS_TmrInit+0x6e>
       *p_err = OS_ERR_TMR_STK_SIZE_INVALID;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f247 3248 	movw	r2, #29512	@ 0x7348
 800872e:	801a      	strh	r2, [r3, #0]
        return;
 8008730:	e026      	b.n	8008780 <OS_TmrInit+0xbc>
    }

    if (OSCfg_TmrTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 8008732:	4b21      	ldr	r3, [pc, #132]	@ (80087b8 <OS_TmrInit+0xf4>)
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	2b3e      	cmp	r3, #62	@ 0x3e
 8008738:	d904      	bls.n	8008744 <OS_TmrInit+0x80>
       *p_err = OS_ERR_TMR_PRIO_INVALID;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f247 3246 	movw	r2, #29510	@ 0x7346
 8008740:	801a      	strh	r2, [r3, #0]
        return;
 8008742:	e01d      	b.n	8008780 <OS_TmrInit+0xbc>
    }

    OSTaskCreate(&OSTmrTaskTCB,
 8008744:	4b1c      	ldr	r3, [pc, #112]	@ (80087b8 <OS_TmrInit+0xf4>)
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	4a18      	ldr	r2, [pc, #96]	@ (80087ac <OS_TmrInit+0xe8>)
 800874a:	6812      	ldr	r2, [r2, #0]
 800874c:	491b      	ldr	r1, [pc, #108]	@ (80087bc <OS_TmrInit+0xf8>)
 800874e:	6809      	ldr	r1, [r1, #0]
 8008750:	4817      	ldr	r0, [pc, #92]	@ (80087b0 <OS_TmrInit+0xec>)
 8008752:	6800      	ldr	r0, [r0, #0]
 8008754:	687c      	ldr	r4, [r7, #4]
 8008756:	9408      	str	r4, [sp, #32]
 8008758:	240b      	movs	r4, #11
 800875a:	9407      	str	r4, [sp, #28]
 800875c:	2400      	movs	r4, #0
 800875e:	9406      	str	r4, [sp, #24]
 8008760:	2400      	movs	r4, #0
 8008762:	9405      	str	r4, [sp, #20]
 8008764:	2400      	movs	r4, #0
 8008766:	9404      	str	r4, [sp, #16]
 8008768:	9003      	str	r0, [sp, #12]
 800876a:	9102      	str	r1, [sp, #8]
 800876c:	9201      	str	r2, [sp, #4]
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	2300      	movs	r3, #0
 8008772:	4a13      	ldr	r2, [pc, #76]	@ (80087c0 <OS_TmrInit+0xfc>)
 8008774:	4913      	ldr	r1, [pc, #76]	@ (80087c4 <OS_TmrInit+0x100>)
 8008776:	4814      	ldr	r0, [pc, #80]	@ (80087c8 <OS_TmrInit+0x104>)
 8008778:	f7fe fff0 	bl	800775c <OSTaskCreate>
 800877c:	e000      	b.n	8008780 <OS_TmrInit+0xbc>
        return;
 800877e:	bf00      	nop
                  0u,
                  0u,
                 (void     *)0,
                 (OS_OPT_TASK_STK_CHK | (OS_OPT)(OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS)),
                  p_err);
}
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	bd90      	pop	{r4, r7, pc}
 8008786:	bf00      	nop
 8008788:	20001e4c 	.word	0x20001e4c
 800878c:	20001df0 	.word	0x20001df0
 8008790:	20001df8 	.word	0x20001df8
 8008794:	20001df4 	.word	0x20001df4
 8008798:	08008f4c 	.word	0x08008f4c
 800879c:	08008f54 	.word	0x08008f54
 80087a0:	20001f18 	.word	0x20001f18
 80087a4:	08008ed0 	.word	0x08008ed0
 80087a8:	20001e20 	.word	0x20001e20
 80087ac:	08008f58 	.word	0x08008f58
 80087b0:	08008f60 	.word	0x08008f60
 80087b4:	08008f48 	.word	0x08008f48
 80087b8:	08008f50 	.word	0x08008f50
 80087bc:	08008f5c 	.word	0x08008f5c
 80087c0:	08008a3d 	.word	0x08008a3d
 80087c4:	08008ee0 	.word	0x08008ee0
 80087c8:	20001e50 	.word	0x20001e50

080087cc <OS_TmrLink>:
************************************************************************************************************************
*/

void OS_TmrLink (OS_TMR   *p_tmr,
                 OS_TICK   time)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
    OS_TMR   *p_tmr2;
    OS_TICK   remain;
    OS_TICK   delta;


    if (OSTmrListPtr == (OS_TMR *)0) {                          /* Is the list empty?                                   */
 80087d6:	4b48      	ldr	r3, [pc, #288]	@ (80088f8 <OS_TmrLink+0x12c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d111      	bne.n	8008802 <OS_TmrLink+0x36>
        p_tmr->NextPtr    = (OS_TMR *)0;                        /* Yes, this is the first entry                         */
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	611a      	str	r2, [r3, #16]
        p_tmr->PrevPtr    = (OS_TMR *)0;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	615a      	str	r2, [r3, #20]
        OSTmrListPtr      = p_tmr;
 80087ea:	4a43      	ldr	r2, [pc, #268]	@ (80088f8 <OS_TmrLink+0x12c>)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6013      	str	r3, [r2, #0]
#if (OS_CFG_DBG_EN > 0u)
        OSTmrListEntries  = 1u;
 80087f0:	4b42      	ldr	r3, [pc, #264]	@ (80088fc <OS_TmrLink+0x130>)
 80087f2:	2201      	movs	r2, #1
 80087f4:	801a      	strh	r2, [r3, #0]
#endif
        OSTmrTaskTickBase = time;
 80087f6:	4a42      	ldr	r2, [pc, #264]	@ (8008900 <OS_TmrLink+0x134>)
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	6013      	str	r3, [r2, #0]
        OS_TmrCondSignal();
 80087fc:	f000 fa88 	bl	8008d10 <OS_TmrCondSignal>

        return;
 8008800:	e076      	b.n	80088f0 <OS_TmrLink+0x124>
    }

#if (OS_CFG_DBG_EN > 0u)
    OSTmrListEntries++;
 8008802:	4b3e      	ldr	r3, [pc, #248]	@ (80088fc <OS_TmrLink+0x130>)
 8008804:	881b      	ldrh	r3, [r3, #0]
 8008806:	3301      	adds	r3, #1
 8008808:	b29a      	uxth	r2, r3
 800880a:	4b3c      	ldr	r3, [pc, #240]	@ (80088fc <OS_TmrLink+0x130>)
 800880c:	801a      	strh	r2, [r3, #0]
#endif

    delta = (time + p_tmr->Remain) - OSTmrTaskTickBase;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	699a      	ldr	r2, [r3, #24]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	441a      	add	r2, r3
 8008816:	4b3a      	ldr	r3, [pc, #232]	@ (8008900 <OS_TmrLink+0x134>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	60fb      	str	r3, [r7, #12]

    p_tmr2 = OSTmrListPtr;                                      /* No,  Insert somewhere in the list in delta order     */
 800881e:	4b36      	ldr	r3, [pc, #216]	@ (80088f8 <OS_TmrLink+0x12c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	613b      	str	r3, [r7, #16]
    remain = p_tmr2->Remain;
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	60bb      	str	r3, [r7, #8]

    if ((delta           <     remain) &&
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	429a      	cmp	r2, r3
 8008830:	d21a      	bcs.n	8008868 <OS_TmrLink+0x9c>
        (p_tmr2->PrevPtr == (OS_TMR *)0)) {                     /* Are we the new head of the list?                     */
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	695b      	ldr	r3, [r3, #20]
    if ((delta           <     remain) &&
 8008836:	2b00      	cmp	r3, #0
 8008838:	d116      	bne.n	8008868 <OS_TmrLink+0x9c>
        p_tmr2->Remain    =  remain - delta;
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	1ad2      	subs	r2, r2, r3
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	619a      	str	r2, [r3, #24]
        p_tmr->PrevPtr    = (OS_TMR *)0;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	615a      	str	r2, [r3, #20]
        p_tmr->NextPtr    =  p_tmr2;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	611a      	str	r2, [r3, #16]
        p_tmr2->PrevPtr   =  p_tmr;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	615a      	str	r2, [r3, #20]
        OSTmrListPtr      =  p_tmr;
 8008856:	4a28      	ldr	r2, [pc, #160]	@ (80088f8 <OS_TmrLink+0x12c>)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6013      	str	r3, [r2, #0]

        OSTmrTaskTickBase = time;
 800885c:	4a28      	ldr	r2, [pc, #160]	@ (8008900 <OS_TmrLink+0x134>)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	6013      	str	r3, [r2, #0]
        OS_TmrCondSignal();
 8008862:	f000 fa55 	bl	8008d10 <OS_TmrCondSignal>

        return;
 8008866:	e043      	b.n	80088f0 <OS_TmrLink+0x124>
    }

                                                                /* No                                                   */
    delta  -= remain;                                           /* Make delta relative to the current head.             */
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	60fb      	str	r3, [r7, #12]
    p_tmr1  = p_tmr2;
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	617b      	str	r3, [r7, #20]
    p_tmr2  = p_tmr1->NextPtr;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	613b      	str	r3, [r7, #16]


    while ((p_tmr2 !=        (OS_TMR *)0) &&                    /* Find the appropriate position in the delta list.     */
 800887a:	e009      	b.n	8008890 <OS_TmrLink+0xc4>
           (delta  >= p_tmr2->Remain)) {
        delta  -= p_tmr2->Remain;                               /* Update our delta as we traverse the list.            */
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	60fb      	str	r3, [r7, #12]
        p_tmr1  = p_tmr2;
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	617b      	str	r3, [r7, #20]
        p_tmr2  = p_tmr2->NextPtr;
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	613b      	str	r3, [r7, #16]
    while ((p_tmr2 !=        (OS_TMR *)0) &&                    /* Find the appropriate position in the delta list.     */
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d004      	beq.n	80088a0 <OS_TmrLink+0xd4>
           (delta  >= p_tmr2->Remain)) {
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	699b      	ldr	r3, [r3, #24]
    while ((p_tmr2 !=        (OS_TMR *)0) &&                    /* Find the appropriate position in the delta list.     */
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	429a      	cmp	r2, r3
 800889e:	d2ed      	bcs.n	800887c <OS_TmrLink+0xb0>
    }


    if (p_tmr2 != (OS_TMR *)0) {                                /* Our entry is not the last element in the list.       */
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d018      	beq.n	80088d8 <OS_TmrLink+0x10c>
        p_tmr1           = p_tmr2->PrevPtr;
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	617b      	str	r3, [r7, #20]
        p_tmr->Remain    = delta;                               /* Store remaining time                                 */
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	619a      	str	r2, [r3, #24]
        p_tmr->PrevPtr   = p_tmr1;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	615a      	str	r2, [r3, #20]
        p_tmr->NextPtr   = p_tmr2;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	693a      	ldr	r2, [r7, #16]
 80088bc:	611a      	str	r2, [r3, #16]
        p_tmr2->Remain  -= delta;                               /* Reduce time of next entry in the list                */
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	699a      	ldr	r2, [r3, #24]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	1ad2      	subs	r2, r2, r3
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	619a      	str	r2, [r3, #24]
        p_tmr2->PrevPtr  = p_tmr;
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	615a      	str	r2, [r3, #20]
        p_tmr1->NextPtr  = p_tmr;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	611a      	str	r2, [r3, #16]
 80088d6:	e00b      	b.n	80088f0 <OS_TmrLink+0x124>

    } else {                                                    /* Our entry belongs at the end of the list.            */
        p_tmr->Remain    = delta;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	619a      	str	r2, [r3, #24]
        p_tmr->PrevPtr   = p_tmr1;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	615a      	str	r2, [r3, #20]
        p_tmr->NextPtr   = (OS_TMR *)0;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	611a      	str	r2, [r3, #16]
        p_tmr1->NextPtr  = p_tmr;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	611a      	str	r2, [r3, #16]
    }
}
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	20001df8 	.word	0x20001df8
 80088fc:	20001df4 	.word	0x20001df4
 8008900:	20001f14 	.word	0x20001f14

08008904 <OS_TmrUnlink>:
************************************************************************************************************************
*/

void  OS_TmrUnlink (OS_TMR   *p_tmr,
                    OS_TICK   time)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
    OS_TMR   *p_tmr1;
    OS_TMR   *p_tmr2;
    OS_TICK   elapsed;


    p_tmr1                          = p_tmr->PrevPtr;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	60fb      	str	r3, [r7, #12]
    p_tmr2                          = p_tmr->NextPtr;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	617b      	str	r3, [r7, #20]
    if (p_tmr1 == (OS_TMR *)0) {
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d163      	bne.n	80089e8 <OS_TmrUnlink+0xe4>
        if (p_tmr2 == (OS_TMR *)0) {                            /* Remove the ONLY entry in the list?                   */
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10e      	bne.n	8008944 <OS_TmrUnlink+0x40>
            OSTmrListPtr            = (OS_TMR *)0;
 8008926:	4b42      	ldr	r3, [pc, #264]	@ (8008a30 <OS_TmrUnlink+0x12c>)
 8008928:	2200      	movs	r2, #0
 800892a:	601a      	str	r2, [r3, #0]
#if (OS_CFG_DBG_EN > 0u)
            OSTmrListEntries        = 0u;
 800892c:	4b41      	ldr	r3, [pc, #260]	@ (8008a34 <OS_TmrUnlink+0x130>)
 800892e:	2200      	movs	r2, #0
 8008930:	801a      	strh	r2, [r3, #0]
#endif
            p_tmr->Remain           = 0u;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	619a      	str	r2, [r3, #24]

            OSTmrTaskTickBase       = time;
 8008938:	4a3f      	ldr	r2, [pc, #252]	@ (8008a38 <OS_TmrUnlink+0x134>)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	6013      	str	r3, [r2, #0]
            OS_TmrCondSignal();
 800893e:	f000 f9e7 	bl	8008d10 <OS_TmrCondSignal>
        }
        p_tmr->PrevPtr              = (OS_TMR *)0;
        p_tmr->NextPtr              = (OS_TMR *)0;
        p_tmr->Remain               =           0u;
    }
}
 8008942:	e070      	b.n	8008a26 <OS_TmrUnlink+0x122>
            OSTmrListEntries--;
 8008944:	4b3b      	ldr	r3, [pc, #236]	@ (8008a34 <OS_TmrUnlink+0x130>)
 8008946:	881b      	ldrh	r3, [r3, #0]
 8008948:	3b01      	subs	r3, #1
 800894a:	b29a      	uxth	r2, r3
 800894c:	4b39      	ldr	r3, [pc, #228]	@ (8008a34 <OS_TmrUnlink+0x130>)
 800894e:	801a      	strh	r2, [r3, #0]
            elapsed                 = time - OSTmrTaskTickBase;
 8008950:	4b39      	ldr	r3, [pc, #228]	@ (8008a38 <OS_TmrUnlink+0x134>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	613b      	str	r3, [r7, #16]
            p_tmr2->PrevPtr         = (OS_TMR *)0;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2200      	movs	r2, #0
 800895e:	615a      	str	r2, [r3, #20]
            p_tmr2->Remain         += p_tmr->Remain;            /* Add back the ticks to the delta                      */
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	699a      	ldr	r2, [r3, #24]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	441a      	add	r2, r3
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	619a      	str	r2, [r3, #24]
            OSTmrListPtr            = p_tmr2;
 800896e:	4a30      	ldr	r2, [pc, #192]	@ (8008a30 <OS_TmrUnlink+0x12c>)
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	6013      	str	r3, [r2, #0]
            while ((elapsed >           0u) &&
 8008974:	e01a      	b.n	80089ac <OS_TmrUnlink+0xa8>
                if (elapsed > p_tmr2->Remain) {
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	429a      	cmp	r2, r3
 800897e:	d908      	bls.n	8008992 <OS_TmrUnlink+0x8e>
                    elapsed        -= p_tmr2->Remain;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	613b      	str	r3, [r7, #16]
                    p_tmr2->Remain  = 0u;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	2200      	movs	r2, #0
 800898e:	619a      	str	r2, [r3, #24]
 8008990:	e007      	b.n	80089a2 <OS_TmrUnlink+0x9e>
                    p_tmr2->Remain -= elapsed;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	699a      	ldr	r2, [r3, #24]
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	1ad2      	subs	r2, r2, r3
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	619a      	str	r2, [r3, #24]
                    elapsed         = 0u;
 800899e:	2300      	movs	r3, #0
 80089a0:	613b      	str	r3, [r7, #16]
                p_tmr1              = p_tmr2;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	60fb      	str	r3, [r7, #12]
                p_tmr2              = p_tmr1->NextPtr;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	617b      	str	r3, [r7, #20]
            while ((elapsed >           0u) &&
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d002      	beq.n	80089b8 <OS_TmrUnlink+0xb4>
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1de      	bne.n	8008976 <OS_TmrUnlink+0x72>
            if ((OSTmrListPtr->Remain != p_tmr->Remain) ||      /* Reload if new head has a different delay         ... */
 80089b8:	4b1d      	ldr	r3, [pc, #116]	@ (8008a30 <OS_TmrUnlink+0x12c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	699a      	ldr	r2, [r3, #24]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d104      	bne.n	80089d0 <OS_TmrUnlink+0xcc>
                (OSTmrListPtr->Remain ==            0u)) {      /* ... or has already timed out.                        */
 80089c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008a30 <OS_TmrUnlink+0x12c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	699b      	ldr	r3, [r3, #24]
            if ((OSTmrListPtr->Remain != p_tmr->Remain) ||      /* Reload if new head has a different delay         ... */
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d104      	bne.n	80089da <OS_TmrUnlink+0xd6>
                OSTmrTaskTickBase   = time;
 80089d0:	4a19      	ldr	r2, [pc, #100]	@ (8008a38 <OS_TmrUnlink+0x134>)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	6013      	str	r3, [r2, #0]
                OS_TmrCondSignal();
 80089d6:	f000 f99b 	bl	8008d10 <OS_TmrCondSignal>
            p_tmr->NextPtr          = (OS_TMR *)0;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	611a      	str	r2, [r3, #16]
            p_tmr->Remain           =           0u;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	619a      	str	r2, [r3, #24]
}
 80089e6:	e01e      	b.n	8008a26 <OS_TmrUnlink+0x122>
        OSTmrListEntries--;
 80089e8:	4b12      	ldr	r3, [pc, #72]	@ (8008a34 <OS_TmrUnlink+0x130>)
 80089ea:	881b      	ldrh	r3, [r3, #0]
 80089ec:	3b01      	subs	r3, #1
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	4b10      	ldr	r3, [pc, #64]	@ (8008a34 <OS_TmrUnlink+0x130>)
 80089f2:	801a      	strh	r2, [r3, #0]
        p_tmr1->NextPtr             = p_tmr2;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	611a      	str	r2, [r3, #16]
        if (p_tmr2 != (OS_TMR *)0) {
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d009      	beq.n	8008a14 <OS_TmrUnlink+0x110>
            p_tmr2->PrevPtr         = p_tmr1;
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	615a      	str	r2, [r3, #20]
            p_tmr2->Remain         += p_tmr->Remain;            /* Add back the ticks to the delta list                 */
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	699a      	ldr	r2, [r3, #24]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	441a      	add	r2, r3
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	619a      	str	r2, [r3, #24]
        p_tmr->PrevPtr              = (OS_TMR *)0;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	615a      	str	r2, [r3, #20]
        p_tmr->NextPtr              = (OS_TMR *)0;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	611a      	str	r2, [r3, #16]
        p_tmr->Remain               =           0u;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	619a      	str	r2, [r3, #24]
}
 8008a26:	bf00      	nop
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	20001df8 	.word	0x20001df8
 8008a34:	20001df4 	.word	0x20001df4
 8008a38:	20001f14 	.word	0x20001f14

08008a3c <OS_TmrTask>:
*              3) Timer callbacks are allowed to make calls to the Timer APIs.
************************************************************************************************************************
*/

void  OS_TmrTask (void  *p_arg)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b088      	sub	sp, #32
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
    OS_TICK               elapsed;
    OS_TICK               time;
#if (OS_CFG_TS_EN > 0u)
    CPU_TS                ts_start;
#endif
    CPU_SR_ALLOC();
 8008a44:	2300      	movs	r3, #0
 8008a46:	613b      	str	r3, [r7, #16]


    (void)p_arg;                                                /* Not using 'p_arg', prevent compiler warning          */

    OS_TmrLock();
 8008a48:	f000 f89a 	bl	8008b80 <OS_TmrLock>

    for (;;) {
        if (OSTmrListPtr == (OS_TMR *)0) {
 8008a4c:	4b49      	ldr	r3, [pc, #292]	@ (8008b74 <OS_TmrTask+0x138>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d102      	bne.n	8008a5a <OS_TmrTask+0x1e>
            timeout                = 0u;
 8008a54:	2300      	movs	r3, #0
 8008a56:	61bb      	str	r3, [r7, #24]
 8008a58:	e003      	b.n	8008a62 <OS_TmrTask+0x26>
        } else {
            timeout                = OSTmrListPtr->Remain;
 8008a5a:	4b46      	ldr	r3, [pc, #280]	@ (8008b74 <OS_TmrTask+0x138>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	61bb      	str	r3, [r7, #24]
        }

        OS_TmrCondWait(timeout);                                /* Suspend the timer task until it needs to process ... */
 8008a62:	69b8      	ldr	r0, [r7, #24]
 8008a64:	f000 f8c0 	bl	8008be8 <OS_TmrCondWait>
                                                                /* ... the timer list again. Also release the mutex ... */
                                                                /* ... so that application tasks can add/remove timers. */

        if (OSTmrListPtr == (OS_TMR *)0) {                      /* Suppresses static analyzer warnings.                 */
 8008a68:	4b42      	ldr	r3, [pc, #264]	@ (8008b74 <OS_TmrTask+0x138>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d07f      	beq.n	8008b70 <OS_TmrTask+0x134>

#if (OS_CFG_TS_EN > 0u)
        ts_start = OS_TS_GET();
#endif

        CPU_CRITICAL_ENTER();
 8008a70:	2040      	movs	r0, #64	@ 0x40
 8008a72:	f7f7 fbc1 	bl	80001f8 <CPU_SR_Save>
 8008a76:	6138      	str	r0, [r7, #16]
#if (OS_CFG_DYN_TICK_EN > 0u)
        time                       = OSTickCtr + OS_DynTickGet();
#else
        time                       = OSTickCtr;
 8008a78:	4b3f      	ldr	r3, [pc, #252]	@ (8008b78 <OS_TmrTask+0x13c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	60fb      	str	r3, [r7, #12]
#endif
        CPU_CRITICAL_EXIT();
 8008a7e:	6938      	ldr	r0, [r7, #16]
 8008a80:	f7f7 fbc8 	bl	8000214 <CPU_SR_Restore>
        elapsed                    = time - OSTmrTaskTickBase;
 8008a84:	4b3d      	ldr	r3, [pc, #244]	@ (8008b7c <OS_TmrTask+0x140>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	617b      	str	r3, [r7, #20]
        OSTmrTaskTickBase          = time;
 8008a8e:	4a3b      	ldr	r2, [pc, #236]	@ (8008b7c <OS_TmrTask+0x140>)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6013      	str	r3, [r2, #0]

                                                                /* Update the delta values.                             */
        p_tmr = OSTmrListPtr;
 8008a94:	4b37      	ldr	r3, [pc, #220]	@ (8008b74 <OS_TmrTask+0x138>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	61fb      	str	r3, [r7, #28]
        while ((elapsed !=          0u) &&
 8008a9a:	e018      	b.n	8008ace <OS_TmrTask+0x92>
               (p_tmr   != (OS_TMR *)0)) {

            if (elapsed > p_tmr->Remain) {
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d908      	bls.n	8008ab8 <OS_TmrTask+0x7c>
                elapsed           -= p_tmr->Remain;
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	617b      	str	r3, [r7, #20]
                p_tmr->Remain      = 0u;
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	619a      	str	r2, [r3, #24]
 8008ab6:	e007      	b.n	8008ac8 <OS_TmrTask+0x8c>
            } else {
                p_tmr->Remain     -= elapsed;
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	699a      	ldr	r2, [r3, #24]
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	1ad2      	subs	r2, r2, r3
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	619a      	str	r2, [r3, #24]
                elapsed            = 0u;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	617b      	str	r3, [r7, #20]
            }

            p_tmr                  = p_tmr->NextPtr;
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	61fb      	str	r3, [r7, #28]
        while ((elapsed !=          0u) &&
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d002      	beq.n	8008ada <OS_TmrTask+0x9e>
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1e0      	bne.n	8008a9c <OS_TmrTask+0x60>
        }

                                                                /* Process timers that have expired.                    */
        p_tmr                      = OSTmrListPtr;
 8008ada:	4b26      	ldr	r3, [pc, #152]	@ (8008b74 <OS_TmrTask+0x138>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	61fb      	str	r3, [r7, #28]

        while ((p_tmr         != (OS_TMR *)0) &&
 8008ae0:	e03d      	b.n	8008b5e <OS_TmrTask+0x122>
               (p_tmr->Remain ==          0u)) {
            p_tmr->State           = OS_TMR_STATE_TIMEOUT;
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	2204      	movs	r2, #4
 8008ae6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                                                                /* Execute callback function if available               */
            p_fnct                 = p_tmr->CallbackPtr;
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	60bb      	str	r3, [r7, #8]
            if (p_fnct != (OS_TMR_CALLBACK_PTR)0u) {
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d005      	beq.n	8008b02 <OS_TmrTask+0xc6>
                (*p_fnct)(p_tmr, p_tmr->CallbackPtrArg);
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	68da      	ldr	r2, [r3, #12]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	4611      	mov	r1, r2
 8008afe:	69f8      	ldr	r0, [r7, #28]
 8008b00:	4798      	blx	r3
            }

            if (p_tmr->State == OS_TMR_STATE_TIMEOUT) {
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8008b08:	2b04      	cmp	r3, #4
 8008b0a:	d125      	bne.n	8008b58 <OS_TmrTask+0x11c>
                OS_TmrUnlink(p_tmr, OSTmrTaskTickBase);
 8008b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8008b7c <OS_TmrTask+0x140>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4619      	mov	r1, r3
 8008b12:	69f8      	ldr	r0, [r7, #28]
 8008b14:	f7ff fef6 	bl	8008904 <OS_TmrUnlink>

                if (p_tmr->Opt == OS_OPT_TMR_PERIODIC) {
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d10e      	bne.n	8008b3e <OS_TmrTask+0x102>
                    p_tmr->State   = OS_TMR_STATE_RUNNING;
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	2202      	movs	r2, #2
 8008b24:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                    p_tmr->Remain  = p_tmr->Period;
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	6a1a      	ldr	r2, [r3, #32]
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	619a      	str	r2, [r3, #24]
                    OS_TmrLink(p_tmr, OSTmrTaskTickBase);
 8008b30:	4b12      	ldr	r3, [pc, #72]	@ (8008b7c <OS_TmrTask+0x140>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4619      	mov	r1, r3
 8008b36:	69f8      	ldr	r0, [r7, #28]
 8008b38:	f7ff fe48 	bl	80087cc <OS_TmrLink>
 8008b3c:	e00c      	b.n	8008b58 <OS_TmrTask+0x11c>
                } else {
                    p_tmr->PrevPtr = (OS_TMR *)0;
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	2200      	movs	r2, #0
 8008b42:	615a      	str	r2, [r3, #20]
                    p_tmr->NextPtr = (OS_TMR *)0;
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	2200      	movs	r2, #0
 8008b48:	611a      	str	r2, [r3, #16]
                    p_tmr->Remain  = 0u;
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	619a      	str	r2, [r3, #24]
                    p_tmr->State   = OS_TMR_STATE_COMPLETED;
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	2203      	movs	r2, #3
 8008b54:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                }
            }

            p_tmr                  = OSTmrListPtr;
 8008b58:	4b06      	ldr	r3, [pc, #24]	@ (8008b74 <OS_TmrTask+0x138>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	61fb      	str	r3, [r7, #28]
        while ((p_tmr         != (OS_TMR *)0) &&
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f43f af73 	beq.w	8008a4c <OS_TmrTask+0x10>
               (p_tmr->Remain ==          0u)) {
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	699b      	ldr	r3, [r3, #24]
        while ((p_tmr         != (OS_TMR *)0) &&
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d0b9      	beq.n	8008ae2 <OS_TmrTask+0xa6>
 8008b6e:	e76d      	b.n	8008a4c <OS_TmrTask+0x10>
            continue;
 8008b70:	bf00      	nop
        if (OSTmrListPtr == (OS_TMR *)0) {
 8008b72:	e76b      	b.n	8008a4c <OS_TmrTask+0x10>
 8008b74:	20001df8 	.word	0x20001df8
 8008b78:	20001de4 	.word	0x20001de4
 8008b7c:	20001f14 	.word	0x20001f14

08008b80 <OS_TmrLock>:
* Note(s)    : 1) These functions are INTERNAL to uC/OS-III and your application MUST NOT call them.
************************************************************************************************************************
*/

static  void  OS_TmrLock (void)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af02      	add	r7, sp, #8
    OS_ERR  err;


    OSMutexPend(&OSTmrMutex, 0u, OS_OPT_PEND_BLOCKING, (CPU_TS *)0, &err);
 8008b86:	1dbb      	adds	r3, r7, #6
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2100      	movs	r1, #0
 8008b90:	4803      	ldr	r0, [pc, #12]	@ (8008ba0 <OS_TmrLock+0x20>)
 8008b92:	f7fe f913 	bl	8006dbc <OSMutexPend>
}
 8008b96:	bf00      	nop
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	20001e20 	.word	0x20001e20

08008ba4 <OS_TmrCondCreate>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrCondCreate (void)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8008baa:	2300      	movs	r3, #0
 8008bac:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 8008bae:	2040      	movs	r0, #64	@ 0x40
 8008bb0:	f7f7 fb22 	bl	80001f8 <CPU_SR_Save>
 8008bb4:	6078      	str	r0, [r7, #4]
#if (OS_OBJ_TYPE_REQ > 0u)
    OSTmrCond.Type  = OS_OBJ_TYPE_COND;                         /* Mark the data structure as a condition variable.     */
 8008bb6:	4b08      	ldr	r3, [pc, #32]	@ (8008bd8 <OS_TmrCondCreate+0x34>)
 8008bb8:	4a08      	ldr	r2, [pc, #32]	@ (8008bdc <OS_TmrCondCreate+0x38>)
 8008bba:	601a      	str	r2, [r3, #0]
#endif
    OSTmrCond.Mutex = &OSTmrMutex;                              /* Bind the timer mutex to the condition variable.      */
 8008bbc:	4b06      	ldr	r3, [pc, #24]	@ (8008bd8 <OS_TmrCondCreate+0x34>)
 8008bbe:	4a08      	ldr	r2, [pc, #32]	@ (8008be0 <OS_TmrCondCreate+0x3c>)
 8008bc0:	621a      	str	r2, [r3, #32]
    OS_PendListInit(&OSTmrCond.PendList);                       /* Initialize the waiting list                          */
 8008bc2:	4808      	ldr	r0, [pc, #32]	@ (8008be4 <OS_TmrCondCreate+0x40>)
 8008bc4:	f7fc ff1d 	bl	8005a02 <OS_PendListInit>
    CPU_CRITICAL_EXIT();
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7f7 fb23 	bl	8000214 <CPU_SR_Restore>
}
 8008bce:	bf00      	nop
 8008bd0:	3708      	adds	r7, #8
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	20001dfc 	.word	0x20001dfc
 8008bdc:	444e4f43 	.word	0x444e4f43
 8008be0:	20001e20 	.word	0x20001e20
 8008be4:	20001e04 	.word	0x20001e04

08008be8 <OS_TmrCondWait>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrCondWait (OS_TICK  timeout)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b088      	sub	sp, #32
 8008bec:	af02      	add	r7, sp, #8
 8008bee:	6078      	str	r0, [r7, #4]
    OS_TCB        *p_tcb;
    OS_PEND_LIST  *p_pend_list;
    CPU_TS         ts;
    CPU_SR_ALLOC();
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	617b      	str	r3, [r7, #20]


    CPU_CRITICAL_ENTER();
 8008bf4:	2040      	movs	r0, #64	@ 0x40
 8008bf6:	f7f7 faff 	bl	80001f8 <CPU_SR_Save>
 8008bfa:	6178      	str	r0, [r7, #20]
#if (OS_CFG_TS_EN > 0u)
    ts             = OS_TS_GET();                               /* Get timestamp                                        */
    OSTmrMutex.TS  = ts;
#else
    ts             = 0u;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	613b      	str	r3, [r7, #16]
#endif
                                                                /* Release mutex to other tasks.                        */
    OS_MutexGrpRemove(&OSTmrTaskTCB, &OSTmrMutex);
 8008c00:	493e      	ldr	r1, [pc, #248]	@ (8008cfc <OS_TmrCondWait+0x114>)
 8008c02:	483f      	ldr	r0, [pc, #252]	@ (8008d00 <OS_TmrCondWait+0x118>)
 8008c04:	f7fe fa04 	bl	8007010 <OS_MutexGrpRemove>
    p_pend_list                    = &OSTmrMutex.PendList;
 8008c08:	4b3e      	ldr	r3, [pc, #248]	@ (8008d04 <OS_TmrCondWait+0x11c>)
 8008c0a:	60fb      	str	r3, [r7, #12]

    if (OSTmrTaskTCB.Prio != OSTmrTaskTCB.BasePrio) {           /* Restore our original prio.                           */
 8008c0c:	4b3c      	ldr	r3, [pc, #240]	@ (8008d00 <OS_TmrCondWait+0x118>)
 8008c0e:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 8008c12:	4b3b      	ldr	r3, [pc, #236]	@ (8008d00 <OS_TmrCondWait+0x118>)
 8008c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d00a      	beq.n	8008c32 <OS_TmrCondWait+0x4a>
        OS_TRACE_MUTEX_TASK_PRIO_DISINHERIT(&OSTmrTaskTCB, OSTmrTaskTCB.Prio);
        OSTmrTaskTCB.Prio          = OSTmrTaskTCB.BasePrio;
 8008c1c:	4b38      	ldr	r3, [pc, #224]	@ (8008d00 <OS_TmrCondWait+0x118>)
 8008c1e:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8008c22:	4b37      	ldr	r3, [pc, #220]	@ (8008d00 <OS_TmrCondWait+0x118>)
 8008c24:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        OSPrioCur                  = OSTmrTaskTCB.BasePrio;
 8008c28:	4b35      	ldr	r3, [pc, #212]	@ (8008d00 <OS_TmrCondWait+0x118>)
 8008c2a:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8008c2e:	4b36      	ldr	r3, [pc, #216]	@ (8008d08 <OS_TmrCondWait+0x120>)
 8008c30:	701a      	strb	r2, [r3, #0]
    }

    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* Any task waiting on mutex?                           */
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d107      	bne.n	8008c4a <OS_TmrCondWait+0x62>
        OSTmrMutex.OwnerTCBPtr     = (OS_TCB *)0;               /* No                                                   */
 8008c3a:	4b30      	ldr	r3, [pc, #192]	@ (8008cfc <OS_TmrCondWait+0x114>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	625a      	str	r2, [r3, #36]	@ 0x24
        OSTmrMutex.OwnerNestingCtr =           0u;
 8008c40:	4b2e      	ldr	r3, [pc, #184]	@ (8008cfc <OS_TmrCondWait+0x114>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8008c48:	e015      	b.n	8008c76 <OS_TmrCondWait+0x8e>
    } else {
        p_tcb                      = p_pend_list->HeadPtr;      /* Yes, give mutex to new owner                         */
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	60bb      	str	r3, [r7, #8]
        OSTmrMutex.OwnerTCBPtr     = p_tcb;
 8008c50:	4a2a      	ldr	r2, [pc, #168]	@ (8008cfc <OS_TmrCondWait+0x114>)
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	6253      	str	r3, [r2, #36]	@ 0x24
        OSTmrMutex.OwnerNestingCtr =           1u;
 8008c56:	4b29      	ldr	r3, [pc, #164]	@ (8008cfc <OS_TmrCondWait+0x114>)
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        OS_MutexGrpAdd(p_tcb, &OSTmrMutex);
 8008c5e:	4927      	ldr	r1, [pc, #156]	@ (8008cfc <OS_TmrCondWait+0x114>)
 8008c60:	68b8      	ldr	r0, [r7, #8]
 8008c62:	f7fe f9c3 	bl	8006fec <OS_MutexGrpAdd>
                                                                /* Post to mutex                                        */
        OS_Post((OS_PEND_OBJ *)((void *)&OSTmrMutex),
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	68b9      	ldr	r1, [r7, #8]
 8008c70:	4822      	ldr	r0, [pc, #136]	@ (8008cfc <OS_TmrCondWait+0x114>)
 8008c72:	f7fc ff9b 	bl	8005bac <OS_Post>
                                (void *) 0,
                                         0u,
                                         ts);
    }

    OS_Pend((OS_PEND_OBJ *)((void *)&OSTmrCond),                /* Pend on the condition variable.                      */
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2203      	movs	r2, #3
 8008c7a:	4921      	ldr	r1, [pc, #132]	@ (8008d00 <OS_TmrCondWait+0x118>)
 8008c7c:	4823      	ldr	r0, [pc, #140]	@ (8008d0c <OS_TmrCondWait+0x124>)
 8008c7e:	f7fc fe13 	bl	80058a8 <OS_Pend>
                                   &OSTmrTaskTCB,
                                    OS_TASK_PEND_ON_COND,
                                    timeout);
    CPU_CRITICAL_EXIT();
 8008c82:	6978      	ldr	r0, [r7, #20]
 8008c84:	f7f7 fac6 	bl	8000214 <CPU_SR_Restore>

    OSSched();
 8008c88:	f7fc fcfa 	bl	8005680 <OSSched>

    CPU_CRITICAL_ENTER();                                       /* Either we timed out, or were signaled.               */
 8008c8c:	2040      	movs	r0, #64	@ 0x40
 8008c8e:	f7f7 fab3 	bl	80001f8 <CPU_SR_Save>
 8008c92:	6178      	str	r0, [r7, #20]

    if (OSTmrMutex.OwnerTCBPtr == (OS_TCB *)0) {                /* Can we grab the mutex?                               */
 8008c94:	4b19      	ldr	r3, [pc, #100]	@ (8008cfc <OS_TmrCondWait+0x114>)
 8008c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10e      	bne.n	8008cba <OS_TmrCondWait+0xd2>
        OS_MutexGrpAdd(&OSTmrTaskTCB, &OSTmrMutex);             /* Yes, no-one else pending.                            */
 8008c9c:	4917      	ldr	r1, [pc, #92]	@ (8008cfc <OS_TmrCondWait+0x114>)
 8008c9e:	4818      	ldr	r0, [pc, #96]	@ (8008d00 <OS_TmrCondWait+0x118>)
 8008ca0:	f7fe f9a4 	bl	8006fec <OS_MutexGrpAdd>
        OSTmrMutex.OwnerTCBPtr     = &OSTmrTaskTCB;
 8008ca4:	4b15      	ldr	r3, [pc, #84]	@ (8008cfc <OS_TmrCondWait+0x114>)
 8008ca6:	4a16      	ldr	r2, [pc, #88]	@ (8008d00 <OS_TmrCondWait+0x118>)
 8008ca8:	625a      	str	r2, [r3, #36]	@ 0x24
        OSTmrMutex.OwnerNestingCtr = 1u;
 8008caa:	4b14      	ldr	r3, [pc, #80]	@ (8008cfc <OS_TmrCondWait+0x114>)
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        CPU_CRITICAL_EXIT();
 8008cb2:	6978      	ldr	r0, [r7, #20]
 8008cb4:	f7f7 faae 	bl	8000214 <CPU_SR_Restore>
                                         0u);
        CPU_CRITICAL_EXIT();

        OSSched();
    }
}
 8008cb8:	e01c      	b.n	8008cf4 <OS_TmrCondWait+0x10c>
        p_tcb = OSTmrMutex.OwnerTCBPtr;                         /* No, we need to wait for it.                          */
 8008cba:	4b10      	ldr	r3, [pc, #64]	@ (8008cfc <OS_TmrCondWait+0x114>)
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cbe:	60bb      	str	r3, [r7, #8]
        if (p_tcb->Prio > OSTmrTaskTCB.Prio) {                  /* See if mutex owner has a lower priority than TmrTask.*/
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 8008cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8008d00 <OS_TmrCondWait+0x118>)
 8008cc8:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d906      	bls.n	8008cde <OS_TmrCondWait+0xf6>
            OS_TaskChangePrio(p_tcb, OSTmrTaskTCB.Prio);
 8008cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8008d00 <OS_TmrCondWait+0x118>)
 8008cd2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	68b8      	ldr	r0, [r7, #8]
 8008cda:	f7ff f94f 	bl	8007f7c <OS_TaskChangePrio>
        OS_Pend((OS_PEND_OBJ *)((void *)&OSTmrMutex),           /* Block TmrTask until it gets the Mutex.               */
 8008cde:	2300      	movs	r3, #0
 8008ce0:	2204      	movs	r2, #4
 8008ce2:	4907      	ldr	r1, [pc, #28]	@ (8008d00 <OS_TmrCondWait+0x118>)
 8008ce4:	4805      	ldr	r0, [pc, #20]	@ (8008cfc <OS_TmrCondWait+0x114>)
 8008ce6:	f7fc fddf 	bl	80058a8 <OS_Pend>
        CPU_CRITICAL_EXIT();
 8008cea:	6978      	ldr	r0, [r7, #20]
 8008cec:	f7f7 fa92 	bl	8000214 <CPU_SR_Restore>
        OSSched();
 8008cf0:	f7fc fcc6 	bl	8005680 <OSSched>
}
 8008cf4:	bf00      	nop
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	20001e20 	.word	0x20001e20
 8008d00:	20001e50 	.word	0x20001e50
 8008d04:	20001e28 	.word	0x20001e28
 8008d08:	200019da 	.word	0x200019da
 8008d0c:	20001dfc 	.word	0x20001dfc

08008d10 <OS_TmrCondSignal>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrCondSignal (void)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af02      	add	r7, sp, #8
    OS_PEND_LIST  *p_pend_list;
    CPU_TS         ts;
    CPU_SR_ALLOC();
 8008d16:	2300      	movs	r3, #0
 8008d18:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 8008d1a:	2040      	movs	r0, #64	@ 0x40
 8008d1c:	f7f7 fa6c 	bl	80001f8 <CPU_SR_Save>
 8008d20:	60f8      	str	r0, [r7, #12]
#if (OS_CFG_TS_EN > 0u)
    ts             = OS_TS_GET();                               /* Get timestamp                                        */
    OSTmrMutex.TS  = ts;
#else
    ts             = 0u;
 8008d22:	2300      	movs	r3, #0
 8008d24:	60bb      	str	r3, [r7, #8]
#endif

    p_pend_list    = &OSTmrCond.PendList;
 8008d26:	4b0c      	ldr	r3, [pc, #48]	@ (8008d58 <OS_TmrCondSignal+0x48>)
 8008d28:	607b      	str	r3, [r7, #4]

    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* Timer task waiting on cond?                          */
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d103      	bne.n	8008d3a <OS_TmrCondSignal+0x2a>
        CPU_CRITICAL_EXIT();
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f7f7 fa6e 	bl	8000214 <CPU_SR_Restore>
        return;                                                 /* No, nothing to signal.                               */
 8008d38:	e00a      	b.n	8008d50 <OS_TmrCondSignal+0x40>
    } else {
                                                                /* Yes, signal the timer task.                          */
        OS_Post((OS_PEND_OBJ *)((void *)&OSTmrCond),
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	2300      	movs	r3, #0
 8008d40:	2200      	movs	r2, #0
 8008d42:	4906      	ldr	r1, [pc, #24]	@ (8008d5c <OS_TmrCondSignal+0x4c>)
 8008d44:	4806      	ldr	r0, [pc, #24]	@ (8008d60 <OS_TmrCondSignal+0x50>)
 8008d46:	f7fc ff31 	bl	8005bac <OS_Post>
                                (void *) 0,
                                         0u,
                                         ts);
    }

    CPU_CRITICAL_EXIT();
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f7f7 fa62 	bl	8000214 <CPU_SR_Restore>
}
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	20001e04 	.word	0x20001e04
 8008d5c:	20001e50 	.word	0x20001e50
 8008d60:	20001dfc 	.word	0x20001dfc

08008d64 <memset>:
 8008d64:	4402      	add	r2, r0
 8008d66:	4603      	mov	r3, r0
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d100      	bne.n	8008d6e <memset+0xa>
 8008d6c:	4770      	bx	lr
 8008d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d72:	e7f9      	b.n	8008d68 <memset+0x4>

08008d74 <__libc_init_array>:
 8008d74:	b570      	push	{r4, r5, r6, lr}
 8008d76:	4d0d      	ldr	r5, [pc, #52]	@ (8008dac <__libc_init_array+0x38>)
 8008d78:	4c0d      	ldr	r4, [pc, #52]	@ (8008db0 <__libc_init_array+0x3c>)
 8008d7a:	1b64      	subs	r4, r4, r5
 8008d7c:	10a4      	asrs	r4, r4, #2
 8008d7e:	2600      	movs	r6, #0
 8008d80:	42a6      	cmp	r6, r4
 8008d82:	d109      	bne.n	8008d98 <__libc_init_array+0x24>
 8008d84:	4d0b      	ldr	r5, [pc, #44]	@ (8008db4 <__libc_init_array+0x40>)
 8008d86:	4c0c      	ldr	r4, [pc, #48]	@ (8008db8 <__libc_init_array+0x44>)
 8008d88:	f000 f818 	bl	8008dbc <_init>
 8008d8c:	1b64      	subs	r4, r4, r5
 8008d8e:	10a4      	asrs	r4, r4, #2
 8008d90:	2600      	movs	r6, #0
 8008d92:	42a6      	cmp	r6, r4
 8008d94:	d105      	bne.n	8008da2 <__libc_init_array+0x2e>
 8008d96:	bd70      	pop	{r4, r5, r6, pc}
 8008d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d9c:	4798      	blx	r3
 8008d9e:	3601      	adds	r6, #1
 8008da0:	e7ee      	b.n	8008d80 <__libc_init_array+0xc>
 8008da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008da6:	4798      	blx	r3
 8008da8:	3601      	adds	r6, #1
 8008daa:	e7f2      	b.n	8008d92 <__libc_init_array+0x1e>
 8008dac:	080090c8 	.word	0x080090c8
 8008db0:	080090c8 	.word	0x080090c8
 8008db4:	080090c8 	.word	0x080090c8
 8008db8:	080090cc 	.word	0x080090cc

08008dbc <_init>:
 8008dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dbe:	bf00      	nop
 8008dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dc2:	bc08      	pop	{r3}
 8008dc4:	469e      	mov	lr, r3
 8008dc6:	4770      	bx	lr

08008dc8 <_fini>:
 8008dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dca:	bf00      	nop
 8008dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dce:	bc08      	pop	{r3}
 8008dd0:	469e      	mov	lr, r3
 8008dd2:	4770      	bx	lr
